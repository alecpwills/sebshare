{
    "pretrain_loc": "/gpfs/home/awills/dpyscfl/models/pretrained/scan",
    "type": "MGGA",
    "datapath": "/gpfs/scratch/awills/swxcd/data/test_subset_ps2/10",
    "reftraj": "/gpfs/scratch/awills/swxcd/aegis/test_subset_ps2/07/subat_ref.traj",
    "n_hidden": 16,
    "hyb_par": 0.0,
    "E_weight": 0.01,
    "rho_weight": 20,
    "ae_weight": 1,
    "modelpath": "",
    "optimpath": "",
    "logpath": ".",
    "testrun": false,
    "lr": 0.0001,
    "l2": 1e-06,
    "hnorm": true,
    "print_stdout": false,
    "print_names": false,
    "nonsc_weight": 0.01,
    "start_converged": false,
    "scf_steps": 25,
    "polynomial": false,
    "free": false,
    "freec": false,
    "meta_x": null,
    "rho_alt": false,
    "radical_factor": 1.0,
    "forcedensloss": false,
    "forceEloss": false,
    "freezeappend": 0,
    "loadfa": 0,
    "outputlayergrad": false,
    "checkgrad": false,
    "testmol": "",
    "torchtype": "float",
    "testall": false,
    "targetdir": "/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12",
    "valtraj": "",
    "valbasis": "6-311++G(3df,2pd)",
    "valpol": true,
    "valgridlevel": 5,
    "valmaxcycle": 100,
    "noxcdiffpop": false,
    "testpop": false,
    "passthrough": true,
    "chkptmax": 999999999
}
READING REFERENCE TRAJECTORY.
READING DATASET
LOADING DATASET INTO PYTORCH
PARSING NON-ATOMIC NON-REACTION MOLECULES
{'  0HH': [0], '  1NN': [1], '  2LiF': [2], '  3CNH': [3], '  4COO': [4], '  5ClCl': [5], '  6FF': [6], '  7CCHH': [7], '  8OC': [8], '  9ClH': [9], ' 10LiH': [10], ' 11NaNa': [11]}
PARSING NEUTRAL, PURE NON-REACTION ATOMS. CHARGE FLAG NOT SET.
{'C': [12], 'Cl': [13], 'F': [14], 'H': [15], 'Li': [16], 'N': [17], 'Na': [18], 'O': [19]}
PARSING SUPPLEMENTAL NEUTRAL, PURE ATOMS (FROM FRAC DATASET)
{}
PARSING SUPPLEMENTAL CHARGED, PURE ATOMS
{}
PARSING SUPPLEMENTAL FRACTIONAL ATOMS
{}
CONCATENATING SUPPLEMENTAL/FRACTIONAL ATOMS
{}
PARSING REACTIONS
{}
MOLECULES TO TRAIN ON
{'  0HH': [0, 15, 15], '  1NN': [1, 17, 17], '  2LiF': [2, 16, 14], '  3CNH': [3, 12, 17, 15], '  4COO': [4, 12, 19, 19], '  5ClCl': [5, 13, 13], '  6FF': [6, 14, 14], '  7CCHH': [7, 12, 12, 15, 15], '  8OC': [8, 19, 12], '  9ClH': [9, 13, 15], ' 10LiH': [10, 16, 15], ' 11NaNa': [11, 18, 18], 'C': [12], 'Cl': [13], 'F': [14], 'H': [15], 'Li': [16], 'N': [17], 'Na': [18], 'O': [19]}
A_COUNT
{0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 5, 13: 3, 14: 3, 15: 6, 16: 3, 17: 3, 18: 2, 19: 3}
GENERATING SCF OBJECT

 ======= Starting training ====== 


FIRST PASS: EVALUATION ON TRAINING DATA
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 13, 13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.5167, -920.4858, -920.4787, -920.4751, -920.4728, -920.4712,
        -920.4701, -920.4693, -920.4687, -920.4683, -920.4680, -920.4678,
        -920.4677, -920.4676, -920.4675, -920.4675, -920.4674, -920.4674,
        -920.4674, -920.4674, -920.4674, -920.4673, -920.4673, -920.4673,
        -920.4673], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885617
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.9388e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.8776e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1222, -460.1520, -460.1622, -460.1679, -460.1718, -460.1746,
        -460.1766, -460.1780, -460.1790, -460.1798, -460.1803, -460.1807,
        -460.1809, -460.1811, -460.1812, -460.1813, -460.1814, -460.1814,
        -460.1815, -460.1815, -460.1815, -460.1815, -460.1815, -460.1815,
        -460.1815], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.9230e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.9568e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4675, -920.4674, -920.4674, -920.4674, -920.4674, -920.4674,
        -920.4673, -920.4673, -920.4673, -920.4673], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1813, -460.1814, -460.1814, -460.1815, -460.1815, -460.1815,
        -460.1815, -460.1815, -460.1815, -460.1815], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 0 	 5 	 Cl2 	 Cl2 	 2.225168192832755e-05

PASSTHROUGH -- Cl2 DONE.
================================
--------------19----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9526, -74.9941, -75.0168, -75.0307, -75.0402, -75.0470, -75.0520,
        -75.0555, -75.0581, -75.0599, -75.0612, -75.0621, -75.0627, -75.0632,
        -75.0635, -75.0637, -75.0639, -75.0640, -75.0641, -75.0641, -75.0642,
        -75.0642, -75.0642, -75.0642, -75.0643], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.1190e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.1190e-09, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0637, -75.0639, -75.0640, -75.0641, -75.0641, -75.0642, -75.0642,
        -75.0642, -75.0642, -75.0643], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 0 	 19 	 O 	 O 	 2.195428012258914e-06

PASSTHROUGH -- O DONE.
================================
--------------17----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [17]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4235, -54.4965, -54.5266, -54.5441, -54.5559, -54.5642, -54.5701,
        -54.5743, -54.5773, -54.5794, -54.5809, -54.5819, -54.5826, -54.5831,
        -54.5835, -54.5838, -54.5839, -54.5841, -54.5841, -54.5842, -54.5842,
        -54.5843, -54.5843, -54.5843, -54.5843], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.9333e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.9333e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5838, -54.5839, -54.5841, -54.5841, -54.5842, -54.5842, -54.5843,
        -54.5843, -54.5843, -54.5843], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 0 	 17 	 N 	 N 	 5.5979358700994934e-06

PASSTHROUGH -- N DONE.
================================
--------------14----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6770, -99.7022, -99.7127, -99.7188, -99.7230, -99.7261, -99.7283,
        -99.7299, -99.7310, -99.7318, -99.7324, -99.7328, -99.7331, -99.7333,
        -99.7334, -99.7335, -99.7336, -99.7336, -99.7337, -99.7337, -99.7337,
        -99.7337, -99.7338, -99.7338, -99.7338], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4762e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.4762e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7335, -99.7336, -99.7336, -99.7337, -99.7337, -99.7337, -99.7337,
        -99.7338, -99.7338, -99.7338], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 0 	 14 	 F 	 F 	 4.593258601413421e-09

PASSTHROUGH -- F DONE.
================================
--------------15----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2757, -0.4470, -0.4692, -0.4797, -0.4862, -0.4904, -0.4933, -0.4953,
        -0.4967, -0.4977, -0.4984, -0.4989, -0.4992, -0.4994, -0.4996, -0.4997,
        -0.4998, -0.4998, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999, -0.5000,
        -0.5000], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.8594e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(8.7819e-09, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.9719e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4997, -0.4998, -0.4998, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999,
        -0.5000, -0.5000], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 0 	 15 	 H 	 H 	 6.78520342885112e-10

PASSTHROUGH -- H DONE.
================================
--------------18----------------
TRAINING ON MOLECULE:  ,Na
SUBMOLECULES: ['Na']
SUBMOLECULE INDICES: [18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2397, -162.2510, -162.2548, -162.2567, -162.2579, -162.2587,
        -162.2594, -162.2600, -162.2603, -162.2604, -162.2604, -162.2605,
        -162.2605, -162.2605, -162.2606, -162.2606, -162.2606, -162.2606,
        -162.2606, -162.2606, -162.2606, -162.2606, -162.2606, -162.2606,
        -162.2606], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.8114e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.8114e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'Na': tensor([-162.2606, -162.2606, -162.2606, -162.2606, -162.2606, -162.2606,
        -162.2606, -162.2606, -162.2606, -162.2606], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 0 	 18 	 Na 	 Na 	 8.419040799182036e-06

PASSTHROUGH -- Na DONE.
================================
--------------8----------------
TRAINING ON MOLECULE:  ,  8OC
SUBMOLECULES: ['CO', 'O', 'C']
SUBMOLECULE INDICES: [8, 19, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='OC', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4142], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4142], dtype=torch.float64)
E_PRED: tensor([-113.7555, -113.4357, -113.3591, -113.3182, -113.2932, -113.2760,
        -113.2641, -113.2558, -113.2501, -113.2460, -113.2432, -113.2413,
        -113.2399, -113.2390, -113.2384, -113.2379, -113.2376, -113.2374,
        -113.2372, -113.2371, -113.2370, -113.2370, -113.2369, -113.2369,
        -113.2369], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 3279])
ao_eval   ---   torch.Size([1, 10, 3279, 78])
grid_weights   ---   torch.Size([1, 3279])
-113.201730216515
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7064e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7563, -37.7964, -37.8105, -37.8183, -37.8235, -37.8271, -37.8297,
        -37.8315, -37.8328, -37.8337, -37.8344, -37.8348, -37.8351, -37.8354,
        -37.8355, -37.8356, -37.8357, -37.8358, -37.8358, -37.8358, -37.8359,
        -37.8359, -37.8359, -37.8359, -37.8359], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.5700e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9534, -74.9965, -75.0187, -75.0321, -75.0412, -75.0478, -75.0525,
        -75.0559, -75.0583, -75.0601, -75.0613, -75.0622, -75.0628, -75.0632,
        -75.0635, -75.0638, -75.0639, -75.0640, -75.0641, -75.0641, -75.0642,
        -75.0642, -75.0642, -75.0642, -75.0643], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.0178e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'OC': tensor([-0.4142], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'OC': tensor([-113.2379, -113.2376, -113.2374, -113.2372, -113.2371, -113.2370,
        -113.2370, -113.2369, -113.2369, -113.2369], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8356, -37.8357, -37.8358, -37.8358, -37.8358, -37.8359, -37.8359,
        -37.8359, -37.8359, -37.8359], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0638, -75.0639, -75.0640, -75.0641, -75.0641, -75.0642, -75.0642,
        -75.0642, -75.0642, -75.0643], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 0 	 8 	 CO 	 OC 	 0.0014011097970802774

PASSTHROUGH -- CO DONE.
================================
--------------10----------------
TRAINING ON MOLECULE:  , 10LiH
SUBMOLECULES: ['HLi', 'Li', 'H']
SUBMOLECULE INDICES: [10, 16, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0923], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0923], dtype=torch.float64)
E_PRED: tensor([-7.9524, -8.0198, -8.0377, -8.0470, -8.0530, -8.0571, -8.0600, -8.0621,
        -8.0635, -8.0645, -8.0653, -8.0658, -8.0661, -8.0664, -8.0665, -8.0667,
        -8.0668, -8.0668, -8.0669, -8.0669, -8.0669, -8.0669, -8.0669, -8.0669,
        -8.0670], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 54, 54])
mo_energy   ---   torch.Size([2, 54])
dm_ref   ---   torch.Size([1, 2, 54, 54])
rho   ---   torch.Size([1, 2, 1271])
ao_eval   ---   torch.Size([1, 10, 1271, 54])
grid_weights   ---   torch.Size([1, 1271])
-8.038079906478378
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 54])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 54])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.5365e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.0729e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3461, -0.4660, -0.4799, -0.4867, -0.4909, -0.4937, -0.4956, -0.4969,
        -0.4978, -0.4985, -0.4989, -0.4992, -0.4995, -0.4996, -0.4997, -0.4998,
        -0.4998, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999, -0.5000, -0.5000,
        -0.5000], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.8598e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(3.9308e-09, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.0449e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4657, -7.4728, -7.4752, -7.4764, -7.4772, -7.4781, -7.4788, -7.4790,
        -7.4787, -7.4785, -7.4784, -7.4784, -7.4784, -7.4784, -7.4785, -7.4785,
        -7.4785, -7.4785, -7.4785, -7.4785, -7.4785, -7.4785, -7.4785, -7.4785,
        -7.4785], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.3805e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.5826e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.8059e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiH': tensor([-0.0923], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiH': tensor([-8.0667, -8.0668, -8.0668, -8.0669, -8.0669, -8.0669, -8.0669, -8.0669,
        -8.0669, -8.0670], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4998, -0.4998, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999, -0.5000,
        -0.5000, -0.5000], dtype=torch.float64, grad_fn=<SliceBackward0>), 'Li': tensor([-7.4785, -7.4785, -7.4785, -7.4785, -7.4785, -7.4785, -7.4785, -7.4785,
        -7.4785, -7.4785], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 0 	 10 	 HLi 	 LiH 	 3.431233315621628e-06

PASSTHROUGH -- HLi DONE.
================================
--------------16----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [16]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
========================================================
EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE
SCF CALCULATION FAILED
SCF Calculation failed for Li
torch.linalg.eigh: (Batch element 1): The algorithm failed to converge because the input matrix is ill-conditioned or has too many repeated eigenvalues (error code: 79).
EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE
========================================================
================================
--------------12----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7415, -37.7811, -37.7995, -37.8103, -37.8177, -37.8229, -37.8267,
        -37.8294, -37.8313, -37.8327, -37.8336, -37.8343, -37.8348, -37.8351,
        -37.8353, -37.8355, -37.8356, -37.8357, -37.8358, -37.8358, -37.8358,
        -37.8358, -37.8359, -37.8359, -37.8359], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.9081e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.9081e-09, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8355, -37.8356, -37.8357, -37.8358, -37.8358, -37.8358, -37.8358,
        -37.8359, -37.8359, -37.8359], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 0 	 12 	 C 	 C 	 5.014728202529031e-06

PASSTHROUGH -- C DONE.
================================
--------------6----------------
TRAINING ON MOLECULE:  ,  6FF
SUBMOLECULES: ['F2', 'F', 'F']
SUBMOLECULE INDICES: [6, 14, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0618], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0618], dtype=torch.float64)
E_PRED: tensor([-199.6372, -199.5712, -199.5543, -199.5457, -199.5402, -199.5365,
        -199.5339, -199.5321, -199.5308, -199.5299, -199.5293, -199.5289,
        -199.5285, -199.5283, -199.5282, -199.5280, -199.5280, -199.5279,
        -199.5279, -199.5278, -199.5278, -199.5278, -199.5278, -199.5278,
        -199.5278], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 4698])
ao_eval   ---   torch.Size([1, 10, 4698, 78])
grid_weights   ---   torch.Size([1, 4698])
-199.3364659747656
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.5545e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.1091e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6730, -99.6940, -99.7065, -99.7142, -99.7196, -99.7235, -99.7264,
        -99.7285, -99.7300, -99.7311, -99.7319, -99.7324, -99.7328, -99.7331,
        -99.7333, -99.7334, -99.7335, -99.7336, -99.7337, -99.7337, -99.7337,
        -99.7337, -99.7337, -99.7338, -99.7338], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.4825e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.1091e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'FF': tensor([-0.0618], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'FF': tensor([-199.5280, -199.5280, -199.5279, -199.5279, -199.5278, -199.5278,
        -199.5278, -199.5278, -199.5278, -199.5278], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7334, -99.7335, -99.7336, -99.7337, -99.7337, -99.7337, -99.7337,
        -99.7337, -99.7338, -99.7338], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 0 	 6 	 F2 	 F2 	 5.447857572935934e-07

PASSTHROUGH -- F2 DONE.
================================
--------------11----------------
TRAINING ON MOLECULE:  , 11NaNa
SUBMOLECULES: ['Na2', 'Na', 'Na']
SUBMOLECULE INDICES: [11, 18, 18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0273], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0273], dtype=torch.float64)
E_PRED: tensor([-324.6771, -324.5982, -324.5776, -324.5670, -324.5603, -324.5557,
        -324.5526, -324.5504, -324.5488, -324.5477, -324.5469, -324.5464,
        -324.5460, -324.5458, -324.5456, -324.5454, -324.5454, -324.5453,
        -324.5452, -324.5452, -324.5452, -324.5452, -324.5452, -324.5452,
        -324.5452], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 1992])
ao_eval   ---   torch.Size([1, 10, 1992, 94])
grid_weights   ---   torch.Size([1, 1992])
-324.03216786711033
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.1020e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2419, -162.2524, -162.2557, -162.2573, -162.2583, -162.2591,
        -162.2597, -162.2601, -162.2603, -162.2604, -162.2605, -162.2605,
        -162.2605, -162.2605, -162.2606, -162.2606, -162.2606, -162.2606,
        -162.2606, -162.2606, -162.2606, -162.2606, -162.2606, -162.2606,
        -162.2606], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.8145e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NaNa': tensor([-0.0273], dtype=torch.float64), 'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'NaNa': tensor([-324.5454, -324.5454, -324.5453, -324.5452, -324.5452, -324.5452,
        -324.5452, -324.5452, -324.5452, -324.5452], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Na': tensor([-162.2606, -162.2606, -162.2606, -162.2606, -162.2606, -162.2606,
        -162.2606, -162.2606, -162.2606, -162.2606], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 0 	 11 	 Na2 	 Na2 	 2.676084501255613e-06

PASSTHROUGH -- Na2 DONE.
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 15, 15]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-0.9978, -1.1025, -1.1294, -1.1431, -1.1518, -1.1577, -1.1617, -1.1645,
        -1.1665, -1.1679, -1.1689, -1.1695, -1.1700, -1.1703, -1.1706, -1.1707,
        -1.1709, -1.1709, -1.1710, -1.1710, -1.1711, -1.1711, -1.1711, -1.1711,
        -1.1711], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668206
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.9529e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.9059e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2203, -0.4302, -0.4598, -0.4737, -0.4821, -0.4877, -0.4914, -0.4940,
        -0.4958, -0.4971, -0.4979, -0.4985, -0.4990, -0.4993, -0.4995, -0.4996,
        -0.4997, -0.4998, -0.4998, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999,
        -0.5000], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.8591e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.4427e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.8777e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1707, -1.1709, -1.1709, -1.1710, -1.1710, -1.1711, -1.1711, -1.1711,
        -1.1711, -1.1711], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4996, -0.4997, -0.4998, -0.4998, -0.4999, -0.4999, -0.4999, -0.4999,
        -0.4999, -0.5000], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 0 	 0 	 H2 	 H2 	 2.288704207439059e-06

PASSTHROUGH -- H2 DONE.
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 12, 17, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-93.9829, -93.5229, -93.4035, -93.3489, -93.3107, -93.2850, -93.2665,
        -93.2532, -93.2435, -93.2364, -93.2312, -93.2274, -93.2245, -93.2224,
        -93.2208, -93.2196, -93.2187, -93.2180, -93.2175, -93.2171, -93.2168,
        -93.2166, -93.2164, -93.2163, -93.2162], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633898
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.6320e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7397, -37.7773, -37.7966, -37.8082, -37.8161, -37.8218, -37.8259,
        -37.8288, -37.8309, -37.8324, -37.8334, -37.8341, -37.8347, -37.8350,
        -37.8353, -37.8355, -37.8356, -37.8357, -37.8357, -37.8358, -37.8358,
        -37.8358, -37.8359, -37.8359, -37.8359], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0008e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2307, -0.4334, -0.4616, -0.4749, -0.4829, -0.4882, -0.4918, -0.4943,
        -0.4960, -0.4972, -0.4980, -0.4986, -0.4990, -0.4993, -0.4995, -0.4996,
        -0.4997, -0.4998, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999,
        -0.5000], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.8591e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.3230e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4111, -54.4804, -54.5147, -54.5352, -54.5494, -54.5595, -54.5667,
        -54.5719, -54.5756, -54.5782, -54.5800, -54.5813, -54.5822, -54.5829,
        -54.5833, -54.5836, -54.5838, -54.5840, -54.5841, -54.5842, -54.5842,
        -54.5843, -54.5843, -54.5843, -54.5843], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.0187e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2196, -93.2187, -93.2180, -93.2175, -93.2171, -93.2168, -93.2166,
        -93.2164, -93.2163, -93.2162], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8355, -37.8356, -37.8357, -37.8357, -37.8358, -37.8358, -37.8358,
        -37.8359, -37.8359, -37.8359], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4996, -0.4997, -0.4998, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999,
        -0.4999, -0.5000], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5836, -54.5838, -54.5840, -54.5841, -54.5842, -54.5842, -54.5843,
        -54.5843, -54.5843, -54.5843], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 0 	 3 	 CHN 	 CNH 	 0.009640908045361642

PASSTHROUGH -- CHN DONE.
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 17, 17]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.7158, -109.9070, -109.7593, -109.6774, -109.6245, -109.5883,
        -109.5631, -109.5455, -109.5332, -109.5246, -109.5186, -109.5144,
        -109.5115, -109.5094, -109.5080, -109.5070, -109.5063, -109.5058,
        -109.5054, -109.5052, -109.5050, -109.5049, -109.5048, -109.5047,
        -109.5047], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018879
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.4637e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4120, -54.4820, -54.5159, -54.5361, -54.5501, -54.5600, -54.5671,
        -54.5722, -54.5758, -54.5783, -54.5801, -54.5814, -54.5823, -54.5829,
        -54.5833, -54.5836, -54.5838, -54.5840, -54.5841, -54.5842, -54.5842,
        -54.5843, -54.5843, -54.5843, -54.5843], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.0095e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.5070, -109.5063, -109.5058, -109.5054, -109.5052, -109.5050,
        -109.5049, -109.5048, -109.5047, -109.5047], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5836, -54.5838, -54.5840, -54.5841, -54.5842, -54.5842, -54.5843,
        -54.5843, -54.5843, -54.5843], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 0 	 1 	 N2 	 N2 	 0.00018172164345553384

PASSTHROUGH -- N2 DONE.
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 16, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2365, -107.2763, -107.2420, -107.2363, -107.2316, -107.2291,
        -107.2282, -107.2284, -107.2290, -107.2296, -107.2300, -107.2304,
        -107.2308, -107.2311, -107.2314, -107.2317, -107.2320, -107.2322,
        -107.2324, -107.2326, -107.2327, -107.2328, -107.2329, -107.2330,
        -107.2331], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.305942205048
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.3972e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6738, -99.6966, -99.7086, -99.7157, -99.7207, -99.7244, -99.7270,
        -99.7290, -99.7304, -99.7313, -99.7321, -99.7326, -99.7329, -99.7332,
        -99.7333, -99.7335, -99.7336, -99.7336, -99.7337, -99.7337, -99.7337,
        -99.7337, -99.7337, -99.7338, -99.7338], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.1113e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4635, -7.4709, -7.4739, -7.4755, -7.4765, -7.4774, -7.4783, -7.4789,
        -7.4789, -7.4787, -7.4785, -7.4784, -7.4784, -7.4784, -7.4784, -7.4785,
        -7.4785, -7.4785, -7.4785, -7.4785, -7.4785, -7.4785, -7.4785, -7.4785,
        -7.4785], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.3810e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.5600e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2317, -107.2320, -107.2322, -107.2324, -107.2326, -107.2327,
        -107.2328, -107.2329, -107.2330, -107.2331], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7335, -99.7336, -99.7336, -99.7337, -99.7337, -99.7337, -99.7337,
        -99.7337, -99.7338, -99.7338], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4785, -7.4785, -7.4785, -7.4785, -7.4785, -7.4785, -7.4785, -7.4785,
        -7.4785, -7.4785], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 0 	 2 	 FLi 	 LiF 	 0.009513022244072859

PASSTHROUGH -- FLi DONE.
================================
--------------9----------------
TRAINING ON MOLECULE:  ,  9ClH
SUBMOLECULES: ['HCl', 'Cl', 'H']
SUBMOLECULE INDICES: [9, 13, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='ClH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1712], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1712], dtype=torch.float64)
E_PRED: tensor([-460.7706, -460.8217, -460.8359, -460.8432, -460.8478, -460.8510,
        -460.8532, -460.8547, -460.8558, -460.8565, -460.8570, -460.8574,
        -460.8577, -460.8578, -460.8580, -460.8581, -460.8581, -460.8582,
        -460.8582, -460.8582, -460.8582, -460.8582, -460.8582, -460.8583,
        -460.8583], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 62, 62])
mo_energy   ---   torch.Size([2, 62])
dm_ref   ---   torch.Size([1, 2, 62, 62])
rho   ---   torch.Size([1, 2, 1068])
ao_eval   ---   torch.Size([1, 10, 1068, 62])
grid_weights   ---   torch.Size([1, 1068])
-460.4234538667477
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 62])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 62])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(7.5982e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0002, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1145, -460.1464, -460.1583, -460.1651, -460.1697, -460.1730,
        -460.1755, -460.1772, -460.1785, -460.1794, -460.1800, -460.1804,
        -460.1808, -460.1810, -460.1812, -460.1813, -460.1813, -460.1814,
        -460.1814, -460.1815, -460.1815, -460.1815, -460.1815, -460.1815,
        -460.1815], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.9124e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0002, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2501, -0.4394, -0.4650, -0.4770, -0.4843, -0.4892, -0.4925, -0.4947,
        -0.4963, -0.4974, -0.4982, -0.4987, -0.4991, -0.4994, -0.4995, -0.4997,
        -0.4998, -0.4998, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999,
        -0.5000], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.8593e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.1174e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0002, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClH': tensor([-0.1712], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'ClH': tensor([-460.8581, -460.8581, -460.8582, -460.8582, -460.8582, -460.8582,
        -460.8582, -460.8582, -460.8583, -460.8583], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1813, -460.1813, -460.1814, -460.1814, -460.1815, -460.1815,
        -460.1815, -460.1815, -460.1815, -460.1815], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4997, -0.4998, -0.4998, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999,
        -0.4999, -0.5000], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 0 	 9 	 HCl 	 ClH 	 7.2040023413048445e-06

PASSTHROUGH -- HCl DONE.
================================
--------------13----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1191, -460.1498, -460.1607, -460.1668, -460.1710, -460.1740,
        -460.1761, -460.1777, -460.1788, -460.1796, -460.1802, -460.1806,
        -460.1809, -460.1811, -460.1812, -460.1813, -460.1814, -460.1814,
        -460.1815, -460.1815, -460.1815, -460.1815, -460.1815, -460.1815,
        -460.1815], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.9189e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.9189e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1813, -460.1814, -460.1814, -460.1815, -460.1815, -460.1815,
        -460.1815, -460.1815, -460.1815, -460.1815], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 0 	 13 	 Cl 	 Cl 	 0.0002625875487412346

PASSTHROUGH -- Cl DONE.
================================
--------------7----------------
TRAINING ON MOLECULE:  ,  7CCHH
SUBMOLECULES: ['C2H2', 'C', 'C', 'H', 'H']
SUBMOLECULE INDICES: [7, 12, 12, 15, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C2H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6459], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6459], dtype=torch.float64)
E_PRED: tensor([-78.4048, -73.3492, -75.1857, -75.9161, -76.3437, -76.6249, -76.8169,
        -76.9498, -77.0422, -77.1067, -77.1518, -77.1833, -77.2054, -77.2209,
        -77.2318, -77.2394, -77.2447, -77.2484, -77.2511, -77.2529, -77.2542,
        -77.2551, -77.2557, -77.2561, -77.2564], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 108, 108])
mo_energy   ---   torch.Size([2, 108])
dm_ref   ---   torch.Size([1, 2, 108, 108])
rho   ---   torch.Size([1, 2, 1924])
ao_eval   ---   torch.Size([1, 10, 1924, 108])
grid_weights   ---   torch.Size([1, 1924])
-77.2336470993193
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 108])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 108])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.3634e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0005, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7477, -37.7891, -37.8053, -37.8145, -37.8208, -37.8252, -37.8283,
        -37.8305, -37.8321, -37.8332, -37.8340, -37.8346, -37.8350, -37.8352,
        -37.8354, -37.8356, -37.8357, -37.8357, -37.8358, -37.8358, -37.8358,
        -37.8359, -37.8359, -37.8359, -37.8359], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.7212e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0005, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3422, -0.4650, -0.4794, -0.4863, -0.4906, -0.4935, -0.4955, -0.4968,
        -0.4978, -0.4984, -0.4989, -0.4992, -0.4994, -0.4996, -0.4997, -0.4998,
        -0.4998, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999, -0.5000, -0.5000,
        -0.5000], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.8598e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(4.1366e-09, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0005, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CCHH': tensor([-0.6459], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'CCHH': tensor([-77.2394, -77.2447, -77.2484, -77.2511, -77.2529, -77.2542, -77.2551,
        -77.2557, -77.2561, -77.2564], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8356, -37.8357, -37.8357, -37.8358, -37.8358, -37.8358, -37.8359,
        -37.8359, -37.8359, -37.8359], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4998, -0.4998, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999, -0.5000,
        -0.5000, -0.5000], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 0 	 7 	 C2H2 	 C2H2 	 0.000886883463156757

PASSTHROUGH -- C2H2 DONE.
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 12, 19, 19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.4937, -188.7491, -188.5879, -188.4950, -188.4379, -188.3991,
        -188.3721, -188.3530, -188.3396, -188.3301, -188.3234, -188.3186,
        -188.3152, -188.3128, -188.3111, -188.3099, -188.3090, -188.3084,
        -188.3079, -188.3076, -188.3074, -188.3072, -188.3071, -188.3070,
        -188.3069], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.4017587505662
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.0036e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7532, -37.7940, -37.8088, -37.8171, -37.8226, -37.8265, -37.8292,
        -37.8312, -37.8326, -37.8336, -37.8343, -37.8347, -37.8351, -37.8353,
        -37.8355, -37.8356, -37.8357, -37.8358, -37.8358, -37.8358, -37.8358,
        -37.8359, -37.8359, -37.8359, -37.8359], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.6176e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9518, -74.9886, -75.0123, -75.0273, -75.0377, -75.0452, -75.0506,
        -75.0545, -75.0574, -75.0594, -75.0608, -75.0618, -75.0626, -75.0631,
        -75.0634, -75.0637, -75.0639, -75.0640, -75.0641, -75.0641, -75.0642,
        -75.0642, -75.0642, -75.0642, -75.0642], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.3715e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3099, -188.3090, -188.3084, -188.3079, -188.3076, -188.3074,
        -188.3072, -188.3071, -188.3070, -188.3069], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8356, -37.8357, -37.8358, -37.8358, -37.8358, -37.8358, -37.8359,
        -37.8359, -37.8359, -37.8359], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0637, -75.0639, -75.0640, -75.0641, -75.0641, -75.0642, -75.0642,
        -75.0642, -75.0642, -75.0642], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 0 	 4 	 CO2 	 CO2 	 0.01827673617782076

PASSTHROUGH -- CO2 DONE.
++++++++++++++++++++++++++++++++++
FAILS:
{'Epoch': 0, 'Training Label': 'Li', 'Molecules': ['Li'], 'Current Sub-Molecule': 'Li'}
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e00)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e00/2022-11-29_10:09:21.574160_0.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e00/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 0 || ,[' rho : 3.154553', ' ae : 63.421288', ' E : 3.595911'] ,|| total loss 47.013650 || CHKPT: _0.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
NEXT EPOCH BEGINNING - PASSTHROUGH COMPLETE.
SETTING NETWORK TO TRAINING MODE.
================================
--------------8----------------
TRAINING ON MOLECULE:  ,  8OC
SUBMOLECULES: ['CO', 'O', 'C']
SUBMOLECULE INDICES: [8, 19, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='OC', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4142], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4142], dtype=torch.float64)
E_PRED: tensor([-113.7760, -113.4438, -113.3641, -113.3215, -113.2956, -113.2777,
        -113.2653, -113.2566, -113.2506, -113.2464, -113.2435, -113.2415,
        -113.2401, -113.2391, -113.2384, -113.2379, -113.2376, -113.2374,
        -113.2372, -113.2371, -113.2370, -113.2370, -113.2369, -113.2369,
        -113.2369], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 3279])
ao_eval   ---   torch.Size([1, 10, 3279, 78])
grid_weights   ---   torch.Size([1, 3279])
-113.201730216515
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7064e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7543, -37.7949, -37.8094, -37.8175, -37.8229, -37.8267, -37.8294,
        -37.8313, -37.8327, -37.8336, -37.8343, -37.8348, -37.8351, -37.8353,
        -37.8355, -37.8356, -37.8357, -37.8358, -37.8358, -37.8358, -37.8358,
        -37.8359, -37.8359, -37.8359, -37.8359], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.6002e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9597, -75.0061, -75.0260, -75.0375, -75.0452, -75.0507, -75.0546,
        -75.0574, -75.0594, -75.0608, -75.0619, -75.0626, -75.0631, -75.0634,
        -75.0637, -75.0639, -75.0640, -75.0641, -75.0641, -75.0642, -75.0642,
        -75.0642, -75.0642, -75.0642, -75.0643], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.6650e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'OC': tensor([-0.4142], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'OC': tensor([-113.2379, -113.2376, -113.2374, -113.2372, -113.2371, -113.2370,
        -113.2370, -113.2369, -113.2369, -113.2369], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8356, -37.8357, -37.8358, -37.8358, -37.8358, -37.8358, -37.8359,
        -37.8359, -37.8359, -37.8359], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0639, -75.0640, -75.0641, -75.0641, -75.0642, -75.0642, -75.0642,
        -75.0642, -75.0642, -75.0643], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 1 	 8 	 CO 	 OC 	 0.001401209106190685

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,  9ClH
SUBMOLECULES: ['HCl', 'Cl', 'H']
SUBMOLECULE INDICES: [9, 13, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='ClH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1712], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1712], dtype=torch.float64)
E_PRED: tensor([-460.7933, -460.8315, -460.8424, -460.8479, -460.8515, -460.8539,
        -460.8556, -460.8568, -460.8576, -460.8581, -460.8586, -460.8588,
        -460.8590, -460.8592, -460.8593, -460.8593, -460.8594, -460.8594,
        -460.8594, -460.8595, -460.8595, -460.8595, -460.8595, -460.8595,
        -460.8595], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 62, 62])
mo_energy   ---   torch.Size([2, 62])
dm_ref   ---   torch.Size([1, 2, 62, 62])
rho   ---   torch.Size([1, 2, 1068])
ao_eval   ---   torch.Size([1, 10, 1068, 62])
grid_weights   ---   torch.Size([1, 1068])
-460.4234538667477
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 62])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 62])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(7.6139e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0002, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1168, -460.1484, -460.1601, -460.1667, -460.1712, -460.1745,
        -460.1768, -460.1785, -460.1798, -460.1806, -460.1812, -460.1817,
        -460.1820, -460.1822, -460.1824, -460.1825, -460.1826, -460.1826,
        -460.1827, -460.1827, -460.1827, -460.1827, -460.1827, -460.1827,
        -460.1827], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.4969e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0002, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2932, -0.4519, -0.4720, -0.4815, -0.4874, -0.4912, -0.4939, -0.4957,
        -0.4970, -0.4979, -0.4985, -0.4990, -0.4993, -0.4995, -0.4996, -0.4997,
        -0.4998, -0.4998, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999,
        -0.5000], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.8602e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(7.3908e-09, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0002, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClH': tensor([-0.1712], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'ClH': tensor([-460.8593, -460.8594, -460.8594, -460.8594, -460.8595, -460.8595,
        -460.8595, -460.8595, -460.8595, -460.8595], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1825, -460.1826, -460.1826, -460.1827, -460.1827, -460.1827,
        -460.1827, -460.1827, -460.1827, -460.1827], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4997, -0.4998, -0.4998, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999,
        -0.4999, -0.5000], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 1 	 9 	 HCl 	 ClH 	 7.24767381015054e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------17----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [17]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4304, -54.5029, -54.5311, -54.5472, -54.5580, -54.5656, -54.5710,
        -54.5748, -54.5775, -54.5794, -54.5807, -54.5817, -54.5823, -54.5828,
        -54.5831, -54.5834, -54.5835, -54.5836, -54.5837, -54.5838, -54.5838,
        -54.5838, -54.5838, -54.5839, -54.5839], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.2499e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.2499e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5834, -54.5835, -54.5836, -54.5837, -54.5838, -54.5838, -54.5838,
        -54.5838, -54.5839, -54.5839], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 1 	 17 	 N 	 N 	 6.69133447679681e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------13----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1258, -460.1547, -460.1643, -460.1697, -460.1734, -460.1760,
        -460.1778, -460.1792, -460.1801, -460.1808, -460.1813, -460.1816,
        -460.1819, -460.1820, -460.1822, -460.1823, -460.1823, -460.1824,
        -460.1824, -460.1824, -460.1824, -460.1824, -460.1824, -460.1824,
        -460.1824], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.3663e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.3663e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1823, -460.1823, -460.1824, -460.1824, -460.1824, -460.1824,
        -460.1824, -460.1824, -460.1824, -460.1824], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 1 	 13 	 Cl 	 Cl 	 0.00027717349477977794

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,  6FF
SUBMOLECULES: ['F2', 'F', 'F']
SUBMOLECULE INDICES: [6, 14, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0618], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0618], dtype=torch.float64)
E_PRED: tensor([-199.6498, -199.5748, -199.5555, -199.5457, -199.5394, -199.5352,
        -199.5322, -199.5301, -199.5287, -199.5277, -199.5269, -199.5264,
        -199.5261, -199.5258, -199.5256, -199.5255, -199.5254, -199.5254,
        -199.5253, -199.5253, -199.5253, -199.5252, -199.5252, -199.5252,
        -199.5252], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 4698])
ao_eval   ---   torch.Size([1, 10, 4698, 78])
grid_weights   ---   torch.Size([1, 4698])
-199.3364659747656
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.4980e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.9960e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6723, -99.6947, -99.7067, -99.7140, -99.7191, -99.7228, -99.7255,
        -99.7274, -99.7288, -99.7299, -99.7306, -99.7311, -99.7315, -99.7317,
        -99.7319, -99.7320, -99.7321, -99.7322, -99.7322, -99.7323, -99.7323,
        -99.7323, -99.7323, -99.7323, -99.7323], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.2238e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.9963e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'FF': tensor([-0.0618], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'FF': tensor([-199.5255, -199.5254, -199.5254, -199.5253, -199.5253, -199.5253,
        -199.5252, -199.5252, -199.5252, -199.5252], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7320, -99.7321, -99.7322, -99.7322, -99.7323, -99.7323, -99.7323,
        -99.7323, -99.7323, -99.7323], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 1 	 6 	 F2 	 F2 	 3.533671011874703e-07

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7542, -37.7944, -37.8086, -37.8165, -37.8217, -37.8254, -37.8280,
        -37.8299, -37.8312, -37.8321, -37.8328, -37.8332, -37.8336, -37.8338,
        -37.8340, -37.8341, -37.8341, -37.8342, -37.8342, -37.8343, -37.8343,
        -37.8343, -37.8343, -37.8343, -37.8343], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6919e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.6919e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8341, -37.8341, -37.8342, -37.8342, -37.8343, -37.8343, -37.8343,
        -37.8343, -37.8343, -37.8343], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 1 	 12 	 C 	 C 	 8.955388412476998e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------14----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6735, -99.6985, -99.7089, -99.7151, -99.7193, -99.7223, -99.7245,
        -99.7261, -99.7272, -99.7280, -99.7286, -99.7290, -99.7293, -99.7295,
        -99.7296, -99.7297, -99.7298, -99.7298, -99.7299, -99.7299, -99.7299,
        -99.7299, -99.7299, -99.7300, -99.7300], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1700e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.1700e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7297, -99.7298, -99.7298, -99.7299, -99.7299, -99.7299, -99.7299,
        -99.7299, -99.7300, -99.7300], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 1 	 14 	 F 	 F 	 3.64329789310309e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 16, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2315, -107.2709, -107.2366, -107.2309, -107.2262, -107.2237,
        -107.2228, -107.2230, -107.2236, -107.2241, -107.2246, -107.2250,
        -107.2253, -107.2256, -107.2259, -107.2262, -107.2264, -107.2267,
        -107.2269, -107.2270, -107.2272, -107.2273, -107.2274, -107.2275,
        -107.2275], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.305942205048
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.3418e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6696, -99.6927, -99.7044, -99.7115, -99.7164, -99.7199, -99.7225,
        -99.7244, -99.7258, -99.7267, -99.7274, -99.7279, -99.7283, -99.7285,
        -99.7287, -99.7288, -99.7289, -99.7289, -99.7290, -99.7290, -99.7290,
        -99.7291, -99.7291, -99.7291, -99.7291], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7436e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4634, -7.4709, -7.4735, -7.4750, -7.4759, -7.4767, -7.4776, -7.4780,
        -7.4778, -7.4776, -7.4775, -7.4774, -7.4774, -7.4775, -7.4775, -7.4775,
        -7.4775, -7.4775, -7.4775, -7.4776, -7.4776, -7.4776, -7.4776, -7.4776,
        -7.4776], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.3204e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.8196e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2262, -107.2264, -107.2267, -107.2269, -107.2270, -107.2272,
        -107.2273, -107.2274, -107.2275, -107.2275], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7288, -99.7289, -99.7289, -99.7290, -99.7290, -99.7290, -99.7291,
        -99.7291, -99.7291, -99.7291], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4775, -7.4775, -7.4775, -7.4775, -7.4776, -7.4776, -7.4776, -7.4776,
        -7.4776, -7.4776], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 1 	 2 	 FLi 	 LiF 	 0.00950210644299068

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 15, 15]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0084, -1.1063, -1.1314, -1.1443, -1.1524, -1.1579, -1.1617, -1.1644,
        -1.1662, -1.1675, -1.1684, -1.1690, -1.1695, -1.1698, -1.1700, -1.1702,
        -1.1703, -1.1703, -1.1704, -1.1704, -1.1705, -1.1705, -1.1705, -1.1705,
        -1.1705], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668206
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.8611e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.7222e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2404, -0.4364, -0.4633, -0.4759, -0.4836, -0.4886, -0.4921, -0.4945,
        -0.4961, -0.4972, -0.4981, -0.4986, -0.4990, -0.4993, -0.4995, -0.4996,
        -0.4997, -0.4998, -0.4998, -0.4998, -0.4999, -0.4999, -0.4999, -0.4999,
        -0.4999], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.7595e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.2956e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.6741e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1702, -1.1703, -1.1703, -1.1704, -1.1704, -1.1705, -1.1705, -1.1705,
        -1.1705, -1.1705], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4996, -0.4997, -0.4998, -0.4998, -0.4998, -0.4999, -0.4999, -0.4999,
        -0.4999, -0.4999], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 1 	 0 	 H2 	 H2 	 3.0663081780709598e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 17, 17]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.9142, -109.5248, -109.5636, -109.5463, -109.5311, -109.5203,
        -109.5129, -109.5079, -109.5046, -109.5023, -109.5008, -109.4998,
        -109.4991, -109.4987, -109.4983, -109.4981, -109.4980, -109.4979,
        -109.4978, -109.4977, -109.4977, -109.4977, -109.4977, -109.4976,
        -109.4976], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018879
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.4416e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4304, -54.5023, -54.5297, -54.5452, -54.5557, -54.5630, -54.5681,
        -54.5718, -54.5744, -54.5762, -54.5775, -54.5784, -54.5791, -54.5795,
        -54.5798, -54.5800, -54.5802, -54.5803, -54.5804, -54.5804, -54.5805,
        -54.5805, -54.5805, -54.5805, -54.5805], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.6362e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4981, -109.4980, -109.4979, -109.4978, -109.4977, -109.4977,
        -109.4977, -109.4977, -109.4976, -109.4976], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5800, -54.5802, -54.5803, -54.5804, -54.5804, -54.5805, -54.5805,
        -54.5805, -54.5805, -54.5805], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 1 	 1 	 N2 	 N2 	 0.00017621390382277223

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------18----------------
TRAINING ON MOLECULE:  ,Na
SUBMOLECULES: ['Na']
SUBMOLECULE INDICES: [18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2300, -162.2414, -162.2453, -162.2473, -162.2485, -162.2494,
        -162.2501, -162.2506, -162.2510, -162.2511, -162.2512, -162.2512,
        -162.2512, -162.2513, -162.2513, -162.2513, -162.2513, -162.2513,
        -162.2513, -162.2513, -162.2513, -162.2513, -162.2513, -162.2513,
        -162.2513], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1505e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.1505e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'Na': tensor([-162.2513, -162.2513, -162.2513, -162.2513, -162.2513, -162.2513,
        -162.2513, -162.2513, -162.2513, -162.2513], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 1 	 18 	 Na 	 Na 	 2.5058612922474334e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,  7CCHH
SUBMOLECULES: ['C2H2', 'C', 'C', 'H', 'H']
SUBMOLECULE INDICES: [7, 12, 12, 15, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C2H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6459], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6459], dtype=torch.float64)
E_PRED: tensor([-78.1674, -73.1090, -75.0808, -75.8525, -76.2998, -76.5930, -76.7928,
        -76.9307, -77.0268, -77.0939, -77.1408, -77.1736, -77.1966, -77.2127,
        -77.2239, -77.2318, -77.2374, -77.2413, -77.2440, -77.2459, -77.2472,
        -77.2482, -77.2488, -77.2493, -77.2496], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 108, 108])
mo_energy   ---   torch.Size([2, 108])
dm_ref   ---   torch.Size([1, 2, 108, 108])
rho   ---   torch.Size([1, 2, 1924])
ao_eval   ---   torch.Size([1, 10, 1924, 108])
grid_weights   ---   torch.Size([1, 1924])
-77.2336470993193
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 108])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 108])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.3005e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0005, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7394, -37.7798, -37.7976, -37.8080, -37.8150, -37.8201, -37.8237,
        -37.8262, -37.8281, -37.8294, -37.8303, -37.8309, -37.8314, -37.8317,
        -37.8319, -37.8321, -37.8322, -37.8323, -37.8323, -37.8324, -37.8324,
        -37.8324, -37.8324, -37.8324, -37.8324], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.8942e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0005, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2904, -0.4511, -0.4715, -0.4812, -0.4871, -0.4911, -0.4937, -0.4956,
        -0.4969, -0.4978, -0.4984, -0.4989, -0.4992, -0.4994, -0.4995, -0.4996,
        -0.4997, -0.4998, -0.4998, -0.4998, -0.4999, -0.4999, -0.4999, -0.4999,
        -0.4999], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.7264e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(8.5039e-09, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0005, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CCHH': tensor([-0.6459], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'CCHH': tensor([-77.2318, -77.2374, -77.2413, -77.2440, -77.2459, -77.2472, -77.2482,
        -77.2488, -77.2493, -77.2496], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8321, -37.8322, -37.8323, -37.8323, -37.8324, -37.8324, -37.8324,
        -37.8324, -37.8324, -37.8324], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4996, -0.4997, -0.4998, -0.4998, -0.4998, -0.4999, -0.4999, -0.4999,
        -0.4999, -0.4999], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 1 	 7 	 C2H2 	 C2H2 	 0.0008810658664662446

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------15----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2541, -0.4406, -0.4656, -0.4774, -0.4846, -0.4893, -0.4925, -0.4948,
        -0.4963, -0.4974, -0.4981, -0.4987, -0.4990, -0.4993, -0.4995, -0.4996,
        -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4999, -0.4999, -0.4999,
        -0.4999], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.7178e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.1901e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.9436e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4996, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4999, -0.4999,
        -0.4999, -0.4999], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 1 	 15 	 H 	 H 	 4.045634375379053e-09

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 13, 13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4595, -920.4353, -920.4300, -920.4274, -920.4257, -920.4245,
        -920.4237, -920.4231, -920.4227, -920.4224, -920.4222, -920.4221,
        -920.4220, -920.4219, -920.4218, -920.4218, -920.4218, -920.4218,
        -920.4217, -920.4217, -920.4217, -920.4217, -920.4217, -920.4217,
        -920.4217], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885617
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.5929e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.1858e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0954, -460.1264, -460.1374, -460.1437, -460.1480, -460.1511,
        -460.1533, -460.1549, -460.1560, -460.1569, -460.1574, -460.1578,
        -460.1581, -460.1583, -460.1585, -460.1586, -460.1587, -460.1587,
        -460.1587, -460.1588, -460.1588, -460.1588, -460.1588, -460.1588,
        -460.1588], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.1533e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.1939e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4218, -920.4218, -920.4218, -920.4217, -920.4217, -920.4217,
        -920.4217, -920.4217, -920.4217, -920.4217], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1586, -460.1587, -460.1587, -460.1587, -460.1588, -460.1588,
        -460.1588, -460.1588, -460.1588, -460.1588], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 1 	 5 	 Cl2 	 Cl2 	 2.1342151660994157e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 12, 19, 19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.6760, -188.8104, -188.6225, -188.5138, -188.4466, -188.4010,
        -188.3693, -188.3469, -188.3311, -188.3200, -188.3120, -188.3064,
        -188.3024, -188.2996, -188.2976, -188.2961, -188.2951, -188.2944,
        -188.2938, -188.2935, -188.2932, -188.2930, -188.2929, -188.2928,
        -188.2927], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.4017587505662
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.9903e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7362, -37.7743, -37.7934, -37.8047, -37.8125, -37.8181, -37.8221,
        -37.8250, -37.8271, -37.8285, -37.8295, -37.8303, -37.8308, -37.8311,
        -37.8314, -37.8316, -37.8317, -37.8318, -37.8318, -37.8319, -37.8319,
        -37.8319, -37.8319, -37.8320, -37.8320], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.2444e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9485, -74.9924, -75.0141, -75.0270, -75.0359, -75.0421, -75.0467,
        -75.0500, -75.0523, -75.0540, -75.0551, -75.0560, -75.0566, -75.0570,
        -75.0573, -75.0575, -75.0576, -75.0577, -75.0578, -75.0579, -75.0579,
        -75.0579, -75.0579, -75.0579, -75.0580], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(6.5090e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.2961, -188.2951, -188.2944, -188.2938, -188.2935, -188.2932,
        -188.2930, -188.2929, -188.2928, -188.2927], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8316, -37.8317, -37.8318, -37.8318, -37.8319, -37.8319, -37.8319,
        -37.8319, -37.8320, -37.8320], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0575, -75.0576, -75.0577, -75.0578, -75.0579, -75.0579, -75.0579,
        -75.0579, -75.0579, -75.0580], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 1 	 4 	 CO2 	 CO2 	 0.01797730083691788

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  , 11NaNa
SUBMOLECULES: ['Na2', 'Na', 'Na']
SUBMOLECULE INDICES: [11, 18, 18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0273], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0273], dtype=torch.float64)
E_PRED: tensor([-324.6539, -324.5744, -324.5537, -324.5431, -324.5363, -324.5317,
        -324.5285, -324.5263, -324.5247, -324.5236, -324.5228, -324.5223,
        -324.5219, -324.5217, -324.5215, -324.5213, -324.5213, -324.5212,
        -324.5211, -324.5211, -324.5211, -324.5211, -324.5211, -324.5211,
        -324.5210], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 1992])
ao_eval   ---   torch.Size([1, 10, 1992, 94])
grid_weights   ---   torch.Size([1, 1992])
-324.03216786711033
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(4.6203e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.2405e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2244, -162.2366, -162.2411, -162.2436, -162.2452, -162.2462,
        -162.2470, -162.2476, -162.2481, -162.2483, -162.2484, -162.2484,
        -162.2485, -162.2485, -162.2485, -162.2486, -162.2486, -162.2486,
        -162.2486, -162.2486, -162.2486, -162.2486, -162.2486, -162.2486,
        -162.2486], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.8531e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.2444e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NaNa': tensor([-0.0273], dtype=torch.float64), 'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'NaNa': tensor([-324.5213, -324.5213, -324.5212, -324.5211, -324.5211, -324.5211,
        -324.5211, -324.5211, -324.5211, -324.5210], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Na': tensor([-162.2486, -162.2486, -162.2486, -162.2486, -162.2486, -162.2486,
        -162.2486, -162.2486, -162.2486, -162.2486], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 1 	 11 	 Na2 	 Na2 	 2.8281534334168095e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  , 10LiH
SUBMOLECULES: ['HLi', 'Li', 'H']
SUBMOLECULE INDICES: [10, 16, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0923], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0923], dtype=torch.float64)
E_PRED: tensor([-7.9361, -8.0120, -8.0319, -8.0423, -8.0490, -8.0536, -8.0568, -8.0591,
        -8.0607, -8.0619, -8.0627, -8.0632, -8.0636, -8.0639, -8.0641, -8.0642,
        -8.0643, -8.0644, -8.0645, -8.0645, -8.0645, -8.0645, -8.0645, -8.0646,
        -8.0646], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 54, 54])
mo_energy   ---   torch.Size([2, 54])
dm_ref   ---   torch.Size([1, 2, 54, 54])
rho   ---   torch.Size([1, 2, 1271])
ao_eval   ---   torch.Size([1, 10, 1271, 54])
grid_weights   ---   torch.Size([1, 1271])
-8.038079906478378
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 54])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 54])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.2928e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(4.5857e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2453, -0.4379, -0.4641, -0.4764, -0.4839, -0.4888, -0.4922, -0.4945,
        -0.4961, -0.4973, -0.4980, -0.4986, -0.4990, -0.4992, -0.4994, -0.4996,
        -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4998, -0.4998, -0.4999,
        -0.4999], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.6833e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.3210e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.5223e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4614, -7.4688, -7.4719, -7.4736, -7.4746, -7.4755, -7.4764, -7.4771,
        -7.4772, -7.4769, -7.4767, -7.4766, -7.4766, -7.4767, -7.4767, -7.4767,
        -7.4767, -7.4768, -7.4768, -7.4768, -7.4768, -7.4768, -7.4768, -7.4768,
        -7.4768], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.2727e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.1660e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.0679e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiH': tensor([-0.0923], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiH': tensor([-8.0642, -8.0643, -8.0644, -8.0645, -8.0645, -8.0645, -8.0645, -8.0645,
        -8.0646, -8.0646], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4996, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4998, -0.4998,
        -0.4999, -0.4999], dtype=torch.float64, grad_fn=<SliceBackward0>), 'Li': tensor([-7.4767, -7.4767, -7.4768, -7.4768, -7.4768, -7.4768, -7.4768, -7.4768,
        -7.4768, -7.4768], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 1 	 10 	 HLi 	 LiH 	 4.4633439124201505e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------16----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [16]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4619, -7.4694, -7.4722, -7.4738, -7.4748, -7.4756, -7.4765, -7.4770,
        -7.4770, -7.4767, -7.4766, -7.4765, -7.4765, -7.4766, -7.4766, -7.4766,
        -7.4766, -7.4766, -7.4767, -7.4767, -7.4767, -7.4767, -7.4767, -7.4767,
        -7.4767], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.2653e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.3682e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.5308e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4766, -7.4766, -7.4766, -7.4767, -7.4767, -7.4767, -7.4767, -7.4767,
        -7.4767, -7.4767], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 1 	 16 	 Li 	 Li 	 4.3845754548610814e-07

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 12, 17, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-94.0546, -93.5464, -93.4111, -93.3522, -93.3096, -93.2813, -93.2610,
        -93.2464, -93.2358, -93.2281, -93.2225, -93.2183, -93.2152, -93.2129,
        -93.2112, -93.2100, -93.2090, -93.2083, -93.2078, -93.2074, -93.2070,
        -93.2068, -93.2066, -93.2065, -93.2064], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633898
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.5426e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7555, -37.7944, -37.8075, -37.8147, -37.8195, -37.8229, -37.8253,
        -37.8270, -37.8282, -37.8290, -37.8296, -37.8300, -37.8303, -37.8305,
        -37.8306, -37.8307, -37.8308, -37.8309, -37.8309, -37.8309, -37.8309,
        -37.8310, -37.8310, -37.8310, -37.8310], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.9490e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2603, -0.4424, -0.4666, -0.4780, -0.4850, -0.4896, -0.4927, -0.4949,
        -0.4964, -0.4974, -0.4982, -0.4987, -0.4990, -0.4993, -0.4994, -0.4996,
        -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4998, -0.4998, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.6656e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.1882e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4080, -54.4790, -54.5120, -54.5317, -54.5451, -54.5547, -54.5616,
        -54.5664, -54.5699, -54.5724, -54.5741, -54.5753, -54.5761, -54.5767,
        -54.5772, -54.5775, -54.5777, -54.5778, -54.5779, -54.5780, -54.5780,
        -54.5781, -54.5781, -54.5781, -54.5781], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.2490e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2100, -93.2090, -93.2083, -93.2078, -93.2074, -93.2070, -93.2068,
        -93.2066, -93.2065, -93.2064], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8307, -37.8308, -37.8309, -37.8309, -37.8309, -37.8309, -37.8310,
        -37.8310, -37.8310, -37.8310], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4996, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4998, -0.4998,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5775, -54.5777, -54.5778, -54.5779, -54.5780, -54.5780, -54.5781,
        -54.5781, -54.5781, -54.5781], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 1 	 3 	 CHN 	 CNH 	 0.009507965343822953

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------19----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9563, -75.0026, -75.0212, -75.0317, -75.0388, -75.0438, -75.0474,
        -75.0499, -75.0518, -75.0531, -75.0540, -75.0546, -75.0551, -75.0554,
        -75.0556, -75.0558, -75.0559, -75.0560, -75.0560, -75.0561, -75.0561,
        -75.0561, -75.0561, -75.0561, -75.0561], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.1002e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.1002e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0558, -75.0559, -75.0560, -75.0560, -75.0561, -75.0561, -75.0561,
        -75.0561, -75.0561, -75.0561], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 1 	 19 	 O 	 O 	 2.9163210763410876e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e01)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e01/2022-11-29_10:09:21.574160_1.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e01/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 1 || ,[' rho : 3.133776', ' ae : 63.098128', ' E : 3.402298'] ,|| total loss 46.767656 || CHKPT: _1.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------6----------------
TRAINING ON MOLECULE:  ,  6FF
SUBMOLECULES: ['F2', 'F', 'F']
SUBMOLECULE INDICES: [6, 14, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0618], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0618], dtype=torch.float64)
E_PRED: tensor([-199.6338, -199.5579, -199.5383, -199.5283, -199.5220, -199.5177,
        -199.5147, -199.5126, -199.5111, -199.5101, -199.5093, -199.5088,
        -199.5085, -199.5082, -199.5080, -199.5079, -199.5078, -199.5077,
        -199.5077, -199.5077, -199.5076, -199.5076, -199.5076, -199.5076,
        -199.5076], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 4698])
ao_eval   ---   torch.Size([1, 10, 4698, 78])
grid_weights   ---   torch.Size([1, 4698])
-199.3364659747656
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.2395e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.4790e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6670, -99.6919, -99.7023, -99.7084, -99.7126, -99.7156, -99.7178,
        -99.7194, -99.7205, -99.7213, -99.7219, -99.7223, -99.7226, -99.7228,
        -99.7229, -99.7230, -99.7231, -99.7231, -99.7232, -99.7232, -99.7232,
        -99.7232, -99.7232, -99.7232, -99.7233], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.2046e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.4872e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'FF': tensor([-0.0618], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'FF': tensor([-199.5079, -199.5078, -199.5077, -199.5077, -199.5077, -199.5076,
        -199.5076, -199.5076, -199.5076, -199.5076], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7230, -99.7231, -99.7231, -99.7232, -99.7232, -99.7232, -99.7232,
        -99.7232, -99.7232, -99.7233], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 2 	 6 	 F2 	 F2 	 1.1561619883786805e-07

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 12, 17, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-93.8486, -93.4592, -93.3623, -93.3157, -93.2842, -93.2628, -93.2474,
        -93.2364, -93.2284, -93.2225, -93.2181, -93.2149, -93.2125, -93.2108,
        -93.2094, -93.2084, -93.2076, -93.2071, -93.2066, -93.2063, -93.2060,
        -93.2058, -93.2057, -93.2056, -93.2055], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633898
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.5158e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7458, -37.7868, -37.8021, -37.8107, -37.8165, -37.8205, -37.8234,
        -37.8255, -37.8269, -37.8280, -37.8287, -37.8292, -37.8296, -37.8298,
        -37.8300, -37.8301, -37.8302, -37.8303, -37.8303, -37.8303, -37.8304,
        -37.8304, -37.8304, -37.8304, -37.8304], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.4459e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2724, -0.4459, -0.4685, -0.4793, -0.4858, -0.4901, -0.4931, -0.4951,
        -0.4966, -0.4975, -0.4982, -0.4987, -0.4991, -0.4993, -0.4995, -0.4996,
        -0.4997, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4998, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.6400e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.1035e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4384, -54.5076, -54.5324, -54.5463, -54.5556, -54.5620, -54.5666,
        -54.5698, -54.5720, -54.5736, -54.5748, -54.5756, -54.5761, -54.5765,
        -54.5768, -54.5770, -54.5771, -54.5772, -54.5773, -54.5773, -54.5773,
        -54.5774, -54.5774, -54.5774, -54.5774], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0219e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2084, -93.2076, -93.2071, -93.2066, -93.2063, -93.2060, -93.2058,
        -93.2057, -93.2056, -93.2055], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8301, -37.8302, -37.8303, -37.8303, -37.8303, -37.8304, -37.8304,
        -37.8304, -37.8304, -37.8304], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4996, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4998,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5770, -54.5771, -54.5772, -54.5773, -54.5773, -54.5773, -54.5774,
        -54.5774, -54.5774, -54.5774], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 2 	 3 	 CHN 	 CNH 	 0.009472826786250048

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 16, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2804, -107.2810, -107.2448, -107.2337, -107.2264, -107.2223,
        -107.2204, -107.2194, -107.2190, -107.2188, -107.2187, -107.2187,
        -107.2188, -107.2189, -107.2190, -107.2192, -107.2194, -107.2196,
        -107.2197, -107.2199, -107.2200, -107.2201, -107.2202, -107.2202,
        -107.2203], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.305942205048
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.2607e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6637, -99.6871, -99.6986, -99.7054, -99.7102, -99.7137, -99.7162,
        -99.7180, -99.7193, -99.7203, -99.7209, -99.7214, -99.7217, -99.7220,
        -99.7221, -99.7223, -99.7223, -99.7224, -99.7224, -99.7225, -99.7225,
        -99.7225, -99.7225, -99.7225, -99.7225], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.3581e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4609, -7.4682, -7.4713, -7.4731, -7.4742, -7.4750, -7.4759, -7.4766,
        -7.4767, -7.4765, -7.4763, -7.4762, -7.4762, -7.4762, -7.4762, -7.4763,
        -7.4763, -7.4763, -7.4763, -7.4763, -7.4763, -7.4763, -7.4763, -7.4763,
        -7.4763], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.2425e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.1406e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2192, -107.2194, -107.2196, -107.2197, -107.2199, -107.2200,
        -107.2201, -107.2202, -107.2202, -107.2203], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7223, -99.7223, -99.7224, -99.7224, -99.7225, -99.7225, -99.7225,
        -99.7225, -99.7225, -99.7225], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4763, -7.4763, -7.4763, -7.4763, -7.4763, -7.4763, -7.4763, -7.4763,
        -7.4763, -7.4763], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 2 	 2 	 FLi 	 LiF 	 0.00945089250132167

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------18----------------
TRAINING ON MOLECULE:  ,Na
SUBMOLECULES: ['Na']
SUBMOLECULE INDICES: [18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2217, -162.2335, -162.2376, -162.2398, -162.2412, -162.2421,
        -162.2429, -162.2435, -162.2438, -162.2440, -162.2441, -162.2441,
        -162.2441, -162.2442, -162.2442, -162.2442, -162.2442, -162.2442,
        -162.2442, -162.2442, -162.2442, -162.2442, -162.2442, -162.2442,
        -162.2442], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1426e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.1426e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'Na': tensor([-162.2442, -162.2442, -162.2442, -162.2442, -162.2442, -162.2442,
        -162.2442, -162.2442, -162.2442, -162.2442], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 2 	 18 	 Na 	 Na 	 2.504431400359489e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  , 10LiH
SUBMOLECULES: ['HLi', 'Li', 'H']
SUBMOLECULE INDICES: [10, 16, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0923], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0923], dtype=torch.float64)
E_PRED: tensor([-7.9355, -8.0113, -8.0312, -8.0416, -8.0483, -8.0529, -8.0562, -8.0585,
        -8.0601, -8.0612, -8.0620, -8.0626, -8.0630, -8.0633, -8.0635, -8.0636,
        -8.0637, -8.0638, -8.0638, -8.0638, -8.0639, -8.0639, -8.0639, -8.0639,
        -8.0639], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 54, 54])
mo_energy   ---   torch.Size([2, 54])
dm_ref   ---   torch.Size([1, 2, 54, 54])
rho   ---   torch.Size([1, 2, 1271])
ao_eval   ---   torch.Size([1, 10, 1271, 54])
grid_weights   ---   torch.Size([1, 1271])
-8.038079906478378
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 54])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 54])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.2125e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(4.4251e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3353, -0.4631, -0.4782, -0.4855, -0.4900, -0.4930, -0.4951, -0.4965,
        -0.4975, -0.4982, -0.4987, -0.4990, -0.4993, -0.4994, -0.4996, -0.4996,
        -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4998, -0.4998, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.6173e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(6.4173e-09, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.3485e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4604, -7.4675, -7.4708, -7.4727, -7.4739, -7.4747, -7.4756, -7.4764,
        -7.4767, -7.4764, -7.4762, -7.4761, -7.4761, -7.4761, -7.4762, -7.4762,
        -7.4762, -7.4762, -7.4762, -7.4763, -7.4763, -7.4763, -7.4763, -7.4763,
        -7.4763], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.2386e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.2989e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.8261e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiH': tensor([-0.0923], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiH': tensor([-8.0636, -8.0637, -8.0638, -8.0638, -8.0638, -8.0639, -8.0639, -8.0639,
        -8.0639, -8.0639], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4996, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4998, -0.4998,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>), 'Li': tensor([-7.4762, -7.4762, -7.4762, -7.4762, -7.4763, -7.4763, -7.4763, -7.4763,
        -7.4763, -7.4763], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 2 	 10 	 HLi 	 LiH 	 4.6717971902761565e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,  8OC
SUBMOLECULES: ['CO', 'O', 'C']
SUBMOLECULE INDICES: [8, 19, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='OC', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4142], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4142], dtype=torch.float64)
E_PRED: tensor([-113.7161, -113.4118, -113.3391, -113.3002, -113.2765, -113.2602,
        -113.2489, -113.2410, -113.2355, -113.2317, -113.2290, -113.2272,
        -113.2259, -113.2250, -113.2244, -113.2239, -113.2236, -113.2234,
        -113.2233, -113.2232, -113.2231, -113.2230, -113.2230, -113.2230,
        -113.2230], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 3279])
ao_eval   ---   torch.Size([1, 10, 3279, 78])
grid_weights   ---   torch.Size([1, 3279])
-113.201730216515
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6587e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7511, -37.7909, -37.8048, -37.8125, -37.8177, -37.8213, -37.8238,
        -37.8256, -37.8269, -37.8278, -37.8285, -37.8289, -37.8292, -37.8294,
        -37.8296, -37.8297, -37.8298, -37.8298, -37.8299, -37.8299, -37.8299,
        -37.8299, -37.8299, -37.8299, -37.8300], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.8361e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9439, -74.9853, -75.0078, -75.0215, -75.0310, -75.0377, -75.0426,
        -75.0462, -75.0487, -75.0505, -75.0518, -75.0527, -75.0534, -75.0538,
        -75.0541, -75.0544, -75.0545, -75.0546, -75.0547, -75.0548, -75.0548,
        -75.0548, -75.0548, -75.0549, -75.0549], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1394e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'OC': tensor([-0.4142], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'OC': tensor([-113.2239, -113.2236, -113.2234, -113.2233, -113.2232, -113.2231,
        -113.2230, -113.2230, -113.2230, -113.2230], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8297, -37.8298, -37.8298, -37.8299, -37.8299, -37.8299, -37.8299,
        -37.8299, -37.8299, -37.8300], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0544, -75.0545, -75.0546, -75.0547, -75.0548, -75.0548, -75.0548,
        -75.0548, -75.0549, -75.0549], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 2 	 8 	 CO 	 OC 	 0.0013512645386426678

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 12, 19, 19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.3534, -188.6821, -188.5377, -188.4546, -188.4035, -188.3688,
        -188.3446, -188.3276, -188.3156, -188.3071, -188.3011, -188.2968,
        -188.2937, -188.2916, -188.2900, -188.2889, -188.2881, -188.2876,
        -188.2872, -188.2869, -188.2867, -188.2865, -188.2864, -188.2863,
        -188.2863], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.4017587505662
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.9733e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7335, -37.7698, -37.7894, -37.8013, -37.8094, -37.8153, -37.8195,
        -37.8225, -37.8247, -37.8262, -37.8273, -37.8281, -37.8286, -37.8290,
        -37.8293, -37.8294, -37.8296, -37.8297, -37.8297, -37.8298, -37.8298,
        -37.8298, -37.8299, -37.8299, -37.8299], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.9940e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9614, -75.0069, -75.0238, -75.0332, -75.0395, -75.0439, -75.0471,
        -75.0493, -75.0509, -75.0521, -75.0529, -75.0534, -75.0538, -75.0541,
        -75.0543, -75.0545, -75.0546, -75.0546, -75.0547, -75.0547, -75.0547,
        -75.0548, -75.0548, -75.0548, -75.0548], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1379e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.2889, -188.2881, -188.2876, -188.2872, -188.2869, -188.2867,
        -188.2865, -188.2864, -188.2863, -188.2863], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8294, -37.8296, -37.8297, -37.8297, -37.8298, -37.8298, -37.8298,
        -37.8299, -37.8299, -37.8299], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0545, -75.0546, -75.0546, -75.0547, -75.0547, -75.0547, -75.0548,
        -75.0548, -75.0548, -75.0548], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 2 	 4 	 CO2 	 CO2 	 0.01772026409012292

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 15, 15]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0635, -1.1276, -1.1442, -1.1527, -1.1580, -1.1616, -1.1641, -1.1659,
        -1.1671, -1.1679, -1.1685, -1.1690, -1.1693, -1.1695, -1.1696, -1.1697,
        -1.1698, -1.1698, -1.1699, -1.1699, -1.1699, -1.1699, -1.1699, -1.1699,
        -1.1699], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668206
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7570e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.5140e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3190, -0.4588, -0.4758, -0.4840, -0.4890, -0.4923, -0.4946, -0.4962,
        -0.4973, -0.4980, -0.4986, -0.4989, -0.4992, -0.4994, -0.4995, -0.4996,
        -0.4997, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4998, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.5997e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(7.7419e-09, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.4340e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1697, -1.1698, -1.1698, -1.1699, -1.1699, -1.1699, -1.1699, -1.1699,
        -1.1699, -1.1699], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4996, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4998,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 2 	 0 	 H2 	 H2 	 3.769939321920181e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,  9ClH
SUBMOLECULES: ['HCl', 'Cl', 'H']
SUBMOLECULE INDICES: [9, 13, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='ClH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1712], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1712], dtype=torch.float64)
E_PRED: tensor([-460.7339, -460.7845, -460.7987, -460.8059, -460.8105, -460.8136,
        -460.8158, -460.8173, -460.8184, -460.8191, -460.8196, -460.8200,
        -460.8202, -460.8204, -460.8206, -460.8206, -460.8207, -460.8207,
        -460.8208, -460.8208, -460.8208, -460.8208, -460.8208, -460.8208,
        -460.8208], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 62, 62])
mo_energy   ---   torch.Size([2, 62])
dm_ref   ---   torch.Size([1, 2, 62, 62])
rho   ---   torch.Size([1, 2, 1068])
ao_eval   ---   torch.Size([1, 10, 1068, 62])
grid_weights   ---   torch.Size([1, 1068])
-460.4234538667477
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 62])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 62])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(6.6724e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1021, -460.1256, -460.1326, -460.1365, -460.1391, -460.1409,
        -460.1421, -460.1430, -460.1437, -460.1441, -460.1445, -460.1447,
        -460.1449, -460.1450, -460.1451, -460.1451, -460.1451, -460.1452,
        -460.1452, -460.1452, -460.1452, -460.1452, -460.1452, -460.1452,
        -460.1452], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.6741e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3404, -0.4644, -0.4790, -0.4860, -0.4904, -0.4933, -0.4952, -0.4966,
        -0.4976, -0.4983, -0.4987, -0.4990, -0.4993, -0.4994, -0.4995, -0.4996,
        -0.4997, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4998, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.5921e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(6.4352e-09, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0002, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClH': tensor([-0.1712], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'ClH': tensor([-460.8206, -460.8207, -460.8207, -460.8208, -460.8208, -460.8208,
        -460.8208, -460.8208, -460.8208, -460.8208], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1451, -460.1451, -460.1452, -460.1452, -460.1452, -460.1452,
        -460.1452, -460.1452, -460.1452, -460.1452], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4996, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4998,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 2 	 9 	 HCl 	 ClH 	 4.862349705168633e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 13, 13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4276, -920.4055, -920.4008, -920.3984, -920.3968, -920.3958,
        -920.3951, -920.3946, -920.3942, -920.3940, -920.3938, -920.3936,
        -920.3936, -920.3935, -920.3934, -920.3934, -920.3934, -920.3934,
        -920.3934, -920.3934, -920.3934, -920.3934, -920.3933, -920.3933,
        -920.3933], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885617
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.5042e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.0084e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0911, -460.1189, -460.1279, -460.1329, -460.1363, -460.1387,
        -460.1404, -460.1416, -460.1425, -460.1431, -460.1435, -460.1438,
        -460.1441, -460.1442, -460.1443, -460.1444, -460.1445, -460.1445,
        -460.1445, -460.1445, -460.1446, -460.1446, -460.1446, -460.1446,
        -460.1446], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.7442e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.0092e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.3934, -920.3934, -920.3934, -920.3934, -920.3934, -920.3934,
        -920.3934, -920.3933, -920.3933, -920.3933], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1444, -460.1445, -460.1445, -460.1445, -460.1445, -460.1446,
        -460.1446, -460.1446, -460.1446, -460.1446], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 2 	 5 	 Cl2 	 Cl2 	 2.183106368409136e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------13----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0945, -460.1207, -460.1289, -460.1335, -460.1365, -460.1387,
        -460.1402, -460.1413, -460.1421, -460.1426, -460.1430, -460.1433,
        -460.1435, -460.1436, -460.1437, -460.1438, -460.1438, -460.1439,
        -460.1439, -460.1439, -460.1439, -460.1439, -460.1439, -460.1439,
        -460.1439], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2078e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.2078e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1438, -460.1438, -460.1439, -460.1439, -460.1439, -460.1439,
        -460.1439, -460.1439, -460.1439, -460.1439], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 2 	 13 	 Cl 	 Cl 	 3.84755324079841e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  , 11NaNa
SUBMOLECULES: ['Na2', 'Na', 'Na']
SUBMOLECULE INDICES: [11, 18, 18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0273], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0273], dtype=torch.float64)
E_PRED: tensor([-324.6227, -324.5541, -324.5362, -324.5270, -324.5212, -324.5172,
        -324.5145, -324.5126, -324.5112, -324.5103, -324.5096, -324.5091,
        -324.5088, -324.5086, -324.5084, -324.5083, -324.5082, -324.5082,
        -324.5081, -324.5081, -324.5081, -324.5081, -324.5080, -324.5080,
        -324.5080], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 1992])
ao_eval   ---   torch.Size([1, 10, 1992, 94])
grid_weights   ---   torch.Size([1, 1992])
-324.03216786711033
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(4.4699e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.9397e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2217, -162.2329, -162.2365, -162.2384, -162.2395, -162.2403,
        -162.2410, -162.2415, -162.2418, -162.2419, -162.2420, -162.2420,
        -162.2420, -162.2421, -162.2421, -162.2421, -162.2421, -162.2421,
        -162.2421, -162.2421, -162.2421, -162.2421, -162.2421, -162.2421,
        -162.2421], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6586e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.9563e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NaNa': tensor([-0.0273], dtype=torch.float64), 'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'NaNa': tensor([-324.5083, -324.5082, -324.5082, -324.5081, -324.5081, -324.5081,
        -324.5081, -324.5080, -324.5080, -324.5080], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Na': tensor([-162.2421, -162.2421, -162.2421, -162.2421, -162.2421, -162.2421,
        -162.2421, -162.2421, -162.2421, -162.2421], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 2 	 11 	 Na2 	 Na2 	 2.933181434235346e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 17, 17]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.7951, -109.8097, -109.7022, -109.6343, -109.5897, -109.5592,
        -109.5380, -109.5232, -109.5130, -109.5058, -109.5008, -109.4973,
        -109.4949, -109.4932, -109.4920, -109.4912, -109.4906, -109.4902,
        -109.4899, -109.4897, -109.4896, -109.4895, -109.4894, -109.4893,
        -109.4893], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018879
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.4065e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4382, -54.5069, -54.5314, -54.5451, -54.5542, -54.5605, -54.5650,
        -54.5681, -54.5704, -54.5719, -54.5730, -54.5738, -54.5744, -54.5747,
        -54.5750, -54.5752, -54.5753, -54.5754, -54.5755, -54.5755, -54.5756,
        -54.5756, -54.5756, -54.5756, -54.5756], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3478e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4912, -109.4906, -109.4902, -109.4899, -109.4897, -109.4896,
        -109.4895, -109.4894, -109.4893, -109.4893], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5752, -54.5753, -54.5754, -54.5755, -54.5755, -54.5756, -54.5756,
        -54.5756, -54.5756, -54.5756], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 2 	 1 	 N2 	 N2 	 0.00015660170246076805

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,  7CCHH
SUBMOLECULES: ['C2H2', 'C', 'C', 'H', 'H']
SUBMOLECULE INDICES: [7, 12, 12, 15, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C2H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6459], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6459], dtype=torch.float64)
E_PRED: tensor([-77.6131, -72.6597, -74.9174, -75.7711, -76.2517, -76.5608, -76.7693,
        -76.9127, -77.0122, -77.0816, -77.1303, -77.1644, -77.1883, -77.2050,
        -77.2168, -77.2250, -77.2308, -77.2348, -77.2377, -77.2397, -77.2411,
        -77.2421, -77.2427, -77.2432, -77.2436], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 108, 108])
mo_energy   ---   torch.Size([2, 108])
dm_ref   ---   torch.Size([1, 2, 108, 108])
rho   ---   torch.Size([1, 2, 1924])
ao_eval   ---   torch.Size([1, 10, 1924, 108])
grid_weights   ---   torch.Size([1, 1924])
-77.2336470993193
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 108])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 108])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.2060e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7529, -37.7918, -37.8051, -37.8124, -37.8173, -37.8207, -37.8231,
        -37.8248, -37.8260, -37.8269, -37.8275, -37.8279, -37.8282, -37.8284,
        -37.8285, -37.8286, -37.8287, -37.8288, -37.8288, -37.8288, -37.8288,
        -37.8288, -37.8288, -37.8289, -37.8289], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.8677e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3053, -0.4551, -0.4737, -0.4826, -0.4880, -0.4916, -0.4941, -0.4958,
        -0.4970, -0.4979, -0.4984, -0.4988, -0.4991, -0.4993, -0.4995, -0.4996,
        -0.4996, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.5691e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(9.2466e-09, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0005, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CCHH': tensor([-0.6459], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'CCHH': tensor([-77.2250, -77.2308, -77.2348, -77.2377, -77.2397, -77.2411, -77.2421,
        -77.2427, -77.2432, -77.2436], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8286, -37.8287, -37.8288, -37.8288, -37.8288, -37.8288, -37.8288,
        -37.8288, -37.8289, -37.8289], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 2 	 7 	 C2H2 	 C2H2 	 0.0008453454355254394

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7329, -37.7698, -37.7892, -37.8008, -37.8088, -37.8145, -37.8187,
        -37.8216, -37.8237, -37.8252, -37.8263, -37.8270, -37.8276, -37.8279,
        -37.8282, -37.8284, -37.8285, -37.8286, -37.8287, -37.8287, -37.8287,
        -37.8288, -37.8288, -37.8288, -37.8288], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(6.0319e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.0319e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8284, -37.8285, -37.8286, -37.8287, -37.8287, -37.8287, -37.8288,
        -37.8288, -37.8288, -37.8288], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 2 	 12 	 C 	 C 	 3.211413732545237e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------15----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2330, -0.4340, -0.4619, -0.4750, -0.4829, -0.4881, -0.4917, -0.4942,
        -0.4959, -0.4970, -0.4979, -0.4984, -0.4988, -0.4991, -0.4993, -0.4995,
        -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.5649e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.6401e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.9130e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4995, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4998,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 2 	 15 	 H 	 H 	 1.2879235460506352e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------16----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [16]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4611, -7.4686, -7.4714, -7.4729, -7.4738, -7.4747, -7.4756, -7.4760,
        -7.4759, -7.4757, -7.4755, -7.4755, -7.4755, -7.4755, -7.4756, -7.4756,
        -7.4756, -7.4756, -7.4756, -7.4756, -7.4757, -7.4757, -7.4757, -7.4757,
        -7.4757], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.2034e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(4.1362e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.4072e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4756, -7.4756, -7.4756, -7.4756, -7.4756, -7.4757, -7.4757, -7.4757,
        -7.4757, -7.4757], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 2 	 16 	 Li 	 Li 	 1.3426505801860086e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------19----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9420, -74.9800, -75.0031, -75.0176, -75.0277, -75.0350, -75.0402,
        -75.0440, -75.0468, -75.0487, -75.0501, -75.0511, -75.0518, -75.0523,
        -75.0526, -75.0529, -75.0531, -75.0532, -75.0533, -75.0533, -75.0534,
        -75.0534, -75.0534, -75.0534, -75.0534], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4150e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.4150e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0529, -75.0531, -75.0532, -75.0533, -75.0533, -75.0534, -75.0534,
        -75.0534, -75.0534, -75.0534], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 2 	 19 	 O 	 O 	 4.5014413114383285e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------14----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6705, -99.6951, -99.7038, -99.7088, -99.7122, -99.7146, -99.7163,
        -99.7176, -99.7185, -99.7191, -99.7195, -99.7198, -99.7201, -99.7202,
        -99.7203, -99.7204, -99.7205, -99.7205, -99.7205, -99.7206, -99.7206,
        -99.7206, -99.7206, -99.7206, -99.7206], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2676e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.2676e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7204, -99.7205, -99.7205, -99.7205, -99.7206, -99.7206, -99.7206,
        -99.7206, -99.7206, -99.7206], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 2 	 14 	 F 	 F 	 4.132142367602198e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------17----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [17]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4014, -54.4680, -54.5031, -54.5244, -54.5391, -54.5496, -54.5572,
        -54.5626, -54.5665, -54.5692, -54.5711, -54.5725, -54.5734, -54.5741,
        -54.5746, -54.5749, -54.5751, -54.5753, -54.5754, -54.5755, -54.5756,
        -54.5756, -54.5756, -54.5756, -54.5757], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3756e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.3756e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5749, -54.5751, -54.5753, -54.5754, -54.5755, -54.5756, -54.5756,
        -54.5756, -54.5756, -54.5757], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 2 	 17 	 N 	 N 	 4.303928994875429e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e02)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e02/2022-11-29_10:09:21.574160_2.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e02/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 2 || ,[' rho : 3.094415', ' ae : 62.631554', ' E : 2.849273'] ,|| total loss 46.399839 || CHKPT: _2.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------14----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6613, -99.6809, -99.6935, -99.7012, -99.7067, -99.7107, -99.7137,
        -99.7159, -99.7174, -99.7186, -99.7193, -99.7199, -99.7203, -99.7206,
        -99.7208, -99.7209, -99.7210, -99.7211, -99.7212, -99.7212, -99.7212,
        -99.7213, -99.7213, -99.7213, -99.7213], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1557e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.1557e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7209, -99.7210, -99.7211, -99.7212, -99.7212, -99.7212, -99.7213,
        -99.7213, -99.7213, -99.7213], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 3 	 14 	 F 	 F 	 3.726299827732465e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 12, 17, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-93.8263, -93.4487, -93.3558, -93.3106, -93.2804, -93.2598, -93.2452,
        -93.2346, -93.2269, -93.2213, -93.2172, -93.2141, -93.2119, -93.2102,
        -93.2089, -93.2080, -93.2073, -93.2067, -93.2063, -93.2060, -93.2057,
        -93.2056, -93.2054, -93.2053, -93.2052], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633898
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.4293e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7550, -37.7934, -37.8063, -37.8134, -37.8181, -37.8214, -37.8237,
        -37.8253, -37.8265, -37.8273, -37.8279, -37.8283, -37.8286, -37.8288,
        -37.8289, -37.8290, -37.8291, -37.8292, -37.8292, -37.8292, -37.8292,
        -37.8292, -37.8293, -37.8293, -37.8293], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.4662e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3029, -0.4545, -0.4733, -0.4823, -0.4879, -0.4915, -0.4941, -0.4958,
        -0.4970, -0.4978, -0.4984, -0.4988, -0.4991, -0.4993, -0.4995, -0.4996,
        -0.4996, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.5852e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(9.3322e-09, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4004, -54.4631, -54.4994, -54.5217, -54.5373, -54.5484, -54.5565,
        -54.5623, -54.5664, -54.5693, -54.5713, -54.5728, -54.5738, -54.5745,
        -54.5750, -54.5754, -54.5756, -54.5758, -54.5759, -54.5760, -54.5761,
        -54.5761, -54.5761, -54.5761, -54.5762], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2836e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2080, -93.2073, -93.2067, -93.2063, -93.2060, -93.2057, -93.2056,
        -93.2054, -93.2053, -93.2052], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8290, -37.8291, -37.8292, -37.8292, -37.8292, -37.8292, -37.8292,
        -37.8293, -37.8293, -37.8293], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5754, -54.5756, -54.5758, -54.5759, -54.5760, -54.5761, -54.5761,
        -54.5761, -54.5761, -54.5762], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 3 	 3 	 CHN 	 CNH 	 0.009268256533083592

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------19----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9618, -75.0071, -75.0239, -75.0332, -75.0395, -75.0439, -75.0470,
        -75.0493, -75.0509, -75.0520, -75.0528, -75.0534, -75.0538, -75.0541,
        -75.0542, -75.0544, -75.0545, -75.0545, -75.0546, -75.0546, -75.0547,
        -75.0547, -75.0547, -75.0547, -75.0547], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1521e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.1521e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0544, -75.0545, -75.0545, -75.0546, -75.0546, -75.0547, -75.0547,
        -75.0547, -75.0547, -75.0547], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 3 	 19 	 O 	 O 	 3.718245588204618e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  , 11NaNa
SUBMOLECULES: ['Na2', 'Na', 'Na']
SUBMOLECULE INDICES: [11, 18, 18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0273], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0273], dtype=torch.float64)
E_PRED: tensor([-324.6376, -324.5633, -324.5439, -324.5339, -324.5276, -324.5233,
        -324.5203, -324.5182, -324.5168, -324.5158, -324.5150, -324.5145,
        -324.5142, -324.5139, -324.5137, -324.5136, -324.5135, -324.5135,
        -324.5134, -324.5134, -324.5134, -324.5134, -324.5134, -324.5134,
        -324.5134], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 1992])
ao_eval   ---   torch.Size([1, 10, 1992, 94])
grid_weights   ---   torch.Size([1, 1992])
-324.03216786711033
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(4.5027e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.0054e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2241, -162.2354, -162.2390, -162.2409, -162.2421, -162.2429,
        -162.2436, -162.2442, -162.2444, -162.2445, -162.2446, -162.2446,
        -162.2447, -162.2447, -162.2447, -162.2447, -162.2447, -162.2448,
        -162.2448, -162.2448, -162.2448, -162.2448, -162.2448, -162.2448,
        -162.2448], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0304e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.0157e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NaNa': tensor([-0.0273], dtype=torch.float64), 'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'NaNa': tensor([-324.5136, -324.5135, -324.5135, -324.5134, -324.5134, -324.5134,
        -324.5134, -324.5134, -324.5134, -324.5134], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Na': tensor([-162.2447, -162.2447, -162.2448, -162.2448, -162.2448, -162.2448,
        -162.2448, -162.2448, -162.2448, -162.2448], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 3 	 11 	 Na2 	 Na2 	 2.887890630262213e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------15----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2789, -0.4478, -0.4695, -0.4799, -0.4862, -0.4904, -0.4933, -0.4953,
        -0.4966, -0.4976, -0.4983, -0.4987, -0.4990, -0.4993, -0.4994, -0.4995,
        -0.4996, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.6015e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.1199e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.9203e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4995, -0.4996, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 3 	 15 	 H 	 H 	 1.0658897762233005e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 12, 19, 19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.6711, -188.8061, -188.6190, -188.5106, -188.4437, -188.3982,
        -188.3665, -188.3442, -188.3285, -188.3174, -188.3095, -188.3039,
        -188.2999, -188.2970, -188.2950, -188.2936, -188.2926, -188.2918,
        -188.2913, -188.2909, -188.2907, -188.2905, -188.2903, -188.2902,
        -188.2902], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.4017587505662
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.9543e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7425, -37.7835, -37.7996, -37.8087, -37.8149, -37.8193, -37.8224,
        -37.8246, -37.8262, -37.8273, -37.8281, -37.8286, -37.8290, -37.8293,
        -37.8295, -37.8296, -37.8297, -37.8298, -37.8298, -37.8298, -37.8299,
        -37.8299, -37.8299, -37.8299, -37.8299], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.9099e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9501, -74.9955, -75.0158, -75.0276, -75.0356, -75.0413, -75.0454,
        -75.0484, -75.0505, -75.0519, -75.0530, -75.0538, -75.0543, -75.0547,
        -75.0549, -75.0551, -75.0552, -75.0553, -75.0554, -75.0554, -75.0555,
        -75.0555, -75.0555, -75.0555, -75.0555], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0171e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.2936, -188.2926, -188.2918, -188.2913, -188.2909, -188.2907,
        -188.2905, -188.2903, -188.2902, -188.2902], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8296, -37.8297, -37.8298, -37.8298, -37.8298, -37.8299, -37.8299,
        -37.8299, -37.8299, -37.8299], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0551, -75.0552, -75.0553, -75.0554, -75.0554, -75.0555, -75.0555,
        -75.0555, -75.0555, -75.0555], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 3 	 4 	 CO2 	 CO2 	 0.017414677012872103

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,  8OC
SUBMOLECULES: ['CO', 'O', 'C']
SUBMOLECULE INDICES: [8, 19, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='OC', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4142], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4142], dtype=torch.float64)
E_PRED: tensor([-113.5984, -113.3666, -113.3119, -113.2825, -113.2647, -113.2524,
        -113.2439, -113.2380, -113.2339, -113.2311, -113.2291, -113.2277,
        -113.2268, -113.2261, -113.2256, -113.2253, -113.2251, -113.2249,
        -113.2248, -113.2247, -113.2247, -113.2247, -113.2246, -113.2246,
        -113.2246], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 3279])
ao_eval   ---   torch.Size([1, 10, 3279, 78])
grid_weights   ---   torch.Size([1, 3279])
-113.201730216515
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6349e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7367, -37.7763, -37.7943, -37.8049, -37.8121, -37.8172, -37.8209,
        -37.8235, -37.8254, -37.8267, -37.8277, -37.8283, -37.8288, -37.8291,
        -37.8293, -37.8295, -37.8296, -37.8297, -37.8297, -37.8298, -37.8298,
        -37.8298, -37.8298, -37.8299, -37.8299], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.9761e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9550, -75.0010, -75.0198, -75.0306, -75.0378, -75.0429, -75.0466,
        -75.0492, -75.0510, -75.0524, -75.0533, -75.0540, -75.0544, -75.0548,
        -75.0550, -75.0552, -75.0553, -75.0554, -75.0554, -75.0555, -75.0555,
        -75.0555, -75.0555, -75.0555, -75.0555], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0113e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'OC': tensor([-0.4142], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'OC': tensor([-113.2253, -113.2251, -113.2249, -113.2248, -113.2247, -113.2247,
        -113.2247, -113.2246, -113.2246, -113.2246], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8295, -37.8296, -37.8297, -37.8297, -37.8298, -37.8298, -37.8298,
        -37.8298, -37.8299, -37.8299], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0552, -75.0553, -75.0554, -75.0554, -75.0555, -75.0555, -75.0555,
        -75.0555, -75.0555, -75.0555], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 3 	 8 	 CO 	 OC 	 0.0013136922192095355

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,  9ClH
SUBMOLECULES: ['HCl', 'Cl', 'H']
SUBMOLECULE INDICES: [9, 13, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='ClH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1712], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1712], dtype=torch.float64)
E_PRED: tensor([-460.7218, -460.7829, -460.7998, -460.8084, -460.8139, -460.8176,
        -460.8202, -460.8220, -460.8233, -460.8242, -460.8248, -460.8252,
        -460.8255, -460.8257, -460.8259, -460.8260, -460.8261, -460.8261,
        -460.8262, -460.8262, -460.8262, -460.8262, -460.8262, -460.8262,
        -460.8262], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 62, 62])
mo_energy   ---   torch.Size([2, 62])
dm_ref   ---   torch.Size([1, 2, 62, 62])
rho   ---   torch.Size([1, 2, 1068])
ao_eval   ---   torch.Size([1, 10, 1068, 62])
grid_weights   ---   torch.Size([1, 1068])
-460.4234538667477
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 62])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 62])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(6.5411e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0972, -460.1250, -460.1340, -460.1390, -460.1423, -460.1447,
        -460.1464, -460.1477, -460.1485, -460.1492, -460.1496, -460.1499,
        -460.1501, -460.1503, -460.1504, -460.1505, -460.1505, -460.1506,
        -460.1506, -460.1506, -460.1506, -460.1506, -460.1506, -460.1507,
        -460.1507], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.7732e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3163, -0.4581, -0.4754, -0.4837, -0.4888, -0.4922, -0.4945, -0.4961,
        -0.4972, -0.4980, -0.4985, -0.4989, -0.4992, -0.4994, -0.4995, -0.4996,
        -0.4997, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4998, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.6059e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(8.1386e-09, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0002, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClH': tensor([-0.1712], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'ClH': tensor([-460.8260, -460.8261, -460.8261, -460.8262, -460.8262, -460.8262,
        -460.8262, -460.8262, -460.8262, -460.8262], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1505, -460.1505, -460.1506, -460.1506, -460.1506, -460.1506,
        -460.1506, -460.1506, -460.1507, -460.1507], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4996, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4998,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 3 	 9 	 HCl 	 ClH 	 4.824251159934326e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 15, 15]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0621, -1.1270, -1.1438, -1.1524, -1.1578, -1.1614, -1.1639, -1.1657,
        -1.1670, -1.1678, -1.1684, -1.1688, -1.1691, -1.1694, -1.1695, -1.1696,
        -1.1697, -1.1697, -1.1698, -1.1698, -1.1698, -1.1698, -1.1698, -1.1698,
        -1.1698], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668206
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7453e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.4905e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2910, -0.4512, -0.4715, -0.4811, -0.4871, -0.4910, -0.4937, -0.4955,
        -0.4968, -0.4977, -0.4983, -0.4988, -0.4991, -0.4993, -0.4995, -0.4996,
        -0.4996, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.6050e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.0172e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.4115e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1696, -1.1697, -1.1697, -1.1698, -1.1698, -1.1698, -1.1698, -1.1698,
        -1.1698, -1.1698], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 3 	 0 	 H2 	 H2 	 3.916536272836087e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 17, 17]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.5129, -109.8880, -109.7384, -109.6592, -109.6083, -109.5735,
        -109.5493, -109.5323, -109.5205, -109.5121, -109.5063, -109.5022,
        -109.4994, -109.4974, -109.4960, -109.4950, -109.4943, -109.4938,
        -109.4935, -109.4933, -109.4931, -109.4930, -109.4929, -109.4928,
        -109.4928], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018879
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.3969e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4030, -54.4696, -54.5046, -54.5258, -54.5404, -54.5510, -54.5585,
        -54.5639, -54.5677, -54.5704, -54.5724, -54.5737, -54.5747, -54.5753,
        -54.5758, -54.5761, -54.5763, -54.5765, -54.5766, -54.5767, -54.5768,
        -54.5768, -54.5768, -54.5768, -54.5769], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1492e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4950, -109.4943, -109.4938, -109.4935, -109.4933, -109.4931,
        -109.4930, -109.4929, -109.4928, -109.4928], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5761, -54.5763, -54.5765, -54.5766, -54.5767, -54.5768, -54.5768,
        -54.5768, -54.5768, -54.5769], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 3 	 1 	 N2 	 N2 	 0.00014423153430533032

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,  7CCHH
SUBMOLECULES: ['C2H2', 'C', 'C', 'H', 'H']
SUBMOLECULE INDICES: [7, 12, 12, 15, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C2H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6459], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6459], dtype=torch.float64)
E_PRED: tensor([-78.2914, -73.2548, -75.1421, -75.8862, -76.3203, -76.6057, -76.8005,
        -76.9352, -77.0290, -77.0945, -77.1403, -77.1724, -77.1948, -77.2105,
        -77.2216, -77.2293, -77.2347, -77.2385, -77.2412, -77.2430, -77.2444,
        -77.2453, -77.2459, -77.2464, -77.2467], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 108, 108])
mo_energy   ---   torch.Size([2, 108])
dm_ref   ---   torch.Size([1, 2, 108, 108])
rho   ---   torch.Size([1, 2, 1924])
ao_eval   ---   torch.Size([1, 10, 1924, 108])
grid_weights   ---   torch.Size([1, 1924])
-77.2336470993193
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 108])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 108])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.1718e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7605, -37.7970, -37.8089, -37.8153, -37.8196, -37.8226, -37.8247,
        -37.8262, -37.8272, -37.8280, -37.8285, -37.8288, -37.8291, -37.8293,
        -37.8294, -37.8295, -37.8296, -37.8296, -37.8296, -37.8297, -37.8297,
        -37.8297, -37.8297, -37.8297, -37.8297], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.0479e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2769, -0.4472, -0.4692, -0.4797, -0.4861, -0.4903, -0.4932, -0.4952,
        -0.4966, -0.4976, -0.4982, -0.4987, -0.4990, -0.4993, -0.4994, -0.4995,
        -0.4996, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.6031e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.1489e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0005, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CCHH': tensor([-0.6459], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'CCHH': tensor([-77.2293, -77.2347, -77.2385, -77.2412, -77.2430, -77.2444, -77.2453,
        -77.2459, -77.2464, -77.2467], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8295, -37.8296, -37.8296, -37.8296, -37.8297, -37.8297, -37.8297,
        -37.8297, -37.8297, -37.8297], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4995, -0.4996, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 3 	 7 	 C2H2 	 C2H2 	 0.0008049210246810603

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  , 10LiH
SUBMOLECULES: ['HLi', 'Li', 'H']
SUBMOLECULE INDICES: [10, 16, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0923], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0923], dtype=torch.float64)
E_PRED: tensor([-7.9980, -8.0363, -8.0466, -8.0519, -8.0554, -8.0578, -8.0594, -8.0606,
        -8.0614, -8.0620, -8.0624, -8.0627, -8.0629, -8.0630, -8.0631, -8.0632,
        -8.0632, -8.0633, -8.0633, -8.0633, -8.0633, -8.0633, -8.0633, -8.0633,
        -8.0633], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 54, 54])
mo_energy   ---   torch.Size([2, 54])
dm_ref   ---   torch.Size([1, 2, 54, 54])
rho   ---   torch.Size([1, 2, 1271])
ao_eval   ---   torch.Size([1, 10, 1271, 54])
grid_weights   ---   torch.Size([1, 1271])
-8.038079906478378
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 54])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 54])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.1124e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(4.2247e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2815, -0.4485, -0.4700, -0.4802, -0.4864, -0.4905, -0.4934, -0.4953,
        -0.4967, -0.4976, -0.4983, -0.4987, -0.4990, -0.4993, -0.4994, -0.4995,
        -0.4996, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.6025e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.1092e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.1453e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4595, -7.4661, -7.4696, -7.4717, -7.4730, -7.4740, -7.4748, -7.4757,
        -7.4762, -7.4761, -7.4758, -7.4757, -7.4756, -7.4756, -7.4757, -7.4757,
        -7.4757, -7.4757, -7.4758, -7.4758, -7.4758, -7.4758, -7.4758, -7.4758,
        -7.4758], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.2197e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(3.6961e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.5850e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiH': tensor([-0.0923], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiH': tensor([-8.0632, -8.0632, -8.0633, -8.0633, -8.0633, -8.0633, -8.0633, -8.0633,
        -8.0633, -8.0633], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4995, -0.4996, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>), 'Li': tensor([-7.4757, -7.4757, -7.4757, -7.4758, -7.4758, -7.4758, -7.4758, -7.4758,
        -7.4758, -7.4758], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 3 	 10 	 HLi 	 LiH 	 4.783468531382416e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------16----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [16]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4603, -7.4676, -7.4707, -7.4725, -7.4736, -7.4744, -7.4754, -7.4760,
        -7.4761, -7.4759, -7.4757, -7.4756, -7.4756, -7.4756, -7.4757, -7.4757,
        -7.4757, -7.4757, -7.4757, -7.4758, -7.4758, -7.4758, -7.4758, -7.4758,
        -7.4758], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.2178e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(3.7700e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.4359e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4757, -7.4757, -7.4757, -7.4757, -7.4758, -7.4758, -7.4758, -7.4758,
        -7.4758, -7.4758], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 3 	 16 	 Li 	 Li 	 1.2213385487494193e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------13----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1063, -460.1307, -460.1381, -460.1422, -460.1449, -460.1468,
        -460.1482, -460.1492, -460.1499, -460.1503, -460.1507, -460.1509,
        -460.1511, -460.1512, -460.1513, -460.1514, -460.1514, -460.1514,
        -460.1515, -460.1515, -460.1515, -460.1515, -460.1515, -460.1515,
        -460.1515], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.4610e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.4610e-09, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1514, -460.1514, -460.1514, -460.1515, -460.1515, -460.1515,
        -460.1515, -460.1515, -460.1515, -460.1515], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 3 	 13 	 Cl 	 Cl 	 2.8676151360753988e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------18----------------
TRAINING ON MOLECULE:  ,Na
SUBMOLECULES: ['Na']
SUBMOLECULE INDICES: [18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2217, -162.2339, -162.2385, -162.2410, -162.2426, -162.2436,
        -162.2444, -162.2451, -162.2455, -162.2457, -162.2458, -162.2459,
        -162.2459, -162.2459, -162.2460, -162.2460, -162.2460, -162.2460,
        -162.2460, -162.2460, -162.2460, -162.2460, -162.2460, -162.2460,
        -162.2460], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.8341e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.8341e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'Na': tensor([-162.2460, -162.2460, -162.2460, -162.2460, -162.2460, -162.2460,
        -162.2460, -162.2460, -162.2460, -162.2460], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 3 	 18 	 Na 	 Na 	 1.7149167313189546e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7345, -37.7722, -37.7911, -37.8024, -37.8102, -37.8158, -37.8198,
        -37.8226, -37.8247, -37.8261, -37.8271, -37.8279, -37.8284, -37.8287,
        -37.8290, -37.8292, -37.8293, -37.8294, -37.8294, -37.8295, -37.8295,
        -37.8295, -37.8295, -37.8295, -37.8296], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.2798e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.2798e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8292, -37.8293, -37.8294, -37.8294, -37.8295, -37.8295, -37.8295,
        -37.8295, -37.8295, -37.8296], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 3 	 12 	 C 	 C 	 2.8077448748482996e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,  6FF
SUBMOLECULES: ['F2', 'F', 'F']
SUBMOLECULE INDICES: [6, 14, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0618], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0618], dtype=torch.float64)
E_PRED: tensor([-199.5962, -199.5437, -199.5303, -199.5234, -199.5191, -199.5161,
        -199.5140, -199.5126, -199.5116, -199.5109, -199.5104, -199.5100,
        -199.5098, -199.5096, -199.5095, -199.5094, -199.5093, -199.5093,
        -199.5093, -199.5092, -199.5092, -199.5092, -199.5092, -199.5092,
        -199.5092], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 4698])
ao_eval   ---   torch.Size([1, 10, 4698, 78])
grid_weights   ---   torch.Size([1, 4698])
-199.3364659747656
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.2106e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.4212e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6640, -99.6850, -99.6972, -99.7045, -99.7098, -99.7136, -99.7164,
        -99.7184, -99.7199, -99.7209, -99.7217, -99.7222, -99.7226, -99.7228,
        -99.7230, -99.7231, -99.7232, -99.7233, -99.7234, -99.7234, -99.7234,
        -99.7234, -99.7234, -99.7235, -99.7235], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.9386e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.4291e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'FF': tensor([-0.0618], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'FF': tensor([-199.5094, -199.5093, -199.5093, -199.5093, -199.5092, -199.5092,
        -199.5092, -199.5092, -199.5092, -199.5092], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7231, -99.7232, -99.7233, -99.7234, -99.7234, -99.7234, -99.7234,
        -99.7234, -99.7235, -99.7235], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 3 	 6 	 F2 	 F2 	 5.237490571939707e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 13, 13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4685, -920.4318, -920.4231, -920.4185, -920.4156, -920.4135,
        -920.4121, -920.4111, -920.4104, -920.4099, -920.4095, -920.4092,
        -920.4091, -920.4089, -920.4088, -920.4088, -920.4087, -920.4087,
        -920.4087, -920.4087, -920.4086, -920.4086, -920.4086, -920.4086,
        -920.4086], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885617
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.4324e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.8649e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0882, -460.1193, -460.1305, -460.1368, -460.1412, -460.1443,
        -460.1465, -460.1481, -460.1493, -460.1501, -460.1507, -460.1511,
        -460.1514, -460.1516, -460.1518, -460.1519, -460.1520, -460.1520,
        -460.1520, -460.1521, -460.1521, -460.1521, -460.1521, -460.1521,
        -460.1521], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1510e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.8660e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4088, -920.4087, -920.4087, -920.4087, -920.4087, -920.4086,
        -920.4086, -920.4086, -920.4086, -920.4086], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1519, -460.1520, -460.1520, -460.1520, -460.1521, -460.1521,
        -460.1521, -460.1521, -460.1521, -460.1521], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 3 	 5 	 Cl2 	 Cl2 	 2.2777011452950793e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------17----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [17]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4099, -54.4812, -54.5134, -54.5323, -54.5453, -54.5545, -54.5610,
        -54.5657, -54.5690, -54.5714, -54.5730, -54.5742, -54.5750, -54.5756,
        -54.5760, -54.5763, -54.5765, -54.5766, -54.5767, -54.5768, -54.5768,
        -54.5768, -54.5769, -54.5769, -54.5769], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1314e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.1314e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5763, -54.5765, -54.5766, -54.5767, -54.5768, -54.5768, -54.5768,
        -54.5769, -54.5769, -54.5769], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 3 	 17 	 N 	 N 	 3.5515439059340434e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 16, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2697, -107.2788, -107.2432, -107.2334, -107.2268, -107.2232,
        -107.2215, -107.2209, -107.2207, -107.2207, -107.2207, -107.2208,
        -107.2209, -107.2211, -107.2213, -107.2215, -107.2217, -107.2219,
        -107.2221, -107.2222, -107.2224, -107.2225, -107.2225, -107.2226,
        -107.2227], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.305942205048
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.3141e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6720, -99.6967, -99.7059, -99.7112, -99.7148, -99.7174, -99.7193,
        -99.7206, -99.7215, -99.7222, -99.7227, -99.7230, -99.7233, -99.7234,
        -99.7236, -99.7237, -99.7237, -99.7238, -99.7238, -99.7238, -99.7238,
        -99.7238, -99.7238, -99.7239, -99.7239], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.2814e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4601, -7.4674, -7.4705, -7.4723, -7.4734, -7.4743, -7.4752, -7.4760,
        -7.4761, -7.4759, -7.4757, -7.4756, -7.4756, -7.4756, -7.4756, -7.4756,
        -7.4757, -7.4757, -7.4757, -7.4757, -7.4757, -7.4757, -7.4757, -7.4757,
        -7.4757], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.2152e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(3.9635e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2215, -107.2217, -107.2219, -107.2221, -107.2222, -107.2224,
        -107.2225, -107.2225, -107.2226, -107.2227], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7237, -99.7237, -99.7238, -99.7238, -99.7238, -99.7238, -99.7238,
        -99.7238, -99.7239, -99.7239], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4756, -7.4757, -7.4757, -7.4757, -7.4757, -7.4757, -7.4757, -7.4757,
        -7.4757, -7.4757], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 3 	 2 	 FLi 	 LiF 	 0.009292010796531984

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e03)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e03/2022-11-29_10:09:21.574160_0.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e03/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 3 || ,[' rho : 3.081965', ' ae : 61.997030', ' E : 2.661945'] ,|| total loss 45.954944 || CHKPT: _0.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------12----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7568, -37.7947, -37.8073, -37.8143, -37.8189, -37.8221, -37.8244,
        -37.8260, -37.8271, -37.8279, -37.8285, -37.8289, -37.8292, -37.8294,
        -37.8295, -37.8296, -37.8297, -37.8297, -37.8297, -37.8298, -37.8298,
        -37.8298, -37.8298, -37.8298, -37.8298], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.9515e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(4.9515e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8296, -37.8297, -37.8297, -37.8297, -37.8298, -37.8298, -37.8298,
        -37.8298, -37.8298, -37.8298], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 4 	 12 	 C 	 C 	 2.6740611077375375e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------16----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [16]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4629, -7.4700, -7.4724, -7.4736, -7.4744, -7.4754, -7.4760, -7.4761,
        -7.4759, -7.4757, -7.4756, -7.4756, -7.4756, -7.4756, -7.4757, -7.4757,
        -7.4757, -7.4757, -7.4757, -7.4757, -7.4758, -7.4758, -7.4758, -7.4758,
        -7.4758], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.2189e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(3.8001e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.4382e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4757, -7.4757, -7.4757, -7.4757, -7.4757, -7.4758, -7.4758, -7.4758,
        -7.4758, -7.4758], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 4 	 16 	 Li 	 Li 	 1.2354261636499534e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,  7CCHH
SUBMOLECULES: ['C2H2', 'C', 'C', 'H', 'H']
SUBMOLECULE INDICES: [7, 12, 12, 15, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C2H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6459], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6459], dtype=torch.float64)
E_PRED: tensor([-78.3994, -73.3513, -75.1818, -75.9103, -76.3368, -76.6175, -76.8091,
        -76.9417, -77.0340, -77.0984, -77.1435, -77.1750, -77.1971, -77.2126,
        -77.2234, -77.2310, -77.2364, -77.2401, -77.2427, -77.2446, -77.2459,
        -77.2468, -77.2474, -77.2478, -77.2481], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 108, 108])
mo_energy   ---   torch.Size([2, 108])
dm_ref   ---   torch.Size([1, 2, 108, 108])
rho   ---   torch.Size([1, 2, 1924])
ao_eval   ---   torch.Size([1, 10, 1924, 108])
grid_weights   ---   torch.Size([1, 1924])
-77.2336470993193
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 108])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 108])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.1497e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7373, -37.7770, -37.7948, -37.8053, -37.8124, -37.8175, -37.8211,
        -37.8237, -37.8256, -37.8269, -37.8278, -37.8285, -37.8289, -37.8293,
        -37.8295, -37.8297, -37.8298, -37.8298, -37.8299, -37.8299, -37.8300,
        -37.8300, -37.8300, -37.8300, -37.8300], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.8348e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3201, -0.4591, -0.4759, -0.4840, -0.4890, -0.4923, -0.4946, -0.4962,
        -0.4973, -0.4980, -0.4986, -0.4989, -0.4992, -0.4994, -0.4995, -0.4996,
        -0.4997, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.6135e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(7.9630e-09, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CCHH': tensor([-0.6459], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'CCHH': tensor([-77.2310, -77.2364, -77.2401, -77.2427, -77.2446, -77.2459, -77.2468,
        -77.2474, -77.2478, -77.2481], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8297, -37.8298, -37.8298, -37.8299, -37.8299, -37.8300, -37.8300,
        -37.8300, -37.8300, -37.8300], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 4 	 7 	 C2H2 	 C2H2 	 0.0007816742037995382

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  , 11NaNa
SUBMOLECULES: ['Na2', 'Na', 'Na']
SUBMOLECULE INDICES: [11, 18, 18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0273], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0273], dtype=torch.float64)
E_PRED: tensor([-324.5917, -324.5492, -324.5381, -324.5324, -324.5287, -324.5262,
        -324.5245, -324.5233, -324.5225, -324.5219, -324.5215, -324.5212,
        -324.5210, -324.5208, -324.5207, -324.5207, -324.5206, -324.5206,
        -324.5205, -324.5205, -324.5205, -324.5205, -324.5205, -324.5205,
        -324.5205], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 1992])
ao_eval   ---   torch.Size([1, 10, 1992, 94])
grid_weights   ---   torch.Size([1, 1992])
-324.03216786711033
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(4.5521e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.1041e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2225, -162.2349, -162.2399, -162.2426, -162.2444, -162.2456,
        -162.2464, -162.2472, -162.2477, -162.2480, -162.2481, -162.2482,
        -162.2482, -162.2482, -162.2483, -162.2483, -162.2483, -162.2483,
        -162.2483, -162.2483, -162.2483, -162.2483, -162.2483, -162.2483,
        -162.2483], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.2011e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.1083e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NaNa': tensor([-0.0273], dtype=torch.float64), 'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'NaNa': tensor([-324.5207, -324.5206, -324.5206, -324.5205, -324.5205, -324.5205,
        -324.5205, -324.5205, -324.5205, -324.5205], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Na': tensor([-162.2483, -162.2483, -162.2483, -162.2483, -162.2483, -162.2483,
        -162.2483, -162.2483, -162.2483, -162.2483], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 4 	 11 	 Na2 	 Na2 	 2.8801157182333265e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------17----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [17]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4189, -54.4912, -54.5209, -54.5381, -54.5497, -54.5579, -54.5637,
        -54.5678, -54.5708, -54.5728, -54.5743, -54.5753, -54.5760, -54.5766,
        -54.5769, -54.5772, -54.5773, -54.5774, -54.5775, -54.5776, -54.5776,
        -54.5777, -54.5777, -54.5777, -54.5777], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.8240e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.8240e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5772, -54.5773, -54.5774, -54.5775, -54.5776, -54.5776, -54.5777,
        -54.5777, -54.5777, -54.5777], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 4 	 17 	 N 	 N 	 3.093369779268966e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 12, 17, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-94.1272, -93.5762, -93.4270, -93.3649, -93.3187, -93.2886, -93.2668,
        -93.2513, -93.2401, -93.2320, -93.2261, -93.2218, -93.2186, -93.2163,
        -93.2145, -93.2133, -93.2123, -93.2116, -93.2110, -93.2106, -93.2103,
        -93.2101, -93.2099, -93.2098, -93.2097], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633898
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.3787e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7364, -37.7752, -37.7936, -37.8045, -37.8119, -37.8172, -37.8210,
        -37.8237, -37.8257, -37.8271, -37.8280, -37.8287, -37.8292, -37.8296,
        -37.8298, -37.8300, -37.8301, -37.8302, -37.8302, -37.8303, -37.8303,
        -37.8303, -37.8303, -37.8303, -37.8303], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.5514e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3312, -0.4620, -0.4776, -0.4851, -0.4898, -0.4928, -0.4950, -0.4964,
        -0.4974, -0.4982, -0.4986, -0.4990, -0.4992, -0.4994, -0.4995, -0.4996,
        -0.4997, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4998, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.6238e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(7.0892e-09, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4154, -54.4875, -54.5183, -54.5362, -54.5484, -54.5570, -54.5631,
        -54.5675, -54.5706, -54.5728, -54.5743, -54.5754, -54.5761, -54.5767,
        -54.5770, -54.5773, -54.5775, -54.5776, -54.5777, -54.5778, -54.5778,
        -54.5778, -54.5779, -54.5779, -54.5779], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.5563e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2133, -93.2123, -93.2116, -93.2110, -93.2106, -93.2103, -93.2101,
        -93.2099, -93.2098, -93.2097], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8300, -37.8301, -37.8302, -37.8302, -37.8303, -37.8303, -37.8303,
        -37.8303, -37.8303, -37.8303], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4996, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4998,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5773, -54.5775, -54.5776, -54.5777, -54.5778, -54.5778, -54.5778,
        -54.5779, -54.5779, -54.5779], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 4 	 3 	 CHN 	 CNH 	 0.009115081831431776

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  , 10LiH
SUBMOLECULES: ['HLi', 'Li', 'H']
SUBMOLECULE INDICES: [10, 16, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0923], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0923], dtype=torch.float64)
E_PRED: tensor([-7.9777, -8.0278, -8.0414, -8.0484, -8.0530, -8.0561, -8.0583, -8.0598,
        -8.0609, -8.0617, -8.0622, -8.0626, -8.0629, -8.0631, -8.0632, -8.0633,
        -8.0634, -8.0634, -8.0635, -8.0635, -8.0635, -8.0635, -8.0635, -8.0635,
        -8.0635], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 54, 54])
mo_energy   ---   torch.Size([2, 54])
dm_ref   ---   torch.Size([1, 2, 54, 54])
rho   ---   torch.Size([1, 2, 1271])
ao_eval   ---   torch.Size([1, 10, 1271, 54])
grid_weights   ---   torch.Size([1, 1271])
-8.038079906478378
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 54])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 54])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.1009e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(4.2017e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2251, -0.4316, -0.4605, -0.4741, -0.4823, -0.4878, -0.4914, -0.4940,
        -0.4957, -0.4970, -0.4978, -0.4984, -0.4988, -0.4991, -0.4993, -0.4995,
        -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.6231e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.6928e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.1264e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4631, -7.4702, -7.4725, -7.4737, -7.4746, -7.4755, -7.4762, -7.4763,
        -7.4760, -7.4758, -7.4757, -7.4757, -7.4758, -7.4758, -7.4758, -7.4758,
        -7.4758, -7.4759, -7.4759, -7.4759, -7.4759, -7.4759, -7.4759, -7.4759,
        -7.4759], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.2285e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(3.3766e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.5836e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiH': tensor([-0.0923], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiH': tensor([-8.0633, -8.0634, -8.0634, -8.0635, -8.0635, -8.0635, -8.0635, -8.0635,
        -8.0635, -8.0635], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4995, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>), 'Li': tensor([-7.4758, -7.4758, -7.4759, -7.4759, -7.4759, -7.4759, -7.4759, -7.4759,
        -7.4759, -7.4759], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 4 	 10 	 HLi 	 LiH 	 4.602938442521957e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------13----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0979, -460.1276, -460.1377, -460.1434, -460.1473, -460.1500,
        -460.1520, -460.1534, -460.1545, -460.1552, -460.1557, -460.1561,
        -460.1563, -460.1565, -460.1566, -460.1567, -460.1568, -460.1568,
        -460.1569, -460.1569, -460.1569, -460.1569, -460.1569, -460.1569,
        -460.1569], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.5394e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.5394e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1567, -460.1568, -460.1568, -460.1569, -460.1569, -460.1569,
        -460.1569, -460.1569, -460.1569, -460.1569], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 4 	 13 	 Cl 	 Cl 	 1.858580810574697e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 12, 19, 19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.5127, -188.7482, -188.5839, -188.4888, -188.4303, -188.3905,
        -188.3627, -188.3432, -188.3294, -188.3197, -188.3128, -188.3079,
        -188.3044, -188.3019, -188.3001, -188.2989, -188.2980, -188.2973,
        -188.2968, -188.2965, -188.2963, -188.2961, -188.2960, -188.2959,
        -188.2958], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.4017587505662
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.9371e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7375, -37.7770, -37.7949, -37.8054, -37.8126, -37.8177, -37.8214,
        -37.8240, -37.8259, -37.8272, -37.8281, -37.8288, -37.8293, -37.8296,
        -37.8298, -37.8300, -37.8301, -37.8302, -37.8302, -37.8303, -37.8303,
        -37.8303, -37.8303, -37.8303, -37.8303], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.5416e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9524, -74.9977, -75.0178, -75.0294, -75.0373, -75.0430, -75.0470,
        -75.0499, -75.0520, -75.0535, -75.0545, -75.0553, -75.0558, -75.0562,
        -75.0564, -75.0566, -75.0567, -75.0568, -75.0569, -75.0569, -75.0570,
        -75.0570, -75.0570, -75.0570, -75.0570], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.8039e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.2989, -188.2980, -188.2973, -188.2968, -188.2965, -188.2963,
        -188.2961, -188.2960, -188.2959, -188.2958], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8300, -37.8301, -37.8302, -37.8302, -37.8303, -37.8303, -37.8303,
        -37.8303, -37.8303, -37.8303], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0566, -75.0567, -75.0568, -75.0569, -75.0569, -75.0570, -75.0570,
        -75.0570, -75.0570, -75.0570], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 4 	 4 	 CO2 	 CO2 	 0.01712792890788043

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,  6FF
SUBMOLECULES: ['F2', 'F', 'F']
SUBMOLECULE INDICES: [6, 14, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0618], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0618], dtype=torch.float64)
E_PRED: tensor([-199.6266, -199.5579, -199.5401, -199.5310, -199.5253, -199.5214,
        -199.5186, -199.5167, -199.5154, -199.5144, -199.5138, -199.5133,
        -199.5130, -199.5127, -199.5126, -199.5125, -199.5124, -199.5123,
        -199.5123, -199.5122, -199.5122, -199.5122, -199.5122, -199.5122,
        -199.5122], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 4698])
ao_eval   ---   torch.Size([1, 10, 4698, 78])
grid_weights   ---   torch.Size([1, 4698])
-199.3364659747656
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.2151e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.4302e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6678, -99.6916, -99.7024, -99.7089, -99.7134, -99.7166, -99.7190,
        -99.7207, -99.7219, -99.7227, -99.7234, -99.7238, -99.7241, -99.7243,
        -99.7245, -99.7246, -99.7247, -99.7247, -99.7248, -99.7248, -99.7248,
        -99.7248, -99.7248, -99.7249, -99.7249], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.9474e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.4362e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'FF': tensor([-0.0618], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'FF': tensor([-199.5125, -199.5124, -199.5123, -199.5123, -199.5122, -199.5122,
        -199.5122, -199.5122, -199.5122, -199.5122], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7246, -99.7247, -99.7247, -99.7248, -99.7248, -99.7248, -99.7248,
        -99.7248, -99.7249, -99.7249], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 4 	 6 	 F2 	 F2 	 1.0576916900500671e-07

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,  9ClH
SUBMOLECULES: ['HCl', 'Cl', 'H']
SUBMOLECULE INDICES: [9, 13, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='ClH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1712], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1712], dtype=torch.float64)
E_PRED: tensor([-460.7667, -460.8025, -460.8127, -460.8180, -460.8213, -460.8236,
        -460.8252, -460.8263, -460.8271, -460.8276, -460.8280, -460.8282,
        -460.8284, -460.8286, -460.8286, -460.8287, -460.8288, -460.8288,
        -460.8288, -460.8288, -460.8288, -460.8288, -460.8288, -460.8288,
        -460.8289], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 62, 62])
mo_energy   ---   torch.Size([2, 62])
dm_ref   ---   torch.Size([1, 2, 62, 62])
rho   ---   torch.Size([1, 2, 1068])
ao_eval   ---   torch.Size([1, 10, 1068, 62])
grid_weights   ---   torch.Size([1, 1068])
-460.4234538667477
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 62])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 62])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(6.2977e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1022, -460.1290, -460.1376, -460.1423, -460.1455, -460.1478,
        -460.1494, -460.1505, -460.1514, -460.1519, -460.1524, -460.1527,
        -460.1529, -460.1530, -460.1531, -460.1532, -460.1532, -460.1533,
        -460.1533, -460.1533, -460.1533, -460.1533, -460.1533, -460.1533,
        -460.1533], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.9724e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3402, -0.4643, -0.4789, -0.4860, -0.4903, -0.4932, -0.4952, -0.4966,
        -0.4976, -0.4982, -0.4987, -0.4990, -0.4993, -0.4994, -0.4995, -0.4996,
        -0.4997, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.5932e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(6.9318e-09, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClH': tensor([-0.1712], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'ClH': tensor([-460.8287, -460.8288, -460.8288, -460.8288, -460.8288, -460.8288,
        -460.8288, -460.8288, -460.8288, -460.8289], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1532, -460.1532, -460.1533, -460.1533, -460.1533, -460.1533,
        -460.1533, -460.1533, -460.1533, -460.1533], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 4 	 9 	 HCl 	 ClH 	 4.739726335351976e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 16, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2616, -107.2758, -107.2407, -107.2320, -107.2260, -107.2226,
        -107.2211, -107.2207, -107.2207, -107.2208, -107.2210, -107.2211,
        -107.2213, -107.2216, -107.2218, -107.2220, -107.2223, -107.2225,
        -107.2226, -107.2228, -107.2229, -107.2230, -107.2231, -107.2232,
        -107.2233], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.305942205048
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.3137e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6742, -99.6985, -99.7073, -99.7122, -99.7156, -99.7180, -99.7197,
        -99.7210, -99.7218, -99.7225, -99.7229, -99.7232, -99.7235, -99.7236,
        -99.7237, -99.7238, -99.7239, -99.7239, -99.7239, -99.7239, -99.7240,
        -99.7240, -99.7240, -99.7240, -99.7240], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.0830e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4638, -7.4705, -7.4726, -7.4737, -7.4746, -7.4755, -7.4760, -7.4759,
        -7.4757, -7.4755, -7.4755, -7.4755, -7.4755, -7.4755, -7.4755, -7.4755,
        -7.4756, -7.4756, -7.4756, -7.4756, -7.4756, -7.4756, -7.4756, -7.4756,
        -7.4756], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.2108e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(4.3197e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2220, -107.2223, -107.2225, -107.2226, -107.2228, -107.2229,
        -107.2230, -107.2231, -107.2232, -107.2233], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7238, -99.7239, -99.7239, -99.7239, -99.7239, -99.7240, -99.7240,
        -99.7240, -99.7240, -99.7240], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4755, -7.4756, -7.4756, -7.4756, -7.4756, -7.4756, -7.4756, -7.4756,
        -7.4756, -7.4756], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 4 	 2 	 FLi 	 LiF 	 0.009238580691363855

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 17, 17]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.7723, -109.8455, -109.7227, -109.6493, -109.6015, -109.5688,
        -109.5461, -109.5302, -109.5192, -109.5115, -109.5061, -109.5023,
        -109.4997, -109.4979, -109.4966, -109.4957, -109.4951, -109.4946,
        -109.4943, -109.4941, -109.4939, -109.4938, -109.4938, -109.4937,
        -109.4937], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018879
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.3791e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4016, -54.4636, -54.4999, -54.5222, -54.5378, -54.5490, -54.5570,
        -54.5628, -54.5669, -54.5698, -54.5719, -54.5733, -54.5743, -54.5751,
        -54.5756, -54.5759, -54.5762, -54.5763, -54.5764, -54.5765, -54.5766,
        -54.5766, -54.5767, -54.5767, -54.5767], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1832e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4957, -109.4951, -109.4946, -109.4943, -109.4941, -109.4939,
        -109.4938, -109.4938, -109.4937, -109.4937], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5759, -54.5762, -54.5763, -54.5764, -54.5765, -54.5766, -54.5766,
        -54.5767, -54.5767, -54.5767], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 4 	 1 	 N2 	 N2 	 0.00013104419427670814

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------19----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9640, -75.0088, -75.0253, -75.0344, -75.0405, -75.0448, -75.0479,
        -75.0501, -75.0517, -75.0528, -75.0536, -75.0541, -75.0545, -75.0548,
        -75.0550, -75.0551, -75.0552, -75.0553, -75.0553, -75.0553, -75.0554,
        -75.0554, -75.0554, -75.0554, -75.0554], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0286e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.0286e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0551, -75.0552, -75.0553, -75.0553, -75.0553, -75.0554, -75.0554,
        -75.0554, -75.0554, -75.0554], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 4 	 19 	 O 	 O 	 3.31724026215326e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 13, 13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4560, -920.4240, -920.4166, -920.4127, -920.4102, -920.4085,
        -920.4072, -920.4064, -920.4058, -920.4054, -920.4051, -920.4048,
        -920.4047, -920.4046, -920.4045, -920.4044, -920.4044, -920.4044,
        -920.4044, -920.4043, -920.4043, -920.4043, -920.4043, -920.4043,
        -920.4043], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885617
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.3136e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.6273e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0881, -460.1187, -460.1294, -460.1355, -460.1396, -460.1426,
        -460.1447, -460.1462, -460.1473, -460.1481, -460.1487, -460.1491,
        -460.1493, -460.1495, -460.1497, -460.1498, -460.1498, -460.1499,
        -460.1499, -460.1499, -460.1500, -460.1500, -460.1500, -460.1500,
        -460.1500], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.6585e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.6275e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4044, -920.4044, -920.4044, -920.4044, -920.4043, -920.4043,
        -920.4043, -920.4043, -920.4043, -920.4043], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1498, -460.1498, -460.1499, -460.1499, -460.1499, -460.1500,
        -460.1500, -460.1500, -460.1500, -460.1500], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 4 	 5 	 Cl2 	 Cl2 	 2.2465046246562534e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------14----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6654, -99.6886, -99.6998, -99.7064, -99.7111, -99.7145, -99.7169,
        -99.7187, -99.7200, -99.7209, -99.7215, -99.7220, -99.7223, -99.7226,
        -99.7227, -99.7228, -99.7229, -99.7230, -99.7230, -99.7231, -99.7231,
        -99.7231, -99.7231, -99.7231, -99.7231], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.4376e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.4376e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7228, -99.7229, -99.7230, -99.7230, -99.7231, -99.7231, -99.7231,
        -99.7231, -99.7231, -99.7231], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 4 	 14 	 F 	 F 	 2.723625564065303e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------18----------------
TRAINING ON MOLECULE:  ,Na
SUBMOLECULES: ['Na']
SUBMOLECULE INDICES: [18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2227, -162.2347, -162.2389, -162.2412, -162.2426, -162.2436,
        -162.2443, -162.2450, -162.2453, -162.2455, -162.2456, -162.2456,
        -162.2457, -162.2457, -162.2457, -162.2457, -162.2457, -162.2458,
        -162.2458, -162.2458, -162.2458, -162.2458, -162.2458, -162.2458,
        -162.2458], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.3142e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.3142e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'Na': tensor([-162.2457, -162.2457, -162.2458, -162.2458, -162.2458, -162.2458,
        -162.2458, -162.2458, -162.2458, -162.2458], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 4 	 18 	 Na 	 Na 	 1.8210728435532363e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------15----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2787, -0.4477, -0.4695, -0.4798, -0.4862, -0.4904, -0.4932, -0.4952,
        -0.4966, -0.4975, -0.4982, -0.4987, -0.4990, -0.4992, -0.4994, -0.4995,
        -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.5593e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.2247e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.9119e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4995, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 4 	 15 	 H 	 H 	 1.539350602572201e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,  8OC
SUBMOLECULES: ['CO', 'O', 'C']
SUBMOLECULE INDICES: [8, 19, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='OC', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4142], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4142], dtype=torch.float64)
E_PRED: tensor([-113.7453, -113.4246, -113.3479, -113.3069, -113.2820, -113.2648,
        -113.2529, -113.2446, -113.2388, -113.2347, -113.2319, -113.2299,
        -113.2285, -113.2276, -113.2269, -113.2265, -113.2261, -113.2259,
        -113.2257, -113.2256, -113.2256, -113.2255, -113.2255, -113.2254,
        -113.2254], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 3279])
ao_eval   ---   torch.Size([1, 10, 3279, 78])
grid_weights   ---   torch.Size([1, 3279])
-113.201730216515
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6014e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7445, -37.7852, -37.8005, -37.8092, -37.8151, -37.8192, -37.8221,
        -37.8242, -37.8257, -37.8267, -37.8275, -37.8280, -37.8284, -37.8286,
        -37.8288, -37.8289, -37.8290, -37.8291, -37.8291, -37.8291, -37.8292,
        -37.8292, -37.8292, -37.8292, -37.8292], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.5536e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9566, -75.0022, -75.0207, -75.0311, -75.0382, -75.0432, -75.0467,
        -75.0493, -75.0511, -75.0524, -75.0533, -75.0540, -75.0544, -75.0548,
        -75.0550, -75.0551, -75.0553, -75.0553, -75.0554, -75.0554, -75.0555,
        -75.0555, -75.0555, -75.0555, -75.0555], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0152e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'OC': tensor([-0.4142], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'OC': tensor([-113.2265, -113.2261, -113.2259, -113.2257, -113.2256, -113.2256,
        -113.2255, -113.2255, -113.2254, -113.2254], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8289, -37.8290, -37.8291, -37.8291, -37.8291, -37.8292, -37.8292,
        -37.8292, -37.8292, -37.8292], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0551, -75.0553, -75.0553, -75.0554, -75.0554, -75.0555, -75.0555,
        -75.0555, -75.0555, -75.0555], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 4 	 8 	 CO 	 OC 	 0.0012615187059815903

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 15, 15]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-0.9907, -1.0987, -1.1265, -1.1407, -1.1496, -1.1557, -1.1599, -1.1628,
        -1.1649, -1.1663, -1.1673, -1.1680, -1.1685, -1.1689, -1.1691, -1.1693,
        -1.1694, -1.1695, -1.1695, -1.1696, -1.1696, -1.1696, -1.1696, -1.1696,
        -1.1696], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668206
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7092e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.4184e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2170, -0.4289, -0.4591, -0.4732, -0.4817, -0.4873, -0.4911, -0.4937,
        -0.4956, -0.4968, -0.4977, -0.4983, -0.4988, -0.4991, -0.4993, -0.4994,
        -0.4995, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.5636e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.9049e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.3312e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1693, -1.1694, -1.1695, -1.1695, -1.1696, -1.1696, -1.1696, -1.1696,
        -1.1696, -1.1696], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4994, -0.4995, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 4 	 0 	 H2 	 H2 	 4.1113578208179535e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e04)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e04/2022-11-29_10:09:21.574160_1.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e04/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 4 || ,[' rho : 3.067588', ' ae : 61.523056', ' E : 2.518612'] ,|| total loss 45.615880 || CHKPT: _1.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------16----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [16]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4601, -7.4675, -7.4705, -7.4722, -7.4733, -7.4741, -7.4751, -7.4757,
        -7.4757, -7.4754, -7.4753, -7.4752, -7.4752, -7.4752, -7.4752, -7.4753,
        -7.4753, -7.4753, -7.4753, -7.4753, -7.4754, -7.4754, -7.4754, -7.4754,
        -7.4754], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.2038e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(5.2318e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.4082e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4753, -7.4753, -7.4753, -7.4753, -7.4753, -7.4754, -7.4754, -7.4754,
        -7.4754, -7.4754], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 5 	 16 	 Li 	 Li 	 1.699356950470874e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 15, 15]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-0.9752, -1.0926, -1.1228, -1.1382, -1.1479, -1.1545, -1.1591, -1.1623,
        -1.1645, -1.1660, -1.1671, -1.1679, -1.1684, -1.1688, -1.1690, -1.1692,
        -1.1694, -1.1694, -1.1695, -1.1696, -1.1696, -1.1696, -1.1696, -1.1696,
        -1.1696], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668206
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7094e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.4187e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3261, -0.4607, -0.4768, -0.4846, -0.4894, -0.4926, -0.4948, -0.4963,
        -0.4973, -0.4981, -0.4986, -0.4989, -0.4992, -0.4994, -0.4995, -0.4996,
        -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.5671e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(8.3193e-09, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.3321e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1692, -1.1694, -1.1694, -1.1695, -1.1696, -1.1696, -1.1696, -1.1696,
        -1.1696, -1.1696], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 5 	 0 	 H2 	 H2 	 4.15656302662827e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------17----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [17]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4088, -54.4793, -54.5119, -54.5312, -54.5444, -54.5538, -54.5605,
        -54.5653, -54.5687, -54.5711, -54.5728, -54.5740, -54.5748, -54.5754,
        -54.5758, -54.5761, -54.5763, -54.5765, -54.5766, -54.5766, -54.5767,
        -54.5767, -54.5768, -54.5768, -54.5768], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1524e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.1524e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5761, -54.5763, -54.5765, -54.5766, -54.5766, -54.5767, -54.5767,
        -54.5768, -54.5768, -54.5768], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 5 	 17 	 N 	 N 	 3.6142652800754656e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------14----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6680, -99.6919, -99.7025, -99.7088, -99.7132, -99.7163, -99.7186,
        -99.7203, -99.7215, -99.7223, -99.7229, -99.7233, -99.7236, -99.7239,
        -99.7240, -99.7241, -99.7242, -99.7242, -99.7243, -99.7243, -99.7243,
        -99.7243, -99.7243, -99.7244, -99.7244], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(6.6059e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.6059e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7241, -99.7242, -99.7242, -99.7243, -99.7243, -99.7243, -99.7243,
        -99.7243, -99.7244, -99.7244], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 5 	 14 	 F 	 F 	 2.130022324348348e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,  7CCHH
SUBMOLECULES: ['C2H2', 'C', 'C', 'H', 'H']
SUBMOLECULE INDICES: [7, 12, 12, 15, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C2H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6459], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6459], dtype=torch.float64)
E_PRED: tensor([-77.7511, -72.6855, -74.9126, -75.7626, -76.2449, -76.5567, -76.7677,
        -76.9130, -77.0139, -77.0843, -77.1337, -77.1683, -77.1925, -77.2095,
        -77.2214, -77.2298, -77.2356, -77.2397, -77.2426, -77.2447, -77.2461,
        -77.2471, -77.2478, -77.2483, -77.2486], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 108, 108])
mo_energy   ---   torch.Size([2, 108])
dm_ref   ---   torch.Size([1, 2, 108, 108])
rho   ---   torch.Size([1, 2, 1924])
ao_eval   ---   torch.Size([1, 10, 1924, 108])
grid_weights   ---   torch.Size([1, 1924])
-77.2336470993193
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 108])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 108])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.0927e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7435, -37.7842, -37.7999, -37.8089, -37.8149, -37.8192, -37.8222,
        -37.8244, -37.8259, -37.8270, -37.8278, -37.8283, -37.8287, -37.8290,
        -37.8291, -37.8293, -37.8294, -37.8294, -37.8295, -37.8295, -37.8295,
        -37.8295, -37.8296, -37.8296, -37.8296], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.2100e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2196, -0.4298, -0.4595, -0.4735, -0.4819, -0.4874, -0.4912, -0.4938,
        -0.4956, -0.4969, -0.4977, -0.4983, -0.4988, -0.4991, -0.4993, -0.4994,
        -0.4995, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.5761e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.8553e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CCHH': tensor([-0.6459], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'CCHH': tensor([-77.2298, -77.2356, -77.2397, -77.2426, -77.2447, -77.2461, -77.2471,
        -77.2478, -77.2483, -77.2486], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8293, -37.8294, -37.8294, -37.8295, -37.8295, -37.8295, -37.8295,
        -37.8296, -37.8296, -37.8296], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4994, -0.4995, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 5 	 7 	 C2H2 	 C2H2 	 0.0007451836747173299

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 13, 13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4654, -920.4336, -920.4262, -920.4223, -920.4198, -920.4181,
        -920.4169, -920.4160, -920.4154, -920.4150, -920.4147, -920.4145,
        -920.4143, -920.4142, -920.4141, -920.4141, -920.4141, -920.4140,
        -920.4140, -920.4140, -920.4140, -920.4140, -920.4140, -920.4140,
        -920.4140], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885617
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.2630e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.5261e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0999, -460.1281, -460.1375, -460.1427, -460.1462, -460.1487,
        -460.1504, -460.1517, -460.1526, -460.1533, -460.1537, -460.1541,
        -460.1543, -460.1545, -460.1546, -460.1547, -460.1547, -460.1548,
        -460.1548, -460.1548, -460.1548, -460.1548, -460.1548, -460.1548,
        -460.1548], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.2465e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.5293e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4141, -920.4141, -920.4140, -920.4140, -920.4140, -920.4140,
        -920.4140, -920.4140, -920.4140, -920.4140], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1547, -460.1547, -460.1548, -460.1548, -460.1548, -460.1548,
        -460.1548, -460.1548, -460.1548, -460.1548], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 5 	 5 	 Cl2 	 Cl2 	 2.2283266091311457e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------13----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1072, -460.1330, -460.1410, -460.1455, -460.1484, -460.1505,
        -460.1520, -460.1531, -460.1539, -460.1544, -460.1548, -460.1550,
        -460.1552, -460.1554, -460.1555, -460.1555, -460.1556, -460.1556,
        -460.1556, -460.1556, -460.1557, -460.1557, -460.1557, -460.1557,
        -460.1557], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.1148e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(4.1148e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1555, -460.1556, -460.1556, -460.1556, -460.1556, -460.1557,
        -460.1557, -460.1557, -460.1557, -460.1557], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 5 	 13 	 Cl 	 Cl 	 1.3774648793819034e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7501, -37.7899, -37.8040, -37.8119, -37.8172, -37.8209, -37.8235,
        -37.8254, -37.8267, -37.8276, -37.8283, -37.8287, -37.8291, -37.8293,
        -37.8295, -37.8296, -37.8297, -37.8297, -37.8297, -37.8298, -37.8298,
        -37.8298, -37.8298, -37.8298, -37.8298], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.9512e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(4.9512e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8296, -37.8297, -37.8297, -37.8297, -37.8298, -37.8298, -37.8298,
        -37.8298, -37.8298, -37.8298], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 5 	 12 	 C 	 C 	 2.6654242615661372e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 12, 17, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-93.8648, -93.4669, -93.3675, -93.3204, -93.2884, -93.2669, -93.2515,
        -93.2405, -93.2325, -93.2267, -93.2225, -93.2193, -93.2170, -93.2153,
        -93.2141, -93.2131, -93.2124, -93.2119, -93.2115, -93.2111, -93.2109,
        -93.2107, -93.2106, -93.2105, -93.2104], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633898
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.2914e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7408, -37.7813, -37.7979, -37.8075, -37.8140, -37.8186, -37.8219,
        -37.8242, -37.8259, -37.8271, -37.8279, -37.8285, -37.8289, -37.8292,
        -37.8294, -37.8295, -37.8296, -37.8297, -37.8297, -37.8298, -37.8298,
        -37.8298, -37.8298, -37.8298, -37.8298], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.9647e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3087, -0.4560, -0.4742, -0.4829, -0.4882, -0.4918, -0.4942, -0.4959,
        -0.4971, -0.4979, -0.4984, -0.4988, -0.4991, -0.4993, -0.4995, -0.4996,
        -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.5840e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(9.4082e-09, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4261, -54.4976, -54.5255, -54.5413, -54.5520, -54.5595, -54.5648,
        -54.5685, -54.5712, -54.5731, -54.5744, -54.5753, -54.5760, -54.5764,
        -54.5768, -54.5770, -54.5771, -54.5773, -54.5773, -54.5774, -54.5774,
        -54.5774, -54.5775, -54.5775, -54.5775], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0145e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2131, -93.2124, -93.2119, -93.2115, -93.2111, -93.2109, -93.2107,
        -93.2106, -93.2105, -93.2104], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8295, -37.8296, -37.8297, -37.8297, -37.8298, -37.8298, -37.8298,
        -37.8298, -37.8298, -37.8298], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997, -0.4998,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5770, -54.5771, -54.5773, -54.5773, -54.5774, -54.5774, -54.5774,
        -54.5775, -54.5775, -54.5775], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 5 	 3 	 CHN 	 CNH 	 0.008965537324913044

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------18----------------
TRAINING ON MOLECULE:  ,Na
SUBMOLECULES: ['Na']
SUBMOLECULE INDICES: [18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2269, -162.2385, -162.2425, -162.2445, -162.2458, -162.2467,
        -162.2474, -162.2480, -162.2483, -162.2484, -162.2485, -162.2485,
        -162.2486, -162.2486, -162.2486, -162.2486, -162.2486, -162.2487,
        -162.2487, -162.2487, -162.2487, -162.2487, -162.2487, -162.2487,
        -162.2487], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.7556e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.7556e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'Na': tensor([-162.2486, -162.2486, -162.2487, -162.2487, -162.2487, -162.2487,
        -162.2487, -162.2487, -162.2487, -162.2487], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 5 	 18 	 Na 	 Na 	 8.21453239184641e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------15----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2566, -0.4412, -0.4659, -0.4775, -0.4846, -0.4893, -0.4925, -0.4947,
        -0.4962, -0.4973, -0.4980, -0.4986, -0.4989, -0.4992, -0.4994, -0.4995,
        -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.5774e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.4252e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.9155e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4995, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 5 	 15 	 H 	 H 	 1.4774104108760803e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,  6FF
SUBMOLECULES: ['F2', 'F', 'F']
SUBMOLECULE INDICES: [6, 14, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0618], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0618], dtype=torch.float64)
E_PRED: tensor([-199.6336, -199.5615, -199.5429, -199.5333, -199.5272, -199.5231,
        -199.5202, -199.5182, -199.5168, -199.5158, -199.5151, -199.5146,
        -199.5143, -199.5140, -199.5138, -199.5137, -199.5136, -199.5136,
        -199.5135, -199.5135, -199.5135, -199.5134, -199.5134, -199.5134,
        -199.5134], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 4698])
ao_eval   ---   torch.Size([1, 10, 4698, 78])
grid_weights   ---   torch.Size([1, 4698])
-199.3364659747656
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.1905e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.3810e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6671, -99.6894, -99.7009, -99.7078, -99.7127, -99.7162, -99.7188,
        -99.7206, -99.7220, -99.7229, -99.7236, -99.7241, -99.7244, -99.7247,
        -99.7248, -99.7250, -99.7250, -99.7251, -99.7251, -99.7252, -99.7252,
        -99.7252, -99.7252, -99.7252, -99.7252], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.4843e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.3865e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'FF': tensor([-0.0618], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'FF': tensor([-199.5137, -199.5136, -199.5136, -199.5135, -199.5135, -199.5135,
        -199.5134, -199.5134, -199.5134, -199.5134], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7250, -99.7250, -99.7251, -99.7251, -99.7252, -99.7252, -99.7252,
        -99.7252, -99.7252, -99.7252], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 5 	 6 	 F2 	 F2 	 3.1397302363371146e-07

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  , 11NaNa
SUBMOLECULES: ['Na2', 'Na', 'Na']
SUBMOLECULE INDICES: [11, 18, 18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0273], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0273], dtype=torch.float64)
E_PRED: tensor([-324.6194, -324.5605, -324.5451, -324.5372, -324.5322, -324.5288,
        -324.5265, -324.5248, -324.5236, -324.5228, -324.5222, -324.5218,
        -324.5216, -324.5214, -324.5212, -324.5211, -324.5211, -324.5210,
        -324.5210, -324.5210, -324.5209, -324.5209, -324.5209, -324.5209,
        -324.5209], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 1992])
ao_eval   ---   torch.Size([1, 10, 1992, 94])
grid_weights   ---   torch.Size([1, 1992])
-324.03216786711033
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(4.4309e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.8618e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2239, -162.2362, -162.2408, -162.2434, -162.2450, -162.2460,
        -162.2468, -162.2475, -162.2480, -162.2482, -162.2483, -162.2484,
        -162.2484, -162.2484, -162.2484, -162.2485, -162.2485, -162.2485,
        -162.2485, -162.2485, -162.2485, -162.2485, -162.2485, -162.2485,
        -162.2485], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.9655e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.8657e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NaNa': tensor([-0.0273], dtype=torch.float64), 'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'NaNa': tensor([-324.5211, -324.5211, -324.5210, -324.5210, -324.5210, -324.5209,
        -324.5209, -324.5209, -324.5209, -324.5209], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Na': tensor([-162.2485, -162.2485, -162.2485, -162.2485, -162.2485, -162.2485,
        -162.2485, -162.2485, -162.2485, -162.2485], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 5 	 11 	 Na2 	 Na2 	 2.7708053715199007e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,  9ClH
SUBMOLECULES: ['HCl', 'Cl', 'H']
SUBMOLECULE INDICES: [9, 13, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='ClH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1712], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1712], dtype=torch.float64)
E_PRED: tensor([-460.7738, -460.8055, -460.8147, -460.8194, -460.8224, -460.8244,
        -460.8258, -460.8268, -460.8275, -460.8280, -460.8283, -460.8286,
        -460.8287, -460.8289, -460.8289, -460.8290, -460.8290, -460.8291,
        -460.8291, -460.8291, -460.8291, -460.8291, -460.8291, -460.8291,
        -460.8291], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 62, 62])
mo_energy   ---   torch.Size([2, 62])
dm_ref   ---   torch.Size([1, 2, 62, 62])
rho   ---   torch.Size([1, 2, 1068])
ao_eval   ---   torch.Size([1, 10, 1068, 62])
grid_weights   ---   torch.Size([1, 1068])
-460.4234538667477
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 62])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 62])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.9650e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1020, -460.1290, -460.1377, -460.1426, -460.1458, -460.1481,
        -460.1497, -460.1509, -460.1517, -460.1523, -460.1527, -460.1530,
        -460.1533, -460.1534, -460.1535, -460.1536, -460.1536, -460.1537,
        -460.1537, -460.1537, -460.1537, -460.1537, -460.1537, -460.1537,
        -460.1537], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.2846e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3271, -0.4609, -0.4770, -0.4847, -0.4895, -0.4926, -0.4948, -0.4963,
        -0.4973, -0.4981, -0.4986, -0.4989, -0.4992, -0.4994, -0.4995, -0.4996,
        -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.5725e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(8.2223e-09, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClH': tensor([-0.1712], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'ClH': tensor([-460.8290, -460.8290, -460.8291, -460.8291, -460.8291, -460.8291,
        -460.8291, -460.8291, -460.8291, -460.8291], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1536, -460.1536, -460.1537, -460.1537, -460.1537, -460.1537,
        -460.1537, -460.1537, -460.1537, -460.1537], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 5 	 9 	 HCl 	 ClH 	 4.5009056109025096e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  , 10LiH
SUBMOLECULES: ['HLi', 'Li', 'H']
SUBMOLECULE INDICES: [10, 16, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0923], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0923], dtype=torch.float64)
E_PRED: tensor([-7.9993, -8.0368, -8.0468, -8.0521, -8.0555, -8.0578, -8.0594, -8.0605,
        -8.0613, -8.0619, -8.0623, -8.0626, -8.0628, -8.0629, -8.0630, -8.0631,
        -8.0631, -8.0632, -8.0632, -8.0632, -8.0632, -8.0632, -8.0632, -8.0632,
        -8.0632], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 54, 54])
mo_energy   ---   torch.Size([2, 54])
dm_ref   ---   torch.Size([1, 2, 54, 54])
rho   ---   torch.Size([1, 2, 1271])
ao_eval   ---   torch.Size([1, 10, 1271, 54])
grid_weights   ---   torch.Size([1, 1271])
-8.038079906478378
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 54])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 54])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.0121e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(4.0242e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2214, -0.4303, -0.4598, -0.4737, -0.4820, -0.4875, -0.4913, -0.4938,
        -0.4956, -0.4969, -0.4977, -0.4984, -0.4988, -0.4991, -0.4993, -0.4994,
        -0.4995, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.5699e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.8449e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.9382e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4607, -7.4681, -7.4710, -7.4726, -7.4736, -7.4745, -7.4754, -7.4759,
        -7.4759, -7.4756, -7.4754, -7.4754, -7.4754, -7.4754, -7.4754, -7.4755,
        -7.4755, -7.4755, -7.4755, -7.4755, -7.4755, -7.4755, -7.4756, -7.4756,
        -7.4756], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.2173e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(4.5222e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.3732e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiH': tensor([-0.0923], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiH': tensor([-8.0631, -8.0631, -8.0632, -8.0632, -8.0632, -8.0632, -8.0632, -8.0632,
        -8.0632, -8.0632], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4994, -0.4995, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>), 'Li': tensor([-7.4755, -7.4755, -7.4755, -7.4755, -7.4755, -7.4755, -7.4755, -7.4756,
        -7.4756, -7.4756], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 5 	 10 	 HLi 	 LiH 	 4.379856373184248e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 12, 19, 19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.7561, -188.8423, -188.6454, -188.5308, -188.4600, -188.4118,
        -188.3782, -188.3546, -188.3379, -188.3260, -188.3177, -188.3117,
        -188.3075, -188.3045, -188.3024, -188.3008, -188.2997, -188.2990,
        -188.2984, -188.2980, -188.2977, -188.2975, -188.2974, -188.2973,
        -188.2972], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.4017587505662
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.9191e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7410, -37.7816, -37.7981, -37.8077, -37.8141, -37.8187, -37.8219,
        -37.8243, -37.8259, -37.8271, -37.8279, -37.8285, -37.8289, -37.8292,
        -37.8294, -37.8295, -37.8296, -37.8297, -37.8297, -37.8298, -37.8298,
        -37.8298, -37.8298, -37.8298, -37.8298], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.9698e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9464, -74.9842, -75.0070, -75.0213, -75.0312, -75.0384, -75.0436,
        -75.0474, -75.0501, -75.0520, -75.0534, -75.0544, -75.0551, -75.0555,
        -75.0559, -75.0561, -75.0563, -75.0564, -75.0565, -75.0566, -75.0566,
        -75.0566, -75.0566, -75.0567, -75.0567], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.4203e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3008, -188.2997, -188.2990, -188.2984, -188.2980, -188.2977,
        -188.2975, -188.2974, -188.2973, -188.2972], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8295, -37.8296, -37.8297, -37.8297, -37.8298, -37.8298, -37.8298,
        -37.8298, -37.8298, -37.8298], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0561, -75.0563, -75.0564, -75.0565, -75.0566, -75.0566, -75.0566,
        -75.0566, -75.0567, -75.0567], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 5 	 4 	 CO2 	 CO2 	 0.016807210613181935

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 16, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2124, -107.2624, -107.2285, -107.2247, -107.2213, -107.2194,
        -107.2189, -107.2193, -107.2201, -107.2209, -107.2215, -107.2220,
        -107.2224, -107.2228, -107.2231, -107.2234, -107.2237, -107.2240,
        -107.2242, -107.2244, -107.2246, -107.2247, -107.2248, -107.2249,
        -107.2250], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.305942205048
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.3216e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6776, -99.7012, -99.7094, -99.7140, -99.7171, -99.7193, -99.7209,
        -99.7220, -99.7228, -99.7234, -99.7238, -99.7241, -99.7243, -99.7244,
        -99.7245, -99.7246, -99.7247, -99.7247, -99.7247, -99.7247, -99.7248,
        -99.7248, -99.7248, -99.7248, -99.7248], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.9848e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4607, -7.4682, -7.4711, -7.4726, -7.4736, -7.4745, -7.4754, -7.4759,
        -7.4758, -7.4755, -7.4754, -7.4753, -7.4753, -7.4753, -7.4754, -7.4754,
        -7.4754, -7.4754, -7.4754, -7.4755, -7.4755, -7.4755, -7.4755, -7.4755,
        -7.4755], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.2125e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(4.8238e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2234, -107.2237, -107.2240, -107.2242, -107.2244, -107.2246,
        -107.2247, -107.2248, -107.2249, -107.2250], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7246, -99.7247, -99.7247, -99.7247, -99.7247, -99.7248, -99.7248,
        -99.7248, -99.7248, -99.7248], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4754, -7.4754, -7.4754, -7.4754, -7.4755, -7.4755, -7.4755, -7.4755,
        -7.4755, -7.4755], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 5 	 2 	 FLi 	 LiF 	 0.009142742286606994

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 17, 17]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.6757, -109.9010, -109.7510, -109.6687, -109.6156, -109.5793,
        -109.5540, -109.5364, -109.5240, -109.5153, -109.5093, -109.5051,
        -109.5021, -109.5000, -109.4986, -109.4975, -109.4968, -109.4963,
        -109.4960, -109.4957, -109.4956, -109.4954, -109.4954, -109.4953,
        -109.4953], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018879
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.3641e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4256, -54.4970, -54.5248, -54.5407, -54.5514, -54.5589, -54.5642,
        -54.5680, -54.5707, -54.5725, -54.5739, -54.5748, -54.5754, -54.5759,
        -54.5762, -54.5765, -54.5766, -54.5767, -54.5768, -54.5769, -54.5769,
        -54.5769, -54.5769, -54.5769, -54.5770], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1065e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4975, -109.4968, -109.4963, -109.4960, -109.4957, -109.4956,
        -109.4954, -109.4954, -109.4953, -109.4953], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5765, -54.5766, -54.5767, -54.5768, -54.5769, -54.5769, -54.5769,
        -54.5769, -54.5769, -54.5770], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 5 	 1 	 N2 	 N2 	 0.00011943974214448444

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------19----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9556, -75.0011, -75.0199, -75.0308, -75.0380, -75.0432, -75.0469,
        -75.0496, -75.0515, -75.0528, -75.0538, -75.0545, -75.0549, -75.0553,
        -75.0555, -75.0557, -75.0558, -75.0559, -75.0559, -75.0560, -75.0560,
        -75.0560, -75.0560, -75.0560, -75.0560], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.2714e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.2714e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0557, -75.0558, -75.0559, -75.0559, -75.0560, -75.0560, -75.0560,
        -75.0560, -75.0560, -75.0560], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 5 	 19 	 O 	 O 	 2.9681864838808585e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,  8OC
SUBMOLECULES: ['CO', 'O', 'C']
SUBMOLECULE INDICES: [8, 19, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='OC', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4142], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4142], dtype=torch.float64)
E_PRED: tensor([-113.6242, -113.3778, -113.3196, -113.2884, -113.2695, -113.2564,
        -113.2474, -113.2411, -113.2367, -113.2336, -113.2315, -113.2300,
        -113.2290, -113.2283, -113.2278, -113.2274, -113.2272, -113.2270,
        -113.2269, -113.2268, -113.2268, -113.2267, -113.2267, -113.2267,
        -113.2267], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 3279])
ao_eval   ---   torch.Size([1, 10, 3279, 78])
grid_weights   ---   torch.Size([1, 3279])
-113.201730216515
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.5856e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7423, -37.7829, -37.7989, -37.8081, -37.8143, -37.8186, -37.8217,
        -37.8239, -37.8255, -37.8266, -37.8274, -37.8280, -37.8284, -37.8286,
        -37.8288, -37.8290, -37.8291, -37.8291, -37.8292, -37.8292, -37.8292,
        -37.8292, -37.8293, -37.8293, -37.8293], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.5054e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9551, -75.0006, -75.0195, -75.0305, -75.0378, -75.0430, -75.0468,
        -75.0495, -75.0514, -75.0527, -75.0537, -75.0544, -75.0549, -75.0552,
        -75.0554, -75.0556, -75.0557, -75.0558, -75.0559, -75.0559, -75.0559,
        -75.0560, -75.0560, -75.0560, -75.0560], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.3688e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'OC': tensor([-0.4142], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'OC': tensor([-113.2274, -113.2272, -113.2270, -113.2269, -113.2268, -113.2268,
        -113.2267, -113.2267, -113.2267, -113.2267], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8290, -37.8291, -37.8291, -37.8292, -37.8292, -37.8292, -37.8292,
        -37.8293, -37.8293, -37.8293], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0556, -75.0557, -75.0558, -75.0559, -75.0559, -75.0559, -75.0560,
        -75.0560, -75.0560, -75.0560], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 5 	 8 	 CO 	 OC 	 0.0012373981769256835

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e05)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e05/2022-11-29_10:09:21.574160_2.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e05/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 5 || ,[' rho : 3.047075', ' ae : 60.986392', ' E : 2.473580'] ,|| total loss 45.226369 || CHKPT: _2.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------17----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [17]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4128, -54.4843, -54.5155, -54.5339, -54.5463, -54.5552, -54.5615,
        -54.5659, -54.5691, -54.5714, -54.5729, -54.5741, -54.5748, -54.5754,
        -54.5758, -54.5760, -54.5762, -54.5764, -54.5765, -54.5765, -54.5766,
        -54.5766, -54.5766, -54.5766, -54.5767], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1715e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.1715e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5760, -54.5762, -54.5764, -54.5765, -54.5765, -54.5766, -54.5766,
        -54.5766, -54.5766, -54.5767], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 6 	 17 	 N 	 N 	 3.690011043726181e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 12, 19, 19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.9233, -188.9064, -188.6868, -188.5586, -188.4790, -188.4249,
        -188.3871, -188.3606, -188.3418, -188.3286, -188.3192, -188.3125,
        -188.3077, -188.3044, -188.3020, -188.3003, -188.2990, -188.2982,
        -188.2975, -188.2971, -188.2968, -188.2966, -188.2964, -188.2963,
        -188.2962], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.4017587505662
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.9101e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7427, -37.7833, -37.7992, -37.8083, -37.8144, -37.8187, -37.8217,
        -37.8239, -37.8255, -37.8266, -37.8273, -37.8279, -37.8283, -37.8285,
        -37.8287, -37.8289, -37.8290, -37.8290, -37.8291, -37.8291, -37.8291,
        -37.8291, -37.8292, -37.8292, -37.8292], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.5951e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9509, -74.9955, -75.0157, -75.0276, -75.0357, -75.0415, -75.0457,
        -75.0487, -75.0508, -75.0523, -75.0534, -75.0542, -75.0547, -75.0551,
        -75.0553, -75.0555, -75.0557, -75.0558, -75.0558, -75.0559, -75.0559,
        -75.0559, -75.0559, -75.0559, -75.0560], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.4603e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3003, -188.2990, -188.2982, -188.2975, -188.2971, -188.2968,
        -188.2966, -188.2964, -188.2963, -188.2962], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8289, -37.8290, -37.8290, -37.8291, -37.8291, -37.8291, -37.8291,
        -37.8292, -37.8292, -37.8292], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0555, -75.0557, -75.0558, -75.0558, -75.0559, -75.0559, -75.0559,
        -75.0559, -75.0559, -75.0560], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 6 	 4 	 CO2 	 CO2 	 0.016666583911472018

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,  8OC
SUBMOLECULES: ['CO', 'O', 'C']
SUBMOLECULE INDICES: [8, 19, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='OC', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4142], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4142], dtype=torch.float64)
E_PRED: tensor([-113.7305, -113.4194, -113.3450, -113.3054, -113.2812, -113.2646,
        -113.2530, -113.2450, -113.2393, -113.2354, -113.2327, -113.2308,
        -113.2294, -113.2285, -113.2279, -113.2274, -113.2271, -113.2269,
        -113.2267, -113.2266, -113.2265, -113.2265, -113.2265, -113.2264,
        -113.2264], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 3279])
ao_eval   ---   torch.Size([1, 10, 3279, 78])
grid_weights   ---   torch.Size([1, 3279])
-113.201730216515
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.5806e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7375, -37.7772, -37.7947, -37.8049, -37.8119, -37.8168, -37.8204,
        -37.8229, -37.8247, -37.8260, -37.8269, -37.8275, -37.8279, -37.8283,
        -37.8285, -37.8286, -37.8287, -37.8288, -37.8289, -37.8289, -37.8289,
        -37.8289, -37.8290, -37.8290, -37.8290], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.8111e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9655, -75.0098, -75.0260, -75.0351, -75.0411, -75.0454, -75.0484,
        -75.0506, -75.0521, -75.0532, -75.0540, -75.0545, -75.0549, -75.0551,
        -75.0553, -75.0555, -75.0556, -75.0556, -75.0557, -75.0557, -75.0557,
        -75.0557, -75.0558, -75.0558, -75.0558], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.6596e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'OC': tensor([-0.4142], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'OC': tensor([-113.2274, -113.2271, -113.2269, -113.2267, -113.2266, -113.2265,
        -113.2265, -113.2265, -113.2264, -113.2264], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8286, -37.8287, -37.8288, -37.8289, -37.8289, -37.8289, -37.8289,
        -37.8290, -37.8290, -37.8290], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0555, -75.0556, -75.0556, -75.0557, -75.0557, -75.0557, -75.0557,
        -75.0558, -75.0558, -75.0558], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 6 	 8 	 CO 	 OC 	 0.0012289914753971663

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------15----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3175, -0.4584, -0.4755, -0.4837, -0.4888, -0.4922, -0.4945, -0.4961,
        -0.4972, -0.4979, -0.4985, -0.4989, -0.4991, -0.4993, -0.4994, -0.4995,
        -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.5325e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(9.7222e-09, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.9065e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4995, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 6 	 15 	 H 	 H 	 1.8572603875089487e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------16----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [16]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4606, -7.4681, -7.4708, -7.4722, -7.4732, -7.4741, -7.4749, -7.4753,
        -7.4751, -7.4748, -7.4747, -7.4747, -7.4747, -7.4747, -7.4748, -7.4748,
        -7.4748, -7.4748, -7.4748, -7.4748, -7.4748, -7.4749, -7.4749, -7.4749,
        -7.4749], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.1894e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(7.3555e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.3795e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4748, -7.4748, -7.4748, -7.4748, -7.4748, -7.4748, -7.4749, -7.4749,
        -7.4749, -7.4749], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 6 	 16 	 Li 	 Li 	 2.397196244039875e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------19----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9688, -75.0122, -75.0275, -75.0360, -75.0416, -75.0456, -75.0484,
        -75.0504, -75.0519, -75.0529, -75.0536, -75.0541, -75.0544, -75.0547,
        -75.0549, -75.0550, -75.0551, -75.0551, -75.0552, -75.0552, -75.0552,
        -75.0552, -75.0553, -75.0553, -75.0553], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0482e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.0482e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0550, -75.0551, -75.0551, -75.0552, -75.0552, -75.0552, -75.0552,
        -75.0553, -75.0553, -75.0553], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 6 	 19 	 O 	 O 	 3.388221097484814e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 16, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2566, -107.2739, -107.2392, -107.2312, -107.2256, -107.2225,
        -107.2210, -107.2208, -107.2209, -107.2211, -107.2213, -107.2215,
        -107.2218, -107.2221, -107.2223, -107.2226, -107.2228, -107.2231,
        -107.2232, -107.2234, -107.2236, -107.2237, -107.2238, -107.2239,
        -107.2239], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.305942205048
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.3342e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6738, -99.6979, -99.7067, -99.7118, -99.7152, -99.7176, -99.7194,
        -99.7206, -99.7215, -99.7221, -99.7226, -99.7229, -99.7231, -99.7233,
        -99.7234, -99.7235, -99.7236, -99.7236, -99.7236, -99.7236, -99.7237,
        -99.7237, -99.7237, -99.7237, -99.7237], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.5143e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4605, -7.4679, -7.4706, -7.4720, -7.4730, -7.4739, -7.4748, -7.4751,
        -7.4749, -7.4747, -7.4746, -7.4745, -7.4745, -7.4746, -7.4746, -7.4746,
        -7.4746, -7.4747, -7.4747, -7.4747, -7.4747, -7.4747, -7.4747, -7.4747,
        -7.4747], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.1837e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(8.0682e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2226, -107.2228, -107.2231, -107.2232, -107.2234, -107.2236,
        -107.2237, -107.2238, -107.2239, -107.2239], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7235, -99.7236, -99.7236, -99.7236, -99.7236, -99.7237, -99.7237,
        -99.7237, -99.7237, -99.7237], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4746, -7.4746, -7.4747, -7.4747, -7.4747, -7.4747, -7.4747, -7.4747,
        -7.4747, -7.4747], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 6 	 2 	 FLi 	 LiF 	 0.009068653843480191

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7507, -37.7899, -37.8036, -37.8112, -37.8162, -37.8198, -37.8223,
        -37.8241, -37.8254, -37.8263, -37.8269, -37.8273, -37.8276, -37.8279,
        -37.8280, -37.8281, -37.8282, -37.8282, -37.8283, -37.8283, -37.8283,
        -37.8283, -37.8284, -37.8284, -37.8284], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(6.3821e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.3821e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8281, -37.8282, -37.8282, -37.8283, -37.8283, -37.8283, -37.8283,
        -37.8284, -37.8284, -37.8284], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 6 	 12 	 C 	 C 	 3.4477442320665245e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 12, 17, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-93.9322, -93.4944, -93.3816, -93.3305, -93.2947, -93.2709, -93.2539,
        -93.2418, -93.2330, -93.2267, -93.2220, -93.2187, -93.2162, -93.2143,
        -93.2130, -93.2120, -93.2112, -93.2106, -93.2102, -93.2099, -93.2097,
        -93.2095, -93.2093, -93.2092, -93.2091], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633898
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.2169e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7596, -37.7958, -37.8076, -37.8141, -37.8183, -37.8213, -37.8234,
        -37.8248, -37.8259, -37.8266, -37.8271, -37.8275, -37.8278, -37.8279,
        -37.8281, -37.8282, -37.8282, -37.8283, -37.8283, -37.8283, -37.8283,
        -37.8283, -37.8284, -37.8284, -37.8284], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(6.3581e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2655, -0.4438, -0.4673, -0.4784, -0.4852, -0.4897, -0.4928, -0.4949,
        -0.4963, -0.4973, -0.4981, -0.4986, -0.4989, -0.4992, -0.4993, -0.4994,
        -0.4995, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.5228e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.4655e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4236, -54.4950, -54.5231, -54.5392, -54.5500, -54.5576, -54.5630,
        -54.5669, -54.5696, -54.5715, -54.5728, -54.5738, -54.5744, -54.5749,
        -54.5752, -54.5754, -54.5756, -54.5757, -54.5758, -54.5759, -54.5759,
        -54.5759, -54.5759, -54.5760, -54.5760], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2904e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2120, -93.2112, -93.2106, -93.2102, -93.2099, -93.2097, -93.2095,
        -93.2093, -93.2092, -93.2091], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8282, -37.8282, -37.8283, -37.8283, -37.8283, -37.8283, -37.8283,
        -37.8284, -37.8284, -37.8284], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4994, -0.4995, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5754, -54.5756, -54.5757, -54.5758, -54.5759, -54.5759, -54.5759,
        -54.5759, -54.5760, -54.5760], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 6 	 3 	 CHN 	 CNH 	 0.008801418868710857

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  , 10LiH
SUBMOLECULES: ['HLi', 'Li', 'H']
SUBMOLECULE INDICES: [10, 16, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0923], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0923], dtype=torch.float64)
E_PRED: tensor([-7.9467, -8.0145, -8.0325, -8.0418, -8.0478, -8.0520, -8.0549, -8.0570,
        -8.0585, -8.0595, -8.0602, -8.0607, -8.0611, -8.0613, -8.0615, -8.0616,
        -8.0617, -8.0618, -8.0618, -8.0619, -8.0619, -8.0619, -8.0619, -8.0619,
        -8.0619], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 54, 54])
mo_energy   ---   torch.Size([2, 54])
dm_ref   ---   torch.Size([1, 2, 54, 54])
rho   ---   torch.Size([1, 2, 1271])
ao_eval   ---   torch.Size([1, 10, 1271, 54])
grid_weights   ---   torch.Size([1, 1271])
-8.038079906478378
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 54])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 54])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.8860e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.7719e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2344, -0.4344, -0.4621, -0.4751, -0.4830, -0.4882, -0.4917, -0.4941,
        -0.4958, -0.4970, -0.4978, -0.4984, -0.4988, -0.4991, -0.4993, -0.4994,
        -0.4995, -0.4996, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.5195e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.8210e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.6758e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4587, -7.4658, -7.4691, -7.4710, -7.4721, -7.4731, -7.4740, -7.4748,
        -7.4750, -7.4747, -7.4745, -7.4744, -7.4744, -7.4744, -7.4745, -7.4745,
        -7.4745, -7.4745, -7.4745, -7.4746, -7.4746, -7.4746, -7.4746, -7.4746,
        -7.4746], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.1833e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(8.7029e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.0433e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiH': tensor([-0.0923], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiH': tensor([-8.0616, -8.0617, -8.0618, -8.0618, -8.0619, -8.0619, -8.0619, -8.0619,
        -8.0619, -8.0619], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4994, -0.4995, -0.4996, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997,
        -0.4997, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>), 'Li': tensor([-7.4745, -7.4745, -7.4745, -7.4745, -7.4746, -7.4746, -7.4746, -7.4746,
        -7.4746, -7.4746], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 6 	 10 	 HLi 	 LiH 	 5.024176216949628e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  , 11NaNa
SUBMOLECULES: ['Na2', 'Na', 'Na']
SUBMOLECULE INDICES: [11, 18, 18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0273], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0273], dtype=torch.float64)
E_PRED: tensor([-324.5976, -324.5501, -324.5376, -324.5313, -324.5272, -324.5245,
        -324.5225, -324.5212, -324.5203, -324.5196, -324.5191, -324.5188,
        -324.5186, -324.5184, -324.5183, -324.5182, -324.5182, -324.5181,
        -324.5181, -324.5181, -324.5181, -324.5181, -324.5181, -324.5180,
        -324.5180], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 1992])
ao_eval   ---   torch.Size([1, 10, 1992, 94])
grid_weights   ---   torch.Size([1, 1992])
-324.03216786711033
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(4.4651e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.9301e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2268, -162.2379, -162.2415, -162.2434, -162.2445, -162.2454,
        -162.2461, -162.2466, -162.2468, -162.2469, -162.2470, -162.2470,
        -162.2470, -162.2471, -162.2471, -162.2471, -162.2471, -162.2471,
        -162.2471, -162.2471, -162.2471, -162.2471, -162.2471, -162.2471,
        -162.2471], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.9575e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.9361e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NaNa': tensor([-0.0273], dtype=torch.float64), 'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'NaNa': tensor([-324.5182, -324.5182, -324.5181, -324.5181, -324.5181, -324.5181,
        -324.5181, -324.5181, -324.5180, -324.5180], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Na': tensor([-162.2471, -162.2471, -162.2471, -162.2471, -162.2471, -162.2471,
        -162.2471, -162.2471, -162.2471, -162.2471], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 6 	 11 	 Na2 	 Na2 	 2.9371652481443456e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------14----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6756, -99.6994, -99.7078, -99.7125, -99.7158, -99.7181, -99.7197,
        -99.7209, -99.7217, -99.7223, -99.7227, -99.7230, -99.7232, -99.7234,
        -99.7235, -99.7236, -99.7236, -99.7237, -99.7237, -99.7237, -99.7237,
        -99.7237, -99.7237, -99.7238, -99.7238], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.4051e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.4051e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7236, -99.7236, -99.7237, -99.7237, -99.7237, -99.7237, -99.7237,
        -99.7237, -99.7238, -99.7238], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 6 	 14 	 F 	 F 	 2.406725672173801e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 17, 17]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.9399, -109.3247, -109.4643, -109.4813, -109.4850, -109.4867,
        -109.4881, -109.4893, -109.4903, -109.4912, -109.4919, -109.4924,
        -109.4929, -109.4932, -109.4934, -109.4936, -109.4937, -109.4938,
        -109.4938, -109.4939, -109.4939, -109.4939, -109.4939, -109.4940,
        -109.4940], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018879
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.3447e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4044, -54.4718, -54.5059, -54.5265, -54.5407, -54.5508, -54.5581,
        -54.5633, -54.5670, -54.5696, -54.5714, -54.5727, -54.5737, -54.5743,
        -54.5748, -54.5751, -54.5753, -54.5754, -54.5756, -54.5756, -54.5757,
        -54.5757, -54.5757, -54.5758, -54.5758], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3471e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4936, -109.4937, -109.4938, -109.4938, -109.4939, -109.4939,
        -109.4939, -109.4939, -109.4940, -109.4940], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5751, -54.5753, -54.5754, -54.5756, -54.5756, -54.5757, -54.5757,
        -54.5757, -54.5758, -54.5758], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 6 	 1 	 N2 	 N2 	 0.00010919840673003665

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,  7CCHH
SUBMOLECULES: ['C2H2', 'C', 'C', 'H', 'H']
SUBMOLECULE INDICES: [7, 12, 12, 15, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C2H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6459], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6459], dtype=torch.float64)
E_PRED: tensor([-78.3772, -73.3035, -75.1559, -75.8928, -76.3245, -76.6087, -76.8028,
        -76.9372, -77.0307, -77.0961, -77.1418, -77.1737, -77.1962, -77.2119,
        -77.2229, -77.2306, -77.2360, -77.2398, -77.2425, -77.2443, -77.2456,
        -77.2466, -77.2472, -77.2476, -77.2480], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 108, 108])
mo_energy   ---   torch.Size([2, 108])
dm_ref   ---   torch.Size([1, 2, 108, 108])
rho   ---   torch.Size([1, 2, 1924])
ao_eval   ---   torch.Size([1, 10, 1924, 108])
grid_weights   ---   torch.Size([1, 1924])
-77.2336470993193
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 108])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 108])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.0142e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7347, -37.7728, -37.7912, -37.8022, -37.8096, -37.8150, -37.8188,
        -37.8215, -37.8235, -37.8249, -37.8259, -37.8266, -37.8270, -37.8274,
        -37.8276, -37.8278, -37.8279, -37.8280, -37.8281, -37.8281, -37.8281,
        -37.8281, -37.8282, -37.8282, -37.8282], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(6.6518e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3480, -0.4663, -0.4800, -0.4866, -0.4908, -0.4935, -0.4954, -0.4967,
        -0.4976, -0.4982, -0.4987, -0.4990, -0.4992, -0.4994, -0.4995, -0.4995,
        -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.5132e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(8.2254e-09, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CCHH': tensor([-0.6459], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'CCHH': tensor([-77.2306, -77.2360, -77.2398, -77.2425, -77.2443, -77.2456, -77.2466,
        -77.2472, -77.2476, -77.2480], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8278, -37.8279, -37.8280, -37.8281, -37.8281, -37.8281, -37.8281,
        -37.8282, -37.8282, -37.8282], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4995, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 6 	 7 	 C2H2 	 C2H2 	 0.0006860410616693553

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,  9ClH
SUBMOLECULES: ['HCl', 'Cl', 'H']
SUBMOLECULE INDICES: [9, 13, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='ClH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1712], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1712], dtype=torch.float64)
E_PRED: tensor([-460.7298, -460.7870, -460.8030, -460.8111, -460.8163, -460.8198,
        -460.8222, -460.8239, -460.8251, -460.8260, -460.8265, -460.8270,
        -460.8272, -460.8274, -460.8276, -460.8277, -460.8277, -460.8278,
        -460.8278, -460.8278, -460.8279, -460.8279, -460.8279, -460.8279,
        -460.8279], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 62, 62])
mo_energy   ---   torch.Size([2, 62])
dm_ref   ---   torch.Size([1, 2, 62, 62])
rho   ---   torch.Size([1, 2, 1068])
ao_eval   ---   torch.Size([1, 10, 1068, 62])
grid_weights   ---   torch.Size([1, 1068])
-460.4234538667477
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 62])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 62])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.9302e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0902, -460.1210, -460.1318, -460.1380, -460.1421, -460.1451,
        -460.1473, -460.1489, -460.1500, -460.1508, -460.1513, -460.1517,
        -460.1520, -460.1522, -460.1524, -460.1525, -460.1525, -460.1526,
        -460.1526, -460.1526, -460.1527, -460.1527, -460.1527, -460.1527,
        -460.1527], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4998e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2769, -0.4471, -0.4691, -0.4796, -0.4860, -0.4902, -0.4931, -0.4951,
        -0.4965, -0.4975, -0.4981, -0.4986, -0.4989, -0.4992, -0.4993, -0.4994,
        -0.4995, -0.4996, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.5130e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.3857e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClH': tensor([-0.1712], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'ClH': tensor([-460.8277, -460.8277, -460.8278, -460.8278, -460.8278, -460.8279,
        -460.8279, -460.8279, -460.8279, -460.8279], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1525, -460.1525, -460.1526, -460.1526, -460.1526, -460.1527,
        -460.1527, -460.1527, -460.1527, -460.1527], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4994, -0.4995, -0.4996, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997,
        -0.4997, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 6 	 9 	 HCl 	 ClH 	 4.275523070908167e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 13, 13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4416, -920.4214, -920.4171, -920.4149, -920.4135, -920.4125,
        -920.4119, -920.4114, -920.4111, -920.4109, -920.4107, -920.4106,
        -920.4105, -920.4105, -920.4104, -920.4104, -920.4104, -920.4104,
        -920.4103, -920.4103, -920.4103, -920.4103, -920.4103, -920.4103,
        -920.4103], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885617
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.1868e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.3737e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0927, -460.1228, -460.1331, -460.1390, -460.1430, -460.1458,
        -460.1479, -460.1493, -460.1504, -460.1511, -460.1516, -460.1520,
        -460.1523, -460.1525, -460.1526, -460.1527, -460.1528, -460.1528,
        -460.1528, -460.1529, -460.1529, -460.1529, -460.1529, -460.1529,
        -460.1529], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6549e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.3753e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4104, -920.4104, -920.4104, -920.4103, -920.4103, -920.4103,
        -920.4103, -920.4103, -920.4103, -920.4103], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1527, -460.1528, -460.1528, -460.1528, -460.1529, -460.1529,
        -460.1529, -460.1529, -460.1529, -460.1529], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 6 	 5 	 Cl2 	 Cl2 	 2.3266852373099102e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------18----------------
TRAINING ON MOLECULE:  ,Na
SUBMOLECULES: ['Na']
SUBMOLECULE INDICES: [18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2235, -162.2358, -162.2403, -162.2428, -162.2443, -162.2453,
        -162.2461, -162.2468, -162.2472, -162.2474, -162.2475, -162.2476,
        -162.2476, -162.2476, -162.2477, -162.2477, -162.2477, -162.2477,
        -162.2477, -162.2477, -162.2477, -162.2477, -162.2477, -162.2477,
        -162.2477], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.0468e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.0468e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'Na': tensor([-162.2477, -162.2477, -162.2477, -162.2477, -162.2477, -162.2477,
        -162.2477, -162.2477, -162.2477, -162.2477], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 6 	 18 	 Na 	 Na 	 1.1035325010160444e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,  6FF
SUBMOLECULES: ['F2', 'F', 'F']
SUBMOLECULE INDICES: [6, 14, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0618], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0618], dtype=torch.float64)
E_PRED: tensor([-199.6153, -199.5538, -199.5379, -199.5298, -199.5246, -199.5211,
        -199.5186, -199.5169, -199.5157, -199.5149, -199.5143, -199.5138,
        -199.5136, -199.5133, -199.5132, -199.5131, -199.5130, -199.5130,
        -199.5129, -199.5129, -199.5129, -199.5129, -199.5129, -199.5129,
        -199.5129], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 4698])
ao_eval   ---   torch.Size([1, 10, 4698, 78])
grid_weights   ---   torch.Size([1, 4698])
-199.3364659747656
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.1925e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.3850e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6762, -99.7000, -99.7084, -99.7132, -99.7165, -99.7188, -99.7204,
        -99.7216, -99.7224, -99.7230, -99.7235, -99.7238, -99.7240, -99.7241,
        -99.7242, -99.7243, -99.7243, -99.7244, -99.7244, -99.7244, -99.7244,
        -99.7245, -99.7245, -99.7245, -99.7245], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(6.4009e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.3914e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'FF': tensor([-0.0618], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'FF': tensor([-199.5131, -199.5130, -199.5130, -199.5129, -199.5129, -199.5129,
        -199.5129, -199.5129, -199.5129, -199.5129], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7243, -99.7243, -99.7244, -99.7244, -99.7244, -99.7244, -99.7245,
        -99.7245, -99.7245, -99.7245], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 6 	 6 	 F2 	 F2 	 1.0283155313348642e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 15, 15]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0587, -1.1253, -1.1426, -1.1514, -1.1569, -1.1607, -1.1633, -1.1651,
        -1.1664, -1.1673, -1.1679, -1.1683, -1.1686, -1.1688, -1.1690, -1.1691,
        -1.1692, -1.1692, -1.1692, -1.1693, -1.1693, -1.1693, -1.1693, -1.1693,
        -1.1693], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668206
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6641e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3283e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3133, -0.4573, -0.4748, -0.4833, -0.4885, -0.4919, -0.4943, -0.4959,
        -0.4971, -0.4979, -0.4984, -0.4988, -0.4991, -0.4993, -0.4994, -0.4995,
        -0.4996, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.5190e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.0638e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.2321e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1691, -1.1692, -1.1692, -1.1692, -1.1693, -1.1693, -1.1693, -1.1693,
        -1.1693, -1.1693], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4995, -0.4996, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 6 	 0 	 H2 	 H2 	 4.570865877276971e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------13----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0898, -460.1212, -460.1325, -460.1390, -460.1434, -460.1466,
        -460.1489, -460.1505, -460.1517, -460.1526, -460.1532, -460.1536,
        -460.1539, -460.1541, -460.1542, -460.1544, -460.1544, -460.1545,
        -460.1545, -460.1545, -460.1546, -460.1546, -460.1546, -460.1546,
        -460.1546], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.9945e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.9945e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1544, -460.1544, -460.1545, -460.1545, -460.1545, -460.1546,
        -460.1546, -460.1546, -460.1546, -460.1546], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 6 	 13 	 Cl 	 Cl 	 1.0133949763118388e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e06)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e06/2022-11-29_10:09:21.574160_0.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e06/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 6 || ,[' rho : 3.029855', ' ae : 60.625822', ' E : 2.640565'] ,|| total loss 44.960152 || CHKPT: _0.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------11----------------
TRAINING ON MOLECULE:  , 11NaNa
SUBMOLECULES: ['Na2', 'Na', 'Na']
SUBMOLECULE INDICES: [11, 18, 18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0273], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0273], dtype=torch.float64)
E_PRED: tensor([-324.6440, -324.5701, -324.5509, -324.5410, -324.5347, -324.5304,
        -324.5275, -324.5254, -324.5239, -324.5229, -324.5222, -324.5217,
        -324.5214, -324.5211, -324.5209, -324.5208, -324.5207, -324.5207,
        -324.5206, -324.5206, -324.5206, -324.5206, -324.5206, -324.5205,
        -324.5205], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 1992])
ao_eval   ---   torch.Size([1, 10, 1992, 94])
grid_weights   ---   torch.Size([1, 1992])
-324.03216786711033
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(4.4666e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.9332e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2238, -162.2362, -162.2407, -162.2433, -162.2449, -162.2459,
        -162.2467, -162.2474, -162.2478, -162.2481, -162.2481, -162.2482,
        -162.2482, -162.2483, -162.2483, -162.2483, -162.2483, -162.2483,
        -162.2483, -162.2483, -162.2484, -162.2484, -162.2484, -162.2484,
        -162.2484], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.1661e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.9374e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NaNa': tensor([-0.0273], dtype=torch.float64), 'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'NaNa': tensor([-324.5208, -324.5207, -324.5207, -324.5206, -324.5206, -324.5206,
        -324.5206, -324.5206, -324.5205, -324.5205], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Na': tensor([-162.2483, -162.2483, -162.2483, -162.2483, -162.2483, -162.2484,
        -162.2484, -162.2484, -162.2484, -162.2484], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 7 	 11 	 Na2 	 Na2 	 2.8801818711203138e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  , 10LiH
SUBMOLECULES: ['HLi', 'Li', 'H']
SUBMOLECULE INDICES: [10, 16, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0923], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0923], dtype=torch.float64)
E_PRED: tensor([-7.9501, -8.0158, -8.0333, -8.0424, -8.0482, -8.0523, -8.0551, -8.0571,
        -8.0585, -8.0595, -8.0602, -8.0607, -8.0611, -8.0613, -8.0615, -8.0616,
        -8.0617, -8.0618, -8.0618, -8.0618, -8.0619, -8.0619, -8.0619, -8.0619,
        -8.0619], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 54, 54])
mo_energy   ---   torch.Size([2, 54])
dm_ref   ---   torch.Size([1, 2, 54, 54])
rho   ---   torch.Size([1, 2, 1271])
ao_eval   ---   torch.Size([1, 10, 1271, 54])
grid_weights   ---   torch.Size([1, 1271])
-8.038079906478378
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 54])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 54])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.8543e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.7085e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3061, -0.4553, -0.4737, -0.4826, -0.4880, -0.4916, -0.4941, -0.4958,
        -0.4970, -0.4978, -0.4984, -0.4988, -0.4990, -0.4992, -0.4994, -0.4995,
        -0.4995, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.5125e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.1337e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.6110e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4586, -7.4657, -7.4690, -7.4709, -7.4721, -7.4730, -7.4739, -7.4747,
        -7.4749, -7.4746, -7.4744, -7.4743, -7.4743, -7.4743, -7.4744, -7.4744,
        -7.4744, -7.4744, -7.4745, -7.4745, -7.4745, -7.4745, -7.4745, -7.4745,
        -7.4745], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.1885e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(9.1659e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.9889e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiH': tensor([-0.0923], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiH': tensor([-8.0616, -8.0617, -8.0618, -8.0618, -8.0618, -8.0619, -8.0619, -8.0619,
        -8.0619, -8.0619], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4995, -0.4995, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>), 'Li': tensor([-7.4744, -7.4744, -7.4744, -7.4745, -7.4745, -7.4745, -7.4745, -7.4745,
        -7.4745, -7.4745], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 7 	 10 	 HLi 	 LiH 	 4.882693734670824e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------16----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [16]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4583, -7.4652, -7.4686, -7.4706, -7.4719, -7.4728, -7.4737, -7.4746,
        -7.4749, -7.4746, -7.4744, -7.4743, -7.4743, -7.4743, -7.4743, -7.4744,
        -7.4744, -7.4744, -7.4744, -7.4744, -7.4744, -7.4745, -7.4745, -7.4745,
        -7.4745], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.1872e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(9.2828e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.3754e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4744, -7.4744, -7.4744, -7.4744, -7.4744, -7.4744, -7.4745, -7.4745,
        -7.4745, -7.4745], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 7 	 16 	 Li 	 Li 	 3.020875901856423e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------13----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1048, -460.1302, -460.1381, -460.1425, -460.1454, -460.1475,
        -460.1490, -460.1500, -460.1507, -460.1513, -460.1516, -460.1519,
        -460.1521, -460.1522, -460.1523, -460.1524, -460.1524, -460.1525,
        -460.1525, -460.1525, -460.1525, -460.1525, -460.1525, -460.1525,
        -460.1525], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4139e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.4139e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1524, -460.1524, -460.1525, -460.1525, -460.1525, -460.1525,
        -460.1525, -460.1525, -460.1525, -460.1525], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 7 	 13 	 Cl 	 Cl 	 4.773722649055927e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------19----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9600, -75.0050, -75.0225, -75.0324, -75.0390, -75.0437, -75.0471,
        -75.0495, -75.0512, -75.0524, -75.0533, -75.0539, -75.0543, -75.0546,
        -75.0548, -75.0550, -75.0551, -75.0551, -75.0552, -75.0552, -75.0552,
        -75.0553, -75.0553, -75.0553, -75.0553], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0495e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.0495e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0550, -75.0551, -75.0551, -75.0552, -75.0552, -75.0552, -75.0553,
        -75.0553, -75.0553, -75.0553], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 7 	 19 	 O 	 O 	 3.37699110723318e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,  9ClH
SUBMOLECULES: ['HCl', 'Cl', 'H']
SUBMOLECULE INDICES: [9, 13, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='ClH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1712], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1712], dtype=torch.float64)
E_PRED: tensor([-460.7472, -460.7930, -460.8058, -460.8124, -460.8166, -460.8195,
        -460.8215, -460.8228, -460.8238, -460.8245, -460.8249, -460.8253,
        -460.8255, -460.8257, -460.8258, -460.8259, -460.8259, -460.8260,
        -460.8260, -460.8260, -460.8260, -460.8260, -460.8260, -460.8260,
        -460.8260], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 62, 62])
mo_energy   ---   torch.Size([2, 62])
dm_ref   ---   torch.Size([1, 2, 62, 62])
rho   ---   torch.Size([1, 2, 1068])
ao_eval   ---   torch.Size([1, 10, 1068, 62])
grid_weights   ---   torch.Size([1, 1068])
-460.4234538667477
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 62])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 62])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.7360e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1063, -460.1304, -460.1377, -460.1418, -460.1444, -460.1463,
        -460.1477, -460.1486, -460.1493, -460.1498, -460.1501, -460.1504,
        -460.1505, -460.1506, -460.1507, -460.1508, -460.1508, -460.1509,
        -460.1509, -460.1509, -460.1509, -460.1509, -460.1509, -460.1509,
        -460.1509], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.8500e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2679, -0.4445, -0.4677, -0.4787, -0.4854, -0.4898, -0.4928, -0.4949,
        -0.4963, -0.4973, -0.4981, -0.4985, -0.4989, -0.4991, -0.4993, -0.4994,
        -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.4921e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.5190e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClH': tensor([-0.1712], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'ClH': tensor([-460.8259, -460.8259, -460.8260, -460.8260, -460.8260, -460.8260,
        -460.8260, -460.8260, -460.8260, -460.8260], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1508, -460.1508, -460.1509, -460.1509, -460.1509, -460.1509,
        -460.1509, -460.1509, -460.1509, -460.1509], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4994, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4997, -0.4997,
        -0.4997, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 7 	 9 	 HCl 	 ClH 	 4.119014385101775e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------15----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2635, -0.4432, -0.4669, -0.4782, -0.4850, -0.4896, -0.4927, -0.4948,
        -0.4963, -0.4973, -0.4980, -0.4985, -0.4989, -0.4991, -0.4993, -0.4994,
        -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.4883e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.5706e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.8977e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4994, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4997, -0.4997,
        -0.4997, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 7 	 15 	 H 	 H 	 2.502887018688926e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------18----------------
TRAINING ON MOLECULE:  ,Na
SUBMOLECULES: ['Na']
SUBMOLECULE INDICES: [18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2287, -162.2388, -162.2419, -162.2434, -162.2444, -162.2452,
        -162.2458, -162.2461, -162.2463, -162.2464, -162.2464, -162.2464,
        -162.2465, -162.2465, -162.2465, -162.2465, -162.2465, -162.2465,
        -162.2465, -162.2466, -162.2466, -162.2466, -162.2466, -162.2466,
        -162.2466], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(6.8941e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.8941e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'Na': tensor([-162.2465, -162.2465, -162.2465, -162.2465, -162.2466, -162.2466,
        -162.2466, -162.2466, -162.2466, -162.2466], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 7 	 18 	 Na 	 Na 	 1.5115372846540795e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 17, 17]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.6665, -109.9009, -109.7503, -109.6679, -109.6147, -109.5784,
        -109.5531, -109.5354, -109.5230, -109.5143, -109.5083, -109.5040,
        -109.5011, -109.4990, -109.4975, -109.4965, -109.4958, -109.4953,
        -109.4950, -109.4947, -109.4945, -109.4944, -109.4943, -109.4943,
        -109.4942], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018879
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.3363e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4375, -54.5059, -54.5307, -54.5445, -54.5537, -54.5602, -54.5647,
        -54.5679, -54.5702, -54.5718, -54.5729, -54.5737, -54.5743, -54.5747,
        -54.5750, -54.5751, -54.5753, -54.5754, -54.5754, -54.5755, -54.5755,
        -54.5755, -54.5756, -54.5756, -54.5756], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3564e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4965, -109.4958, -109.4953, -109.4950, -109.4947, -109.4945,
        -109.4944, -109.4943, -109.4943, -109.4942], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5751, -54.5753, -54.5754, -54.5754, -54.5755, -54.5755, -54.5755,
        -54.5756, -54.5756, -54.5756], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 7 	 1 	 N2 	 N2 	 0.00010178947225228238

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 16, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2394, -107.2695, -107.2349, -107.2287, -107.2241, -107.2215,
        -107.2204, -107.2204, -107.2208, -107.2212, -107.2216, -107.2219,
        -107.2223, -107.2226, -107.2229, -107.2232, -107.2235, -107.2237,
        -107.2240, -107.2241, -107.2243, -107.2244, -107.2245, -107.2246,
        -107.2247], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.305942205048
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.3385e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6740, -99.6980, -99.7068, -99.7118, -99.7152, -99.7177, -99.7194,
        -99.7207, -99.7215, -99.7222, -99.7226, -99.7229, -99.7232, -99.7233,
        -99.7234, -99.7235, -99.7236, -99.7236, -99.7236, -99.7237, -99.7237,
        -99.7237, -99.7237, -99.7237, -99.7237], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.4771e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4605, -7.4679, -7.4705, -7.4719, -7.4728, -7.4738, -7.4746, -7.4748,
        -7.4746, -7.4743, -7.4742, -7.4742, -7.4742, -7.4743, -7.4743, -7.4743,
        -7.4743, -7.4744, -7.4744, -7.4744, -7.4744, -7.4744, -7.4744, -7.4744,
        -7.4744], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.1798e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(9.5922e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2232, -107.2235, -107.2237, -107.2240, -107.2241, -107.2243,
        -107.2244, -107.2245, -107.2246, -107.2247], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7235, -99.7236, -99.7236, -99.7236, -99.7237, -99.7237, -99.7237,
        -99.7237, -99.7237, -99.7237], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4743, -7.4743, -7.4744, -7.4744, -7.4744, -7.4744, -7.4744, -7.4744,
        -7.4744, -7.4744], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 7 	 2 	 FLi 	 LiF 	 0.008973876543369421

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 13, 13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4444, -920.4194, -920.4138, -920.4108, -920.4090, -920.4077,
        -920.4068, -920.4062, -920.4057, -920.4054, -920.4052, -920.4051,
        -920.4049, -920.4049, -920.4048, -920.4048, -920.4047, -920.4047,
        -920.4047, -920.4047, -920.4047, -920.4047, -920.4047, -920.4047,
        -920.4047], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885617
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.0428e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.0856e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0846, -460.1162, -460.1277, -460.1343, -460.1388, -460.1420,
        -460.1443, -460.1460, -460.1472, -460.1481, -460.1487, -460.1492,
        -460.1495, -460.1497, -460.1498, -460.1499, -460.1500, -460.1501,
        -460.1501, -460.1501, -460.1502, -460.1502, -460.1502, -460.1502,
        -460.1502], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.1805e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.0859e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4048, -920.4047, -920.4047, -920.4047, -920.4047, -920.4047,
        -920.4047, -920.4047, -920.4047, -920.4047], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1499, -460.1500, -460.1501, -460.1501, -460.1501, -460.1502,
        -460.1502, -460.1502, -460.1502, -460.1502], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 7 	 5 	 Cl2 	 Cl2 	 2.2430971205521025e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,  6FF
SUBMOLECULES: ['F2', 'F', 'F']
SUBMOLECULE INDICES: [6, 14, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0618], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0618], dtype=torch.float64)
E_PRED: tensor([-199.6323, -199.5603, -199.5415, -199.5319, -199.5258, -199.5217,
        -199.5188, -199.5167, -199.5153, -199.5143, -199.5136, -199.5131,
        -199.5128, -199.5125, -199.5123, -199.5122, -199.5121, -199.5121,
        -199.5120, -199.5120, -199.5120, -199.5120, -199.5120, -199.5119,
        -199.5119], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 4698])
ao_eval   ---   torch.Size([1, 10, 4698, 78])
grid_weights   ---   torch.Size([1, 4698])
-199.3364659747656
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.1433e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.2867e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6655, -99.6856, -99.6976, -99.7050, -99.7102, -99.7140, -99.7168,
        -99.7189, -99.7203, -99.7214, -99.7221, -99.7227, -99.7230, -99.7233,
        -99.7235, -99.7236, -99.7237, -99.7238, -99.7238, -99.7239, -99.7239,
        -99.7239, -99.7239, -99.7239, -99.7239], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.2337e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.2939e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'FF': tensor([-0.0618], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'FF': tensor([-199.5122, -199.5121, -199.5121, -199.5120, -199.5120, -199.5120,
        -199.5120, -199.5120, -199.5119, -199.5119], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7236, -99.7237, -99.7238, -99.7238, -99.7239, -99.7239, -99.7239,
        -99.7239, -99.7239, -99.7239], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 7 	 6 	 F2 	 F2 	 1.1980066913289453e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 15, 15]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0386, -1.1173, -1.1377, -1.1481, -1.1547, -1.1591, -1.1622, -1.1644,
        -1.1659, -1.1669, -1.1676, -1.1682, -1.1685, -1.1688, -1.1689, -1.1691,
        -1.1692, -1.1692, -1.1693, -1.1693, -1.1693, -1.1693, -1.1693, -1.1693,
        -1.1693], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668206
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6566e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3132e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2417, -0.4367, -0.4633, -0.4759, -0.4835, -0.4885, -0.4919, -0.4943,
        -0.4959, -0.4970, -0.4978, -0.4984, -0.4988, -0.4991, -0.4992, -0.4994,
        -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.4874e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.8100e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.2106e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1691, -1.1692, -1.1692, -1.1693, -1.1693, -1.1693, -1.1693, -1.1693,
        -1.1693, -1.1693], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4997, -0.4997,
        -0.4997, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 7 	 0 	 H2 	 H2 	 4.412768884899737e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 12, 19, 19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.4900, -188.7394, -188.5794, -188.4864, -188.4293, -188.3903,
        -188.3632, -188.3441, -188.3306, -188.3210, -188.3142, -188.3094,
        -188.3060, -188.3036, -188.3018, -188.3006, -188.2997, -188.2991,
        -188.2986, -188.2983, -188.2981, -188.2979, -188.2978, -188.2977,
        -188.2976], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.4017587505662
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.8843e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7346, -37.7723, -37.7908, -37.8018, -37.8094, -37.8148, -37.8187,
        -37.8214, -37.8234, -37.8248, -37.8258, -37.8265, -37.8270, -37.8274,
        -37.8276, -37.8278, -37.8279, -37.8280, -37.8281, -37.8281, -37.8281,
        -37.8281, -37.8282, -37.8282, -37.8282], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(6.6557e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9682, -75.0116, -75.0271, -75.0358, -75.0415, -75.0456, -75.0484,
        -75.0505, -75.0520, -75.0530, -75.0537, -75.0542, -75.0546, -75.0548,
        -75.0550, -75.0552, -75.0552, -75.0553, -75.0553, -75.0554, -75.0554,
        -75.0554, -75.0554, -75.0554, -75.0554], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0198e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3006, -188.2997, -188.2991, -188.2986, -188.2983, -188.2981,
        -188.2979, -188.2978, -188.2977, -188.2976], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8278, -37.8279, -37.8280, -37.8281, -37.8281, -37.8281, -37.8281,
        -37.8282, -37.8282, -37.8282], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0552, -75.0552, -75.0553, -75.0553, -75.0554, -75.0554, -75.0554,
        -75.0554, -75.0554, -75.0554], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 7 	 4 	 CO2 	 CO2 	 0.016243538833674652

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------14----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6696, -99.6935, -99.7036, -99.7095, -99.7136, -99.7165, -99.7186,
        -99.7201, -99.7212, -99.7220, -99.7226, -99.7230, -99.7232, -99.7234,
        -99.7236, -99.7237, -99.7237, -99.7238, -99.7238, -99.7238, -99.7239,
        -99.7239, -99.7239, -99.7239, -99.7239], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.2386e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.2386e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7237, -99.7237, -99.7238, -99.7238, -99.7238, -99.7239, -99.7239,
        -99.7239, -99.7239, -99.7239], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 7 	 14 	 F 	 F 	 2.3409363639088763e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------17----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [17]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4183, -54.4898, -54.5193, -54.5363, -54.5478, -54.5559, -54.5617,
        -54.5658, -54.5687, -54.5708, -54.5722, -54.5732, -54.5740, -54.5745,
        -54.5748, -54.5751, -54.5752, -54.5753, -54.5754, -54.5755, -54.5755,
        -54.5756, -54.5756, -54.5756, -54.5756], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3636e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.3636e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5751, -54.5752, -54.5753, -54.5754, -54.5755, -54.5755, -54.5756,
        -54.5756, -54.5756, -54.5756], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 7 	 17 	 N 	 N 	 4.32991614082243e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 12, 17, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-94.0606, -93.5478, -93.4102, -93.3522, -93.3095, -93.2817, -93.2618,
        -93.2476, -93.2374, -93.2301, -93.2247, -93.2209, -93.2180, -93.2159,
        -93.2144, -93.2133, -93.2124, -93.2118, -93.2113, -93.2110, -93.2107,
        -93.2105, -93.2104, -93.2102, -93.2102], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633898
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.1484e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7466, -37.7865, -37.8011, -37.8093, -37.8147, -37.8186, -37.8213,
        -37.8233, -37.8247, -37.8256, -37.8263, -37.8268, -37.8271, -37.8274,
        -37.8275, -37.8277, -37.8277, -37.8278, -37.8278, -37.8279, -37.8279,
        -37.8279, -37.8279, -37.8279, -37.8279], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(6.8535e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3410, -0.4645, -0.4789, -0.4860, -0.4903, -0.4932, -0.4951, -0.4965,
        -0.4975, -0.4981, -0.4986, -0.4989, -0.4992, -0.4993, -0.4994, -0.4995,
        -0.4996, -0.4996, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.4821e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(9.3048e-09, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4156, -54.4870, -54.5173, -54.5349, -54.5468, -54.5552, -54.5612,
        -54.5654, -54.5685, -54.5706, -54.5721, -54.5732, -54.5739, -54.5744,
        -54.5748, -54.5751, -54.5752, -54.5754, -54.5754, -54.5755, -54.5756,
        -54.5756, -54.5756, -54.5756, -54.5756], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3612e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2133, -93.2124, -93.2118, -93.2113, -93.2110, -93.2107, -93.2105,
        -93.2104, -93.2102, -93.2102], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8277, -37.8277, -37.8278, -37.8278, -37.8279, -37.8279, -37.8279,
        -37.8279, -37.8279, -37.8279], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997,
        -0.4997, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5751, -54.5752, -54.5754, -54.5754, -54.5755, -54.5756, -54.5756,
        -54.5756, -54.5756, -54.5756], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 7 	 3 	 CHN 	 CNH 	 0.008636620019184194

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,  8OC
SUBMOLECULES: ['CO', 'O', 'C']
SUBMOLECULE INDICES: [8, 19, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='OC', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4142], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4142], dtype=torch.float64)
E_PRED: tensor([-113.6901, -113.4033, -113.3351, -113.2987, -113.2766, -113.2613,
        -113.2507, -113.2433, -113.2381, -113.2345, -113.2320, -113.2303,
        -113.2290, -113.2282, -113.2276, -113.2272, -113.2269, -113.2267,
        -113.2265, -113.2264, -113.2264, -113.2263, -113.2263, -113.2263,
        -113.2263], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 3279])
ao_eval   ---   torch.Size([1, 10, 3279, 78])
grid_weights   ---   torch.Size([1, 3279])
-113.201730216515
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.5463e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7410, -37.7813, -37.7973, -37.8065, -37.8127, -37.8171, -37.8203,
        -37.8225, -37.8241, -37.8252, -37.8260, -37.8265, -37.8269, -37.8272,
        -37.8274, -37.8275, -37.8276, -37.8277, -37.8278, -37.8278, -37.8278,
        -37.8278, -37.8278, -37.8278, -37.8279], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(6.9598e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9620, -75.0066, -75.0236, -75.0331, -75.0395, -75.0441, -75.0473,
        -75.0496, -75.0512, -75.0524, -75.0532, -75.0538, -75.0542, -75.0545,
        -75.0547, -75.0549, -75.0550, -75.0550, -75.0551, -75.0551, -75.0551,
        -75.0551, -75.0552, -75.0552, -75.0552], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0683e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'OC': tensor([-0.4142], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'OC': tensor([-113.2272, -113.2269, -113.2267, -113.2265, -113.2264, -113.2264,
        -113.2263, -113.2263, -113.2263, -113.2263], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8275, -37.8276, -37.8277, -37.8278, -37.8278, -37.8278, -37.8278,
        -37.8278, -37.8278, -37.8279], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0549, -75.0550, -75.0550, -75.0551, -75.0551, -75.0551, -75.0551,
        -75.0552, -75.0552, -75.0552], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 7 	 8 	 CO 	 OC 	 0.001176763385141602

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7444, -37.7846, -37.7997, -37.8082, -37.8139, -37.8180, -37.8208,
        -37.8229, -37.8243, -37.8254, -37.8261, -37.8266, -37.8269, -37.8272,
        -37.8274, -37.8275, -37.8276, -37.8276, -37.8277, -37.8277, -37.8277,
        -37.8277, -37.8278, -37.8278, -37.8278], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.0320e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.0320e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8275, -37.8276, -37.8276, -37.8277, -37.8277, -37.8277, -37.8277,
        -37.8278, -37.8278, -37.8278], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 7 	 12 	 C 	 C 	 3.792076058001053e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,  7CCHH
SUBMOLECULES: ['C2H2', 'C', 'C', 'H', 'H']
SUBMOLECULE INDICES: [7, 12, 12, 15, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C2H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6459], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6459], dtype=torch.float64)
E_PRED: tensor([-78.3950, -74.0165, -75.4952, -76.1041, -76.4662, -76.7062, -76.8705,
        -76.9845, -77.0640, -77.1195, -77.1583, -77.1855, -77.2046, -77.2179,
        -77.2273, -77.2338, -77.2384, -77.2416, -77.2439, -77.2455, -77.2466,
        -77.2473, -77.2479, -77.2482, -77.2485], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 108, 108])
mo_energy   ---   torch.Size([2, 108])
dm_ref   ---   torch.Size([1, 2, 108, 108])
rho   ---   torch.Size([1, 2, 1924])
ao_eval   ---   torch.Size([1, 10, 1924, 108])
grid_weights   ---   torch.Size([1, 1924])
-77.2336470993193
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 108])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 108])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.9650e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7498, -37.7889, -37.8027, -37.8104, -37.8155, -37.8191, -37.8216,
        -37.8234, -37.8247, -37.8256, -37.8262, -37.8267, -37.8270, -37.8272,
        -37.8274, -37.8275, -37.8276, -37.8276, -37.8277, -37.8277, -37.8277,
        -37.8277, -37.8277, -37.8277, -37.8277], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.0428e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2825, -0.4487, -0.4700, -0.4802, -0.4864, -0.4905, -0.4933, -0.4952,
        -0.4966, -0.4975, -0.4982, -0.4986, -0.4989, -0.4992, -0.4993, -0.4994,
        -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996, -0.4997, -0.4997,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.4740e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.4233e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CCHH': tensor([-0.6459], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'CCHH': tensor([-77.2338, -77.2384, -77.2416, -77.2439, -77.2455, -77.2466, -77.2473,
        -77.2479, -77.2482, -77.2485], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8275, -37.8276, -37.8276, -37.8277, -37.8277, -37.8277, -37.8277,
        -37.8277, -37.8277, -37.8277], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4994, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996, -0.4997,
        -0.4997, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 7 	 7 	 C2H2 	 C2H2 	 0.0006470260967267963

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e07)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e07/2022-11-29_10:09:21.574160_1.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e07/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 7 || ,[' rho : 3.011121', ' ae : 59.984058', ' E : 2.692096'] ,|| total loss 44.502282 || CHKPT: _1.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------17----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [17]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4108, -54.4814, -54.5130, -54.5317, -54.5444, -54.5534, -54.5599,
        -54.5645, -54.5677, -54.5700, -54.5716, -54.5728, -54.5736, -54.5741,
        -54.5745, -54.5748, -54.5750, -54.5751, -54.5752, -54.5753, -54.5754,
        -54.5754, -54.5754, -54.5754, -54.5754], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4048e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.4048e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5748, -54.5750, -54.5751, -54.5752, -54.5753, -54.5754, -54.5754,
        -54.5754, -54.5754, -54.5754], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 8 	 17 	 N 	 N 	 4.440140048569537e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------13----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1035, -460.1288, -460.1367, -460.1410, -460.1439, -460.1460,
        -460.1474, -460.1485, -460.1492, -460.1497, -460.1501, -460.1504,
        -460.1506, -460.1507, -460.1508, -460.1508, -460.1509, -460.1509,
        -460.1509, -460.1510, -460.1510, -460.1510, -460.1510, -460.1510,
        -460.1510], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(6.1131e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.1131e-09, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1508, -460.1509, -460.1509, -460.1509, -460.1510, -460.1510,
        -460.1510, -460.1510, -460.1510, -460.1510], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 8 	 13 	 Cl 	 Cl 	 2.0835192738278997e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------15----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2511, -0.4395, -0.4649, -0.4769, -0.4841, -0.4889, -0.4922, -0.4945,
        -0.4960, -0.4971, -0.4979, -0.4984, -0.4988, -0.4991, -0.4993, -0.4994,
        -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4997, -0.4997,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.4742e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.7575e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.8949e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4997,
        -0.4997, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 8 	 15 	 H 	 H 	 2.778073647936879e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 13, 13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4660, -920.4298, -920.4211, -920.4165, -920.4135, -920.4115,
        -920.4100, -920.4090, -920.4083, -920.4077, -920.4074, -920.4071,
        -920.4069, -920.4068, -920.4067, -920.4066, -920.4066, -920.4066,
        -920.4065, -920.4065, -920.4065, -920.4065, -920.4065, -920.4065,
        -920.4065], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885617
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.0083e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.0167e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0955, -460.1239, -460.1334, -460.1387, -460.1422, -460.1448,
        -460.1466, -460.1479, -460.1488, -460.1495, -460.1500, -460.1503,
        -460.1505, -460.1507, -460.1508, -460.1509, -460.1509, -460.1510,
        -460.1510, -460.1510, -460.1510, -460.1511, -460.1511, -460.1511,
        -460.1511], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(6.4077e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.0173e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4066, -920.4066, -920.4066, -920.4065, -920.4065, -920.4065,
        -920.4065, -920.4065, -920.4065, -920.4065], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1509, -460.1509, -460.1510, -460.1510, -460.1510, -460.1510,
        -460.1511, -460.1511, -460.1511, -460.1511], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 8 	 5 	 Cl2 	 Cl2 	 2.2605680902351742e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 12, 17, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-93.8452, -93.4568, -93.3610, -93.3154, -93.2846, -93.2640, -93.2492,
        -93.2388, -93.2312, -93.2258, -93.2218, -93.2189, -93.2167, -93.2152,
        -93.2140, -93.2131, -93.2125, -93.2120, -93.2116, -93.2114, -93.2112,
        -93.2110, -93.2109, -93.2108, -93.2107], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633898
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.1114e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7370, -37.7764, -37.7938, -37.8039, -37.8108, -37.8157, -37.8192,
        -37.8217, -37.8235, -37.8248, -37.8257, -37.8263, -37.8267, -37.8271,
        -37.8273, -37.8274, -37.8275, -37.8276, -37.8277, -37.8277, -37.8277,
        -37.8278, -37.8278, -37.8278, -37.8278], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.0596e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2907, -0.4510, -0.4713, -0.4810, -0.4869, -0.4909, -0.4935, -0.4954,
        -0.4967, -0.4976, -0.4982, -0.4987, -0.4990, -0.4992, -0.4993, -0.4994,
        -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996, -0.4997, -0.4997,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.4726e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.3626e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4283, -54.4988, -54.5257, -54.5409, -54.5511, -54.5583, -54.5634,
        -54.5670, -54.5695, -54.5713, -54.5726, -54.5735, -54.5741, -54.5745,
        -54.5748, -54.5751, -54.5752, -54.5753, -54.5754, -54.5754, -54.5755,
        -54.5755, -54.5755, -54.5755, -54.5755], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3689e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2131, -93.2125, -93.2120, -93.2116, -93.2114, -93.2112, -93.2110,
        -93.2109, -93.2108, -93.2107], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8274, -37.8275, -37.8276, -37.8277, -37.8277, -37.8277, -37.8278,
        -37.8278, -37.8278, -37.8278], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4994, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996, -0.4997,
        -0.4997, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5751, -54.5752, -54.5753, -54.5754, -54.5754, -54.5755, -54.5755,
        -54.5755, -54.5755, -54.5755], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 8 	 3 	 CHN 	 CNH 	 0.008565759203741766

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 15, 15]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0633, -1.1271, -1.1436, -1.1520, -1.1573, -1.1609, -1.1634, -1.1652,
        -1.1664, -1.1673, -1.1679, -1.1683, -1.1686, -1.1688, -1.1689, -1.1690,
        -1.1691, -1.1691, -1.1692, -1.1692, -1.1692, -1.1692, -1.1692, -1.1692,
        -1.1692], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668206
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6443e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.2886e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3046, -0.4549, -0.4735, -0.4824, -0.4879, -0.4915, -0.4940, -0.4957,
        -0.4969, -0.4977, -0.4983, -0.4987, -0.4990, -0.4992, -0.4993, -0.4994,
        -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996, -0.4997, -0.4997,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.4677e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.2523e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.1822e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1690, -1.1691, -1.1691, -1.1692, -1.1692, -1.1692, -1.1692, -1.1692,
        -1.1692, -1.1692], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4994, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996, -0.4997,
        -0.4997, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 8 	 0 	 H2 	 H2 	 4.553836013336818e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,  8OC
SUBMOLECULES: ['CO', 'O', 'C']
SUBMOLECULE INDICES: [8, 19, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='OC', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4142], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4142], dtype=torch.float64)
E_PRED: tensor([-113.6083, -113.3713, -113.3155, -113.2856, -113.2674, -113.2549,
        -113.2463, -113.2402, -113.2360, -113.2331, -113.2310, -113.2296,
        -113.2286, -113.2279, -113.2274, -113.2271, -113.2269, -113.2267,
        -113.2266, -113.2265, -113.2264, -113.2264, -113.2264, -113.2264,
        -113.2263], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 3279])
ao_eval   ---   torch.Size([1, 10, 3279, 78])
grid_weights   ---   torch.Size([1, 3279])
-113.201730216515
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.5364e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7410, -37.7812, -37.7972, -37.8064, -37.8126, -37.8170, -37.8201,
        -37.8223, -37.8239, -37.8250, -37.8258, -37.8263, -37.8267, -37.8270,
        -37.8272, -37.8273, -37.8274, -37.8275, -37.8276, -37.8276, -37.8276,
        -37.8276, -37.8276, -37.8276, -37.8276], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.1820e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9554, -75.0003, -75.0190, -75.0298, -75.0371, -75.0422, -75.0459,
        -75.0486, -75.0505, -75.0518, -75.0528, -75.0535, -75.0539, -75.0543,
        -75.0545, -75.0547, -75.0548, -75.0549, -75.0549, -75.0550, -75.0550,
        -75.0550, -75.0550, -75.0550, -75.0550], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0954e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'OC': tensor([-0.4142], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'OC': tensor([-113.2271, -113.2269, -113.2267, -113.2266, -113.2265, -113.2264,
        -113.2264, -113.2264, -113.2264, -113.2263], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8273, -37.8274, -37.8275, -37.8276, -37.8276, -37.8276, -37.8276,
        -37.8276, -37.8276, -37.8276], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0547, -75.0548, -75.0549, -75.0549, -75.0550, -75.0550, -75.0550,
        -75.0550, -75.0550, -75.0550], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 8 	 8 	 CO 	 OC 	 0.0011629664084827694

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  , 10LiH
SUBMOLECULES: ['HLi', 'Li', 'H']
SUBMOLECULE INDICES: [10, 16, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0923], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0923], dtype=torch.float64)
E_PRED: tensor([-7.9854, -8.0299, -8.0419, -8.0482, -8.0522, -8.0550, -8.0569, -8.0583,
        -8.0592, -8.0599, -8.0604, -8.0607, -8.0610, -8.0611, -8.0613, -8.0613,
        -8.0614, -8.0614, -8.0615, -8.0615, -8.0615, -8.0615, -8.0615, -8.0615,
        -8.0615], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 54, 54])
mo_energy   ---   torch.Size([2, 54])
dm_ref   ---   torch.Size([1, 2, 54, 54])
rho   ---   torch.Size([1, 2, 1271])
ao_eval   ---   torch.Size([1, 10, 1271, 54])
grid_weights   ---   torch.Size([1, 1271])
-8.038079906478378
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 54])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 54])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7681e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.5363e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2187, -0.4294, -0.4593, -0.4733, -0.4817, -0.4873, -0.4911, -0.4937,
        -0.4955, -0.4967, -0.4976, -0.4982, -0.4987, -0.4990, -0.4992, -0.4993,
        -0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.4576e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.1997e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.4278e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4582, -7.4653, -7.4686, -7.4705, -7.4717, -7.4726, -7.4735, -7.4743,
        -7.4745, -7.4742, -7.4740, -7.4739, -7.4739, -7.4739, -7.4740, -7.4740,
        -7.4740, -7.4740, -7.4741, -7.4741, -7.4741, -7.4741, -7.4741, -7.4741,
        -7.4741], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.1764e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.1308e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.7817e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiH': tensor([-0.0923], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiH': tensor([-8.0613, -8.0614, -8.0614, -8.0615, -8.0615, -8.0615, -8.0615, -8.0615,
        -8.0615, -8.0615], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4993, -0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>), 'Li': tensor([-7.4740, -7.4740, -7.4740, -7.4741, -7.4741, -7.4741, -7.4741, -7.4741,
        -7.4741, -7.4741], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 8 	 10 	 HLi 	 LiH 	 4.7034415908238344e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 17, 17]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.8021, -109.8058, -109.7025, -109.6361, -109.5925, -109.5626,
        -109.5419, -109.5275, -109.5174, -109.5104, -109.5055, -109.5021,
        -109.4998, -109.4981, -109.4970, -109.4962, -109.4956, -109.4952,
        -109.4949, -109.4947, -109.4946, -109.4945, -109.4944, -109.4944,
        -109.4943], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018879
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.3236e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4042, -54.4708, -54.5050, -54.5256, -54.5399, -54.5501, -54.5574,
        -54.5626, -54.5663, -54.5689, -54.5708, -54.5721, -54.5730, -54.5736,
        -54.5741, -54.5744, -54.5746, -54.5748, -54.5749, -54.5750, -54.5750,
        -54.5751, -54.5751, -54.5751, -54.5751], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4786e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4962, -109.4956, -109.4952, -109.4949, -109.4947, -109.4946,
        -109.4945, -109.4944, -109.4944, -109.4943], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5744, -54.5746, -54.5748, -54.5749, -54.5750, -54.5750, -54.5751,
        -54.5751, -54.5751, -54.5751], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 8 	 1 	 N2 	 N2 	 9.213150749936246e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------14----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6698, -99.6936, -99.7035, -99.7093, -99.7133, -99.7162, -99.7182,
        -99.7197, -99.7208, -99.7215, -99.7221, -99.7225, -99.7227, -99.7229,
        -99.7231, -99.7231, -99.7232, -99.7233, -99.7233, -99.7233, -99.7233,
        -99.7234, -99.7234, -99.7234, -99.7234], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.0020e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.0020e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7231, -99.7232, -99.7233, -99.7233, -99.7233, -99.7233, -99.7234,
        -99.7234, -99.7234, -99.7234], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 8 	 14 	 F 	 F 	 2.5919045300110024e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 12, 19, 19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.3879, -188.7001, -188.5542, -188.4695, -188.4175, -188.3820,
        -188.3573, -188.3399, -188.3276, -188.3189, -188.3127, -188.3084,
        -188.3052, -188.3030, -188.3014, -188.3003, -188.2995, -188.2989,
        -188.2985, -188.2982, -188.2980, -188.2978, -188.2977, -188.2976,
        -188.2976], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.4017587505662
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.8683e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7339, -37.7713, -37.7898, -37.8009, -37.8085, -37.8139, -37.8179,
        -37.8207, -37.8227, -37.8241, -37.8251, -37.8258, -37.8263, -37.8266,
        -37.8269, -37.8271, -37.8272, -37.8273, -37.8273, -37.8274, -37.8274,
        -37.8274, -37.8274, -37.8274, -37.8274], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.4558e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9628, -75.0071, -75.0238, -75.0331, -75.0394, -75.0438, -75.0470,
        -75.0493, -75.0509, -75.0520, -75.0528, -75.0534, -75.0538, -75.0541,
        -75.0543, -75.0544, -75.0545, -75.0546, -75.0546, -75.0547, -75.0547,
        -75.0547, -75.0547, -75.0547, -75.0547], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1471e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3003, -188.2995, -188.2989, -188.2985, -188.2982, -188.2980,
        -188.2978, -188.2977, -188.2976, -188.2976], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8271, -37.8272, -37.8273, -37.8273, -37.8274, -37.8274, -37.8274,
        -37.8274, -37.8274, -37.8274], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0544, -75.0545, -75.0546, -75.0546, -75.0547, -75.0547, -75.0547,
        -75.0547, -75.0547, -75.0547], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 8 	 4 	 CO2 	 CO2 	 0.015985043830440894

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,  7CCHH
SUBMOLECULES: ['C2H2', 'C', 'C', 'H', 'H']
SUBMOLECULE INDICES: [7, 12, 12, 15, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C2H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6459], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6459], dtype=torch.float64)
E_PRED: tensor([-78.0578, -73.0066, -75.0417, -75.8304, -76.2853, -76.5826, -76.7849,
        -76.9246, -77.0218, -77.0898, -77.1374, -77.1708, -77.1941, -77.2105,
        -77.2220, -77.2300, -77.2357, -77.2396, -77.2424, -77.2444, -77.2457,
        -77.2467, -77.2474, -77.2478, -77.2482], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 108, 108])
mo_energy   ---   torch.Size([2, 108])
dm_ref   ---   torch.Size([1, 2, 108, 108])
rho   ---   torch.Size([1, 2, 1924])
ao_eval   ---   torch.Size([1, 10, 1924, 108])
grid_weights   ---   torch.Size([1, 1924])
-77.2336470993193
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 108])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 108])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.9357e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7473, -37.7868, -37.8011, -37.8091, -37.8144, -37.8182, -37.8208,
        -37.8227, -37.8241, -37.8250, -37.8257, -37.8262, -37.8265, -37.8267,
        -37.8269, -37.8270, -37.8271, -37.8271, -37.8272, -37.8272, -37.8272,
        -37.8272, -37.8273, -37.8273, -37.8273], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.5765e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2777, -0.4473, -0.4692, -0.4796, -0.4860, -0.4902, -0.4931, -0.4951,
        -0.4965, -0.4974, -0.4981, -0.4986, -0.4989, -0.4991, -0.4993, -0.4994,
        -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.4421e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.5637e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CCHH': tensor([-0.6459], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'CCHH': tensor([-77.2300, -77.2357, -77.2396, -77.2424, -77.2444, -77.2457, -77.2467,
        -77.2474, -77.2478, -77.2482], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8270, -37.8271, -37.8271, -37.8272, -37.8272, -37.8272, -37.8272,
        -37.8273, -37.8273, -37.8273], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 8 	 7 	 C2H2 	 C2H2 	 0.0006337422112515853

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,  9ClH
SUBMOLECULES: ['HCl', 'Cl', 'H']
SUBMOLECULE INDICES: [9, 13, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='ClH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1712], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1712], dtype=torch.float64)
E_PRED: tensor([-460.7525, -460.7929, -460.8044, -460.8103, -460.8140, -460.8165,
        -460.8183, -460.8195, -460.8204, -460.8210, -460.8214, -460.8217,
        -460.8219, -460.8221, -460.8222, -460.8222, -460.8223, -460.8223,
        -460.8224, -460.8224, -460.8224, -460.8224, -460.8224, -460.8224,
        -460.8224], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 62, 62])
mo_energy   ---   torch.Size([2, 62])
dm_ref   ---   torch.Size([1, 2, 62, 62])
rho   ---   torch.Size([1, 2, 1068])
ao_eval   ---   torch.Size([1, 10, 1068, 62])
grid_weights   ---   torch.Size([1, 1068])
-460.4234538667477
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 62])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 62])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.4799e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0842, -460.1152, -460.1262, -460.1325, -460.1368, -460.1398,
        -460.1420, -460.1436, -460.1448, -460.1456, -460.1461, -460.1466,
        -460.1468, -460.1470, -460.1472, -460.1473, -460.1474, -460.1474,
        -460.1475, -460.1475, -460.1475, -460.1475, -460.1475, -460.1475,
        -460.1475], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.4223e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2357, -0.4348, -0.4622, -0.4752, -0.4830, -0.4881, -0.4917, -0.4941,
        -0.4958, -0.4969, -0.4977, -0.4983, -0.4987, -0.4990, -0.4992, -0.4993,
        -0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.4369e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.0459e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClH': tensor([-0.1712], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'ClH': tensor([-460.8222, -460.8223, -460.8223, -460.8224, -460.8224, -460.8224,
        -460.8224, -460.8224, -460.8224, -460.8224], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1473, -460.1474, -460.1474, -460.1475, -460.1475, -460.1475,
        -460.1475, -460.1475, -460.1475, -460.1475], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4993, -0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 8 	 9 	 HCl 	 ClH 	 3.7887198511274013e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 16, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2195, -107.2637, -107.2292, -107.2250, -107.2213, -107.2194,
        -107.2189, -107.2191, -107.2197, -107.2204, -107.2209, -107.2213,
        -107.2217, -107.2221, -107.2225, -107.2228, -107.2231, -107.2234,
        -107.2236, -107.2238, -107.2240, -107.2241, -107.2242, -107.2243,
        -107.2244], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.305942205048
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.3539e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6661, -99.6884, -99.6995, -99.7062, -99.7108, -99.7142, -99.7167,
        -99.7185, -99.7197, -99.7207, -99.7213, -99.7218, -99.7221, -99.7223,
        -99.7225, -99.7226, -99.7227, -99.7227, -99.7228, -99.7228, -99.7228,
        -99.7228, -99.7229, -99.7229, -99.7229], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.8122e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4579, -7.4650, -7.4683, -7.4702, -7.4714, -7.4723, -7.4733, -7.4740,
        -7.4742, -7.4739, -7.4737, -7.4736, -7.4736, -7.4737, -7.4737, -7.4737,
        -7.4737, -7.4738, -7.4738, -7.4738, -7.4738, -7.4738, -7.4738, -7.4738,
        -7.4738], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.1635e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.2893e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2228, -107.2231, -107.2234, -107.2236, -107.2238, -107.2240,
        -107.2241, -107.2242, -107.2243, -107.2244], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7226, -99.7227, -99.7227, -99.7228, -99.7228, -99.7228, -99.7228,
        -99.7229, -99.7229, -99.7229], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4737, -7.4737, -7.4738, -7.4738, -7.4738, -7.4738, -7.4738, -7.4738,
        -7.4738, -7.4738], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 8 	 2 	 FLi 	 LiF 	 0.00886823906197005

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7325, -37.7678, -37.7870, -37.7987, -37.8067, -37.8125, -37.8166,
        -37.8196, -37.8218, -37.8233, -37.8243, -37.8251, -37.8256, -37.8260,
        -37.8263, -37.8265, -37.8266, -37.8267, -37.8268, -37.8268, -37.8268,
        -37.8269, -37.8269, -37.8269, -37.8269], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.1116e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.1116e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8265, -37.8266, -37.8267, -37.8268, -37.8268, -37.8268, -37.8269,
        -37.8269, -37.8269, -37.8269], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 8 	 12 	 C 	 C 	 4.3380360055528085e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------18----------------
TRAINING ON MOLECULE:  ,Na
SUBMOLECULES: ['Na']
SUBMOLECULE INDICES: [18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2213, -162.2337, -162.2382, -162.2406, -162.2422, -162.2432,
        -162.2441, -162.2447, -162.2452, -162.2453, -162.2454, -162.2455,
        -162.2455, -162.2456, -162.2456, -162.2456, -162.2456, -162.2456,
        -162.2456, -162.2456, -162.2456, -162.2456, -162.2456, -162.2456,
        -162.2456], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.5576e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.5576e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'Na': tensor([-162.2456, -162.2456, -162.2456, -162.2456, -162.2456, -162.2456,
        -162.2456, -162.2456, -162.2456, -162.2456], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 8 	 18 	 Na 	 Na 	 1.873640453836964e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,  6FF
SUBMOLECULES: ['F2', 'F', 'F']
SUBMOLECULE INDICES: [6, 14, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0618], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0618], dtype=torch.float64)
E_PRED: tensor([-199.6491, -199.5668, -199.5452, -199.5342, -199.5271, -199.5223,
        -199.5190, -199.5166, -199.5150, -199.5138, -199.5130, -199.5124,
        -199.5120, -199.5117, -199.5115, -199.5114, -199.5113, -199.5112,
        -199.5112, -199.5111, -199.5111, -199.5111, -199.5111, -199.5111,
        -199.5111], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 4698])
ao_eval   ---   torch.Size([1, 10, 4698, 78])
grid_weights   ---   torch.Size([1, 4698])
-199.3364659747656
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.1401e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.2802e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6650, -99.6842, -99.6962, -99.7037, -99.7090, -99.7129, -99.7158,
        -99.7179, -99.7194, -99.7205, -99.7212, -99.7218, -99.7222, -99.7224,
        -99.7226, -99.7228, -99.7229, -99.7229, -99.7230, -99.7230, -99.7230,
        -99.7231, -99.7231, -99.7231, -99.7231], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.5178e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.2887e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'FF': tensor([-0.0618], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'FF': tensor([-199.5114, -199.5113, -199.5112, -199.5112, -199.5111, -199.5111,
        -199.5111, -199.5111, -199.5111, -199.5111], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7228, -99.7229, -99.7229, -99.7230, -99.7230, -99.7230, -99.7231,
        -99.7231, -99.7231, -99.7231], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 8 	 6 	 F2 	 F2 	 2.2427996450742685e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  , 11NaNa
SUBMOLECULES: ['Na2', 'Na', 'Na']
SUBMOLECULE INDICES: [11, 18, 18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0273], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0273], dtype=torch.float64)
E_PRED: tensor([-324.5979, -324.5493, -324.5366, -324.5300, -324.5259, -324.5231,
        -324.5211, -324.5197, -324.5188, -324.5181, -324.5176, -324.5173,
        -324.5171, -324.5169, -324.5168, -324.5167, -324.5167, -324.5166,
        -324.5166, -324.5166, -324.5166, -324.5165, -324.5165, -324.5165,
        -324.5165], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 1992])
ao_eval   ---   torch.Size([1, 10, 1992, 94])
grid_weights   ---   torch.Size([1, 1992])
-324.03216786711033
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(4.3580e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.7160e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2293, -162.2390, -162.2419, -162.2434, -162.2443, -162.2451,
        -162.2457, -162.2460, -162.2461, -162.2462, -162.2462, -162.2463,
        -162.2463, -162.2463, -162.2463, -162.2463, -162.2463, -162.2463,
        -162.2463, -162.2464, -162.2464, -162.2464, -162.2464, -162.2464,
        -162.2464], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.2378e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.7232e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NaNa': tensor([-0.0273], dtype=torch.float64), 'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'NaNa': tensor([-324.5167, -324.5167, -324.5166, -324.5166, -324.5166, -324.5166,
        -324.5165, -324.5165, -324.5165, -324.5165], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Na': tensor([-162.2463, -162.2463, -162.2463, -162.2463, -162.2464, -162.2464,
        -162.2464, -162.2464, -162.2464, -162.2464], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 8 	 11 	 Na2 	 Na2 	 2.9006564102141732e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------16----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [16]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4598, -7.4672, -7.4698, -7.4712, -7.4721, -7.4731, -7.4739, -7.4741,
        -7.4738, -7.4736, -7.4735, -7.4735, -7.4735, -7.4736, -7.4736, -7.4736,
        -7.4736, -7.4737, -7.4737, -7.4737, -7.4737, -7.4737, -7.4737, -7.4737,
        -7.4737], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.1616e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.3635e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.3246e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4736, -7.4736, -7.4737, -7.4737, -7.4737, -7.4737, -7.4737, -7.4737,
        -7.4737, -7.4737], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 8 	 16 	 Li 	 Li 	 4.457200703178218e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------19----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9687, -75.0116, -75.0269, -75.0354, -75.0410, -75.0450, -75.0478,
        -75.0498, -75.0512, -75.0523, -75.0530, -75.0535, -75.0538, -75.0541,
        -75.0543, -75.0544, -75.0545, -75.0545, -75.0546, -75.0546, -75.0546,
        -75.0546, -75.0546, -75.0547, -75.0547], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1564e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.1564e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0544, -75.0545, -75.0545, -75.0546, -75.0546, -75.0546, -75.0546,
        -75.0546, -75.0547, -75.0547], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 8 	 19 	 O 	 O 	 3.741580673753582e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e08)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e08/2022-11-29_10:09:21.574160_2.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e08/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 8 || ,[' rho : 2.998897', ' ae : 59.602935', ' E : 2.830158'] ,|| total loss 44.228980 || CHKPT: _2.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 13, 13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4447, -920.4203, -920.4148, -920.4119, -920.4101, -920.4088,
        -920.4080, -920.4073, -920.4069, -920.4066, -920.4064, -920.4063,
        -920.4061, -920.4061, -920.4060, -920.4060, -920.4060, -920.4059,
        -920.4059, -920.4059, -920.4059, -920.4059, -920.4059, -920.4059,
        -920.4059], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885617
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.9801e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.9602e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0920, -460.1215, -460.1316, -460.1373, -460.1411, -460.1439,
        -460.1459, -460.1473, -460.1483, -460.1490, -460.1495, -460.1499,
        -460.1501, -460.1503, -460.1504, -460.1505, -460.1506, -460.1506,
        -460.1507, -460.1507, -460.1507, -460.1507, -460.1507, -460.1507,
        -460.1507], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.0161e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.9607e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4060, -920.4060, -920.4059, -920.4059, -920.4059, -920.4059,
        -920.4059, -920.4059, -920.4059, -920.4059], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1505, -460.1506, -460.1506, -460.1507, -460.1507, -460.1507,
        -460.1507, -460.1507, -460.1507, -460.1507], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 9 	 5 	 Cl2 	 Cl2 	 2.3034486675495046e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------19----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9568, -75.0016, -75.0199, -75.0305, -75.0376, -75.0426, -75.0462,
        -75.0488, -75.0506, -75.0520, -75.0529, -75.0535, -75.0540, -75.0543,
        -75.0546, -75.0547, -75.0548, -75.0549, -75.0550, -75.0550, -75.0550,
        -75.0550, -75.0551, -75.0551, -75.0551], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0887e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.0887e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0547, -75.0548, -75.0549, -75.0550, -75.0550, -75.0550, -75.0550,
        -75.0551, -75.0551, -75.0551], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 9 	 19 	 O 	 O 	 3.497360340013607e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------13----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0986, -460.1265, -460.1356, -460.1407, -460.1442, -460.1466,
        -460.1483, -460.1496, -460.1505, -460.1511, -460.1515, -460.1519,
        -460.1521, -460.1522, -460.1523, -460.1524, -460.1525, -460.1525,
        -460.1525, -460.1526, -460.1526, -460.1526, -460.1526, -460.1526,
        -460.1526], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4587e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.4587e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1524, -460.1525, -460.1525, -460.1525, -460.1526, -460.1526,
        -460.1526, -460.1526, -460.1526, -460.1526], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 9 	 13 	 Cl 	 Cl 	 4.94284702038757e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,  7CCHH
SUBMOLECULES: ['C2H2', 'C', 'C', 'H', 'H']
SUBMOLECULE INDICES: [7, 12, 12, 15, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C2H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6459], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6459], dtype=torch.float64)
E_PRED: tensor([-78.3992, -73.4358, -75.2180, -75.9317, -76.3509, -76.6271, -76.8160,
        -76.9468, -77.0379, -77.1015, -77.1460, -77.1772, -77.1991, -77.2144,
        -77.2252, -77.2327, -77.2380, -77.2417, -77.2443, -77.2461, -77.2474,
        -77.2483, -77.2489, -77.2493, -77.2496], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 108, 108])
mo_energy   ---   torch.Size([2, 108])
dm_ref   ---   torch.Size([1, 2, 108, 108])
rho   ---   torch.Size([1, 2, 1924])
ao_eval   ---   torch.Size([1, 10, 1924, 108])
grid_weights   ---   torch.Size([1, 1924])
-77.2336470993193
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 108])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 108])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.9116e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7374, -37.7769, -37.7940, -37.8040, -37.8108, -37.8156, -37.8190,
        -37.8215, -37.8232, -37.8245, -37.8254, -37.8260, -37.8264, -37.8267,
        -37.8269, -37.8271, -37.8272, -37.8273, -37.8273, -37.8274, -37.8274,
        -37.8274, -37.8274, -37.8274, -37.8274], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.4423e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2723, -0.4457, -0.4683, -0.4791, -0.4856, -0.4899, -0.4929, -0.4949,
        -0.4964, -0.4974, -0.4980, -0.4985, -0.4989, -0.4991, -0.4993, -0.4994,
        -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.4542e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.6336e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CCHH': tensor([-0.6459], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'CCHH': tensor([-77.2327, -77.2380, -77.2417, -77.2443, -77.2461, -77.2474, -77.2483,
        -77.2489, -77.2493, -77.2496], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8271, -37.8272, -37.8273, -37.8273, -37.8274, -37.8274, -37.8274,
        -37.8274, -37.8274, -37.8274], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 9 	 7 	 C2H2 	 C2H2 	 0.0006046069413782656

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 12, 19, 19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.6847, -188.8155, -188.6302, -188.5220, -188.4552, -188.4097,
        -188.3780, -188.3556, -188.3399, -188.3287, -188.3208, -188.3152,
        -188.3112, -188.3083, -188.3063, -188.3048, -188.3038, -188.3031,
        -188.3026, -188.3022, -188.3019, -188.3017, -188.3016, -188.3015,
        -188.3014], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.4017587505662
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.8548e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7565, -37.7934, -37.8057, -37.8125, -37.8169, -37.8200, -37.8222,
        -37.8238, -37.8249, -37.8257, -37.8262, -37.8266, -37.8269, -37.8271,
        -37.8272, -37.8273, -37.8274, -37.8274, -37.8274, -37.8275, -37.8275,
        -37.8275, -37.8275, -37.8275, -37.8275], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.2872e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9668, -75.0104, -75.0264, -75.0353, -75.0412, -75.0454, -75.0484,
        -75.0505, -75.0520, -75.0531, -75.0539, -75.0544, -75.0548, -75.0550,
        -75.0552, -75.0553, -75.0554, -75.0555, -75.0555, -75.0556, -75.0556,
        -75.0556, -75.0556, -75.0556, -75.0556], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.8610e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3048, -188.3038, -188.3031, -188.3026, -188.3022, -188.3019,
        -188.3017, -188.3016, -188.3015, -188.3014], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8273, -37.8274, -37.8274, -37.8274, -37.8275, -37.8275, -37.8275,
        -37.8275, -37.8275, -37.8275], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0553, -75.0554, -75.0555, -75.0555, -75.0556, -75.0556, -75.0556,
        -75.0556, -75.0556, -75.0556], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 9 	 4 	 CO2 	 CO2 	 0.015747744330341082

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 15, 15]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-0.9696, -1.0900, -1.1209, -1.1367, -1.1468, -1.1536, -1.1582, -1.1615,
        -1.1638, -1.1654, -1.1665, -1.1673, -1.1678, -1.1682, -1.1685, -1.1687,
        -1.1688, -1.1689, -1.1690, -1.1690, -1.1690, -1.1691, -1.1691, -1.1691,
        -1.1691], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668206
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6311e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.2622e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3000, -0.4536, -0.4727, -0.4819, -0.4875, -0.4913, -0.4938, -0.4956,
        -0.4968, -0.4977, -0.4983, -0.4987, -0.4990, -0.4992, -0.4993, -0.4994,
        -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.4531e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.3820e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.1528e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1687, -1.1688, -1.1689, -1.1690, -1.1690, -1.1690, -1.1691, -1.1691,
        -1.1691, -1.1691], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 9 	 0 	 H2 	 H2 	 4.746834261246572e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------17----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [17]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4037, -54.4684, -54.5031, -54.5243, -54.5389, -54.5494, -54.5569,
        -54.5623, -54.5661, -54.5688, -54.5707, -54.5721, -54.5730, -54.5737,
        -54.5742, -54.5745, -54.5747, -54.5749, -54.5750, -54.5751, -54.5751,
        -54.5752, -54.5752, -54.5752, -54.5752], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4562e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.4562e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5745, -54.5747, -54.5749, -54.5750, -54.5751, -54.5751, -54.5752,
        -54.5752, -54.5752, -54.5752], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 9 	 17 	 N 	 N 	 4.5651990511890154e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------16----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [16]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4581, -7.4653, -7.4685, -7.4702, -7.4714, -7.4723, -7.4732, -7.4739,
        -7.4739, -7.4736, -7.4734, -7.4734, -7.4734, -7.4734, -7.4734, -7.4735,
        -7.4735, -7.4735, -7.4735, -7.4735, -7.4736, -7.4736, -7.4736, -7.4736,
        -7.4736], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.1623e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.4422e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.3261e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4735, -7.4735, -7.4735, -7.4735, -7.4735, -7.4736, -7.4736, -7.4736,
        -7.4736, -7.4736], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 9 	 16 	 Li 	 Li 	 4.708690076072765e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7528, -37.7908, -37.8038, -37.8110, -37.8158, -37.8191, -37.8215,
        -37.8232, -37.8244, -37.8252, -37.8258, -37.8262, -37.8265, -37.8267,
        -37.8268, -37.8269, -37.8270, -37.8271, -37.8271, -37.8271, -37.8271,
        -37.8272, -37.8272, -37.8272, -37.8272], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.6663e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.6663e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8269, -37.8270, -37.8271, -37.8271, -37.8271, -37.8271, -37.8272,
        -37.8272, -37.8272, -37.8272], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 9 	 12 	 C 	 C 	 4.1526265291807506e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------18----------------
TRAINING ON MOLECULE:  ,Na
SUBMOLECULES: ['Na']
SUBMOLECULE INDICES: [18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2240, -162.2365, -162.2412, -162.2438, -162.2454, -162.2465,
        -162.2474, -162.2481, -162.2485, -162.2487, -162.2488, -162.2489,
        -162.2489, -162.2490, -162.2490, -162.2490, -162.2490, -162.2490,
        -162.2490, -162.2490, -162.2490, -162.2490, -162.2490, -162.2490,
        -162.2491], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.3002e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3002e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'Na': tensor([-162.2490, -162.2490, -162.2490, -162.2490, -162.2490, -162.2490,
        -162.2490, -162.2490, -162.2490, -162.2491], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 9 	 18 	 Na 	 Na 	 7.202410616241067e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 16, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2052, -107.2608, -107.2275, -107.2250, -107.2223, -107.2209,
        -107.2209, -107.2213, -107.2221, -107.2229, -107.2236, -107.2241,
        -107.2246, -107.2250, -107.2254, -107.2258, -107.2261, -107.2264,
        -107.2267, -107.2269, -107.2271, -107.2272, -107.2274, -107.2275,
        -107.2275], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.305942205048
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.4085e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6697, -99.6927, -99.7033, -99.7096, -99.7140, -99.7172, -99.7195,
        -99.7211, -99.7223, -99.7232, -99.7238, -99.7242, -99.7245, -99.7247,
        -99.7249, -99.7250, -99.7251, -99.7251, -99.7252, -99.7252, -99.7252,
        -99.7252, -99.7252, -99.7252, -99.7252], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.4561e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4575, -7.4645, -7.4679, -7.4698, -7.4710, -7.4719, -7.4729, -7.4737,
        -7.4739, -7.4736, -7.4734, -7.4733, -7.4733, -7.4733, -7.4734, -7.4734,
        -7.4734, -7.4734, -7.4735, -7.4735, -7.4735, -7.4735, -7.4735, -7.4735,
        -7.4735], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.1613e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.4869e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2258, -107.2261, -107.2264, -107.2267, -107.2269, -107.2271,
        -107.2272, -107.2274, -107.2275, -107.2275], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7250, -99.7251, -99.7251, -99.7252, -99.7252, -99.7252, -99.7252,
        -99.7252, -99.7252, -99.7252], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4734, -7.4734, -7.4734, -7.4735, -7.4735, -7.4735, -7.4735, -7.4735,
        -7.4735, -7.4735], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 9 	 2 	 FLi 	 LiF 	 0.00877201733433704

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------14----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6695, -99.6921, -99.7029, -99.7094, -99.7139, -99.7172, -99.7196,
        -99.7213, -99.7225, -99.7234, -99.7240, -99.7245, -99.7248, -99.7250,
        -99.7252, -99.7253, -99.7254, -99.7254, -99.7255, -99.7255, -99.7255,
        -99.7255, -99.7255, -99.7255, -99.7255], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.0885e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.0885e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7253, -99.7254, -99.7254, -99.7255, -99.7255, -99.7255, -99.7255,
        -99.7255, -99.7255, -99.7255], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 9 	 14 	 F 	 F 	 1.6333778360667187e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,  6FF
SUBMOLECULES: ['F2', 'F', 'F']
SUBMOLECULE INDICES: [6, 14, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0618], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0618], dtype=torch.float64)
E_PRED: tensor([-199.6739, -199.5810, -199.5563, -199.5437, -199.5356, -199.5301,
        -199.5263, -199.5236, -199.5217, -199.5204, -199.5195, -199.5188,
        -199.5183, -199.5180, -199.5178, -199.5176, -199.5175, -199.5174,
        -199.5174, -199.5173, -199.5173, -199.5173, -199.5173, -199.5173,
        -199.5172], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 4698])
ao_eval   ---   torch.Size([1, 10, 4698, 78])
grid_weights   ---   torch.Size([1, 4698])
-199.3364659747656
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.2385e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.4769e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6801, -99.7030, -99.7109, -99.7155, -99.7185, -99.7207, -99.7222,
        -99.7233, -99.7241, -99.7246, -99.7250, -99.7253, -99.7255, -99.7256,
        -99.7257, -99.7258, -99.7259, -99.7259, -99.7259, -99.7259, -99.7259,
        -99.7260, -99.7260, -99.7260, -99.7260], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.5387e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.4815e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'FF': tensor([-0.0618], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'FF': tensor([-199.5176, -199.5175, -199.5174, -199.5174, -199.5173, -199.5173,
        -199.5173, -199.5173, -199.5173, -199.5172], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7258, -99.7259, -99.7259, -99.7259, -99.7259, -99.7259, -99.7260,
        -99.7260, -99.7260, -99.7260], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 9 	 6 	 F2 	 F2 	 2.869811074424887e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,  8OC
SUBMOLECULES: ['CO', 'O', 'C']
SUBMOLECULE INDICES: [8, 19, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='OC', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4142], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4142], dtype=torch.float64)
E_PRED: tensor([-113.7306, -113.4209, -113.3470, -113.3076, -113.2838, -113.2673,
        -113.2558, -113.2478, -113.2422, -113.2383, -113.2356, -113.2336,
        -113.2323, -113.2314, -113.2307, -113.2303, -113.2300, -113.2297,
        -113.2296, -113.2295, -113.2294, -113.2293, -113.2293, -113.2293,
        -113.2293], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 3279])
ao_eval   ---   torch.Size([1, 10, 3279, 78])
grid_weights   ---   torch.Size([1, 3279])
-113.201730216515
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.5107e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7466, -37.7863, -37.8008, -37.8090, -37.8144, -37.8183, -37.8210,
        -37.8229, -37.8243, -37.8253, -37.8260, -37.8265, -37.8268, -37.8270,
        -37.8272, -37.8273, -37.8274, -37.8275, -37.8275, -37.8275, -37.8276,
        -37.8276, -37.8276, -37.8276, -37.8276], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.2126e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9620, -75.0065, -75.0239, -75.0337, -75.0403, -75.0450, -75.0483,
        -75.0507, -75.0524, -75.0536, -75.0545, -75.0551, -75.0555, -75.0558,
        -75.0560, -75.0562, -75.0563, -75.0563, -75.0564, -75.0564, -75.0565,
        -75.0565, -75.0565, -75.0565, -75.0565], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.5061e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'OC': tensor([-0.4142], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'OC': tensor([-113.2303, -113.2300, -113.2297, -113.2296, -113.2295, -113.2294,
        -113.2293, -113.2293, -113.2293, -113.2293], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8273, -37.8274, -37.8275, -37.8275, -37.8275, -37.8276, -37.8276,
        -37.8276, -37.8276, -37.8276], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0562, -75.0563, -75.0563, -75.0564, -75.0564, -75.0565, -75.0565,
        -75.0565, -75.0565, -75.0565], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 9 	 8 	 CO 	 OC 	 0.0011134581441893322

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 12, 17, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-93.8911, -93.4773, -93.3729, -93.3249, -93.2916, -93.2696, -93.2539,
        -93.2428, -93.2348, -93.2290, -93.2248, -93.2218, -93.2195, -93.2179,
        -93.2167, -93.2158, -93.2151, -93.2146, -93.2143, -93.2140, -93.2138,
        -93.2136, -93.2135, -93.2134, -93.2134], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633898
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.0254e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7370, -37.7760, -37.7934, -37.8036, -37.8106, -37.8155, -37.8190,
        -37.8216, -37.8234, -37.8247, -37.8256, -37.8262, -37.8266, -37.8270,
        -37.8272, -37.8273, -37.8274, -37.8275, -37.8276, -37.8276, -37.8276,
        -37.8277, -37.8277, -37.8277, -37.8277], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.1614e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2716, -0.4455, -0.4682, -0.4790, -0.4856, -0.4899, -0.4929, -0.4949,
        -0.4964, -0.4973, -0.4980, -0.4985, -0.4989, -0.4991, -0.4993, -0.4994,
        -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.4769e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.6350e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4058, -54.4721, -54.5062, -54.5268, -54.5410, -54.5511, -54.5584,
        -54.5636, -54.5673, -54.5699, -54.5718, -54.5731, -54.5740, -54.5746,
        -54.5751, -54.5754, -54.5756, -54.5758, -54.5759, -54.5760, -54.5760,
        -54.5760, -54.5761, -54.5761, -54.5761], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2852e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2158, -93.2151, -93.2146, -93.2143, -93.2140, -93.2138, -93.2136,
        -93.2135, -93.2134, -93.2134], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8273, -37.8274, -37.8275, -37.8276, -37.8276, -37.8276, -37.8277,
        -37.8277, -37.8277, -37.8277], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5754, -54.5756, -54.5758, -54.5759, -54.5760, -54.5760, -54.5760,
        -54.5761, -54.5761, -54.5761], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 9 	 3 	 CHN 	 CNH 	 0.008369773251446784

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 17, 17]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.7803, -109.8430, -109.7234, -109.6513, -109.6041, -109.5719,
        -109.5495, -109.5340, -109.5231, -109.5155, -109.5102, -109.5065,
        -109.5039, -109.5021, -109.5008, -109.5000, -109.4994, -109.4989,
        -109.4986, -109.4984, -109.4983, -109.4982, -109.4981, -109.4980,
        -109.4980], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018879
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.3072e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4190, -54.4900, -54.5196, -54.5367, -54.5482, -54.5564, -54.5622,
        -54.5663, -54.5692, -54.5713, -54.5727, -54.5738, -54.5745, -54.5750,
        -54.5753, -54.5756, -54.5758, -54.5759, -54.5760, -54.5760, -54.5761,
        -54.5761, -54.5761, -54.5761, -54.5761], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2618e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.5000, -109.4994, -109.4989, -109.4986, -109.4984, -109.4983,
        -109.4982, -109.4981, -109.4980, -109.4980], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5756, -54.5758, -54.5759, -54.5760, -54.5760, -54.5761, -54.5761,
        -54.5761, -54.5761, -54.5761], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 9 	 1 	 N2 	 N2 	 7.776835798230042e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  , 11NaNa
SUBMOLECULES: ['Na2', 'Na', 'Na']
SUBMOLECULE INDICES: [11, 18, 18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0273], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0273], dtype=torch.float64)
E_PRED: tensor([-324.6551, -324.5786, -324.5587, -324.5485, -324.5420, -324.5376,
        -324.5345, -324.5324, -324.5309, -324.5298, -324.5291, -324.5286,
        -324.5282, -324.5280, -324.5278, -324.5277, -324.5276, -324.5275,
        -324.5275, -324.5274, -324.5274, -324.5274, -324.5274, -324.5274,
        -324.5274], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 1992])
ao_eval   ---   torch.Size([1, 10, 1992, 94])
grid_weights   ---   torch.Size([1, 1992])
-324.03216786711033
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(4.5180e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.0360e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2254, -162.2380, -162.2431, -162.2459, -162.2477, -162.2490,
        -162.2499, -162.2506, -162.2512, -162.2514, -162.2515, -162.2516,
        -162.2516, -162.2517, -162.2517, -162.2517, -162.2518, -162.2518,
        -162.2518, -162.2518, -162.2518, -162.2518, -162.2518, -162.2518,
        -162.2518], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.5482e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.0369e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NaNa': tensor([-0.0273], dtype=torch.float64), 'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'NaNa': tensor([-324.5277, -324.5276, -324.5275, -324.5275, -324.5274, -324.5274,
        -324.5274, -324.5274, -324.5274, -324.5274], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Na': tensor([-162.2517, -162.2518, -162.2518, -162.2518, -162.2518, -162.2518,
        -162.2518, -162.2518, -162.2518, -162.2518], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 9 	 11 	 Na2 	 Na2 	 2.9276867855985852e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------15----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2159, -0.4285, -0.4588, -0.4729, -0.4815, -0.4871, -0.4910, -0.4936,
        -0.4954, -0.4967, -0.4976, -0.4982, -0.4986, -0.4989, -0.4991, -0.4993,
        -0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.4754e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.3083e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.8951e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4993, -0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 9 	 15 	 H 	 H 	 3.389707719680443e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  , 10LiH
SUBMOLECULES: ['HLi', 'Li', 'H']
SUBMOLECULE INDICES: [10, 16, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0923], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0923], dtype=torch.float64)
E_PRED: tensor([-7.9278, -8.0064, -8.0270, -8.0378, -8.0447, -8.0494, -8.0528, -8.0552,
        -8.0569, -8.0581, -8.0589, -8.0595, -8.0599, -8.0602, -8.0604, -8.0606,
        -8.0607, -8.0607, -8.0608, -8.0608, -8.0609, -8.0609, -8.0609, -8.0609,
        -8.0609], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 54, 54])
mo_energy   ---   torch.Size([2, 54])
dm_ref   ---   torch.Size([1, 2, 54, 54])
rho   ---   torch.Size([1, 2, 1271])
ao_eval   ---   torch.Size([1, 10, 1271, 54])
grid_weights   ---   torch.Size([1, 1271])
-8.038079906478378
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 54])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 54])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6674e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3349e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2364, -0.4350, -0.4623, -0.4752, -0.4830, -0.4882, -0.4917, -0.4941,
        -0.4958, -0.4969, -0.4977, -0.4983, -0.4987, -0.4990, -0.4992, -0.4993,
        -0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.4748e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.0466e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.2298e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4586, -7.4660, -7.4690, -7.4706, -7.4716, -7.4725, -7.4735, -7.4739,
        -7.4738, -7.4735, -7.4734, -7.4733, -7.4734, -7.4734, -7.4734, -7.4734,
        -7.4735, -7.4735, -7.4735, -7.4735, -7.4735, -7.4735, -7.4735, -7.4735,
        -7.4735], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.1690e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.4647e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.5693e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiH': tensor([-0.0923], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiH': tensor([-8.0606, -8.0607, -8.0607, -8.0608, -8.0608, -8.0609, -8.0609, -8.0609,
        -8.0609, -8.0609], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4993, -0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>), 'Li': tensor([-7.4734, -7.4735, -7.4735, -7.4735, -7.4735, -7.4735, -7.4735, -7.4735,
        -7.4735, -7.4735], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 9 	 10 	 HLi 	 LiH 	 4.8275129820113365e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,  9ClH
SUBMOLECULES: ['HCl', 'Cl', 'H']
SUBMOLECULE INDICES: [9, 13, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='ClH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1712], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1712], dtype=torch.float64)
E_PRED: tensor([-460.7647, -460.8055, -460.8170, -460.8229, -460.8267, -460.8293,
        -460.8310, -460.8323, -460.8331, -460.8338, -460.8342, -460.8345,
        -460.8347, -460.8348, -460.8349, -460.8350, -460.8350, -460.8351,
        -460.8351, -460.8351, -460.8351, -460.8351, -460.8351, -460.8352,
        -460.8352], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 62, 62])
mo_energy   ---   torch.Size([2, 62])
dm_ref   ---   torch.Size([1, 2, 62, 62])
rho   ---   torch.Size([1, 2, 1068])
ao_eval   ---   torch.Size([1, 10, 1068, 62])
grid_weights   ---   torch.Size([1, 1068])
-460.4234538667477
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 62])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 62])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.4638e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0952, -460.1267, -460.1380, -460.1445, -460.1489, -460.1521,
        -460.1544, -460.1561, -460.1572, -460.1581, -460.1587, -460.1591,
        -460.1594, -460.1596, -460.1598, -460.1599, -460.1600, -460.1600,
        -460.1601, -460.1601, -460.1601, -460.1601, -460.1601, -460.1601,
        -460.1601], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0261e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3316, -0.4620, -0.4775, -0.4850, -0.4896, -0.4927, -0.4948, -0.4963,
        -0.4973, -0.4980, -0.4985, -0.4988, -0.4991, -0.4992, -0.4994, -0.4994,
        -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.4741e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.1330e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClH': tensor([-0.1712], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'ClH': tensor([-460.8350, -460.8350, -460.8351, -460.8351, -460.8351, -460.8351,
        -460.8351, -460.8351, -460.8352, -460.8352], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1599, -460.1600, -460.1600, -460.1601, -460.1601, -460.1601,
        -460.1601, -460.1601, -460.1601, -460.1601], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 9 	 9 	 HCl 	 ClH 	 4.052812240061257e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e09)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e09/2022-11-29_10:09:21.574160_0.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e09/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 9 || ,[' rho : 2.990446', ' ae : 59.062002', ' E : 2.664679'] ,|| total loss 43.853009 || CHKPT: _0.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------11----------------
TRAINING ON MOLECULE:  , 11NaNa
SUBMOLECULES: ['Na2', 'Na', 'Na']
SUBMOLECULE INDICES: [11, 18, 18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0273], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0273], dtype=torch.float64)
E_PRED: tensor([-324.6429, -324.5739, -324.5559, -324.5466, -324.5408, -324.5368,
        -324.5340, -324.5321, -324.5308, -324.5298, -324.5291, -324.5287,
        -324.5283, -324.5281, -324.5280, -324.5278, -324.5278, -324.5277,
        -324.5277, -324.5276, -324.5276, -324.5276, -324.5276, -324.5276,
        -324.5276], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 1992])
ao_eval   ---   torch.Size([1, 10, 1992, 94])
grid_weights   ---   torch.Size([1, 1992])
-324.03216786711033
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(4.5145e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.0290e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2338, -162.2440, -162.2471, -162.2487, -162.2497, -162.2505,
        -162.2511, -162.2515, -162.2516, -162.2517, -162.2517, -162.2518,
        -162.2518, -162.2518, -162.2519, -162.2519, -162.2519, -162.2519,
        -162.2519, -162.2519, -162.2519, -162.2519, -162.2519, -162.2519,
        -162.2519], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.8467e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.0298e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NaNa': tensor([-0.0273], dtype=torch.float64), 'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'NaNa': tensor([-324.5278, -324.5278, -324.5277, -324.5277, -324.5276, -324.5276,
        -324.5276, -324.5276, -324.5276, -324.5276], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Na': tensor([-162.2519, -162.2519, -162.2519, -162.2519, -162.2519, -162.2519,
        -162.2519, -162.2519, -162.2519, -162.2519], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 10 	 11 	 Na2 	 Na2 	 2.9186228512220813e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 15, 15]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0129, -1.1070, -1.1313, -1.1437, -1.1515, -1.1568, -1.1605, -1.1631,
        -1.1649, -1.1661, -1.1670, -1.1676, -1.1681, -1.1684, -1.1686, -1.1687,
        -1.1688, -1.1689, -1.1689, -1.1690, -1.1690, -1.1690, -1.1690, -1.1690,
        -1.1690], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668206
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6317e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.2633e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3452, -0.4655, -0.4795, -0.4863, -0.4905, -0.4933, -0.4952, -0.4966,
        -0.4975, -0.4981, -0.4986, -0.4989, -0.4991, -0.4993, -0.4994, -0.4995,
        -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.4712e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.0458e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.1576e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1687, -1.1688, -1.1689, -1.1689, -1.1690, -1.1690, -1.1690, -1.1690,
        -1.1690, -1.1690], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 10 	 0 	 H2 	 H2 	 4.847434215591601e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------19----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9544, -74.9985, -75.0180, -75.0295, -75.0373, -75.0429, -75.0469,
        -75.0498, -75.0519, -75.0533, -75.0544, -75.0551, -75.0556, -75.0560,
        -75.0563, -75.0564, -75.0566, -75.0566, -75.0567, -75.0568, -75.0568,
        -75.0568, -75.0568, -75.0568, -75.0568], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.0510e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.0510e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0564, -75.0566, -75.0566, -75.0567, -75.0568, -75.0568, -75.0568,
        -75.0568, -75.0568, -75.0568], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 10 	 19 	 O 	 O 	 2.5626990600302787e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------15----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2459, -0.4379, -0.4640, -0.4763, -0.4837, -0.4886, -0.4920, -0.4943,
        -0.4959, -0.4970, -0.4978, -0.4984, -0.4987, -0.4990, -0.4992, -0.4993,
        -0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.4700e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.9483e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.8940e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4993, -0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 10 	 15 	 H 	 H 	 3.44017037218907e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 17, 17]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.7825, -109.8416, -109.7230, -109.6512, -109.6043, -109.5722,
        -109.5499, -109.5344, -109.5235, -109.5160, -109.5107, -109.5070,
        -109.5045, -109.5027, -109.5014, -109.5005, -109.4999, -109.4995,
        -109.4992, -109.4990, -109.4988, -109.4987, -109.4987, -109.4986,
        -109.4986], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018879
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.3042e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4138, -54.4843, -54.5154, -54.5336, -54.5460, -54.5548, -54.5611,
        -54.5656, -54.5687, -54.5710, -54.5725, -54.5737, -54.5744, -54.5750,
        -54.5754, -54.5756, -54.5758, -54.5760, -54.5761, -54.5761, -54.5762,
        -54.5762, -54.5762, -54.5762, -54.5762], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2468e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.5005, -109.4999, -109.4995, -109.4992, -109.4990, -109.4988,
        -109.4987, -109.4987, -109.4986, -109.4986], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5756, -54.5758, -54.5760, -54.5761, -54.5761, -54.5762, -54.5762,
        -54.5762, -54.5762, -54.5762], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 10 	 1 	 N2 	 N2 	 7.459676163766503e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 13, 13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4740, -920.4441, -920.4370, -920.4333, -920.4309, -920.4292,
        -920.4281, -920.4272, -920.4267, -920.4263, -920.4260, -920.4258,
        -920.4256, -920.4255, -920.4255, -920.4254, -920.4254, -920.4253,
        -920.4253, -920.4253, -920.4253, -920.4253, -920.4253, -920.4253,
        -920.4253], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885617
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.9536e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.9071e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0988, -460.1293, -460.1399, -460.1459, -460.1501, -460.1530,
        -460.1551, -460.1566, -460.1577, -460.1585, -460.1590, -460.1594,
        -460.1597, -460.1599, -460.1600, -460.1601, -460.1602, -460.1602,
        -460.1603, -460.1603, -460.1603, -460.1603, -460.1603, -460.1603,
        -460.1603], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0647e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.9178e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4254, -920.4254, -920.4253, -920.4253, -920.4253, -920.4253,
        -920.4253, -920.4253, -920.4253, -920.4253], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1601, -460.1602, -460.1602, -460.1603, -460.1603, -460.1603,
        -460.1603, -460.1603, -460.1603, -460.1603], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 10 	 5 	 Cl2 	 Cl2 	 2.3723723112021118e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,  6FF
SUBMOLECULES: ['F2', 'F', 'F']
SUBMOLECULE INDICES: [6, 14, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0618], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0618], dtype=torch.float64)
E_PRED: tensor([-199.6841, -199.5869, -199.5611, -199.5478, -199.5393, -199.5335,
        -199.5295, -199.5267, -199.5247, -199.5233, -199.5224, -199.5217,
        -199.5212, -199.5208, -199.5206, -199.5204, -199.5203, -199.5202,
        -199.5202, -199.5201, -199.5201, -199.5201, -199.5200, -199.5200,
        -199.5200], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 4698])
ao_eval   ---   torch.Size([1, 10, 4698, 78])
grid_weights   ---   torch.Size([1, 4698])
-199.3364659747656
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.2681e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.5362e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6703, -99.6917, -99.7030, -99.7099, -99.7147, -99.7182, -99.7208,
        -99.7226, -99.7240, -99.7249, -99.7256, -99.7261, -99.7264, -99.7267,
        -99.7268, -99.7270, -99.7270, -99.7271, -99.7271, -99.7272, -99.7272,
        -99.7272, -99.7272, -99.7272, -99.7272], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.2795e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.5395e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'FF': tensor([-0.0618], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'FF': tensor([-199.5204, -199.5203, -199.5202, -199.5202, -199.5201, -199.5201,
        -199.5201, -199.5200, -199.5200, -199.5200], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7270, -99.7270, -99.7271, -99.7271, -99.7272, -99.7272, -99.7272,
        -99.7272, -99.7272, -99.7272], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 10 	 6 	 F2 	 F2 	 3.3258777844722464e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 16, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2573, -107.2785, -107.2435, -107.2364, -107.2313, -107.2285,
        -107.2272, -107.2269, -107.2271, -107.2273, -107.2276, -107.2279,
        -107.2281, -107.2284, -107.2287, -107.2290, -107.2293, -107.2296,
        -107.2298, -107.2300, -107.2301, -107.2303, -107.2304, -107.2305,
        -107.2305], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.305942205048
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.4392e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6700, -99.6906, -99.7021, -99.7092, -99.7142, -99.7178, -99.7205,
        -99.7225, -99.7239, -99.7249, -99.7256, -99.7261, -99.7264, -99.7267,
        -99.7269, -99.7270, -99.7271, -99.7271, -99.7272, -99.7272, -99.7272,
        -99.7273, -99.7273, -99.7273, -99.7273], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.2371e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4580, -7.4652, -7.4684, -7.4702, -7.4713, -7.4722, -7.4732, -7.4739,
        -7.4739, -7.4736, -7.4734, -7.4734, -7.4734, -7.4734, -7.4734, -7.4735,
        -7.4735, -7.4735, -7.4735, -7.4735, -7.4736, -7.4736, -7.4736, -7.4736,
        -7.4736], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.1721e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.4425e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2290, -107.2293, -107.2296, -107.2298, -107.2300, -107.2301,
        -107.2303, -107.2304, -107.2305, -107.2305], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7270, -99.7271, -99.7271, -99.7272, -99.7272, -99.7272, -99.7273,
        -99.7273, -99.7273, -99.7273], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4735, -7.4735, -7.4735, -7.4735, -7.4735, -7.4736, -7.4736, -7.4736,
        -7.4736, -7.4736], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 10 	 2 	 FLi 	 LiF 	 0.008690014657678007

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,  9ClH
SUBMOLECULES: ['HCl', 'Cl', 'H']
SUBMOLECULE INDICES: [9, 13, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='ClH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1712], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1712], dtype=torch.float64)
E_PRED: tensor([-460.7697, -460.8079, -460.8187, -460.8243, -460.8278, -460.8302,
        -460.8319, -460.8330, -460.8338, -460.8344, -460.8348, -460.8351,
        -460.8353, -460.8354, -460.8355, -460.8356, -460.8356, -460.8357,
        -460.8357, -460.8357, -460.8357, -460.8357, -460.8357, -460.8357,
        -460.8357], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 62, 62])
mo_energy   ---   torch.Size([2, 62])
dm_ref   ---   torch.Size([1, 2, 62, 62])
rho   ---   torch.Size([1, 2, 1068])
ao_eval   ---   torch.Size([1, 10, 1068, 62])
grid_weights   ---   torch.Size([1, 1068])
-460.4234538667477
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 62])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 62])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.3518e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1083, -460.1355, -460.1444, -460.1493, -460.1526, -460.1550,
        -460.1566, -460.1578, -460.1587, -460.1593, -460.1597, -460.1600,
        -460.1602, -460.1604, -460.1605, -460.1606, -460.1606, -460.1607,
        -460.1607, -460.1607, -460.1607, -460.1607, -460.1607, -460.1607,
        -460.1607], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1356e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2274, -0.4321, -0.4608, -0.4742, -0.4824, -0.4877, -0.4914, -0.4939,
        -0.4956, -0.4968, -0.4977, -0.4983, -0.4987, -0.4990, -0.4992, -0.4993,
        -0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.4727e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.1714e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClH': tensor([-0.1712], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'ClH': tensor([-460.8356, -460.8356, -460.8357, -460.8357, -460.8357, -460.8357,
        -460.8357, -460.8357, -460.8357, -460.8357], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1606, -460.1606, -460.1607, -460.1607, -460.1607, -460.1607,
        -460.1607, -460.1607, -460.1607, -460.1607], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4993, -0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 10 	 9 	 HCl 	 ClH 	 4.042650373081496e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,  7CCHH
SUBMOLECULES: ['C2H2', 'C', 'C', 'H', 'H']
SUBMOLECULE INDICES: [7, 12, 12, 15, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C2H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6459], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6459], dtype=torch.float64)
E_PRED: tensor([-77.6958, -72.6569, -74.9005, -75.7563, -76.2417, -76.5554, -76.7677,
        -76.9140, -77.0156, -77.0865, -77.1363, -77.1712, -77.1957, -77.2128,
        -77.2249, -77.2333, -77.2392, -77.2434, -77.2463, -77.2484, -77.2498,
        -77.2508, -77.2515, -77.2520, -77.2524], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 108, 108])
mo_energy   ---   torch.Size([2, 108])
dm_ref   ---   torch.Size([1, 2, 108, 108])
rho   ---   torch.Size([1, 2, 1924])
ao_eval   ---   torch.Size([1, 10, 1924, 108])
grid_weights   ---   torch.Size([1, 1924])
-77.2336470993193
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 108])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 108])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.8724e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7424, -37.7823, -37.7981, -37.8071, -37.8132, -37.8175, -37.8205,
        -37.8227, -37.8242, -37.8253, -37.8261, -37.8267, -37.8270, -37.8273,
        -37.8275, -37.8276, -37.8277, -37.8278, -37.8278, -37.8279, -37.8279,
        -37.8279, -37.8279, -37.8279, -37.8279], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(6.8637e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2249, -0.4313, -0.4603, -0.4739, -0.4822, -0.4876, -0.4913, -0.4938,
        -0.4956, -0.4968, -0.4977, -0.4982, -0.4987, -0.4990, -0.4992, -0.4993,
        -0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.4729e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.2024e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CCHH': tensor([-0.6459], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'CCHH': tensor([-77.2333, -77.2392, -77.2434, -77.2463, -77.2484, -77.2498, -77.2508,
        -77.2515, -77.2520, -77.2524], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8276, -37.8277, -37.8278, -37.8278, -37.8279, -37.8279, -37.8279,
        -37.8279, -37.8279, -37.8279], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4993, -0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 10 	 7 	 C2H2 	 C2H2 	 0.0005651316950702587

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 12, 19, 19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.5065, -188.7509, -188.5909, -188.4976, -188.4402, -188.4011,
        -188.3739, -188.3547, -188.3411, -188.3315, -188.3247, -188.3198,
        -188.3164, -188.3139, -188.3122, -188.3109, -188.3100, -188.3094,
        -188.3090, -188.3086, -188.3084, -188.3082, -188.3081, -188.3080,
        -188.3080], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.4017587505662
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.8387e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7450, -37.7848, -37.7999, -37.8084, -37.8141, -37.8182, -37.8210,
        -37.8231, -37.8245, -37.8256, -37.8263, -37.8268, -37.8272, -37.8274,
        -37.8276, -37.8277, -37.8278, -37.8279, -37.8279, -37.8279, -37.8279,
        -37.8280, -37.8280, -37.8280, -37.8280], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(6.7996e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9607, -75.0053, -75.0232, -75.0335, -75.0404, -75.0453, -75.0488,
        -75.0513, -75.0531, -75.0544, -75.0553, -75.0560, -75.0564, -75.0567,
        -75.0569, -75.0571, -75.0572, -75.0573, -75.0573, -75.0574, -75.0574,
        -75.0574, -75.0574, -75.0574, -75.0575], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.1163e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3109, -188.3100, -188.3094, -188.3090, -188.3086, -188.3084,
        -188.3082, -188.3081, -188.3080, -188.3080], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8277, -37.8278, -37.8279, -37.8279, -37.8279, -37.8279, -37.8280,
        -37.8280, -37.8280, -37.8280], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0571, -75.0572, -75.0573, -75.0573, -75.0574, -75.0574, -75.0574,
        -75.0574, -75.0574, -75.0575], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 10 	 4 	 CO2 	 CO2 	 0.015452037931251206

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------13----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1137, -460.1388, -460.1467, -460.1510, -460.1539, -460.1559,
        -460.1574, -460.1584, -460.1591, -460.1597, -460.1600, -460.1603,
        -460.1605, -460.1606, -460.1607, -460.1608, -460.1608, -460.1608,
        -460.1609, -460.1609, -460.1609, -460.1609, -460.1609, -460.1609,
        -460.1609], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1694e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.1694e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1608, -460.1608, -460.1608, -460.1609, -460.1609, -460.1609,
        -460.1609, -460.1609, -460.1609, -460.1609], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 10 	 13 	 Cl 	 Cl 	 3.89100388557256e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7364, -37.7750, -37.7926, -37.8030, -37.8100, -37.8150, -37.8186,
        -37.8212, -37.8230, -37.8244, -37.8253, -37.8259, -37.8264, -37.8267,
        -37.8269, -37.8271, -37.8272, -37.8273, -37.8273, -37.8274, -37.8274,
        -37.8274, -37.8274, -37.8274, -37.8274], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.4361e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.4361e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8271, -37.8272, -37.8273, -37.8273, -37.8274, -37.8274, -37.8274,
        -37.8274, -37.8274, -37.8274], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 10 	 12 	 C 	 C 	 3.989375054835427e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------17----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [17]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4180, -54.4889, -54.5186, -54.5358, -54.5474, -54.5556, -54.5615,
        -54.5656, -54.5686, -54.5706, -54.5721, -54.5731, -54.5739, -54.5744,
        -54.5747, -54.5750, -54.5752, -54.5753, -54.5754, -54.5754, -54.5755,
        -54.5755, -54.5755, -54.5755, -54.5755], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3764e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.3764e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5750, -54.5752, -54.5753, -54.5754, -54.5754, -54.5755, -54.5755,
        -54.5755, -54.5755, -54.5755], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 10 	 17 	 N 	 N 	 4.3689257660013254e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------16----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [16]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4575, -7.4646, -7.4679, -7.4697, -7.4709, -7.4718, -7.4728, -7.4735,
        -7.4735, -7.4732, -7.4730, -7.4730, -7.4730, -7.4730, -7.4730, -7.4731,
        -7.4731, -7.4731, -7.4731, -7.4731, -7.4731, -7.4731, -7.4732, -7.4732,
        -7.4732], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.1502e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.7210e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.3020e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4731, -7.4731, -7.4731, -7.4731, -7.4731, -7.4731, -7.4731, -7.4732,
        -7.4732, -7.4732], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 10 	 16 	 Li 	 Li 	 5.620400597726956e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 12, 17, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-93.9456, -93.5000, -93.3845, -93.3334, -93.2971, -93.2733, -93.2563,
        -93.2443, -93.2357, -93.2294, -93.2250, -93.2217, -93.2193, -93.2176,
        -93.2163, -93.2154, -93.2147, -93.2142, -93.2138, -93.2135, -93.2133,
        -93.2131, -93.2130, -93.2129, -93.2129], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633898
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.9715e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7332, -37.7690, -37.7879, -37.7993, -37.8071, -37.8127, -37.8168,
        -37.8197, -37.8218, -37.8232, -37.8243, -37.8250, -37.8255, -37.8259,
        -37.8262, -37.8263, -37.8265, -37.8266, -37.8266, -37.8267, -37.8267,
        -37.8267, -37.8267, -37.8267, -37.8268], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.2624e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2234, -0.4309, -0.4601, -0.4738, -0.4820, -0.4875, -0.4912, -0.4937,
        -0.4955, -0.4967, -0.4976, -0.4982, -0.4986, -0.4989, -0.4991, -0.4993,
        -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.4204e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.3598e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4269, -54.4972, -54.5244, -54.5399, -54.5502, -54.5575, -54.5627,
        -54.5663, -54.5689, -54.5708, -54.5721, -54.5730, -54.5736, -54.5740,
        -54.5744, -54.5746, -54.5747, -54.5748, -54.5749, -54.5750, -54.5750,
        -54.5750, -54.5750, -54.5751, -54.5751], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4650e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2154, -93.2147, -93.2142, -93.2138, -93.2135, -93.2133, -93.2131,
        -93.2130, -93.2129, -93.2129], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8263, -37.8265, -37.8266, -37.8266, -37.8267, -37.8267, -37.8267,
        -37.8267, -37.8267, -37.8268], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4993, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4996, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5746, -54.5747, -54.5748, -54.5749, -54.5750, -54.5750, -54.5750,
        -54.5750, -54.5751, -54.5751], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 10 	 3 	 CHN 	 CNH 	 0.00823715838684453

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,  8OC
SUBMOLECULES: ['CO', 'O', 'C']
SUBMOLECULE INDICES: [8, 19, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='OC', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4142], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4142], dtype=torch.float64)
E_PRED: tensor([-113.7247, -113.4177, -113.3445, -113.3055, -113.2818, -113.2655,
        -113.2542, -113.2462, -113.2407, -113.2368, -113.2341, -113.2322,
        -113.2309, -113.2299, -113.2293, -113.2288, -113.2285, -113.2283,
        -113.2281, -113.2280, -113.2279, -113.2279, -113.2279, -113.2278,
        -113.2278], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 3279])
ao_eval   ---   torch.Size([1, 10, 3279, 78])
grid_weights   ---   torch.Size([1, 3279])
-113.201730216515
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.4900e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7345, -37.7722, -37.7903, -37.8010, -37.8083, -37.8136, -37.8173,
        -37.8200, -37.8219, -37.8233, -37.8242, -37.8249, -37.8254, -37.8257,
        -37.8260, -37.8261, -37.8263, -37.8263, -37.8264, -37.8264, -37.8265,
        -37.8265, -37.8265, -37.8265, -37.8265], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.5210e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9471, -74.9828, -75.0051, -75.0194, -75.0294, -75.0367, -75.0419,
        -75.0458, -75.0485, -75.0505, -75.0519, -75.0529, -75.0536, -75.0541,
        -75.0544, -75.0547, -75.0549, -75.0550, -75.0551, -75.0551, -75.0552,
        -75.0552, -75.0552, -75.0552, -75.0552], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0792e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'OC': tensor([-0.4142], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'OC': tensor([-113.2288, -113.2285, -113.2283, -113.2281, -113.2280, -113.2279,
        -113.2279, -113.2279, -113.2278, -113.2278], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8261, -37.8263, -37.8263, -37.8264, -37.8264, -37.8265, -37.8265,
        -37.8265, -37.8265, -37.8265], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0547, -75.0549, -75.0550, -75.0551, -75.0551, -75.0552, -75.0552,
        -75.0552, -75.0552, -75.0552], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 10 	 8 	 CO 	 OC 	 0.0010843284764483793

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------18----------------
TRAINING ON MOLECULE:  ,Na
SUBMOLECULES: ['Na']
SUBMOLECULE INDICES: [18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2253, -162.2373, -162.2415, -162.2438, -162.2452, -162.2461,
        -162.2469, -162.2476, -162.2479, -162.2480, -162.2481, -162.2481,
        -162.2482, -162.2482, -162.2482, -162.2483, -162.2483, -162.2483,
        -162.2483, -162.2483, -162.2483, -162.2483, -162.2483, -162.2483,
        -162.2483], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.2385e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(4.2385e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'Na': tensor([-162.2483, -162.2483, -162.2483, -162.2483, -162.2483, -162.2483,
        -162.2483, -162.2483, -162.2483, -162.2483], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 10 	 18 	 Na 	 Na 	 9.267490538784295e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------14----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6747, -99.6982, -99.7070, -99.7121, -99.7156, -99.7180, -99.7198,
        -99.7211, -99.7220, -99.7226, -99.7231, -99.7234, -99.7236, -99.7238,
        -99.7239, -99.7240, -99.7240, -99.7241, -99.7241, -99.7241, -99.7241,
        -99.7241, -99.7242, -99.7242, -99.7242], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(6.8347e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.8347e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7240, -99.7240, -99.7241, -99.7241, -99.7241, -99.7241, -99.7241,
        -99.7242, -99.7242, -99.7242], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 10 	 14 	 F 	 F 	 2.2174038484122368e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  , 10LiH
SUBMOLECULES: ['HLi', 'Li', 'H']
SUBMOLECULE INDICES: [10, 16, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0923], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0923], dtype=torch.float64)
E_PRED: tensor([-7.9309, -8.0072, -8.0272, -8.0376, -8.0444, -8.0490, -8.0523, -8.0546,
        -8.0562, -8.0574, -8.0582, -8.0588, -8.0592, -8.0595, -8.0597, -8.0598,
        -8.0599, -8.0600, -8.0601, -8.0601, -8.0601, -8.0601, -8.0601, -8.0601,
        -8.0602], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 54, 54])
mo_energy   ---   torch.Size([2, 54])
dm_ref   ---   torch.Size([1, 2, 54, 54])
rho   ---   torch.Size([1, 2, 1271])
ao_eval   ---   torch.Size([1, 10, 1271, 54])
grid_weights   ---   torch.Size([1, 1271])
-8.038079906478378
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 54])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 54])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.5652e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.1303e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3268, -0.4607, -0.4768, -0.4845, -0.4893, -0.4924, -0.4946, -0.4961,
        -0.4972, -0.4979, -0.4984, -0.4987, -0.4990, -0.4992, -0.4993, -0.4994,
        -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.3888e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.3792e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.0081e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4606, -7.4674, -7.4697, -7.4709, -7.4718, -7.4728, -7.4733, -7.4731,
        -7.4728, -7.4727, -7.4727, -7.4727, -7.4727, -7.4727, -7.4728, -7.4728,
        -7.4728, -7.4728, -7.4728, -7.4729, -7.4729, -7.4729, -7.4729, -7.4729,
        -7.4729], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.1317e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.9232e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.2734e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiH': tensor([-0.0923], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiH': tensor([-8.0598, -8.0599, -8.0600, -8.0601, -8.0601, -8.0601, -8.0601, -8.0601,
        -8.0601, -8.0602], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4996, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>), 'Li': tensor([-7.4728, -7.4728, -7.4728, -7.4728, -7.4729, -7.4729, -7.4729, -7.4729,
        -7.4729, -7.4729], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 10 	 10 	 HLi 	 LiH 	 4.870069326220177e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e10)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e10/2022-11-29_10:09:21.574160_1.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e10/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 10 || ,[' rho : 2.979661', ' ae : 58.593696', ' E : 2.846004'] ,|| total loss 43.523089 || CHKPT: _1.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------7----------------
TRAINING ON MOLECULE:  ,  7CCHH
SUBMOLECULES: ['C2H2', 'C', 'C', 'H', 'H']
SUBMOLECULE INDICES: [7, 12, 12, 15, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C2H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6459], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6459], dtype=torch.float64)
E_PRED: tensor([-78.3934, -73.3878, -75.1923, -75.9142, -76.3385, -76.6182, -76.8095,
        -76.9421, -77.0344, -77.0989, -77.1441, -77.1757, -77.1979, -77.2134,
        -77.2243, -77.2320, -77.2373, -77.2411, -77.2437, -77.2456, -77.2469,
        -77.2478, -77.2484, -77.2488, -77.2491], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 108, 108])
mo_energy   ---   torch.Size([2, 108])
dm_ref   ---   torch.Size([1, 2, 108, 108])
rho   ---   torch.Size([1, 2, 1924])
ao_eval   ---   torch.Size([1, 10, 1924, 108])
grid_weights   ---   torch.Size([1, 1924])
-77.2336470993193
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 108])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 108])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.8390e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7437, -37.7833, -37.7983, -37.8067, -37.8124, -37.8164, -37.8192,
        -37.8212, -37.8226, -37.8237, -37.8244, -37.8249, -37.8252, -37.8255,
        -37.8257, -37.8258, -37.8259, -37.8259, -37.8260, -37.8260, -37.8260,
        -37.8260, -37.8260, -37.8261, -37.8261], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.0224e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2766, -0.4469, -0.4690, -0.4795, -0.4859, -0.4901, -0.4930, -0.4950,
        -0.4964, -0.4973, -0.4980, -0.4985, -0.4988, -0.4990, -0.4992, -0.4993,
        -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.3856e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.8388e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CCHH': tensor([-0.6459], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'CCHH': tensor([-77.2320, -77.2373, -77.2411, -77.2437, -77.2456, -77.2469, -77.2478,
        -77.2484, -77.2488, -77.2491], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8258, -37.8259, -37.8259, -37.8260, -37.8260, -37.8260, -37.8260,
        -37.8260, -37.8261, -37.8261], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4993, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 11 	 7 	 C2H2 	 C2H2 	 0.0005493605177167807

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,  9ClH
SUBMOLECULES: ['HCl', 'Cl', 'H']
SUBMOLECULE INDICES: [9, 13, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='ClH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1712], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1712], dtype=torch.float64)
E_PRED: tensor([-460.7747, -460.8038, -460.8121, -460.8165, -460.8192, -460.8211,
        -460.8224, -460.8233, -460.8239, -460.8244, -460.8247, -460.8249,
        -460.8251, -460.8252, -460.8253, -460.8253, -460.8254, -460.8254,
        -460.8254, -460.8254, -460.8254, -460.8254, -460.8254, -460.8254,
        -460.8254], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 62, 62])
mo_energy   ---   torch.Size([2, 62])
dm_ref   ---   torch.Size([1, 2, 62, 62])
rho   ---   torch.Size([1, 2, 1068])
ao_eval   ---   torch.Size([1, 10, 1068, 62])
grid_weights   ---   torch.Size([1, 1068])
-460.4234538667477
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 62])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 62])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.2057e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0982, -460.1255, -460.1343, -460.1392, -460.1426, -460.1449,
        -460.1466, -460.1478, -460.1486, -460.1492, -460.1496, -460.1499,
        -460.1502, -460.1503, -460.1504, -460.1505, -460.1505, -460.1506,
        -460.1506, -460.1506, -460.1506, -460.1506, -460.1507, -460.1507,
        -460.1507], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.7953e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2766, -0.4470, -0.4690, -0.4795, -0.4859, -0.4901, -0.4930, -0.4950,
        -0.4964, -0.4973, -0.4980, -0.4985, -0.4988, -0.4990, -0.4992, -0.4993,
        -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.3832e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.8473e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClH': tensor([-0.1712], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'ClH': tensor([-460.8253, -460.8254, -460.8254, -460.8254, -460.8254, -460.8254,
        -460.8254, -460.8254, -460.8254, -460.8254], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1505, -460.1505, -460.1506, -460.1506, -460.1506, -460.1506,
        -460.1506, -460.1507, -460.1507, -460.1507], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4993, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 11 	 9 	 HCl 	 ClH 	 3.711582772731376e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7350, -37.7735, -37.7911, -37.8014, -37.8085, -37.8135, -37.8172,
        -37.8197, -37.8216, -37.8229, -37.8238, -37.8245, -37.8249, -37.8253,
        -37.8255, -37.8256, -37.8258, -37.8258, -37.8259, -37.8259, -37.8260,
        -37.8260, -37.8260, -37.8260, -37.8260], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.1500e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.1500e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8256, -37.8258, -37.8258, -37.8259, -37.8259, -37.8260, -37.8260,
        -37.8260, -37.8260, -37.8260], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 11 	 12 	 C 	 C 	 4.921352125576765e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,  8OC
SUBMOLECULES: ['CO', 'O', 'C']
SUBMOLECULE INDICES: [8, 19, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='OC', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4142], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4142], dtype=torch.float64)
E_PRED: tensor([-113.7300, -113.4192, -113.3451, -113.3056, -113.2816, -113.2651,
        -113.2536, -113.2456, -113.2400, -113.2360, -113.2333, -113.2313,
        -113.2300, -113.2291, -113.2284, -113.2279, -113.2276, -113.2274,
        -113.2272, -113.2271, -113.2271, -113.2270, -113.2270, -113.2269,
        -113.2269], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 3279])
ao_eval   ---   torch.Size([1, 10, 3279, 78])
grid_weights   ---   torch.Size([1, 3279])
-113.201730216515
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.4822e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7405, -37.7804, -37.7961, -37.8052, -37.8112, -37.8155, -37.8186,
        -37.8208, -37.8223, -37.8234, -37.8242, -37.8248, -37.8251, -37.8254,
        -37.8256, -37.8257, -37.8258, -37.8259, -37.8259, -37.8260, -37.8260,
        -37.8260, -37.8260, -37.8260, -37.8260], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.0741e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9468, -74.9851, -75.0070, -75.0206, -75.0301, -75.0370, -75.0420,
        -75.0456, -75.0482, -75.0501, -75.0514, -75.0523, -75.0530, -75.0535,
        -75.0538, -75.0540, -75.0542, -75.0543, -75.0544, -75.0544, -75.0545,
        -75.0545, -75.0545, -75.0545, -75.0545], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2023e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'OC': tensor([-0.4142], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'OC': tensor([-113.2279, -113.2276, -113.2274, -113.2272, -113.2271, -113.2271,
        -113.2270, -113.2270, -113.2269, -113.2269], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8257, -37.8258, -37.8259, -37.8259, -37.8260, -37.8260, -37.8260,
        -37.8260, -37.8260, -37.8260], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0540, -75.0542, -75.0543, -75.0544, -75.0544, -75.0545, -75.0545,
        -75.0545, -75.0545, -75.0545], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 11 	 8 	 CO 	 OC 	 0.0010749601533765574

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  , 10LiH
SUBMOLECULES: ['HLi', 'Li', 'H']
SUBMOLECULE INDICES: [10, 16, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0923], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0923], dtype=torch.float64)
E_PRED: tensor([-7.9862, -8.0294, -8.0411, -8.0471, -8.0510, -8.0537, -8.0556, -8.0570,
        -8.0579, -8.0586, -8.0590, -8.0594, -8.0596, -8.0598, -8.0599, -8.0600,
        -8.0600, -8.0601, -8.0601, -8.0601, -8.0601, -8.0601, -8.0601, -8.0601,
        -8.0601], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 54, 54])
mo_energy   ---   torch.Size([2, 54])
dm_ref   ---   torch.Size([1, 2, 54, 54])
rho   ---   torch.Size([1, 2, 1271])
ao_eval   ---   torch.Size([1, 10, 1271, 54])
grid_weights   ---   torch.Size([1, 1271])
-8.038079906478378
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 54])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 54])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.5479e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.0957e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3103, -0.4563, -0.4743, -0.4829, -0.4882, -0.4917, -0.4941, -0.4957,
        -0.4969, -0.4977, -0.4983, -0.4987, -0.4989, -0.4991, -0.4993, -0.4994,
        -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.3809e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.5444e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(4.9719e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4575, -7.4648, -7.4678, -7.4696, -7.4707, -7.4716, -7.4726, -7.4732,
        -7.4731, -7.4728, -7.4727, -7.4726, -7.4726, -7.4727, -7.4727, -7.4727,
        -7.4727, -7.4728, -7.4728, -7.4728, -7.4728, -7.4728, -7.4728, -7.4728,
        -7.4728], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.1271e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.9639e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.2282e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiH': tensor([-0.0923], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiH': tensor([-8.0600, -8.0600, -8.0601, -8.0601, -8.0601, -8.0601, -8.0601, -8.0601,
        -8.0601, -8.0601], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>), 'Li': tensor([-7.4727, -7.4727, -7.4728, -7.4728, -7.4728, -7.4728, -7.4728, -7.4728,
        -7.4728, -7.4728], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 11 	 10 	 HLi 	 LiH 	 4.747809494368135e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------18----------------
TRAINING ON MOLECULE:  ,Na
SUBMOLECULES: ['Na']
SUBMOLECULE INDICES: [18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2301, -162.2401, -162.2432, -162.2447, -162.2457, -162.2465,
        -162.2471, -162.2474, -162.2476, -162.2476, -162.2477, -162.2477,
        -162.2478, -162.2478, -162.2478, -162.2478, -162.2478, -162.2478,
        -162.2478, -162.2478, -162.2478, -162.2478, -162.2478, -162.2478,
        -162.2478], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.8728e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(4.8728e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'Na': tensor([-162.2478, -162.2478, -162.2478, -162.2478, -162.2478, -162.2478,
        -162.2478, -162.2478, -162.2478, -162.2478], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 11 	 18 	 Na 	 Na 	 1.0677213100852144e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 12, 17, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-94.0676, -93.5502, -93.4106, -93.3530, -93.3100, -93.2825, -93.2627,
        -93.2487, -93.2387, -93.2315, -93.2263, -93.2225, -93.2198, -93.2178,
        -93.2164, -93.2153, -93.2145, -93.2139, -93.2135, -93.2132, -93.2130,
        -93.2128, -93.2127, -93.2126, -93.2125], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633898
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.9424e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7325, -37.7675, -37.7866, -37.7981, -37.8061, -37.8118, -37.8159,
        -37.8189, -37.8210, -37.8225, -37.8236, -37.8243, -37.8249, -37.8253,
        -37.8255, -37.8257, -37.8258, -37.8259, -37.8260, -37.8260, -37.8261,
        -37.8261, -37.8261, -37.8261, -37.8261], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.0383e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3155, -0.4577, -0.4751, -0.4834, -0.4885, -0.4919, -0.4942, -0.4958,
        -0.4970, -0.4978, -0.4983, -0.4987, -0.4989, -0.4991, -0.4993, -0.4994,
        -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.3828e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.5003e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4027, -54.4652, -54.5004, -54.5219, -54.5369, -54.5477, -54.5554,
        -54.5609, -54.5649, -54.5677, -54.5696, -54.5710, -54.5720, -54.5727,
        -54.5732, -54.5735, -54.5737, -54.5739, -54.5740, -54.5741, -54.5742,
        -54.5742, -54.5742, -54.5742, -54.5743], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6653e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2153, -93.2145, -93.2139, -93.2135, -93.2132, -93.2130, -93.2128,
        -93.2127, -93.2126, -93.2125], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8257, -37.8258, -37.8259, -37.8260, -37.8260, -37.8261, -37.8261,
        -37.8261, -37.8261, -37.8261], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5735, -54.5737, -54.5739, -54.5740, -54.5741, -54.5742, -54.5742,
        -54.5742, -54.5742, -54.5743], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 11 	 3 	 CHN 	 CNH 	 0.008139063952154704

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------19----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9599, -75.0041, -75.0216, -75.0316, -75.0383, -75.0430, -75.0464,
        -75.0489, -75.0506, -75.0518, -75.0527, -75.0533, -75.0537, -75.0540,
        -75.0543, -75.0544, -75.0545, -75.0546, -75.0546, -75.0547, -75.0547,
        -75.0547, -75.0547, -75.0547, -75.0548], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1445e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.1445e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0544, -75.0545, -75.0546, -75.0546, -75.0547, -75.0547, -75.0547,
        -75.0547, -75.0547, -75.0548], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 11 	 19 	 O 	 O 	 3.685675986088492e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 15, 15]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-0.9795, -1.0937, -1.1231, -1.1381, -1.1477, -1.1541, -1.1586, -1.1617,
        -1.1639, -1.1654, -1.1665, -1.1672, -1.1677, -1.1681, -1.1684, -1.1685,
        -1.1687, -1.1687, -1.1688, -1.1688, -1.1689, -1.1689, -1.1689, -1.1689,
        -1.1689], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668206
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6131e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.2262e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3315, -0.4620, -0.4775, -0.4849, -0.4896, -0.4926, -0.4947, -0.4962,
        -0.4972, -0.4979, -0.4984, -0.4988, -0.4990, -0.4992, -0.4993, -0.4994,
        -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.3830e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.3800e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.1028e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1685, -1.1687, -1.1687, -1.1688, -1.1688, -1.1689, -1.1689, -1.1689,
        -1.1689, -1.1689], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 11 	 0 	 H2 	 H2 	 4.797505139873805e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------16----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [16]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4585, -7.4659, -7.4687, -7.4702, -7.4712, -7.4721, -7.4730, -7.4733,
        -7.4731, -7.4728, -7.4727, -7.4727, -7.4727, -7.4728, -7.4728, -7.4728,
        -7.4728, -7.4729, -7.4729, -7.4729, -7.4729, -7.4729, -7.4729, -7.4729,
        -7.4729], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.1288e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.8975e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.2596e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4728, -7.4728, -7.4729, -7.4729, -7.4729, -7.4729, -7.4729, -7.4729,
        -7.4729, -7.4729], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 11 	 16 	 Li 	 Li 	 6.207148754204261e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------13----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0965, -460.1249, -460.1343, -460.1396, -460.1432, -460.1457,
        -460.1475, -460.1488, -460.1498, -460.1504, -460.1509, -460.1512,
        -460.1515, -460.1516, -460.1517, -460.1518, -460.1519, -460.1519,
        -460.1519, -460.1520, -460.1520, -460.1520, -460.1520, -460.1520,
        -460.1520], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0954e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.0954e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1518, -460.1519, -460.1519, -460.1519, -460.1520, -460.1520,
        -460.1520, -460.1520, -460.1520, -460.1520], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 11 	 13 	 Cl 	 Cl 	 3.7281059792040796e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 17, 17]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.9321, -109.3676, -109.4859, -109.4958, -109.4955, -109.4947,
        -109.4943, -109.4943, -109.4945, -109.4948, -109.4951, -109.4953,
        -109.4955, -109.4957, -109.4958, -109.4959, -109.4960, -109.4960,
        -109.4961, -109.4961, -109.4961, -109.4961, -109.4962, -109.4962,
        -109.4962], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018879
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.2873e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4389, -54.5063, -54.5306, -54.5441, -54.5531, -54.5594, -54.5639,
        -54.5670, -54.5692, -54.5708, -54.5719, -54.5727, -54.5732, -54.5736,
        -54.5739, -54.5740, -54.5742, -54.5743, -54.5743, -54.5744, -54.5744,
        -54.5744, -54.5744, -54.5745, -54.5745], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5812e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4959, -109.4960, -109.4960, -109.4961, -109.4961, -109.4961,
        -109.4961, -109.4962, -109.4962, -109.4962], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5740, -54.5742, -54.5743, -54.5743, -54.5744, -54.5744, -54.5744,
        -54.5744, -54.5745, -54.5745], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 11 	 1 	 N2 	 N2 	 6.598672239440124e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------14----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6695, -99.6920, -99.7025, -99.7089, -99.7133, -99.7165, -99.7188,
        -99.7205, -99.7217, -99.7225, -99.7232, -99.7236, -99.7239, -99.7241,
        -99.7243, -99.7244, -99.7244, -99.7245, -99.7245, -99.7246, -99.7246,
        -99.7246, -99.7246, -99.7246, -99.7246], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(6.2615e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.2615e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7244, -99.7244, -99.7245, -99.7245, -99.7246, -99.7246, -99.7246,
        -99.7246, -99.7246, -99.7246], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 11 	 14 	 F 	 F 	 2.0173940097598744e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  , 11NaNa
SUBMOLECULES: ['Na2', 'Na', 'Na']
SUBMOLECULE INDICES: [11, 18, 18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0273], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0273], dtype=torch.float64)
E_PRED: tensor([-324.5982, -324.5519, -324.5398, -324.5336, -324.5297, -324.5270,
        -324.5251, -324.5238, -324.5229, -324.5223, -324.5218, -324.5215,
        -324.5213, -324.5211, -324.5210, -324.5209, -324.5209, -324.5208,
        -324.5208, -324.5208, -324.5208, -324.5208, -324.5208, -324.5208,
        -324.5208], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 1992])
ao_eval   ---   torch.Size([1, 10, 1992, 94])
grid_weights   ---   torch.Size([1, 1992])
-324.03216786711033
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(4.3346e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.6692e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2230, -162.2356, -162.2404, -162.2430, -162.2447, -162.2459,
        -162.2467, -162.2474, -162.2479, -162.2481, -162.2482, -162.2483,
        -162.2483, -162.2484, -162.2484, -162.2484, -162.2484, -162.2484,
        -162.2484, -162.2484, -162.2485, -162.2485, -162.2485, -162.2485,
        -162.2485], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.0388e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.6733e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NaNa': tensor([-0.0273], dtype=torch.float64), 'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'NaNa': tensor([-324.5209, -324.5209, -324.5208, -324.5208, -324.5208, -324.5208,
        -324.5208, -324.5208, -324.5208, -324.5208], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Na': tensor([-162.2484, -162.2484, -162.2484, -162.2484, -162.2484, -162.2485,
        -162.2485, -162.2485, -162.2485, -162.2485], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 11 	 11 	 Na2 	 Na2 	 2.83337551143272e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 16, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2583, -107.2781, -107.2424, -107.2351, -107.2298, -107.2270,
        -107.2256, -107.2251, -107.2251, -107.2253, -107.2255, -107.2258,
        -107.2261, -107.2264, -107.2267, -107.2270, -107.2273, -107.2275,
        -107.2277, -107.2279, -107.2281, -107.2282, -107.2283, -107.2284,
        -107.2285], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.305942205048
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.4216e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6696, -99.6920, -99.7026, -99.7090, -99.7134, -99.7166, -99.7189,
        -99.7206, -99.7218, -99.7227, -99.7233, -99.7237, -99.7240, -99.7243,
        -99.7244, -99.7245, -99.7246, -99.7247, -99.7247, -99.7247, -99.7247,
        -99.7248, -99.7248, -99.7248, -99.7248], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(6.0543e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4574, -7.4646, -7.4678, -7.4696, -7.4708, -7.4717, -7.4726, -7.4733,
        -7.4733, -7.4730, -7.4728, -7.4728, -7.4728, -7.4728, -7.4729, -7.4729,
        -7.4729, -7.4729, -7.4729, -7.4730, -7.4730, -7.4730, -7.4730, -7.4730,
        -7.4730], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.1297e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.8442e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2270, -107.2273, -107.2275, -107.2277, -107.2279, -107.2281,
        -107.2282, -107.2283, -107.2284, -107.2285], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7245, -99.7246, -99.7247, -99.7247, -99.7247, -99.7247, -99.7248,
        -99.7248, -99.7248, -99.7248], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4729, -7.4729, -7.4729, -7.4729, -7.4730, -7.4730, -7.4730, -7.4730,
        -7.4730, -7.4730], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 11 	 2 	 FLi 	 LiF 	 0.008594230321721465

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------17----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [17]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4419, -54.5084, -54.5321, -54.5453, -54.5540, -54.5601, -54.5643,
        -54.5674, -54.5695, -54.5710, -54.5721, -54.5729, -54.5734, -54.5737,
        -54.5740, -54.5742, -54.5743, -54.5744, -54.5745, -54.5745, -54.5745,
        -54.5746, -54.5746, -54.5746, -54.5746], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5537e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.5537e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5742, -54.5743, -54.5744, -54.5745, -54.5745, -54.5745, -54.5746,
        -54.5746, -54.5746, -54.5746], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 11 	 17 	 N 	 N 	 4.998214885325252e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 12, 19, 19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.5560, -188.7676, -188.6008, -188.5034, -188.4434, -188.4025,
        -188.3740, -188.3539, -188.3397, -188.3297, -188.3225, -188.3175,
        -188.3139, -188.3113, -188.3095, -188.3081, -188.3072, -188.3065,
        -188.3061, -188.3057, -188.3055, -188.3053, -188.3052, -188.3051,
        -188.3050], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.4017587505662
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.8213e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7488, -37.7876, -37.8014, -37.8091, -37.8142, -37.8178, -37.8204,
        -37.8222, -37.8235, -37.8244, -37.8250, -37.8255, -37.8258, -37.8260,
        -37.8262, -37.8263, -37.8264, -37.8264, -37.8265, -37.8265, -37.8265,
        -37.8265, -37.8265, -37.8265, -37.8265], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.4233e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9483, -74.9877, -75.0092, -75.0225, -75.0318, -75.0384, -75.0433,
        -75.0468, -75.0493, -75.0511, -75.0524, -75.0533, -75.0539, -75.0544,
        -75.0547, -75.0549, -75.0551, -75.0552, -75.0553, -75.0553, -75.0553,
        -75.0554, -75.0554, -75.0554, -75.0554], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0436e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3081, -188.3072, -188.3065, -188.3061, -188.3057, -188.3055,
        -188.3053, -188.3052, -188.3051, -188.3050], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8263, -37.8264, -37.8264, -37.8265, -37.8265, -37.8265, -37.8265,
        -37.8265, -37.8265, -37.8265], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0549, -75.0551, -75.0552, -75.0553, -75.0553, -75.0553, -75.0554,
        -75.0554, -75.0554, -75.0554], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 11 	 4 	 CO2 	 CO2 	 0.015140879198487481

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 13, 13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4440, -920.4219, -920.4169, -920.4144, -920.4127, -920.4116,
        -920.4108, -920.4103, -920.4099, -920.4097, -920.4095, -920.4093,
        -920.4093, -920.4092, -920.4092, -920.4091, -920.4091, -920.4091,
        -920.4091, -920.4091, -920.4091, -920.4091, -920.4091, -920.4091,
        -920.4091], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885617
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.8051e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.6102e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0904, -460.1210, -460.1317, -460.1377, -460.1419, -460.1448,
        -460.1469, -460.1485, -460.1496, -460.1504, -460.1509, -460.1513,
        -460.1516, -460.1518, -460.1519, -460.1520, -460.1521, -460.1521,
        -460.1522, -460.1522, -460.1522, -460.1522, -460.1522, -460.1522,
        -460.1522], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2233e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.6114e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4091, -920.4091, -920.4091, -920.4091, -920.4091, -920.4091,
        -920.4091, -920.4091, -920.4091, -920.4091], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1520, -460.1521, -460.1521, -460.1522, -460.1522, -460.1522,
        -460.1522, -460.1522, -460.1522, -460.1522], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 11 	 5 	 Cl2 	 Cl2 	 2.365138287052413e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------15----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3095, -0.4561, -0.4741, -0.4828, -0.4881, -0.4916, -0.4940, -0.4957,
        -0.4969, -0.4977, -0.4982, -0.4986, -0.4989, -0.4991, -0.4992, -0.4993,
        -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.3801e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.5892e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.8760e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4993, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 11 	 15 	 H 	 H 	 4.8334571952223356e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,  6FF
SUBMOLECULES: ['F2', 'F', 'F']
SUBMOLECULE INDICES: [6, 14, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0618], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0618], dtype=torch.float64)
E_PRED: tensor([-199.6450, -199.5685, -199.5483, -199.5380, -199.5314, -199.5269,
        -199.5238, -199.5216, -199.5200, -199.5190, -199.5182, -199.5177,
        -199.5173, -199.5170, -199.5168, -199.5167, -199.5166, -199.5165,
        -199.5165, -199.5165, -199.5164, -199.5164, -199.5164, -199.5164,
        -199.5164], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 4698])
ao_eval   ---   torch.Size([1, 10, 4698, 78])
grid_weights   ---   torch.Size([1, 4698])
-199.3364659747656
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.2141e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.4282e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6735, -99.6969, -99.7063, -99.7118, -99.7156, -99.7183, -99.7202,
        -99.7216, -99.7226, -99.7233, -99.7238, -99.7242, -99.7244, -99.7246,
        -99.7247, -99.7248, -99.7249, -99.7249, -99.7250, -99.7250, -99.7250,
        -99.7250, -99.7250, -99.7250, -99.7250], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.7040e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.4339e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'FF': tensor([-0.0618], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'FF': tensor([-199.5167, -199.5166, -199.5165, -199.5165, -199.5165, -199.5164,
        -199.5164, -199.5164, -199.5164, -199.5164], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7248, -99.7249, -99.7249, -99.7250, -99.7250, -99.7250, -99.7250,
        -99.7250, -99.7250, -99.7250], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 11 	 6 	 F2 	 F2 	 4.844829195204509e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e11)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e11/2022-11-29_10:09:21.574160_2.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e11/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 11 || ,[' rho : 2.963735', ' ae : 58.125687', ' E : 2.847337'] ,|| total loss 43.186263 || CHKPT: _2.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------16----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [16]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4588, -7.4661, -7.4688, -7.4702, -7.4712, -7.4722, -7.4730, -7.4732,
        -7.4730, -7.4727, -7.4726, -7.4726, -7.4726, -7.4727, -7.4727, -7.4727,
        -7.4728, -7.4728, -7.4728, -7.4728, -7.4728, -7.4728, -7.4728, -7.4728,
        -7.4728], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.1227e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.9574e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.2474e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4727, -7.4728, -7.4728, -7.4728, -7.4728, -7.4728, -7.4728, -7.4728,
        -7.4728, -7.4728], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 12 	 16 	 Li 	 Li 	 6.405225838821723e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------13----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0973, -460.1255, -460.1348, -460.1400, -460.1435, -460.1460,
        -460.1478, -460.1491, -460.1500, -460.1506, -460.1511, -460.1514,
        -460.1517, -460.1518, -460.1519, -460.1520, -460.1521, -460.1521,
        -460.1521, -460.1522, -460.1522, -460.1522, -460.1522, -460.1522,
        -460.1522], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2101e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.2101e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1520, -460.1521, -460.1521, -460.1521, -460.1522, -460.1522,
        -460.1522, -460.1522, -460.1522, -460.1522], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 12 	 13 	 Cl 	 Cl 	 4.111994977235633e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------14----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6701, -99.6927, -99.7031, -99.7093, -99.7136, -99.7168, -99.7190,
        -99.7207, -99.7218, -99.7227, -99.7232, -99.7237, -99.7240, -99.7242,
        -99.7243, -99.7244, -99.7245, -99.7246, -99.7246, -99.7246, -99.7246,
        -99.7247, -99.7247, -99.7247, -99.7247], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(6.1783e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.1783e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7244, -99.7245, -99.7246, -99.7246, -99.7246, -99.7246, -99.7247,
        -99.7247, -99.7247, -99.7247], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 12 	 14 	 F 	 F 	 1.9916389701532102e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 13, 13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4448, -920.4214, -920.4161, -920.4133, -920.4115, -920.4103,
        -920.4094, -920.4089, -920.4084, -920.4082, -920.4079, -920.4078,
        -920.4077, -920.4076, -920.4076, -920.4076, -920.4075, -920.4075,
        -920.4075, -920.4075, -920.4075, -920.4075, -920.4075, -920.4075,
        -920.4075], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885617
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.8168e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.6336e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0947, -460.1236, -460.1332, -460.1386, -460.1423, -460.1449,
        -460.1468, -460.1481, -460.1491, -460.1498, -460.1503, -460.1506,
        -460.1508, -460.1510, -460.1511, -460.1512, -460.1513, -460.1513,
        -460.1513, -460.1514, -460.1514, -460.1514, -460.1514, -460.1514,
        -460.1514], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.8586e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.6344e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4076, -920.4075, -920.4075, -920.4075, -920.4075, -920.4075,
        -920.4075, -920.4075, -920.4075, -920.4075], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1512, -460.1513, -460.1513, -460.1513, -460.1514, -460.1514,
        -460.1514, -460.1514, -460.1514, -460.1514], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 12 	 5 	 Cl2 	 Cl2 	 2.4123824929076806e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 15, 15]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-0.9810, -1.0943, -1.1235, -1.1384, -1.1479, -1.1543, -1.1587, -1.1618,
        -1.1639, -1.1654, -1.1665, -1.1672, -1.1678, -1.1681, -1.1684, -1.1685,
        -1.1687, -1.1688, -1.1688, -1.1689, -1.1689, -1.1689, -1.1689, -1.1689,
        -1.1689], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668206
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6180e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.2361e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3000, -0.4535, -0.4727, -0.4818, -0.4874, -0.4912, -0.4937, -0.4955,
        -0.4967, -0.4976, -0.4982, -0.4986, -0.4989, -0.4991, -0.4992, -0.4993,
        -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.3645e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.7337e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.1090e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1685, -1.1687, -1.1688, -1.1688, -1.1689, -1.1689, -1.1689, -1.1689,
        -1.1689, -1.1689], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4993, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 12 	 0 	 H2 	 H2 	 4.667127580502869e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 16, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2681, -107.2817, -107.2455, -107.2371, -107.2314, -107.2281,
        -107.2264, -107.2257, -107.2256, -107.2256, -107.2257, -107.2259,
        -107.2262, -107.2265, -107.2267, -107.2270, -107.2273, -107.2276,
        -107.2278, -107.2280, -107.2281, -107.2282, -107.2284, -107.2284,
        -107.2285], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.305942205048
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.4323e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6731, -99.6964, -99.7058, -99.7113, -99.7151, -99.7178, -99.7197,
        -99.7211, -99.7221, -99.7228, -99.7233, -99.7237, -99.7239, -99.7241,
        -99.7242, -99.7243, -99.7244, -99.7244, -99.7244, -99.7245, -99.7245,
        -99.7245, -99.7245, -99.7245, -99.7245], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(6.3670e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4580, -7.4654, -7.4683, -7.4698, -7.4708, -7.4718, -7.4727, -7.4730,
        -7.4728, -7.4726, -7.4725, -7.4724, -7.4725, -7.4725, -7.4725, -7.4726,
        -7.4726, -7.4726, -7.4726, -7.4726, -7.4726, -7.4726, -7.4726, -7.4726,
        -7.4726], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.1126e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.0994e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2270, -107.2273, -107.2276, -107.2278, -107.2280, -107.2281,
        -107.2282, -107.2284, -107.2284, -107.2285], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7243, -99.7244, -99.7244, -99.7244, -99.7245, -99.7245, -99.7245,
        -99.7245, -99.7245, -99.7245], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4726, -7.4726, -7.4726, -7.4726, -7.4726, -7.4726, -7.4726, -7.4726,
        -7.4726, -7.4726], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 12 	 2 	 FLi 	 LiF 	 0.008540426087432905

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 12, 19, 19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.4396, -188.7227, -188.5717, -188.4836, -188.4294, -188.3925,
        -188.3667, -188.3485, -188.3357, -188.3266, -188.3202, -188.3156,
        -188.3123, -188.3100, -188.3084, -188.3072, -188.3063, -188.3057,
        -188.3053, -188.3050, -188.3048, -188.3046, -188.3045, -188.3044,
        -188.3044], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.4017587505662
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.8120e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7498, -37.7881, -37.8015, -37.8090, -37.8140, -37.8174, -37.8199,
        -37.8217, -37.8229, -37.8238, -37.8244, -37.8248, -37.8251, -37.8253,
        -37.8255, -37.8256, -37.8257, -37.8257, -37.8258, -37.8258, -37.8258,
        -37.8258, -37.8258, -37.8258, -37.8258], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.2744e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9486, -74.9894, -75.0104, -75.0233, -75.0322, -75.0386, -75.0432,
        -75.0466, -75.0489, -75.0507, -75.0519, -75.0527, -75.0533, -75.0538,
        -75.0541, -75.0543, -75.0544, -75.0545, -75.0546, -75.0547, -75.0547,
        -75.0547, -75.0547, -75.0548, -75.0548], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1561e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3072, -188.3063, -188.3057, -188.3053, -188.3050, -188.3048,
        -188.3046, -188.3045, -188.3044, -188.3044], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8256, -37.8257, -37.8257, -37.8258, -37.8258, -37.8258, -37.8258,
        -37.8258, -37.8258, -37.8258], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0543, -75.0544, -75.0545, -75.0546, -75.0547, -75.0547, -75.0547,
        -75.0547, -75.0548, -75.0548], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 12 	 4 	 CO2 	 CO2 	 0.014984469674886553

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 17, 17]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.8430, -109.7256, -109.6623, -109.6099, -109.5745, -109.5503,
        -109.5335, -109.5219, -109.5139, -109.5083, -109.5045, -109.5018,
        -109.4999, -109.4986, -109.4977, -109.4971, -109.4967, -109.4964,
        -109.4962, -109.4960, -109.4959, -109.4958, -109.4958, -109.4957,
        -109.4957], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018879
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.2784e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4361, -54.5040, -54.5288, -54.5427, -54.5519, -54.5584, -54.5629,
        -54.5662, -54.5684, -54.5701, -54.5712, -54.5720, -54.5725, -54.5729,
        -54.5732, -54.5734, -54.5735, -54.5736, -54.5737, -54.5737, -54.5738,
        -54.5738, -54.5738, -54.5738, -54.5738], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7200e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4971, -109.4967, -109.4964, -109.4962, -109.4960, -109.4959,
        -109.4958, -109.4958, -109.4957, -109.4957], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5734, -54.5735, -54.5736, -54.5737, -54.5737, -54.5738, -54.5738,
        -54.5738, -54.5738, -54.5738], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 12 	 1 	 N2 	 N2 	 5.931449342716779e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,  8OC
SUBMOLECULES: ['CO', 'O', 'C']
SUBMOLECULE INDICES: [8, 19, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='OC', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4142], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4142], dtype=torch.float64)
E_PRED: tensor([-113.6424, -113.3849, -113.3242, -113.2917, -113.2720, -113.2584,
        -113.2489, -113.2424, -113.2378, -113.2345, -113.2323, -113.2307,
        -113.2296, -113.2288, -113.2283, -113.2279, -113.2277, -113.2275,
        -113.2273, -113.2273, -113.2272, -113.2271, -113.2271, -113.2271,
        -113.2271], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 3279])
ao_eval   ---   torch.Size([1, 10, 3279, 78])
grid_weights   ---   torch.Size([1, 3279])
-113.201730216515
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.4621e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7329, -37.7696, -37.7880, -37.7990, -37.8065, -37.8120, -37.8158,
        -37.8186, -37.8206, -37.8220, -37.8230, -37.8238, -37.8243, -37.8246,
        -37.8249, -37.8250, -37.8251, -37.8252, -37.8253, -37.8253, -37.8254,
        -37.8254, -37.8254, -37.8254, -37.8254], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.9130e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9493, -74.9913, -75.0118, -75.0242, -75.0327, -75.0389, -75.0433,
        -75.0465, -75.0488, -75.0504, -75.0515, -75.0524, -75.0529, -75.0533,
        -75.0536, -75.0538, -75.0540, -75.0541, -75.0541, -75.0542, -75.0542,
        -75.0542, -75.0543, -75.0543, -75.0543], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2417e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'OC': tensor([-0.4142], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'OC': tensor([-113.2279, -113.2277, -113.2275, -113.2273, -113.2273, -113.2272,
        -113.2271, -113.2271, -113.2271, -113.2271], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8250, -37.8251, -37.8252, -37.8253, -37.8253, -37.8254, -37.8254,
        -37.8254, -37.8254, -37.8254], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0538, -75.0540, -75.0541, -75.0541, -75.0542, -75.0542, -75.0542,
        -75.0543, -75.0543, -75.0543], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 12 	 8 	 CO 	 OC 	 0.0010427644568571574

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,  6FF
SUBMOLECULES: ['F2', 'F', 'F']
SUBMOLECULE INDICES: [6, 14, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0618], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0618], dtype=torch.float64)
E_PRED: tensor([-199.6592, -199.5732, -199.5505, -199.5387, -199.5313, -199.5262,
        -199.5226, -199.5201, -199.5184, -199.5172, -199.5163, -199.5157,
        -199.5153, -199.5150, -199.5148, -199.5146, -199.5145, -199.5144,
        -199.5144, -199.5143, -199.5143, -199.5143, -199.5143, -199.5143,
        -199.5143], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 4698])
ao_eval   ---   torch.Size([1, 10, 4698, 78])
grid_weights   ---   torch.Size([1, 4698])
-199.3364659747656
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.2194e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.4388e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6674, -99.6882, -99.6994, -99.7063, -99.7111, -99.7147, -99.7173,
        -99.7191, -99.7205, -99.7214, -99.7221, -99.7226, -99.7230, -99.7232,
        -99.7234, -99.7235, -99.7236, -99.7236, -99.7237, -99.7237, -99.7237,
        -99.7238, -99.7238, -99.7238, -99.7238], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.4529e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.4462e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'FF': tensor([-0.0618], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'FF': tensor([-199.5146, -199.5145, -199.5144, -199.5144, -199.5143, -199.5143,
        -199.5143, -199.5143, -199.5143, -199.5143], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7235, -99.7236, -99.7236, -99.7237, -99.7237, -99.7237, -99.7238,
        -99.7238, -99.7238, -99.7238], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 12 	 6 	 F2 	 F2 	 5.650977542322973e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------19----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9683, -75.0107, -75.0259, -75.0344, -75.0401, -75.0441, -75.0470,
        -75.0490, -75.0504, -75.0514, -75.0522, -75.0527, -75.0530, -75.0533,
        -75.0535, -75.0536, -75.0537, -75.0537, -75.0538, -75.0538, -75.0538,
        -75.0538, -75.0538, -75.0539, -75.0539], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3056e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.3056e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0536, -75.0537, -75.0537, -75.0538, -75.0538, -75.0538, -75.0538,
        -75.0538, -75.0539, -75.0539], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 12 	 19 	 O 	 O 	 4.2292313233659924e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,  7CCHH
SUBMOLECULES: ['C2H2', 'C', 'C', 'H', 'H']
SUBMOLECULE INDICES: [7, 12, 12, 15, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C2H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6459], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6459], dtype=torch.float64)
E_PRED: tensor([-78.3937, -73.4071, -75.2005, -75.9193, -76.3419, -76.6205, -76.8110,
        -76.9430, -77.0350, -77.0992, -77.1442, -77.1757, -77.1978, -77.2133,
        -77.2241, -77.2317, -77.2371, -77.2408, -77.2434, -77.2453, -77.2465,
        -77.2474, -77.2481, -77.2485, -77.2488], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 108, 108])
mo_energy   ---   torch.Size([2, 108])
dm_ref   ---   torch.Size([1, 2, 108, 108])
rho   ---   torch.Size([1, 2, 1924])
ao_eval   ---   torch.Size([1, 10, 1924, 108])
grid_weights   ---   torch.Size([1, 1924])
-77.2336470993193
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 108])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 108])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7867e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7378, -37.7772, -37.7936, -37.8030, -37.8094, -37.8139, -37.8171,
        -37.8194, -37.8210, -37.8222, -37.8230, -37.8236, -37.8240, -37.8243,
        -37.8245, -37.8246, -37.8247, -37.8248, -37.8249, -37.8249, -37.8249,
        -37.8249, -37.8249, -37.8250, -37.8250], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0460e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3414, -0.4645, -0.4789, -0.4858, -0.4902, -0.4930, -0.4950, -0.4964,
        -0.4973, -0.4980, -0.4984, -0.4988, -0.4990, -0.4991, -0.4993, -0.4993,
        -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.3352e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.5047e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CCHH': tensor([-0.6459], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'CCHH': tensor([-77.2317, -77.2371, -77.2408, -77.2434, -77.2453, -77.2465, -77.2474,
        -77.2481, -77.2485, -77.2488], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8246, -37.8247, -37.8248, -37.8249, -37.8249, -37.8249, -37.8249,
        -37.8249, -37.8250, -37.8250], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4993, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 12 	 7 	 C2H2 	 C2H2 	 0.0005053106338765361

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  , 10LiH
SUBMOLECULES: ['HLi', 'Li', 'H']
SUBMOLECULE INDICES: [10, 16, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0923], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0923], dtype=torch.float64)
E_PRED: tensor([-7.9937, -8.0321, -8.0424, -8.0478, -8.0512, -8.0536, -8.0553, -8.0565,
        -8.0573, -8.0579, -8.0583, -8.0586, -8.0588, -8.0590, -8.0591, -8.0592,
        -8.0592, -8.0593, -8.0593, -8.0593, -8.0593, -8.0593, -8.0593, -8.0593,
        -8.0593], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 54, 54])
mo_energy   ---   torch.Size([2, 54])
dm_ref   ---   torch.Size([1, 2, 54, 54])
rho   ---   torch.Size([1, 2, 1271])
ao_eval   ---   torch.Size([1, 10, 1271, 54])
grid_weights   ---   torch.Size([1, 1271])
-8.038079906478378
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 54])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 54])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.4369e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.8738e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2321, -0.4335, -0.4615, -0.4746, -0.4826, -0.4878, -0.4914, -0.4939,
        -0.4956, -0.4968, -0.4976, -0.4982, -0.4986, -0.4989, -0.4991, -0.4992,
        -0.4993, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.3334e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.6130e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(4.7405e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4560, -7.4627, -7.4661, -7.4682, -7.4695, -7.4704, -7.4714, -7.4722,
        -7.4724, -7.4722, -7.4720, -7.4719, -7.4719, -7.4719, -7.4719, -7.4720,
        -7.4720, -7.4720, -7.4720, -7.4720, -7.4721, -7.4721, -7.4721, -7.4721,
        -7.4721], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.0886e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.5626e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.9203e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiH': tensor([-0.0923], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiH': tensor([-8.0592, -8.0592, -8.0593, -8.0593, -8.0593, -8.0593, -8.0593, -8.0593,
        -8.0593, -8.0593], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4992, -0.4993, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>), 'Li': tensor([-7.4720, -7.4720, -7.4720, -7.4720, -7.4720, -7.4721, -7.4721, -7.4721,
        -7.4721, -7.4721], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 12 	 10 	 HLi 	 LiH 	 4.7713865905412325e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------18----------------
TRAINING ON MOLECULE:  ,Na
SUBMOLECULES: ['Na']
SUBMOLECULE INDICES: [18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2300, -162.2399, -162.2429, -162.2444, -162.2453, -162.2461,
        -162.2467, -162.2470, -162.2471, -162.2472, -162.2472, -162.2473,
        -162.2473, -162.2473, -162.2474, -162.2474, -162.2474, -162.2474,
        -162.2474, -162.2474, -162.2474, -162.2474, -162.2474, -162.2474,
        -162.2474], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.5279e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.5279e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'Na': tensor([-162.2474, -162.2474, -162.2474, -162.2474, -162.2474, -162.2474,
        -162.2474, -162.2474, -162.2474, -162.2474], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 12 	 18 	 Na 	 Na 	 1.2115500294311316e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7330, -37.7701, -37.7883, -37.7991, -37.8065, -37.8117, -37.8155,
        -37.8183, -37.8202, -37.8216, -37.8226, -37.8233, -37.8237, -37.8241,
        -37.8243, -37.8245, -37.8246, -37.8247, -37.8248, -37.8248, -37.8248,
        -37.8248, -37.8249, -37.8249, -37.8249], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0620e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.0620e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8245, -37.8246, -37.8247, -37.8248, -37.8248, -37.8248, -37.8248,
        -37.8249, -37.8249, -37.8249], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 12 	 12 	 C 	 C 	 5.714289716324704e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  , 11NaNa
SUBMOLECULES: ['Na2', 'Na', 'Na']
SUBMOLECULE INDICES: [11, 18, 18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0273], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0273], dtype=torch.float64)
E_PRED: tensor([-324.6270, -324.5630, -324.5463, -324.5377, -324.5323, -324.5286,
        -324.5261, -324.5243, -324.5230, -324.5221, -324.5215, -324.5211,
        -324.5208, -324.5206, -324.5204, -324.5203, -324.5202, -324.5202,
        -324.5202, -324.5201, -324.5201, -324.5201, -324.5201, -324.5201,
        -324.5201], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 1992])
ao_eval   ---   torch.Size([1, 10, 1992, 94])
grid_weights   ---   torch.Size([1, 1992])
-324.03216786711033
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(4.4179e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.8357e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2240, -162.2363, -162.2408, -162.2432, -162.2448, -162.2458,
        -162.2467, -162.2473, -162.2477, -162.2479, -162.2479, -162.2480,
        -162.2480, -162.2481, -162.2481, -162.2481, -162.2481, -162.2481,
        -162.2482, -162.2482, -162.2482, -162.2482, -162.2482, -162.2482,
        -162.2482], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.4232e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.8401e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NaNa': tensor([-0.0273], dtype=torch.float64), 'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'NaNa': tensor([-324.5203, -324.5202, -324.5202, -324.5202, -324.5201, -324.5201,
        -324.5201, -324.5201, -324.5201, -324.5201], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Na': tensor([-162.2481, -162.2481, -162.2481, -162.2482, -162.2482, -162.2482,
        -162.2482, -162.2482, -162.2482, -162.2482], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 12 	 11 	 Na2 	 Na2 	 3.012356383196389e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 12, 17, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-93.8421, -93.4537, -93.3587, -93.3138, -93.2835, -93.2632, -93.2489,
        -93.2388, -93.2315, -93.2263, -93.2225, -93.2198, -93.2178, -93.2164,
        -93.2153, -93.2145, -93.2140, -93.2135, -93.2132, -93.2130, -93.2128,
        -93.2127, -93.2126, -93.2125, -93.2125], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633898
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.8642e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7424, -37.7819, -37.7969, -37.8054, -37.8112, -37.8152, -37.8181,
        -37.8201, -37.8216, -37.8226, -37.8233, -37.8238, -37.8242, -37.8244,
        -37.8246, -37.8248, -37.8248, -37.8249, -37.8249, -37.8250, -37.8250,
        -37.8250, -37.8250, -37.8250, -37.8250], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0344e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3410, -0.4643, -0.4788, -0.4858, -0.4901, -0.4930, -0.4950, -0.4964,
        -0.4973, -0.4980, -0.4984, -0.4988, -0.4990, -0.4991, -0.4993, -0.4993,
        -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.3431e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.5099e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4142, -54.4844, -54.5147, -54.5323, -54.5443, -54.5528, -54.5588,
        -54.5631, -54.5662, -54.5683, -54.5699, -54.5709, -54.5717, -54.5722,
        -54.5726, -54.5728, -54.5730, -54.5731, -54.5732, -54.5733, -54.5733,
        -54.5734, -54.5734, -54.5734, -54.5734], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8308e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2145, -93.2140, -93.2135, -93.2132, -93.2130, -93.2128, -93.2127,
        -93.2126, -93.2125, -93.2125], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8248, -37.8248, -37.8249, -37.8249, -37.8250, -37.8250, -37.8250,
        -37.8250, -37.8250, -37.8250], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4993, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5728, -54.5730, -54.5731, -54.5732, -54.5733, -54.5733, -54.5734,
        -54.5734, -54.5734, -54.5734], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 12 	 3 	 CHN 	 CNH 	 0.007973219156794126

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------15----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2122, -0.4271, -0.4580, -0.4724, -0.4811, -0.4868, -0.4907, -0.4934,
        -0.4952, -0.4965, -0.4974, -0.4981, -0.4985, -0.4988, -0.4990, -0.4992,
        -0.4993, -0.4993, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.3414e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.8901e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.8683e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4992, -0.4993, -0.4993, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 12 	 15 	 H 	 H 	 6.06347005787809e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------17----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [17]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4227, -54.4928, -54.5208, -54.5368, -54.5476, -54.5551, -54.5605,
        -54.5643, -54.5670, -54.5689, -54.5703, -54.5712, -54.5719, -54.5723,
        -54.5727, -54.5729, -54.5730, -54.5732, -54.5732, -54.5733, -54.5733,
        -54.5734, -54.5734, -54.5734, -54.5734], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8249e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.8249e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5729, -54.5730, -54.5732, -54.5732, -54.5733, -54.5733, -54.5734,
        -54.5734, -54.5734, -54.5734], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 12 	 17 	 N 	 N 	 5.843399232491076e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,  9ClH
SUBMOLECULES: ['HCl', 'Cl', 'H']
SUBMOLECULE INDICES: [9, 13, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='ClH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1712], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1712], dtype=torch.float64)
E_PRED: tensor([-460.7646, -460.8011, -460.8115, -460.8168, -460.8202, -460.8225,
        -460.8241, -460.8252, -460.8260, -460.8265, -460.8269, -460.8272,
        -460.8274, -460.8275, -460.8276, -460.8276, -460.8277, -460.8277,
        -460.8277, -460.8278, -460.8278, -460.8278, -460.8278, -460.8278,
        -460.8278], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 62, 62])
mo_energy   ---   torch.Size([2, 62])
dm_ref   ---   torch.Size([1, 2, 62, 62])
rho   ---   torch.Size([1, 2, 1068])
ao_eval   ---   torch.Size([1, 10, 1068, 62])
grid_weights   ---   torch.Size([1, 1068])
-460.4234538667477
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 62])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 62])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.1460e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0957, -460.1248, -460.1346, -460.1401, -460.1438, -460.1465,
        -460.1484, -460.1497, -460.1507, -460.1514, -460.1519, -460.1522,
        -460.1525, -460.1526, -460.1528, -460.1529, -460.1529, -460.1530,
        -460.1530, -460.1530, -460.1530, -460.1530, -460.1530, -460.1530,
        -460.1530], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7533e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2118, -0.4270, -0.4579, -0.4724, -0.4811, -0.4868, -0.4907, -0.4934,
        -0.4952, -0.4965, -0.4974, -0.4980, -0.4985, -0.4988, -0.4990, -0.4992,
        -0.4993, -0.4993, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.3430e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.9002e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClH': tensor([-0.1712], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'ClH': tensor([-460.8276, -460.8277, -460.8277, -460.8277, -460.8278, -460.8278,
        -460.8278, -460.8278, -460.8278, -460.8278], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1529, -460.1529, -460.1530, -460.1530, -460.1530, -460.1530,
        -460.1530, -460.1530, -460.1530, -460.1530], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4992, -0.4993, -0.4993, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 12 	 9 	 HCl 	 ClH 	 3.7718100598211275e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e12)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e12/2022-11-29_10:09:21.574160_0.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e12/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 12 || ,[' rho : 2.949086', ' ae : 57.751174', ' E : 3.015391'] ,|| total loss 42.914241 || CHKPT: _0.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------10----------------
TRAINING ON MOLECULE:  , 10LiH
SUBMOLECULES: ['HLi', 'Li', 'H']
SUBMOLECULE INDICES: [10, 16, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0923], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0923], dtype=torch.float64)
E_PRED: tensor([-7.9537, -8.0157, -8.0322, -8.0408, -8.0463, -8.0501, -8.0528, -8.0548,
        -8.0561, -8.0571, -8.0577, -8.0582, -8.0585, -8.0588, -8.0589, -8.0591,
        -8.0591, -8.0592, -8.0592, -8.0593, -8.0593, -8.0593, -8.0593, -8.0593,
        -8.0593], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 54, 54])
mo_energy   ---   torch.Size([2, 54])
dm_ref   ---   torch.Size([1, 2, 54, 54])
rho   ---   torch.Size([1, 2, 1271])
ao_eval   ---   torch.Size([1, 10, 1271, 54])
grid_weights   ---   torch.Size([1, 1271])
-8.038079906478378
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 54])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 54])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.4232e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.8464e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3072, -0.4555, -0.4737, -0.4825, -0.4879, -0.4915, -0.4939, -0.4956,
        -0.4968, -0.4976, -0.4982, -0.4986, -0.4989, -0.4991, -0.4992, -0.4993,
        -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.3458e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.7923e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(4.7156e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4603, -7.4669, -7.4691, -7.4702, -7.4712, -7.4721, -7.4724, -7.4722,
        -7.4720, -7.4718, -7.4718, -7.4718, -7.4719, -7.4719, -7.4719, -7.4720,
        -7.4720, -7.4720, -7.4720, -7.4720, -7.4720, -7.4720, -7.4720, -7.4720,
        -7.4720], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.0853e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.5830e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.8887e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiH': tensor([-0.0923], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiH': tensor([-8.0591, -8.0591, -8.0592, -8.0592, -8.0593, -8.0593, -8.0593, -8.0593,
        -8.0593, -8.0593], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4993, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>), 'Li': tensor([-7.4720, -7.4720, -7.4720, -7.4720, -7.4720, -7.4720, -7.4720, -7.4720,
        -7.4720, -7.4720], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 13 	 10 	 HLi 	 LiH 	 4.720299562443141e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------16----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [16]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4564, -7.4636, -7.4668, -7.4686, -7.4698, -7.4707, -7.4717, -7.4724,
        -7.4724, -7.4721, -7.4719, -7.4718, -7.4718, -7.4719, -7.4719, -7.4719,
        -7.4720, -7.4720, -7.4720, -7.4720, -7.4720, -7.4720, -7.4720, -7.4721,
        -7.4721], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.0855e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.5799e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.1736e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4719, -7.4720, -7.4720, -7.4720, -7.4720, -7.4720, -7.4720, -7.4720,
        -7.4721, -7.4721], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 13 	 16 	 Li 	 Li 	 8.439103339921467e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------15----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2534, -0.4401, -0.4651, -0.4770, -0.4842, -0.4889, -0.4921, -0.4944,
        -0.4959, -0.4970, -0.4978, -0.4983, -0.4987, -0.4989, -0.4991, -0.4992,
        -0.4993, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.3484e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.3461e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.8697e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4992, -0.4993, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 13 	 15 	 H 	 H 	 5.961760082892779e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------13----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0930, -460.1234, -460.1339, -460.1399, -460.1440, -460.1469,
        -460.1490, -460.1505, -460.1516, -460.1523, -460.1529, -460.1533,
        -460.1535, -460.1537, -460.1539, -460.1540, -460.1540, -460.1541,
        -460.1541, -460.1541, -460.1542, -460.1542, -460.1542, -460.1542,
        -460.1542], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.6340e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.6340e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1540, -460.1540, -460.1541, -460.1541, -460.1541, -460.1542,
        -460.1542, -460.1542, -460.1542, -460.1542], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 13 	 13 	 Cl 	 Cl 	 8.906920579666922e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 13, 13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4436, -920.4234, -920.4189, -920.4166, -920.4151, -920.4141,
        -920.4134, -920.4130, -920.4126, -920.4124, -920.4122, -920.4121,
        -920.4120, -920.4120, -920.4119, -920.4119, -920.4119, -920.4119,
        -920.4119, -920.4119, -920.4119, -920.4119, -920.4119, -920.4119,
        -920.4119], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885617
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.8437e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.6873e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1016, -460.1286, -460.1373, -460.1422, -460.1455, -460.1478,
        -460.1494, -460.1506, -460.1514, -460.1520, -460.1524, -460.1527,
        -460.1529, -460.1531, -460.1532, -460.1533, -460.1533, -460.1534,
        -460.1534, -460.1534, -460.1534, -460.1534, -460.1534, -460.1534,
        -460.1534], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.0483e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.6894e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4119, -920.4119, -920.4119, -920.4119, -920.4119, -920.4119,
        -920.4119, -920.4119, -920.4119, -920.4119], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1533, -460.1533, -460.1534, -460.1534, -460.1534, -460.1534,
        -460.1534, -460.1534, -460.1534, -460.1534], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 13 	 5 	 Cl2 	 Cl2 	 2.5528248612194366e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------19----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9585, -75.0025, -75.0203, -75.0305, -75.0374, -75.0424, -75.0459,
        -75.0484, -75.0502, -75.0515, -75.0524, -75.0530, -75.0535, -75.0538,
        -75.0540, -75.0542, -75.0543, -75.0544, -75.0544, -75.0545, -75.0545,
        -75.0545, -75.0545, -75.0545, -75.0545], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1866e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.1866e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0542, -75.0543, -75.0544, -75.0544, -75.0545, -75.0545, -75.0545,
        -75.0545, -75.0545, -75.0545], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 13 	 19 	 O 	 O 	 3.819138698100274e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,  9ClH
SUBMOLECULES: ['HCl', 'Cl', 'H']
SUBMOLECULE INDICES: [9, 13, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='ClH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1712], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1712], dtype=torch.float64)
E_PRED: tensor([-460.7475, -460.7938, -460.8069, -460.8136, -460.8178, -460.8207,
        -460.8227, -460.8241, -460.8251, -460.8258, -460.8262, -460.8266,
        -460.8268, -460.8270, -460.8271, -460.8272, -460.8272, -460.8272,
        -460.8273, -460.8273, -460.8273, -460.8273, -460.8273, -460.8273,
        -460.8273], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 62, 62])
mo_energy   ---   torch.Size([2, 62])
dm_ref   ---   torch.Size([1, 2, 62, 62])
rho   ---   torch.Size([1, 2, 1068])
ao_eval   ---   torch.Size([1, 10, 1068, 62])
grid_weights   ---   torch.Size([1, 1068])
-460.4234538667477
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 62])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 62])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.0843e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0884, -460.1197, -460.1309, -460.1372, -460.1416, -460.1447,
        -460.1470, -460.1486, -460.1498, -460.1506, -460.1512, -460.1516,
        -460.1519, -460.1521, -460.1523, -460.1524, -460.1524, -460.1525,
        -460.1525, -460.1526, -460.1526, -460.1526, -460.1526, -460.1526,
        -460.1526], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4489e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2642, -0.4433, -0.4669, -0.4781, -0.4849, -0.4894, -0.4925, -0.4946,
        -0.4961, -0.4971, -0.4978, -0.4983, -0.4987, -0.4989, -0.4991, -0.4992,
        -0.4993, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.3388e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.2528e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClH': tensor([-0.1712], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'ClH': tensor([-460.8272, -460.8272, -460.8272, -460.8273, -460.8273, -460.8273,
        -460.8273, -460.8273, -460.8273, -460.8273], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1524, -460.1524, -460.1525, -460.1525, -460.1526, -460.1526,
        -460.1526, -460.1526, -460.1526, -460.1526], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4992, -0.4993, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 13 	 9 	 HCl 	 ClH 	 3.741068135179877e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------17----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [17]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4264, -54.4961, -54.5232, -54.5386, -54.5489, -54.5561, -54.5612,
        -54.5649, -54.5675, -54.5693, -54.5706, -54.5715, -54.5721, -54.5725,
        -54.5728, -54.5731, -54.5732, -54.5733, -54.5734, -54.5735, -54.5735,
        -54.5735, -54.5735, -54.5735, -54.5736], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7878e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.7878e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5731, -54.5732, -54.5733, -54.5734, -54.5735, -54.5735, -54.5735,
        -54.5735, -54.5735, -54.5736], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 13 	 17 	 N 	 N 	 5.731544652395811e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7418, -37.7813, -37.7966, -37.8053, -37.8111, -37.8152, -37.8181,
        -37.8202, -37.8217, -37.8227, -37.8235, -37.8240, -37.8244, -37.8246,
        -37.8248, -37.8249, -37.8250, -37.8251, -37.8251, -37.8252, -37.8252,
        -37.8252, -37.8252, -37.8252, -37.8252], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0078e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.0078e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8249, -37.8250, -37.8251, -37.8251, -37.8252, -37.8252, -37.8252,
        -37.8252, -37.8252, -37.8252], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 13 	 12 	 C 	 C 	 5.450566347277241e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 12, 19, 19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.5357, -188.7601, -188.5968, -188.5012, -188.4424, -188.4023,
        -188.3743, -188.3546, -188.3407, -188.3308, -188.3238, -188.3188,
        -188.3153, -188.3128, -188.3110, -188.3097, -188.3088, -188.3081,
        -188.3076, -188.3073, -188.3071, -188.3069, -188.3068, -188.3067,
        -188.3066], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.4017587505662
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7968e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7352, -37.7734, -37.7909, -37.8011, -37.8081, -37.8131, -37.8166,
        -37.8192, -37.8210, -37.8223, -37.8232, -37.8239, -37.8243, -37.8246,
        -37.8249, -37.8250, -37.8251, -37.8252, -37.8253, -37.8253, -37.8253,
        -37.8253, -37.8254, -37.8254, -37.8254], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.9438e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9666, -75.0096, -75.0255, -75.0344, -75.0404, -75.0446, -75.0476,
        -75.0497, -75.0513, -75.0523, -75.0531, -75.0536, -75.0540, -75.0543,
        -75.0545, -75.0546, -75.0547, -75.0548, -75.0548, -75.0548, -75.0549,
        -75.0549, -75.0549, -75.0549, -75.0549], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1131e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3097, -188.3088, -188.3081, -188.3076, -188.3073, -188.3071,
        -188.3069, -188.3068, -188.3067, -188.3066], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8250, -37.8251, -37.8252, -37.8253, -37.8253, -37.8253, -37.8253,
        -37.8254, -37.8254, -37.8254], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0546, -75.0547, -75.0548, -75.0548, -75.0548, -75.0549, -75.0549,
        -75.0549, -75.0549, -75.0549], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 13 	 4 	 CO2 	 CO2 	 0.014696682929076124

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,  7CCHH
SUBMOLECULES: ['C2H2', 'C', 'C', 'H', 'H']
SUBMOLECULE INDICES: [7, 12, 12, 15, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C2H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6459], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6459], dtype=torch.float64)
E_PRED: tensor([-78.3918, -73.3753, -75.1851, -75.9096, -76.3356, -76.6166, -76.8088,
        -76.9420, -77.0348, -77.0996, -77.1450, -77.1768, -77.1991, -77.2147,
        -77.2257, -77.2333, -77.2387, -77.2425, -77.2451, -77.2470, -77.2483,
        -77.2492, -77.2498, -77.2503, -77.2506], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 108, 108])
mo_energy   ---   torch.Size([2, 108])
dm_ref   ---   torch.Size([1, 2, 108, 108])
rho   ---   torch.Size([1, 2, 1924])
ao_eval   ---   torch.Size([1, 10, 1924, 108])
grid_weights   ---   torch.Size([1, 1924])
-77.2336470993193
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 108])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 108])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7668e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7422, -37.7817, -37.7968, -37.8054, -37.8112, -37.8153, -37.8182,
        -37.8203, -37.8218, -37.8228, -37.8236, -37.8241, -37.8245, -37.8247,
        -37.8249, -37.8250, -37.8251, -37.8252, -37.8252, -37.8252, -37.8253,
        -37.8253, -37.8253, -37.8253, -37.8253], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.9952e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2875, -0.4500, -0.4707, -0.4805, -0.4866, -0.4905, -0.4933, -0.4952,
        -0.4965, -0.4974, -0.4980, -0.4985, -0.4988, -0.4990, -0.4992, -0.4993,
        -0.4993, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.3446e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.9961e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CCHH': tensor([-0.6459], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'CCHH': tensor([-77.2333, -77.2387, -77.2425, -77.2451, -77.2470, -77.2483, -77.2492,
        -77.2498, -77.2503, -77.2506], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8250, -37.8251, -37.8252, -37.8252, -37.8252, -37.8253, -37.8253,
        -37.8253, -37.8253, -37.8253], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4993, -0.4993, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 13 	 7 	 C2H2 	 C2H2 	 0.0004814515460894132

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 15, 15]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-0.9816, -1.0943, -1.1234, -1.1383, -1.1477, -1.1541, -1.1585, -1.1616,
        -1.1637, -1.1652, -1.1663, -1.1670, -1.1675, -1.1679, -1.1681, -1.1683,
        -1.1684, -1.1685, -1.1686, -1.1686, -1.1687, -1.1687, -1.1687, -1.1687,
        -1.1687], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668206
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6121e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.2242e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3254, -0.4603, -0.4765, -0.4843, -0.4891, -0.4923, -0.4945, -0.4960,
        -0.4971, -0.4978, -0.4983, -0.4987, -0.4989, -0.4991, -0.4992, -0.4993,
        -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.3441e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.6638e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.0930e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1683, -1.1684, -1.1685, -1.1686, -1.1686, -1.1687, -1.1687, -1.1687,
        -1.1687, -1.1687], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4993, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 13 	 0 	 H2 	 H2 	 5.001343344871881e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  , 11NaNa
SUBMOLECULES: ['Na2', 'Na', 'Na']
SUBMOLECULE INDICES: [11, 18, 18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0273], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0273], dtype=torch.float64)
E_PRED: tensor([-324.6005, -324.5540, -324.5418, -324.5355, -324.5316, -324.5289,
        -324.5270, -324.5257, -324.5248, -324.5242, -324.5237, -324.5234,
        -324.5232, -324.5230, -324.5229, -324.5228, -324.5228, -324.5227,
        -324.5227, -324.5227, -324.5227, -324.5227, -324.5227, -324.5227,
        -324.5227], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 1992])
ao_eval   ---   torch.Size([1, 10, 1992, 94])
grid_weights   ---   torch.Size([1, 1992])
-324.03216786711033
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(4.4136e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.8272e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2236, -162.2363, -162.2411, -162.2439, -162.2456, -162.2468,
        -162.2477, -162.2484, -162.2489, -162.2491, -162.2492, -162.2493,
        -162.2493, -162.2493, -162.2494, -162.2494, -162.2494, -162.2494,
        -162.2494, -162.2494, -162.2494, -162.2494, -162.2494, -162.2494,
        -162.2494], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.8560e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.8300e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NaNa': tensor([-0.0273], dtype=torch.float64), 'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'NaNa': tensor([-324.5228, -324.5228, -324.5227, -324.5227, -324.5227, -324.5227,
        -324.5227, -324.5227, -324.5227, -324.5227], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Na': tensor([-162.2494, -162.2494, -162.2494, -162.2494, -162.2494, -162.2494,
        -162.2494, -162.2494, -162.2494, -162.2494], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 13 	 11 	 Na2 	 Na2 	 2.958496483977448e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 16, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2775, -107.2862, -107.2495, -107.2402, -107.2340, -107.2305,
        -107.2284, -107.2275, -107.2271, -107.2270, -107.2271, -107.2272,
        -107.2274, -107.2277, -107.2280, -107.2282, -107.2285, -107.2287,
        -107.2290, -107.2291, -107.2293, -107.2294, -107.2295, -107.2296,
        -107.2297], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.305942205048
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.4757e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6798, -99.7022, -99.7101, -99.7146, -99.7176, -99.7197, -99.7213,
        -99.7223, -99.7231, -99.7237, -99.7241, -99.7243, -99.7245, -99.7247,
        -99.7248, -99.7248, -99.7249, -99.7249, -99.7249, -99.7250, -99.7250,
        -99.7250, -99.7250, -99.7250, -99.7250], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.6998e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4565, -7.4637, -7.4669, -7.4687, -7.4698, -7.4707, -7.4717, -7.4723,
        -7.4722, -7.4720, -7.4718, -7.4717, -7.4718, -7.4718, -7.4718, -7.4719,
        -7.4719, -7.4719, -7.4719, -7.4719, -7.4719, -7.4719, -7.4720, -7.4720,
        -7.4720], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.0748e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.6602e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2282, -107.2285, -107.2287, -107.2290, -107.2291, -107.2293,
        -107.2294, -107.2295, -107.2296, -107.2297], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7248, -99.7249, -99.7249, -99.7249, -99.7250, -99.7250, -99.7250,
        -99.7250, -99.7250, -99.7250], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4719, -7.4719, -7.4719, -7.4719, -7.4719, -7.4719, -7.4719, -7.4720,
        -7.4720, -7.4720], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 13 	 2 	 FLi 	 LiF 	 0.008418325179486137

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------14----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6781, -99.7009, -99.7092, -99.7139, -99.7171, -99.7194, -99.7210,
        -99.7222, -99.7230, -99.7236, -99.7240, -99.7243, -99.7245, -99.7247,
        -99.7248, -99.7249, -99.7249, -99.7250, -99.7250, -99.7250, -99.7250,
        -99.7250, -99.7250, -99.7250, -99.7250], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.6539e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.6539e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7249, -99.7249, -99.7250, -99.7250, -99.7250, -99.7250, -99.7250,
        -99.7250, -99.7250, -99.7250], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 13 	 14 	 F 	 F 	 1.834171330002752e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------18----------------
TRAINING ON MOLECULE:  ,Na
SUBMOLECULES: ['Na']
SUBMOLECULE INDICES: [18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2245, -162.2371, -162.2418, -162.2444, -162.2461, -162.2473,
        -162.2481, -162.2488, -162.2493, -162.2495, -162.2496, -162.2496,
        -162.2497, -162.2497, -162.2498, -162.2498, -162.2498, -162.2498,
        -162.2498, -162.2498, -162.2498, -162.2498, -162.2498, -162.2498,
        -162.2498], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.4465e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.4465e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'Na': tensor([-162.2498, -162.2498, -162.2498, -162.2498, -162.2498, -162.2498,
        -162.2498, -162.2498, -162.2498, -162.2498], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 13 	 18 	 Na 	 Na 	 5.3304086778531585e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 12, 17, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-94.1036, -93.5647, -93.4179, -93.3591, -93.3142, -93.2860, -93.2655,
        -93.2511, -93.2408, -93.2335, -93.2282, -93.2244, -93.2216, -93.2196,
        -93.2182, -93.2171, -93.2163, -93.2158, -93.2153, -93.2150, -93.2148,
        -93.2146, -93.2145, -93.2144, -93.2144], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633898
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.8360e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7372, -37.7763, -37.7929, -37.8026, -37.8091, -37.8138, -37.8171,
        -37.8195, -37.8212, -37.8224, -37.8232, -37.8238, -37.8243, -37.8246,
        -37.8248, -37.8249, -37.8250, -37.8251, -37.8251, -37.8252, -37.8252,
        -37.8252, -37.8252, -37.8252, -37.8252], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0091e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2853, -0.4494, -0.4703, -0.4803, -0.4864, -0.4904, -0.4932, -0.4951,
        -0.4964, -0.4974, -0.4980, -0.4985, -0.4988, -0.4990, -0.4991, -0.4993,
        -0.4993, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.3476e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.0385e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4088, -54.4771, -54.5094, -54.5285, -54.5417, -54.5510, -54.5577,
        -54.5625, -54.5658, -54.5682, -54.5699, -54.5711, -54.5719, -54.5725,
        -54.5729, -54.5732, -54.5734, -54.5736, -54.5737, -54.5737, -54.5738,
        -54.5738, -54.5738, -54.5739, -54.5739], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7365e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2171, -93.2163, -93.2158, -93.2153, -93.2150, -93.2148, -93.2146,
        -93.2145, -93.2144, -93.2144], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8249, -37.8250, -37.8251, -37.8251, -37.8252, -37.8252, -37.8252,
        -37.8252, -37.8252, -37.8252], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4993, -0.4993, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5732, -54.5734, -54.5736, -54.5737, -54.5737, -54.5738, -54.5738,
        -54.5738, -54.5739, -54.5739], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 13 	 3 	 CHN 	 CNH 	 0.007863521204475876

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,  6FF
SUBMOLECULES: ['F2', 'F', 'F']
SUBMOLECULE INDICES: [6, 14, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0618], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0618], dtype=torch.float64)
E_PRED: tensor([-199.6431, -199.5691, -199.5495, -199.5395, -199.5331, -199.5288,
        -199.5257, -199.5236, -199.5221, -199.5211, -199.5203, -199.5198,
        -199.5194, -199.5192, -199.5190, -199.5189, -199.5188, -199.5187,
        -199.5187, -199.5186, -199.5186, -199.5186, -199.5186, -199.5186,
        -199.5186], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 4698])
ao_eval   ---   torch.Size([1, 10, 4698, 78])
grid_weights   ---   torch.Size([1, 4698])
-199.3364659747656
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.3127e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.6254e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6786, -99.7014, -99.7097, -99.7145, -99.7177, -99.7200, -99.7216,
        -99.7228, -99.7236, -99.7242, -99.7246, -99.7249, -99.7251, -99.7253,
        -99.7254, -99.7254, -99.7255, -99.7255, -99.7256, -99.7256, -99.7256,
        -99.7256, -99.7256, -99.7256, -99.7256], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.9522e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.6304e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'FF': tensor([-0.0618], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'FF': tensor([-199.5189, -199.5188, -199.5187, -199.5187, -199.5186, -199.5186,
        -199.5186, -199.5186, -199.5186, -199.5186], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7254, -99.7255, -99.7255, -99.7256, -99.7256, -99.7256, -99.7256,
        -99.7256, -99.7256, -99.7256], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 13 	 6 	 F2 	 F2 	 7.156220742138706e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 17, 17]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.4619, -109.8770, -109.7330, -109.6570, -109.6082, -109.5748,
        -109.5516, -109.5353, -109.5240, -109.5160, -109.5104, -109.5065,
        -109.5038, -109.5018, -109.5005, -109.4995, -109.4989, -109.4984,
        -109.4981, -109.4979, -109.4977, -109.4976, -109.4975, -109.4975,
        -109.4974], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018879
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.2668e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4125, -54.4821, -54.5131, -54.5313, -54.5437, -54.5525, -54.5588,
        -54.5632, -54.5664, -54.5686, -54.5702, -54.5713, -54.5721, -54.5726,
        -54.5730, -54.5733, -54.5735, -54.5736, -54.5737, -54.5738, -54.5738,
        -54.5739, -54.5739, -54.5739, -54.5739], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7233e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4995, -109.4989, -109.4984, -109.4981, -109.4979, -109.4977,
        -109.4976, -109.4975, -109.4975, -109.4974], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5733, -54.5735, -54.5736, -54.5737, -54.5738, -54.5738, -54.5739,
        -54.5739, -54.5739, -54.5739], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 13 	 1 	 N2 	 N2 	 4.801030004936682e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,  8OC
SUBMOLECULES: ['CO', 'O', 'C']
SUBMOLECULE INDICES: [8, 19, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='OC', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4142], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4142], dtype=torch.float64)
E_PRED: tensor([-113.5832, -113.3630, -113.3116, -113.2839, -113.2672, -113.2557,
        -113.2477, -113.2422, -113.2383, -113.2355, -113.2336, -113.2323,
        -113.2314, -113.2307, -113.2303, -113.2299, -113.2297, -113.2296,
        -113.2295, -113.2294, -113.2293, -113.2293, -113.2293, -113.2292,
        -113.2292], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 3279])
ao_eval   ---   torch.Size([1, 10, 3279, 78])
grid_weights   ---   torch.Size([1, 3279])
-113.201730216515
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.4417e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7447, -37.7839, -37.7984, -37.8066, -37.8120, -37.8159, -37.8186,
        -37.8206, -37.8220, -37.8229, -37.8236, -37.8241, -37.8245, -37.8247,
        -37.8249, -37.8250, -37.8251, -37.8251, -37.8252, -37.8252, -37.8252,
        -37.8252, -37.8253, -37.8253, -37.8253], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0030e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9484, -74.9852, -75.0070, -75.0207, -75.0304, -75.0374, -75.0425,
        -75.0461, -75.0488, -75.0507, -75.0520, -75.0530, -75.0537, -75.0541,
        -75.0545, -75.0547, -75.0549, -75.0550, -75.0551, -75.0551, -75.0552,
        -75.0552, -75.0552, -75.0552, -75.0552], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0778e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'OC': tensor([-0.4142], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'OC': tensor([-113.2299, -113.2297, -113.2296, -113.2295, -113.2294, -113.2293,
        -113.2293, -113.2293, -113.2292, -113.2292], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8250, -37.8251, -37.8251, -37.8252, -37.8252, -37.8252, -37.8252,
        -37.8253, -37.8253, -37.8253], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0547, -75.0549, -75.0550, -75.0551, -75.0551, -75.0552, -75.0552,
        -75.0552, -75.0552, -75.0552], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 13 	 8 	 CO 	 OC 	 0.0010012756537444959

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e13)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e13/2022-11-29_10:09:21.574160_1.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e13/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 13 || ,[' rho : 2.944321', ' ae : 57.227146', ' E : 2.933191'] ,|| total loss 42.555137 || CHKPT: _1.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------15----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2909, -0.4510, -0.4712, -0.4809, -0.4868, -0.4907, -0.4934, -0.4952,
        -0.4965, -0.4974, -0.4980, -0.4985, -0.4988, -0.4990, -0.4992, -0.4993,
        -0.4993, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.3456e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.0064e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.8691e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4993, -0.4993, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 14 	 15 	 H 	 H 	 6.239131476305852e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------13----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0997, -460.1283, -460.1378, -460.1431, -460.1467, -460.1493,
        -460.1511, -460.1525, -460.1534, -460.1541, -460.1545, -460.1549,
        -460.1551, -460.1553, -460.1554, -460.1555, -460.1555, -460.1556,
        -460.1556, -460.1556, -460.1556, -460.1557, -460.1557, -460.1557,
        -460.1557], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.0865e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(4.0865e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1555, -460.1555, -460.1556, -460.1556, -460.1556, -460.1556,
        -460.1557, -460.1557, -460.1557, -460.1557], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 14 	 13 	 Cl 	 Cl 	 1.3725650986546478e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,  7CCHH
SUBMOLECULES: ['C2H2', 'C', 'C', 'H', 'H']
SUBMOLECULE INDICES: [7, 12, 12, 15, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C2H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6459], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6459], dtype=torch.float64)
E_PRED: tensor([-78.1360, -73.0607, -75.0520, -75.8318, -76.2851, -76.5825, -76.7853,
        -76.9256, -77.0234, -77.0918, -77.1396, -77.1731, -77.1966, -77.2130,
        -77.2246, -77.2327, -77.2384, -77.2424, -77.2452, -77.2471, -77.2485,
        -77.2494, -77.2501, -77.2506, -77.2509], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 108, 108])
mo_energy   ---   torch.Size([2, 108])
dm_ref   ---   torch.Size([1, 2, 108, 108])
rho   ---   torch.Size([1, 2, 1924])
ao_eval   ---   torch.Size([1, 10, 1924, 108])
grid_weights   ---   torch.Size([1, 1924])
-77.2336470993193
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 108])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 108])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7487e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7354, -37.7737, -37.7910, -37.8011, -37.8080, -37.8129, -37.8164,
        -37.8190, -37.8208, -37.8220, -37.8229, -37.8236, -37.8240, -37.8243,
        -37.8246, -37.8247, -37.8248, -37.8249, -37.8249, -37.8250, -37.8250,
        -37.8250, -37.8250, -37.8251, -37.8251], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0354e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3342, -0.4626, -0.4778, -0.4851, -0.4897, -0.4927, -0.4947, -0.4962,
        -0.4972, -0.4979, -0.4984, -0.4987, -0.4989, -0.4991, -0.4992, -0.4993,
        -0.4994, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.3359e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.6615e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CCHH': tensor([-0.6459], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'CCHH': tensor([-77.2327, -77.2384, -77.2424, -77.2452, -77.2471, -77.2485, -77.2494,
        -77.2501, -77.2506, -77.2509], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8247, -37.8248, -37.8249, -37.8249, -37.8250, -37.8250, -37.8250,
        -37.8250, -37.8251, -37.8251], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4993, -0.4994, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 14 	 7 	 C2H2 	 C2H2 	 0.0004644400003721952

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  , 11NaNa
SUBMOLECULES: ['Na2', 'Na', 'Na']
SUBMOLECULE INDICES: [11, 18, 18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0273], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0273], dtype=torch.float64)
E_PRED: tensor([-324.6448, -324.5717, -324.5527, -324.5429, -324.5368, -324.5326,
        -324.5296, -324.5276, -324.5262, -324.5252, -324.5245, -324.5240,
        -324.5237, -324.5234, -324.5233, -324.5231, -324.5231, -324.5230,
        -324.5230, -324.5229, -324.5229, -324.5229, -324.5229, -324.5229,
        -324.5229], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 1992])
ao_eval   ---   torch.Size([1, 10, 1992, 94])
grid_weights   ---   torch.Size([1, 1992])
-324.03216786711033
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(4.4212e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.8425e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2239, -162.2366, -162.2414, -162.2441, -162.2458, -162.2469,
        -162.2478, -162.2485, -162.2490, -162.2492, -162.2493, -162.2494,
        -162.2494, -162.2494, -162.2495, -162.2495, -162.2495, -162.2495,
        -162.2495, -162.2495, -162.2495, -162.2495, -162.2495, -162.2495,
        -162.2495], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.7485e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.8452e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NaNa': tensor([-0.0273], dtype=torch.float64), 'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'NaNa': tensor([-324.5231, -324.5231, -324.5230, -324.5230, -324.5229, -324.5229,
        -324.5229, -324.5229, -324.5229, -324.5229], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Na': tensor([-162.2495, -162.2495, -162.2495, -162.2495, -162.2495, -162.2495,
        -162.2495, -162.2495, -162.2495, -162.2495], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 14 	 11 	 Na2 	 Na2 	 2.92465740307981e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,  8OC
SUBMOLECULES: ['CO', 'O', 'C']
SUBMOLECULE INDICES: [8, 19, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='OC', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4142], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4142], dtype=torch.float64)
E_PRED: tensor([-113.6434, -113.3859, -113.3252, -113.2927, -113.2731, -113.2595,
        -113.2501, -113.2435, -113.2389, -113.2357, -113.2334, -113.2319,
        -113.2307, -113.2300, -113.2294, -113.2291, -113.2288, -113.2286,
        -113.2285, -113.2284, -113.2283, -113.2283, -113.2282, -113.2282,
        -113.2282], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 3279])
ao_eval   ---   torch.Size([1, 10, 3279, 78])
grid_weights   ---   torch.Size([1, 3279])
-113.201730216515
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.4365e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7352, -37.7736, -37.7908, -37.8009, -37.8078, -37.8127, -37.8162,
        -37.8187, -37.8205, -37.8218, -37.8227, -37.8233, -37.8237, -37.8241,
        -37.8243, -37.8244, -37.8245, -37.8246, -37.8247, -37.8247, -37.8247,
        -37.8248, -37.8248, -37.8248, -37.8248], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0718e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9485, -74.9880, -75.0091, -75.0222, -75.0313, -75.0378, -75.0426,
        -75.0460, -75.0485, -75.0503, -75.0515, -75.0524, -75.0530, -75.0535,
        -75.0538, -75.0540, -75.0542, -75.0543, -75.0543, -75.0544, -75.0544,
        -75.0545, -75.0545, -75.0545, -75.0545], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2064e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'OC': tensor([-0.4142], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'OC': tensor([-113.2291, -113.2288, -113.2286, -113.2285, -113.2284, -113.2283,
        -113.2283, -113.2282, -113.2282, -113.2282], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8244, -37.8245, -37.8246, -37.8247, -37.8247, -37.8247, -37.8248,
        -37.8248, -37.8248, -37.8248], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0540, -75.0542, -75.0543, -75.0543, -75.0544, -75.0544, -75.0545,
        -75.0545, -75.0545, -75.0545], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 14 	 8 	 CO 	 OC 	 0.0009951603913382324

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------17----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [17]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4097, -54.4785, -54.5102, -54.5290, -54.5418, -54.5509, -54.5574,
        -54.5620, -54.5653, -54.5676, -54.5693, -54.5704, -54.5712, -54.5718,
        -54.5722, -54.5725, -54.5727, -54.5728, -54.5729, -54.5730, -54.5730,
        -54.5731, -54.5731, -54.5731, -54.5731], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.9043e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.9043e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5725, -54.5727, -54.5728, -54.5729, -54.5730, -54.5730, -54.5731,
        -54.5731, -54.5731, -54.5731], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 14 	 17 	 N 	 N 	 6.056951590356512e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 13, 13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4572, -920.4273, -920.4201, -920.4163, -920.4138, -920.4121,
        -920.4110, -920.4101, -920.4095, -920.4091, -920.4088, -920.4086,
        -920.4085, -920.4084, -920.4083, -920.4083, -920.4082, -920.4082,
        -920.4082, -920.4082, -920.4082, -920.4082, -920.4082, -920.4081,
        -920.4081], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885617
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.7893e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.5786e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0919, -460.1218, -460.1320, -460.1378, -460.1417, -460.1445,
        -460.1465, -460.1480, -460.1490, -460.1498, -460.1503, -460.1507,
        -460.1509, -460.1511, -460.1512, -460.1513, -460.1514, -460.1514,
        -460.1515, -460.1515, -460.1515, -460.1515, -460.1515, -460.1515,
        -460.1515], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.4739e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.5794e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4083, -920.4082, -920.4082, -920.4082, -920.4082, -920.4082,
        -920.4082, -920.4082, -920.4081, -920.4081], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1513, -460.1514, -460.1514, -460.1515, -460.1515, -460.1515,
        -460.1515, -460.1515, -460.1515, -460.1515], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 14 	 5 	 Cl2 	 Cl2 	 2.606020828791728e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7575, -37.7928, -37.8043, -37.8106, -37.8147, -37.8176, -37.8197,
        -37.8211, -37.8222, -37.8229, -37.8234, -37.8238, -37.8240, -37.8242,
        -37.8243, -37.8244, -37.8245, -37.8245, -37.8245, -37.8245, -37.8246,
        -37.8246, -37.8246, -37.8246, -37.8246], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0886e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.0886e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8244, -37.8245, -37.8245, -37.8245, -37.8245, -37.8246, -37.8246,
        -37.8246, -37.8246, -37.8246], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 14 	 12 	 C 	 C 	 5.92159451799269e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  , 10LiH
SUBMOLECULES: ['HLi', 'Li', 'H']
SUBMOLECULE INDICES: [10, 16, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0923], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0923], dtype=torch.float64)
E_PRED: tensor([-7.9512, -8.0145, -8.0314, -8.0401, -8.0458, -8.0497, -8.0525, -8.0544,
        -8.0558, -8.0568, -8.0575, -8.0580, -8.0583, -8.0586, -8.0587, -8.0588,
        -8.0589, -8.0590, -8.0590, -8.0591, -8.0591, -8.0591, -8.0591, -8.0591,
        -8.0591], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 54, 54])
mo_energy   ---   torch.Size([2, 54])
dm_ref   ---   torch.Size([1, 2, 54, 54])
rho   ---   torch.Size([1, 2, 1271])
ao_eval   ---   torch.Size([1, 10, 1271, 54])
grid_weights   ---   torch.Size([1, 1271])
-8.038079906478378
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 54])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 54])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.3473e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.6947e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2815, -0.4483, -0.4697, -0.4799, -0.4861, -0.4902, -0.4930, -0.4950,
        -0.4963, -0.4973, -0.4979, -0.4984, -0.4987, -0.4989, -0.4991, -0.4992,
        -0.4993, -0.4993, -0.4994, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.3069e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.2309e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(4.5561e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4572, -7.4646, -7.4674, -7.4689, -7.4700, -7.4709, -7.4718, -7.4721,
        -7.4718, -7.4716, -7.4715, -7.4715, -7.4715, -7.4715, -7.4716, -7.4716,
        -7.4716, -7.4716, -7.4717, -7.4717, -7.4717, -7.4717, -7.4717, -7.4717,
        -7.4717], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.0485e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.8913e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.6561e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiH': tensor([-0.0923], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiH': tensor([-8.0588, -8.0589, -8.0590, -8.0590, -8.0591, -8.0591, -8.0591, -8.0591,
        -8.0591, -8.0591], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4992, -0.4993, -0.4993, -0.4994, -0.4994, -0.4994, -0.4994, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>), 'Li': tensor([-7.4716, -7.4716, -7.4716, -7.4717, -7.4717, -7.4717, -7.4717, -7.4717,
        -7.4717, -7.4717], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 14 	 10 	 HLi 	 LiH 	 4.344580378066834e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------14----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6706, -99.6930, -99.7032, -99.7094, -99.7136, -99.7167, -99.7189,
        -99.7205, -99.7217, -99.7225, -99.7231, -99.7235, -99.7238, -99.7240,
        -99.7241, -99.7242, -99.7243, -99.7244, -99.7244, -99.7244, -99.7245,
        -99.7245, -99.7245, -99.7245, -99.7245], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(6.4257e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.4257e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7242, -99.7243, -99.7244, -99.7244, -99.7244, -99.7245, -99.7245,
        -99.7245, -99.7245, -99.7245], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 14 	 14 	 F 	 F 	 2.073396678288981e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------19----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9548, -74.9983, -75.0172, -75.0282, -75.0357, -75.0411, -75.0449,
        -75.0477, -75.0497, -75.0511, -75.0521, -75.0528, -75.0533, -75.0536,
        -75.0539, -75.0541, -75.0542, -75.0543, -75.0543, -75.0544, -75.0544,
        -75.0544, -75.0544, -75.0544, -75.0545], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2041e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.2041e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0541, -75.0542, -75.0543, -75.0543, -75.0544, -75.0544, -75.0544,
        -75.0544, -75.0544, -75.0545], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 14 	 19 	 O 	 O 	 3.8653419174748566e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 17, 17]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.9329, -109.3585, -109.4820, -109.4934, -109.4940, -109.4938,
        -109.4939, -109.4943, -109.4947, -109.4952, -109.4956, -109.4959,
        -109.4962, -109.4964, -109.4965, -109.4967, -109.4967, -109.4968,
        -109.4969, -109.4969, -109.4969, -109.4969, -109.4969, -109.4969,
        -109.4970], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018879
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.2615e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4316, -54.5002, -54.5260, -54.5406, -54.5503, -54.5571, -54.5619,
        -54.5653, -54.5678, -54.5695, -54.5707, -54.5715, -54.5721, -54.5725,
        -54.5728, -54.5730, -54.5732, -54.5733, -54.5733, -54.5734, -54.5734,
        -54.5734, -54.5735, -54.5735, -54.5735], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8026e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4967, -109.4967, -109.4968, -109.4969, -109.4969, -109.4969,
        -109.4969, -109.4969, -109.4969, -109.4970], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5730, -54.5732, -54.5733, -54.5733, -54.5734, -54.5734, -54.5734,
        -54.5735, -54.5735, -54.5735], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 14 	 1 	 N2 	 N2 	 4.598745521228719e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------16----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [16]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4565, -7.4637, -7.4668, -7.4686, -7.4697, -7.4707, -7.4716, -7.4722,
        -7.4721, -7.4718, -7.4717, -7.4716, -7.4716, -7.4717, -7.4717, -7.4717,
        -7.4718, -7.4718, -7.4718, -7.4718, -7.4718, -7.4718, -7.4718, -7.4718,
        -7.4718], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.0541e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.7695e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.1111e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4717, -7.4718, -7.4718, -7.4718, -7.4718, -7.4718, -7.4718, -7.4718,
        -7.4718, -7.4718], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 14 	 16 	 Li 	 Li 	 9.063614230347736e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,  6FF
SUBMOLECULES: ['F2', 'F', 'F']
SUBMOLECULE INDICES: [6, 14, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0618], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0618], dtype=torch.float64)
E_PRED: tensor([-199.6080, -199.5548, -199.5409, -199.5338, -199.5293, -199.5262,
        -199.5241, -199.5226, -199.5215, -199.5208, -199.5203, -199.5199,
        -199.5197, -199.5195, -199.5193, -199.5193, -199.5192, -199.5191,
        -199.5191, -199.5191, -199.5191, -199.5191, -199.5191, -199.5191,
        -199.5191], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 4698])
ao_eval   ---   torch.Size([1, 10, 4698, 78])
grid_weights   ---   torch.Size([1, 4698])
-199.3364659747656
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.3057e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.6114e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6788, -99.7015, -99.7098, -99.7145, -99.7178, -99.7201, -99.7217,
        -99.7229, -99.7237, -99.7243, -99.7247, -99.7250, -99.7252, -99.7254,
        -99.7255, -99.7256, -99.7256, -99.7256, -99.7257, -99.7257, -99.7257,
        -99.7257, -99.7257, -99.7257, -99.7257], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.8219e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.6163e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'FF': tensor([-0.0618], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'FF': tensor([-199.5193, -199.5192, -199.5191, -199.5191, -199.5191, -199.5191,
        -199.5191, -199.5191, -199.5191, -199.5191], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7256, -99.7256, -99.7256, -99.7257, -99.7257, -99.7257, -99.7257,
        -99.7257, -99.7257, -99.7257], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 14 	 6 	 F2 	 F2 	 7.829863911630385e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 16, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.3167, -107.2982, -107.2619, -107.2493, -107.2415, -107.2369,
        -107.2339, -107.2322, -107.2311, -107.2305, -107.2301, -107.2299,
        -107.2300, -107.2301, -107.2302, -107.2304, -107.2306, -107.2308,
        -107.2310, -107.2311, -107.2312, -107.2314, -107.2314, -107.2315,
        -107.2316], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.305942205048
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.4925e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6782, -99.7010, -99.7095, -99.7144, -99.7178, -99.7201, -99.7218,
        -99.7230, -99.7239, -99.7245, -99.7249, -99.7253, -99.7255, -99.7256,
        -99.7257, -99.7258, -99.7259, -99.7259, -99.7259, -99.7259, -99.7260,
        -99.7260, -99.7260, -99.7260, -99.7260], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.5265e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4578, -7.4651, -7.4678, -7.4693, -7.4703, -7.4713, -7.4721, -7.4723,
        -7.4720, -7.4718, -7.4717, -7.4717, -7.4717, -7.4718, -7.4718, -7.4718,
        -7.4719, -7.4719, -7.4719, -7.4719, -7.4719, -7.4719, -7.4719, -7.4719,
        -7.4719], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.0571e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.6921e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2304, -107.2306, -107.2308, -107.2310, -107.2311, -107.2312,
        -107.2314, -107.2314, -107.2315, -107.2316], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7258, -99.7259, -99.7259, -99.7259, -99.7259, -99.7260, -99.7260,
        -99.7260, -99.7260, -99.7260], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4718, -7.4719, -7.4719, -7.4719, -7.4719, -7.4719, -7.4719, -7.4719,
        -7.4719, -7.4719], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 14 	 2 	 FLi 	 LiF 	 0.008333616947209858

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,  9ClH
SUBMOLECULES: ['HCl', 'Cl', 'H']
SUBMOLECULE INDICES: [9, 13, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='ClH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1712], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1712], dtype=torch.float64)
E_PRED: tensor([-460.7558, -460.7991, -460.8114, -460.8177, -460.8217, -460.8244,
        -460.8263, -460.8276, -460.8285, -460.8291, -460.8296, -460.8299,
        -460.8301, -460.8303, -460.8304, -460.8304, -460.8305, -460.8305,
        -460.8306, -460.8306, -460.8306, -460.8306, -460.8306, -460.8306,
        -460.8306], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 62, 62])
mo_energy   ---   torch.Size([2, 62])
dm_ref   ---   torch.Size([1, 2, 62, 62])
rho   ---   torch.Size([1, 2, 1068])
ao_eval   ---   torch.Size([1, 10, 1068, 62])
grid_weights   ---   torch.Size([1, 1068])
-460.4234538667477
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 62])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 62])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(4.9088e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.8177e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1051, -460.1317, -460.1402, -460.1449, -460.1481, -460.1503,
        -460.1519, -460.1531, -460.1539, -460.1545, -460.1549, -460.1552,
        -460.1554, -460.1555, -460.1556, -460.1557, -460.1557, -460.1558,
        -460.1558, -460.1558, -460.1558, -460.1558, -460.1558, -460.1558,
        -460.1558], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.2787e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.8219e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2395, -0.4358, -0.4627, -0.4754, -0.4831, -0.4882, -0.4916, -0.4940,
        -0.4957, -0.4968, -0.4976, -0.4982, -0.4986, -0.4988, -0.4990, -0.4992,
        -0.4993, -0.4993, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.3343e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.6375e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClH': tensor([-0.1712], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'ClH': tensor([-460.8304, -460.8305, -460.8305, -460.8306, -460.8306, -460.8306,
        -460.8306, -460.8306, -460.8306, -460.8306], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1557, -460.1557, -460.1558, -460.1558, -460.1558, -460.1558,
        -460.1558, -460.1558, -460.1558, -460.1558], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4992, -0.4993, -0.4993, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 14 	 9 	 HCl 	 ClH 	 3.862939013522631e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 12, 19, 19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.7843, -188.8577, -188.6618, -188.5466, -188.4754, -188.4269,
        -188.3929, -188.3691, -188.3522, -188.3402, -188.3318, -188.3257,
        -188.3215, -188.3184, -188.3162, -188.3147, -188.3136, -188.3128,
        -188.3122, -188.3118, -188.3115, -188.3113, -188.3112, -188.3111,
        -188.3110], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.4017587505662
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7851e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7329, -37.7675, -37.7864, -37.7978, -37.8057, -37.8114, -37.8155,
        -37.8184, -37.8205, -37.8220, -37.8230, -37.8238, -37.8243, -37.8247,
        -37.8250, -37.8251, -37.8253, -37.8254, -37.8254, -37.8255, -37.8255,
        -37.8255, -37.8255, -37.8255, -37.8256], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.7479e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9535, -74.9962, -75.0158, -75.0276, -75.0356, -75.0414, -75.0456,
        -75.0486, -75.0507, -75.0522, -75.0533, -75.0541, -75.0546, -75.0550,
        -75.0553, -75.0555, -75.0556, -75.0557, -75.0557, -75.0558, -75.0558,
        -75.0558, -75.0559, -75.0559, -75.0559], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.5720e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3147, -188.3136, -188.3128, -188.3122, -188.3118, -188.3115,
        -188.3113, -188.3112, -188.3111, -188.3110], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8251, -37.8253, -37.8254, -37.8254, -37.8255, -37.8255, -37.8255,
        -37.8255, -37.8255, -37.8256], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0555, -75.0556, -75.0557, -75.0557, -75.0558, -75.0558, -75.0558,
        -75.0559, -75.0559, -75.0559], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 14 	 4 	 CO2 	 CO2 	 0.014430954791338596

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------18----------------
TRAINING ON MOLECULE:  ,Na
SUBMOLECULES: ['Na']
SUBMOLECULE INDICES: [18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2308, -162.2420, -162.2457, -162.2476, -162.2488, -162.2497,
        -162.2504, -162.2508, -162.2511, -162.2512, -162.2512, -162.2513,
        -162.2513, -162.2513, -162.2513, -162.2514, -162.2514, -162.2514,
        -162.2514, -162.2514, -162.2514, -162.2514, -162.2514, -162.2514,
        -162.2514], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1034e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.1034e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'Na': tensor([-162.2514, -162.2514, -162.2514, -162.2514, -162.2514, -162.2514,
        -162.2514, -162.2514, -162.2514, -162.2514], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 14 	 18 	 Na 	 Na 	 2.4028228851768008e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 15, 15]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0237, -1.1110, -1.1336, -1.1452, -1.1525, -1.1575, -1.1609, -1.1633,
        -1.1649, -1.1661, -1.1669, -1.1675, -1.1679, -1.1682, -1.1684, -1.1685,
        -1.1686, -1.1687, -1.1687, -1.1688, -1.1688, -1.1688, -1.1688, -1.1688,
        -1.1688], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668206
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6346e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.2692e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2695, -0.4448, -0.4677, -0.4786, -0.4853, -0.4897, -0.4927, -0.4947,
        -0.4962, -0.4972, -0.4979, -0.4983, -0.4987, -0.4989, -0.4991, -0.4992,
        -0.4993, -0.4994, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.3351e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.2915e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.1362e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1685, -1.1686, -1.1687, -1.1687, -1.1688, -1.1688, -1.1688, -1.1688,
        -1.1688, -1.1688], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4992, -0.4993, -0.4994, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 14 	 0 	 H2 	 H2 	 4.646155808743508e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 12, 17, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-94.1456, -93.5823, -93.4272, -93.3666, -93.3196, -93.2903, -93.2690,
        -93.2541, -93.2434, -93.2358, -93.2303, -93.2264, -93.2235, -93.2215,
        -93.2200, -93.2189, -93.2181, -93.2175, -93.2171, -93.2168, -93.2166,
        -93.2164, -93.2163, -93.2162, -93.2161], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633898
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.7958e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7393, -37.7785, -37.7945, -37.8038, -37.8100, -37.8145, -37.8176,
        -37.8199, -37.8215, -37.8226, -37.8234, -37.8240, -37.8244, -37.8247,
        -37.8249, -37.8250, -37.8251, -37.8252, -37.8252, -37.8253, -37.8253,
        -37.8253, -37.8253, -37.8253, -37.8253], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.9610e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2629, -0.4429, -0.4667, -0.4779, -0.4848, -0.4893, -0.4924, -0.4946,
        -0.4961, -0.4971, -0.4978, -0.4983, -0.4987, -0.4989, -0.4991, -0.4992,
        -0.4993, -0.4993, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.3345e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.3727e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4076, -54.4745, -54.5074, -54.5272, -54.5407, -54.5504, -54.5574,
        -54.5623, -54.5658, -54.5683, -54.5701, -54.5713, -54.5722, -54.5728,
        -54.5732, -54.5735, -54.5737, -54.5739, -54.5740, -54.5740, -54.5741,
        -54.5741, -54.5741, -54.5742, -54.5742], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6737e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2189, -93.2181, -93.2175, -93.2171, -93.2168, -93.2166, -93.2164,
        -93.2163, -93.2162, -93.2161], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8250, -37.8251, -37.8252, -37.8252, -37.8253, -37.8253, -37.8253,
        -37.8253, -37.8253, -37.8253], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4992, -0.4993, -0.4993, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5735, -54.5737, -54.5739, -54.5740, -54.5740, -54.5741, -54.5741,
        -54.5741, -54.5742, -54.5742], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 14 	 3 	 CHN 	 CNH 	 0.007745884318116904

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e14)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e14/2022-11-29_10:09:21.574160_2.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e14/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 14 || ,[' rho : 2.935701', ' ae : 56.806813', ' E : 2.970452'] ,|| total loss 42.260643 || CHKPT: _2.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 12, 17, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-94.1282, -93.5752, -93.4234, -93.3637, -93.3176, -93.2888, -93.2679,
        -93.2533, -93.2428, -93.2353, -93.2299, -93.2261, -93.2233, -93.2212,
        -93.2198, -93.2187, -93.2179, -93.2174, -93.2169, -93.2166, -93.2164,
        -93.2163, -93.2161, -93.2160, -93.2160], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633898
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.7917e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7357, -37.7739, -37.7912, -37.8013, -37.8082, -37.8131, -37.8166,
        -37.8191, -37.8209, -37.8222, -37.8231, -37.8237, -37.8242, -37.8245,
        -37.8247, -37.8249, -37.8250, -37.8251, -37.8251, -37.8251, -37.8252,
        -37.8252, -37.8252, -37.8252, -37.8252], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0146e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2606, -0.4422, -0.4663, -0.4777, -0.4846, -0.4892, -0.4924, -0.4945,
        -0.4960, -0.4971, -0.4978, -0.4983, -0.4987, -0.4989, -0.4991, -0.4992,
        -0.4993, -0.4993, -0.4994, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.3299e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.4204e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4073, -54.4740, -54.5071, -54.5269, -54.5405, -54.5502, -54.5571,
        -54.5621, -54.5656, -54.5681, -54.5699, -54.5711, -54.5720, -54.5726,
        -54.5730, -54.5734, -54.5736, -54.5737, -54.5738, -54.5739, -54.5739,
        -54.5740, -54.5740, -54.5740, -54.5740], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7053e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2187, -93.2179, -93.2174, -93.2169, -93.2166, -93.2164, -93.2163,
        -93.2161, -93.2160, -93.2160], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8249, -37.8250, -37.8251, -37.8251, -37.8251, -37.8252, -37.8252,
        -37.8252, -37.8252, -37.8252], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4992, -0.4993, -0.4993, -0.4994, -0.4994, -0.4994, -0.4994, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5734, -54.5736, -54.5737, -54.5738, -54.5739, -54.5739, -54.5740,
        -54.5740, -54.5740, -54.5740], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 15 	 3 	 CHN 	 CNH 	 0.007734308021909997

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,  8OC
SUBMOLECULES: ['CO', 'O', 'C']
SUBMOLECULE INDICES: [8, 19, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='OC', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4142], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4142], dtype=torch.float64)
E_PRED: tensor([-113.7573, -113.4314, -113.3537, -113.3123, -113.2873, -113.2700,
        -113.2580, -113.2496, -113.2437, -113.2396, -113.2367, -113.2346,
        -113.2332, -113.2322, -113.2315, -113.2310, -113.2307, -113.2304,
        -113.2303, -113.2301, -113.2301, -113.2300, -113.2300, -113.2299,
        -113.2299], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 3279])
ao_eval   ---   torch.Size([1, 10, 3279, 78])
grid_weights   ---   torch.Size([1, 3279])
-113.201730216515
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.4281e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7378, -37.7768, -37.7933, -37.8028, -37.8092, -37.8138, -37.8171,
        -37.8194, -37.8211, -37.8222, -37.8231, -37.8237, -37.8241, -37.8244,
        -37.8246, -37.8247, -37.8248, -37.8249, -37.8249, -37.8250, -37.8250,
        -37.8250, -37.8250, -37.8250, -37.8250], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0365e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9586, -75.0023, -75.0203, -75.0307, -75.0378, -75.0429, -75.0465,
        -75.0491, -75.0509, -75.0522, -75.0531, -75.0538, -75.0543, -75.0546,
        -75.0548, -75.0550, -75.0551, -75.0552, -75.0552, -75.0553, -75.0553,
        -75.0553, -75.0553, -75.0553, -75.0553], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0431e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'OC': tensor([-0.4142], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'OC': tensor([-113.2310, -113.2307, -113.2304, -113.2303, -113.2301, -113.2301,
        -113.2300, -113.2300, -113.2299, -113.2299], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8247, -37.8248, -37.8249, -37.8249, -37.8250, -37.8250, -37.8250,
        -37.8250, -37.8250, -37.8250], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0550, -75.0551, -75.0552, -75.0552, -75.0553, -75.0553, -75.0553,
        -75.0553, -75.0553, -75.0553], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 15 	 8 	 CO 	 OC 	 0.0009766637887084113

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 12, 19, 19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.8283, -188.8737, -188.6718, -188.5530, -188.4795, -188.4294,
        -188.3943, -188.3697, -188.3522, -188.3399, -188.3311, -188.3249,
        -188.3205, -188.3174, -188.3151, -188.3135, -188.3124, -188.3116,
        -188.3110, -188.3106, -188.3103, -188.3101, -188.3099, -188.3098,
        -188.3097], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.4017587505662
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7777e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7469, -37.7855, -37.7994, -37.8071, -37.8123, -37.8160, -37.8186,
        -37.8204, -37.8217, -37.8227, -37.8233, -37.8238, -37.8241, -37.8243,
        -37.8245, -37.8246, -37.8247, -37.8247, -37.8248, -37.8248, -37.8248,
        -37.8248, -37.8249, -37.8249, -37.8249], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0549e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9486, -74.9843, -75.0061, -75.0200, -75.0298, -75.0369, -75.0420,
        -75.0458, -75.0485, -75.0504, -75.0518, -75.0528, -75.0535, -75.0539,
        -75.0543, -75.0545, -75.0547, -75.0548, -75.0549, -75.0549, -75.0550,
        -75.0550, -75.0550, -75.0551, -75.0551], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1086e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3135, -188.3124, -188.3116, -188.3110, -188.3106, -188.3103,
        -188.3101, -188.3099, -188.3098, -188.3097], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8246, -37.8247, -37.8247, -37.8248, -37.8248, -37.8248, -37.8248,
        -37.8249, -37.8249, -37.8249], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0545, -75.0547, -75.0548, -75.0549, -75.0549, -75.0550, -75.0550,
        -75.0550, -75.0551, -75.0551], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 15 	 4 	 CO2 	 CO2 	 0.01430721232833378

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------17----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [17]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4215, -54.4914, -54.5197, -54.5359, -54.5468, -54.5545, -54.5600,
        -54.5639, -54.5666, -54.5686, -54.5699, -54.5709, -54.5716, -54.5720,
        -54.5724, -54.5726, -54.5728, -54.5729, -54.5730, -54.5730, -54.5731,
        -54.5731, -54.5731, -54.5731, -54.5731], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8878e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.8878e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5726, -54.5728, -54.5729, -54.5730, -54.5730, -54.5731, -54.5731,
        -54.5731, -54.5731, -54.5731], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 15 	 17 	 N 	 N 	 6.044631931127169e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  , 11NaNa
SUBMOLECULES: ['Na2', 'Na', 'Na']
SUBMOLECULE INDICES: [11, 18, 18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0273], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0273], dtype=torch.float64)
E_PRED: tensor([-324.6134, -324.5587, -324.5444, -324.5371, -324.5325, -324.5293,
        -324.5272, -324.5256, -324.5246, -324.5238, -324.5233, -324.5229,
        -324.5227, -324.5225, -324.5223, -324.5223, -324.5222, -324.5222,
        -324.5221, -324.5221, -324.5221, -324.5221, -324.5221, -324.5221,
        -324.5221], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 1992])
ao_eval   ---   torch.Size([1, 10, 1992, 94])
grid_weights   ---   torch.Size([1, 1992])
-324.03216786711033
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(4.4160e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.8321e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2266, -162.2385, -162.2425, -162.2447, -162.2461, -162.2471,
        -162.2479, -162.2484, -162.2487, -162.2488, -162.2489, -162.2490,
        -162.2490, -162.2490, -162.2491, -162.2491, -162.2491, -162.2491,
        -162.2491, -162.2491, -162.2491, -162.2491, -162.2491, -162.2491,
        -162.2491], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.2154e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.8353e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NaNa': tensor([-0.0273], dtype=torch.float64), 'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'NaNa': tensor([-324.5223, -324.5222, -324.5222, -324.5221, -324.5221, -324.5221,
        -324.5221, -324.5221, -324.5221, -324.5221], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Na': tensor([-162.2491, -162.2491, -162.2491, -162.2491, -162.2491, -162.2491,
        -162.2491, -162.2491, -162.2491, -162.2491], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 15 	 11 	 Na2 	 Na2 	 2.879467411324827e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 17, 17]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.7680, -109.8471, -109.7245, -109.6513, -109.6036, -109.5710,
        -109.5483, -109.5325, -109.5215, -109.5138, -109.5085, -109.5047,
        -109.5021, -109.5003, -109.4990, -109.4981, -109.4975, -109.4971,
        -109.4968, -109.4965, -109.4964, -109.4963, -109.4962, -109.4962,
        -109.4961], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018879
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.2549e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4285, -54.4974, -54.5238, -54.5387, -54.5487, -54.5557, -54.5607,
        -54.5642, -54.5667, -54.5685, -54.5697, -54.5706, -54.5712, -54.5716,
        -54.5719, -54.5721, -54.5723, -54.5724, -54.5724, -54.5725, -54.5725,
        -54.5726, -54.5726, -54.5726, -54.5726], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.0086e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4981, -109.4975, -109.4971, -109.4968, -109.4965, -109.4964,
        -109.4963, -109.4962, -109.4962, -109.4961], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5721, -54.5723, -54.5724, -54.5724, -54.5725, -54.5725, -54.5726,
        -54.5726, -54.5726, -54.5726], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 15 	 1 	 N2 	 N2 	 3.9631173611805e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------18----------------
TRAINING ON MOLECULE:  ,Na
SUBMOLECULES: ['Na']
SUBMOLECULE INDICES: [18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2272, -162.2386, -162.2424, -162.2443, -162.2456, -162.2465,
        -162.2472, -162.2477, -162.2479, -162.2480, -162.2481, -162.2481,
        -162.2482, -162.2482, -162.2482, -162.2482, -162.2482, -162.2483,
        -162.2483, -162.2483, -162.2483, -162.2483, -162.2483, -162.2483,
        -162.2483], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.2795e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(4.2795e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'Na': tensor([-162.2482, -162.2482, -162.2483, -162.2483, -162.2483, -162.2483,
        -162.2483, -162.2483, -162.2483, -162.2483], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 15 	 18 	 Na 	 Na 	 9.363735737563535e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------14----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6761, -99.6989, -99.7074, -99.7123, -99.7157, -99.7180, -99.7197,
        -99.7210, -99.7218, -99.7224, -99.7229, -99.7232, -99.7234, -99.7236,
        -99.7237, -99.7238, -99.7238, -99.7238, -99.7239, -99.7239, -99.7239,
        -99.7239, -99.7239, -99.7239, -99.7239], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.1505e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.1505e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7238, -99.7238, -99.7238, -99.7239, -99.7239, -99.7239, -99.7239,
        -99.7239, -99.7239, -99.7239], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 15 	 14 	 F 	 F 	 2.3226771756164137e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------16----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [16]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4563, -7.4636, -7.4665, -7.4682, -7.4692, -7.4702, -7.4711, -7.4715,
        -7.4713, -7.4711, -7.4709, -7.4709, -7.4709, -7.4710, -7.4710, -7.4710,
        -7.4711, -7.4711, -7.4711, -7.4711, -7.4711, -7.4711, -7.4711, -7.4711,
        -7.4711], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.0002e-06, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(3.4300e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.0038e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4710, -7.4711, -7.4711, -7.4711, -7.4711, -7.4711, -7.4711, -7.4711,
        -7.4711, -7.4711], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 15 	 16 	 Li 	 Li 	 1.123759655903416e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,  9ClH
SUBMOLECULES: ['HCl', 'Cl', 'H']
SUBMOLECULE INDICES: [9, 13, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='ClH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1712], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1712], dtype=torch.float64)
E_PRED: tensor([-460.7516, -460.7948, -460.8070, -460.8132, -460.8172, -460.8199,
        -460.8217, -460.8231, -460.8240, -460.8246, -460.8250, -460.8254,
        -460.8256, -460.8257, -460.8258, -460.8259, -460.8260, -460.8260,
        -460.8260, -460.8260, -460.8261, -460.8261, -460.8261, -460.8261,
        -460.8261], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 62, 62])
mo_energy   ---   torch.Size([2, 62])
dm_ref   ---   torch.Size([1, 2, 62, 62])
rho   ---   torch.Size([1, 2, 1068])
ao_eval   ---   torch.Size([1, 10, 1068, 62])
grid_weights   ---   torch.Size([1, 1068])
-460.4234538667477
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 62])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 62])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.0194e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0959, -460.1243, -460.1337, -460.1390, -460.1426, -460.1451,
        -460.1470, -460.1483, -460.1492, -460.1498, -460.1503, -460.1506,
        -460.1509, -460.1510, -460.1512, -460.1512, -460.1513, -460.1513,
        -460.1514, -460.1514, -460.1514, -460.1514, -460.1514, -460.1514,
        -460.1514], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.0049e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2827, -0.4486, -0.4698, -0.4800, -0.4861, -0.4902, -0.4930, -0.4950,
        -0.4963, -0.4972, -0.4979, -0.4984, -0.4987, -0.4989, -0.4991, -0.4992,
        -0.4992, -0.4993, -0.4993, -0.4994, -0.4994, -0.4994, -0.4994, -0.4994,
        -0.4994], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.2801e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.4400e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClH': tensor([-0.1712], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'ClH': tensor([-460.8259, -460.8260, -460.8260, -460.8260, -460.8260, -460.8261,
        -460.8261, -460.8261, -460.8261, -460.8261], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1512, -460.1513, -460.1513, -460.1514, -460.1514, -460.1514,
        -460.1514, -460.1514, -460.1514, -460.1514], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4992, -0.4992, -0.4993, -0.4993, -0.4994, -0.4994, -0.4994, -0.4994,
        -0.4994, -0.4994], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 15 	 9 	 HCl 	 ClH 	 3.7556351032165004e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,  6FF
SUBMOLECULES: ['F2', 'F', 'F']
SUBMOLECULE INDICES: [6, 14, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0618], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0618], dtype=torch.float64)
E_PRED: tensor([-199.6626, -199.5762, -199.5533, -199.5414, -199.5338, -199.5287,
        -199.5251, -199.5226, -199.5208, -199.5195, -199.5187, -199.5181,
        -199.5176, -199.5173, -199.5171, -199.5169, -199.5168, -199.5168,
        -199.5167, -199.5167, -199.5166, -199.5166, -199.5166, -199.5166,
        -199.5166], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 4698])
ao_eval   ---   torch.Size([1, 10, 4698, 78])
grid_weights   ---   torch.Size([1, 4698])
-199.3364659747656
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.3638e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.7276e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6680, -99.6866, -99.6981, -99.7053, -99.7105, -99.7143, -99.7171,
        -99.7191, -99.7206, -99.7216, -99.7223, -99.7229, -99.7233, -99.7235,
        -99.7237, -99.7238, -99.7239, -99.7240, -99.7240, -99.7241, -99.7241,
        -99.7241, -99.7241, -99.7241, -99.7241], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(6.9491e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.7346e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'FF': tensor([-0.0618], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'FF': tensor([-199.5169, -199.5168, -199.5168, -199.5167, -199.5167, -199.5166,
        -199.5166, -199.5166, -199.5166, -199.5166], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7238, -99.7239, -99.7240, -99.7240, -99.7241, -99.7241, -99.7241,
        -99.7241, -99.7241, -99.7241], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 15 	 6 	 F2 	 F2 	 9.952866926291434e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7530, -37.7895, -37.8017, -37.8085, -37.8130, -37.8161, -37.8183,
        -37.8199, -37.8210, -37.8218, -37.8224, -37.8227, -37.8230, -37.8232,
        -37.8233, -37.8234, -37.8235, -37.8236, -37.8236, -37.8236, -37.8236,
        -37.8236, -37.8236, -37.8236, -37.8237], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2208e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.2208e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8234, -37.8235, -37.8236, -37.8236, -37.8236, -37.8236, -37.8236,
        -37.8236, -37.8236, -37.8237], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 15 	 12 	 C 	 C 	 6.63879899906349e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 15, 15]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0304, -1.1135, -1.1350, -1.1461, -1.1530, -1.1577, -1.1610, -1.1633,
        -1.1649, -1.1660, -1.1668, -1.1673, -1.1677, -1.1680, -1.1682, -1.1683,
        -1.1684, -1.1684, -1.1685, -1.1685, -1.1685, -1.1686, -1.1686, -1.1686,
        -1.1686], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668206
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6460e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.2921e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3335, -0.4624, -0.4776, -0.4850, -0.4896, -0.4926, -0.4947, -0.4961,
        -0.4971, -0.4978, -0.4983, -0.4986, -0.4989, -0.4990, -0.4992, -0.4992,
        -0.4993, -0.4993, -0.4994, -0.4994, -0.4994, -0.4994, -0.4994, -0.4994,
        -0.4994], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.2852e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.9731e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.1491e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1683, -1.1684, -1.1684, -1.1685, -1.1685, -1.1685, -1.1686, -1.1686,
        -1.1686, -1.1686], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4992, -0.4993, -0.4993, -0.4994, -0.4994, -0.4994, -0.4994, -0.4994,
        -0.4994, -0.4994], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 15 	 0 	 H2 	 H2 	 4.9150500499869e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  , 10LiH
SUBMOLECULES: ['HLi', 'Li', 'H']
SUBMOLECULE INDICES: [10, 16, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0923], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0923], dtype=torch.float64)
E_PRED: tensor([-7.9913, -8.0305, -8.0411, -8.0466, -8.0502, -8.0527, -8.0544, -8.0556,
        -8.0565, -8.0571, -8.0575, -8.0578, -8.0580, -8.0582, -8.0583, -8.0584,
        -8.0584, -8.0584, -8.0585, -8.0585, -8.0585, -8.0585, -8.0585, -8.0585,
        -8.0585], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 54, 54])
mo_energy   ---   torch.Size([2, 54])
dm_ref   ---   torch.Size([1, 2, 54, 54])
rho   ---   torch.Size([1, 2, 1271])
ao_eval   ---   torch.Size([1, 10, 1271, 54])
grid_weights   ---   torch.Size([1, 1271])
-8.038079906478378
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 54])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 54])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.2559e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.5118e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2378, -0.4352, -0.4624, -0.4752, -0.4829, -0.4880, -0.4915, -0.4939,
        -0.4956, -0.4967, -0.4975, -0.4981, -0.4985, -0.4988, -0.4990, -0.4991,
        -0.4992, -0.4993, -0.4993, -0.4993, -0.4994, -0.4994, -0.4994, -0.4994,
        -0.4994], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.2871e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.9730e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(4.3692e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4589, -7.4657, -7.4679, -7.4691, -7.4701, -7.4710, -7.4715, -7.4713,
        -7.4710, -7.4709, -7.4709, -7.4709, -7.4709, -7.4709, -7.4710, -7.4710,
        -7.4710, -7.4710, -7.4711, -7.4711, -7.4711, -7.4711, -7.4711, -7.4711,
        -7.4711], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.9363e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(3.4736e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.3600e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiH': tensor([-0.0923], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiH': tensor([-8.0584, -8.0584, -8.0584, -8.0585, -8.0585, -8.0585, -8.0585, -8.0585,
        -8.0585, -8.0585], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4991, -0.4992, -0.4993, -0.4993, -0.4993, -0.4994, -0.4994, -0.4994,
        -0.4994, -0.4994], dtype=torch.float64, grad_fn=<SliceBackward0>), 'Li': tensor([-7.4710, -7.4710, -7.4710, -7.4711, -7.4711, -7.4711, -7.4711, -7.4711,
        -7.4711, -7.4711], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 15 	 10 	 HLi 	 LiH 	 4.187110376370297e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 16, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2687, -107.2851, -107.2475, -107.2393, -107.2337, -107.2305,
        -107.2289, -107.2279, -107.2275, -107.2274, -107.2274, -107.2276,
        -107.2279, -107.2282, -107.2286, -107.2289, -107.2292, -107.2295,
        -107.2297, -107.2299, -107.2301, -107.2302, -107.2303, -107.2304,
        -107.2305], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.305942205048
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.5324e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6707, -99.6926, -99.7030, -99.7092, -99.7135, -99.7167, -99.7189,
        -99.7206, -99.7218, -99.7226, -99.7232, -99.7236, -99.7239, -99.7241,
        -99.7243, -99.7244, -99.7245, -99.7245, -99.7245, -99.7246, -99.7246,
        -99.7246, -99.7246, -99.7246, -99.7246], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(6.2423e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4555, -7.4625, -7.4657, -7.4676, -7.4688, -7.4697, -7.4707, -7.4714,
        -7.4714, -7.4711, -7.4709, -7.4709, -7.4709, -7.4709, -7.4709, -7.4710,
        -7.4710, -7.4710, -7.4710, -7.4711, -7.4711, -7.4711, -7.4711, -7.4711,
        -7.4711], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.9332e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(3.4821e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2289, -107.2292, -107.2295, -107.2297, -107.2299, -107.2301,
        -107.2302, -107.2303, -107.2304, -107.2305], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7244, -99.7245, -99.7245, -99.7245, -99.7246, -99.7246, -99.7246,
        -99.7246, -99.7246, -99.7246], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4710, -7.4710, -7.4710, -7.4710, -7.4711, -7.4711, -7.4711, -7.4711,
        -7.4711, -7.4711], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 15 	 2 	 FLi 	 LiF 	 0.00823451416557227

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,  7CCHH
SUBMOLECULES: ['C2H2', 'C', 'C', 'H', 'H']
SUBMOLECULE INDICES: [7, 12, 12, 15, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C2H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6459], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6459], dtype=torch.float64)
E_PRED: tensor([-78.3805, -73.2717, -75.1346, -75.8779, -76.3145, -76.6022, -76.7988,
        -76.9351, -77.0300, -77.0963, -77.1427, -77.1751, -77.1979, -77.2139,
        -77.2251, -77.2329, -77.2384, -77.2423, -77.2450, -77.2469, -77.2482,
        -77.2491, -77.2498, -77.2502, -77.2505], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 108, 108])
mo_energy   ---   torch.Size([2, 108])
dm_ref   ---   torch.Size([1, 2, 108, 108])
rho   ---   torch.Size([1, 2, 1924])
ao_eval   ---   torch.Size([1, 10, 1924, 108])
grid_weights   ---   torch.Size([1, 1924])
-77.2336470993193
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 108])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 108])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7022e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7488, -37.7866, -37.7998, -37.8072, -37.8121, -37.8155, -37.8180,
        -37.8197, -37.8209, -37.8218, -37.8224, -37.8228, -37.8231, -37.8233,
        -37.8235, -37.8236, -37.8237, -37.8237, -37.8237, -37.8238, -37.8238,
        -37.8238, -37.8238, -37.8238, -37.8238], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1977e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2507, -0.4392, -0.4646, -0.4766, -0.4839, -0.4887, -0.4920, -0.4942,
        -0.4958, -0.4969, -0.4977, -0.4982, -0.4986, -0.4988, -0.4990, -0.4991,
        -0.4992, -0.4993, -0.4993, -0.4994, -0.4994, -0.4994, -0.4994, -0.4994,
        -0.4994], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.2908e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.8036e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CCHH': tensor([-0.6459], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'CCHH': tensor([-77.2329, -77.2384, -77.2423, -77.2450, -77.2469, -77.2482, -77.2491,
        -77.2498, -77.2502, -77.2505], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8236, -37.8237, -37.8237, -37.8237, -37.8238, -37.8238, -37.8238,
        -37.8238, -37.8238, -37.8238], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4991, -0.4992, -0.4993, -0.4993, -0.4994, -0.4994, -0.4994, -0.4994,
        -0.4994, -0.4994], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 15 	 7 	 C2H2 	 C2H2 	 0.00041876137362892974

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------13----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1064, -460.1317, -460.1397, -460.1441, -460.1471, -460.1492,
        -460.1506, -460.1517, -460.1524, -460.1530, -460.1533, -460.1536,
        -460.1538, -460.1539, -460.1540, -460.1541, -460.1541, -460.1542,
        -460.1542, -460.1542, -460.1542, -460.1542, -460.1542, -460.1542,
        -460.1542], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.6970e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.6970e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1541, -460.1541, -460.1542, -460.1542, -460.1542, -460.1542,
        -460.1542, -460.1542, -460.1542, -460.1542], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 15 	 13 	 Cl 	 Cl 	 9.05455862995953e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------19----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9617, -75.0050, -75.0219, -75.0316, -75.0381, -75.0427, -75.0460,
        -75.0484, -75.0501, -75.0513, -75.0521, -75.0527, -75.0532, -75.0534,
        -75.0537, -75.0538, -75.0539, -75.0540, -75.0540, -75.0541, -75.0541,
        -75.0541, -75.0541, -75.0541, -75.0541], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2580e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.2580e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0538, -75.0539, -75.0540, -75.0540, -75.0541, -75.0541, -75.0541,
        -75.0541, -75.0541, -75.0541], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 15 	 19 	 O 	 O 	 4.058945272748526e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 13, 13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4647, -920.4335, -920.4259, -920.4219, -920.4192, -920.4174,
        -920.4161, -920.4152, -920.4146, -920.4142, -920.4139, -920.4136,
        -920.4135, -920.4134, -920.4133, -920.4132, -920.4132, -920.4132,
        -920.4132, -920.4132, -920.4131, -920.4131, -920.4131, -920.4131,
        -920.4131], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885617
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.8224e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.6449e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1127, -460.1351, -460.1418, -460.1455, -460.1480, -460.1497,
        -460.1509, -460.1518, -460.1524, -460.1528, -460.1531, -460.1533,
        -460.1535, -460.1536, -460.1537, -460.1537, -460.1537, -460.1538,
        -460.1538, -460.1538, -460.1538, -460.1538, -460.1538, -460.1538,
        -460.1538], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.3641e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.6473e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4132, -920.4132, -920.4132, -920.4132, -920.4132, -920.4131,
        -920.4131, -920.4131, -920.4131, -920.4131], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1537, -460.1537, -460.1538, -460.1538, -460.1538, -460.1538,
        -460.1538, -460.1538, -460.1538, -460.1538], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 15 	 5 	 Cl2 	 Cl2 	 2.803184610841067e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------15----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3475, -0.4659, -0.4797, -0.4863, -0.4905, -0.4932, -0.4951, -0.4964,
        -0.4973, -0.4979, -0.4984, -0.4987, -0.4989, -0.4991, -0.4992, -0.4992,
        -0.4993, -0.4993, -0.4994, -0.4994, -0.4994, -0.4994, -0.4994, -0.4994,
        -0.4994], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.2868e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.8809e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.8574e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4992, -0.4993, -0.4993, -0.4994, -0.4994, -0.4994, -0.4994, -0.4994,
        -0.4994, -0.4994], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 15 	 15 	 H 	 H 	 8.182122889213489e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e15)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e15/2022-11-29_10:09:21.574160_0.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e15/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 15 || ,[' rho : 2.932212', ' ae : 56.555460', ' E : 3.078877'] ,|| total loss 42.086959 || CHKPT: _0.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 16, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2943, -107.2944, -107.2566, -107.2455, -107.2383, -107.2341,
        -107.2316, -107.2301, -107.2293, -107.2289, -107.2288, -107.2288,
        -107.2290, -107.2293, -107.2295, -107.2298, -107.2301, -107.2303,
        -107.2305, -107.2307, -107.2308, -107.2310, -107.2311, -107.2312,
        -107.2312], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.305942205048
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.5374e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6700, -99.6909, -99.7017, -99.7083, -99.7130, -99.7163, -99.7188,
        -99.7206, -99.7219, -99.7228, -99.7234, -99.7239, -99.7242, -99.7244,
        -99.7246, -99.7247, -99.7248, -99.7249, -99.7249, -99.7249, -99.7250,
        -99.7250, -99.7250, -99.7250, -99.7250], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.7831e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4563, -7.4636, -7.4665, -7.4681, -7.4692, -7.4701, -7.4711, -7.4714,
        -7.4712, -7.4710, -7.4708, -7.4708, -7.4708, -7.4709, -7.4709, -7.4710,
        -7.4710, -7.4710, -7.4710, -7.4710, -7.4710, -7.4710, -7.4710, -7.4710,
        -7.4711], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.8506e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(3.5073e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2298, -107.2301, -107.2303, -107.2305, -107.2307, -107.2308,
        -107.2310, -107.2311, -107.2312, -107.2312], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7247, -99.7248, -99.7249, -99.7249, -99.7249, -99.7250, -99.7250,
        -99.7250, -99.7250, -99.7250], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4710, -7.4710, -7.4710, -7.4710, -7.4710, -7.4710, -7.4710, -7.4710,
        -7.4710, -7.4711], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 16 	 2 	 FLi 	 LiF 	 0.008200982061575133

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------14----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6698, -99.6902, -99.7012, -99.7079, -99.7127, -99.7162, -99.7187,
        -99.7205, -99.7219, -99.7228, -99.7235, -99.7240, -99.7243, -99.7245,
        -99.7247, -99.7248, -99.7249, -99.7250, -99.7250, -99.7250, -99.7251,
        -99.7251, -99.7251, -99.7251, -99.7251], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.6629e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.6629e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7248, -99.7249, -99.7250, -99.7250, -99.7250, -99.7251, -99.7251,
        -99.7251, -99.7251, -99.7251], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 16 	 14 	 F 	 F 	 1.8174516289793624e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,  7CCHH
SUBMOLECULES: ['C2H2', 'C', 'C', 'H', 'H']
SUBMOLECULE INDICES: [7, 12, 12, 15, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C2H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6459], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6459], dtype=torch.float64)
E_PRED: tensor([-78.3914, -73.3940, -75.1928, -75.9146, -76.3391, -76.6192, -76.8108,
        -76.9436, -77.0361, -77.1007, -77.1460, -77.1777, -77.1999, -77.2155,
        -77.2264, -77.2341, -77.2394, -77.2432, -77.2458, -77.2477, -77.2489,
        -77.2499, -77.2505, -77.2509, -77.2512], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 108, 108])
mo_energy   ---   torch.Size([2, 108])
dm_ref   ---   torch.Size([1, 2, 108, 108])
rho   ---   torch.Size([1, 2, 1924])
ao_eval   ---   torch.Size([1, 10, 1924, 108])
grid_weights   ---   torch.Size([1, 1924])
-77.2336470993193
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 108])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 108])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6948e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7389, -37.7780, -37.7938, -37.8029, -37.8090, -37.8133, -37.8164,
        -37.8186, -37.8202, -37.8213, -37.8221, -37.8226, -37.8230, -37.8233,
        -37.8235, -37.8236, -37.8237, -37.8238, -37.8239, -37.8239, -37.8239,
        -37.8239, -37.8239, -37.8239, -37.8239], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1845e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2877, -0.4500, -0.4706, -0.4805, -0.4865, -0.4905, -0.4932, -0.4951,
        -0.4964, -0.4973, -0.4979, -0.4984, -0.4987, -0.4989, -0.4991, -0.4992,
        -0.4992, -0.4993, -0.4993, -0.4994, -0.4994, -0.4994, -0.4994, -0.4994,
        -0.4994], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.2881e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.4055e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CCHH': tensor([-0.6459], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'CCHH': tensor([-77.2341, -77.2394, -77.2432, -77.2458, -77.2477, -77.2489, -77.2499,
        -77.2505, -77.2509, -77.2512], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8236, -37.8237, -37.8238, -37.8239, -37.8239, -37.8239, -37.8239,
        -37.8239, -37.8239, -37.8239], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4992, -0.4992, -0.4993, -0.4993, -0.4994, -0.4994, -0.4994, -0.4994,
        -0.4994, -0.4994], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 16 	 7 	 C2H2 	 C2H2 	 0.0004094879604900005

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------19----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9494, -74.9882, -75.0092, -75.0223, -75.0314, -75.0380, -75.0428,
        -75.0462, -75.0487, -75.0505, -75.0517, -75.0526, -75.0532, -75.0537,
        -75.0540, -75.0542, -75.0544, -75.0545, -75.0545, -75.0546, -75.0546,
        -75.0547, -75.0547, -75.0547, -75.0547], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1679e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.1679e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0542, -75.0544, -75.0545, -75.0545, -75.0546, -75.0546, -75.0547,
        -75.0547, -75.0547, -75.0547], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 16 	 19 	 O 	 O 	 3.716420133337605e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------18----------------
TRAINING ON MOLECULE:  ,Na
SUBMOLECULES: ['Na']
SUBMOLECULE INDICES: [18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2292, -162.2409, -162.2449, -162.2470, -162.2483, -162.2493,
        -162.2500, -162.2506, -162.2508, -162.2510, -162.2510, -162.2511,
        -162.2511, -162.2511, -162.2512, -162.2512, -162.2512, -162.2512,
        -162.2512, -162.2512, -162.2512, -162.2512, -162.2512, -162.2512,
        -162.2512], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2192e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.2192e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'Na': tensor([-162.2512, -162.2512, -162.2512, -162.2512, -162.2512, -162.2512,
        -162.2512, -162.2512, -162.2512, -162.2512], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 16 	 18 	 Na 	 Na 	 2.6531232408660705e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------17----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [17]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4098, -54.4778, -54.5097, -54.5287, -54.5416, -54.5509, -54.5575,
        -54.5622, -54.5655, -54.5678, -54.5695, -54.5707, -54.5715, -54.5721,
        -54.5725, -54.5728, -54.5730, -54.5731, -54.5732, -54.5733, -54.5733,
        -54.5734, -54.5734, -54.5734, -54.5734], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8379e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.8379e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5728, -54.5730, -54.5731, -54.5732, -54.5733, -54.5733, -54.5734,
        -54.5734, -54.5734, -54.5734], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 16 	 17 	 N 	 N 	 5.837980567686081e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 12, 19, 19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.4496, -188.7310, -188.5810, -188.4930, -188.4389, -188.4020,
        -188.3763, -188.3581, -188.3453, -188.3362, -188.3298, -188.3252,
        -188.3219, -188.3196, -188.3179, -188.3167, -188.3159, -188.3153,
        -188.3149, -188.3145, -188.3143, -188.3142, -188.3140, -188.3140,
        -188.3139], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.4017587505662
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7610e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7338, -37.7705, -37.7885, -37.7991, -37.8064, -37.8117, -37.8154,
        -37.8181, -37.8200, -37.8214, -37.8224, -37.8231, -37.8235, -37.8239,
        -37.8241, -37.8243, -37.8244, -37.8245, -37.8246, -37.8246, -37.8246,
        -37.8246, -37.8247, -37.8247, -37.8247], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0894e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9521, -74.9933, -75.0136, -75.0258, -75.0343, -75.0404, -75.0449,
        -75.0480, -75.0503, -75.0520, -75.0531, -75.0539, -75.0545, -75.0549,
        -75.0552, -75.0554, -75.0555, -75.0556, -75.0557, -75.0558, -75.0558,
        -75.0558, -75.0558, -75.0558, -75.0559], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.6502e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3167, -188.3159, -188.3153, -188.3149, -188.3145, -188.3143,
        -188.3142, -188.3140, -188.3140, -188.3139], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8243, -37.8244, -37.8245, -37.8246, -37.8246, -37.8246, -37.8246,
        -37.8247, -37.8247, -37.8247], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0554, -75.0555, -75.0556, -75.0557, -75.0558, -75.0558, -75.0558,
        -75.0558, -75.0558, -75.0559], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 16 	 4 	 CO2 	 CO2 	 0.013990936547467647

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 17, 17]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.7920, -109.8282, -109.7166, -109.6471, -109.6017, -109.5707,
        -109.5492, -109.5342, -109.5237, -109.5164, -109.5114, -109.5078,
        -109.5054, -109.5036, -109.5024, -109.5016, -109.5010, -109.5006,
        -109.5003, -109.5001, -109.4999, -109.4999, -109.4998, -109.4997,
        -109.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018879
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.2526e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4337, -54.5017, -54.5272, -54.5415, -54.5511, -54.5578, -54.5625,
        -54.5659, -54.5683, -54.5699, -54.5711, -54.5719, -54.5725, -54.5729,
        -54.5732, -54.5734, -54.5736, -54.5737, -54.5737, -54.5738, -54.5738,
        -54.5738, -54.5738, -54.5739, -54.5739], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7145e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.5016, -109.5010, -109.5006, -109.5003, -109.5001, -109.4999,
        -109.4999, -109.4998, -109.4997, -109.4997], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5734, -54.5736, -54.5737, -54.5737, -54.5738, -54.5738, -54.5738,
        -54.5738, -54.5739, -54.5739], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 16 	 1 	 N2 	 N2 	 3.363853503266705e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,  8OC
SUBMOLECULES: ['CO', 'O', 'C']
SUBMOLECULE INDICES: [8, 19, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='OC', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4142], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4142], dtype=torch.float64)
E_PRED: tensor([-113.6895, -113.4059, -113.3388, -113.3030, -113.2814, -113.2664,
        -113.2561, -113.2488, -113.2437, -113.2401, -113.2376, -113.2359,
        -113.2346, -113.2338, -113.2332, -113.2327, -113.2324, -113.2322,
        -113.2321, -113.2320, -113.2319, -113.2319, -113.2318, -113.2318,
        -113.2318], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 3279])
ao_eval   ---   torch.Size([1, 10, 3279, 78])
grid_weights   ---   torch.Size([1, 3279])
-113.201730216515
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.4088e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7331, -37.7687, -37.7871, -37.7981, -37.8057, -37.8111, -37.8151,
        -37.8179, -37.8199, -37.8213, -37.8223, -37.8230, -37.8235, -37.8239,
        -37.8241, -37.8243, -37.8244, -37.8245, -37.8246, -37.8246, -37.8247,
        -37.8247, -37.8247, -37.8247, -37.8247], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0846e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9551, -74.9978, -75.0171, -75.0286, -75.0364, -75.0420, -75.0461,
        -75.0490, -75.0511, -75.0526, -75.0536, -75.0544, -75.0549, -75.0553,
        -75.0555, -75.0557, -75.0559, -75.0559, -75.0560, -75.0561, -75.0561,
        -75.0561, -75.0561, -75.0561, -75.0561], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.1504e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'OC': tensor([-0.4142], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'OC': tensor([-113.2327, -113.2324, -113.2322, -113.2321, -113.2320, -113.2319,
        -113.2319, -113.2318, -113.2318, -113.2318], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8243, -37.8244, -37.8245, -37.8246, -37.8246, -37.8247, -37.8247,
        -37.8247, -37.8247, -37.8247], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0557, -75.0559, -75.0559, -75.0560, -75.0561, -75.0561, -75.0561,
        -75.0561, -75.0561, -75.0561], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 16 	 8 	 CO 	 OC 	 0.0009346017774840577

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------16----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [16]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4572, -7.4644, -7.4672, -7.4686, -7.4696, -7.4706, -7.4714, -7.4715,
        -7.4712, -7.4710, -7.4709, -7.4709, -7.4710, -7.4710, -7.4711, -7.4711,
        -7.4711, -7.4711, -7.4711, -7.4712, -7.4712, -7.4712, -7.4712, -7.4712,
        -7.4712], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.8709e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(3.3844e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.9776e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4711, -7.4711, -7.4711, -7.4711, -7.4712, -7.4712, -7.4712, -7.4712,
        -7.4712, -7.4712], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 16 	 16 	 Li 	 Li 	 1.1090169910455936e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,  9ClH
SUBMOLECULES: ['HCl', 'Cl', 'H']
SUBMOLECULE INDICES: [9, 13, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='ClH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1712], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1712], dtype=torch.float64)
E_PRED: tensor([-460.7656, -460.8073, -460.8190, -460.8251, -460.8289, -460.8315,
        -460.8333, -460.8346, -460.8355, -460.8361, -460.8365, -460.8368,
        -460.8370, -460.8372, -460.8373, -460.8374, -460.8374, -460.8375,
        -460.8375, -460.8375, -460.8375, -460.8375, -460.8375, -460.8375,
        -460.8375], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 62, 62])
mo_energy   ---   torch.Size([2, 62])
dm_ref   ---   torch.Size([1, 2, 62, 62])
rho   ---   torch.Size([1, 2, 1068])
ao_eval   ---   torch.Size([1, 10, 1068, 62])
grid_weights   ---   torch.Size([1, 1068])
-460.4234538667477
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 62])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 62])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.0075e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1038, -460.1334, -460.1435, -460.1492, -460.1530, -460.1558,
        -460.1577, -460.1592, -460.1602, -460.1609, -460.1614, -460.1618,
        -460.1620, -460.1622, -460.1623, -460.1624, -460.1625, -460.1625,
        -460.1626, -460.1626, -460.1626, -460.1626, -460.1626, -460.1626,
        -460.1626], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4969e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3381, -0.4635, -0.4783, -0.4855, -0.4899, -0.4928, -0.4948, -0.4962,
        -0.4972, -0.4979, -0.4983, -0.4987, -0.4989, -0.4991, -0.4992, -0.4993,
        -0.4993, -0.4993, -0.4994, -0.4994, -0.4994, -0.4994, -0.4994, -0.4994,
        -0.4994], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.3259e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.8679e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClH': tensor([-0.1712], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'ClH': tensor([-460.8374, -460.8374, -460.8375, -460.8375, -460.8375, -460.8375,
        -460.8375, -460.8375, -460.8375, -460.8375], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1624, -460.1625, -460.1625, -460.1626, -460.1626, -460.1626,
        -460.1626, -460.1626, -460.1626, -460.1626], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4993, -0.4993, -0.4993, -0.4994, -0.4994, -0.4994, -0.4994, -0.4994,
        -0.4994, -0.4994], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 16 	 9 	 HCl 	 ClH 	 4.223132539076805e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 13, 13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4914, -920.4558, -920.4470, -920.4423, -920.4392, -920.4371,
        -920.4356, -920.4345, -920.4337, -920.4332, -920.4328, -920.4326,
        -920.4324, -920.4323, -920.4322, -920.4321, -920.4321, -920.4320,
        -920.4320, -920.4320, -920.4320, -920.4320, -920.4320, -920.4320,
        -920.4320], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885617
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.8233e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.6467e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1225, -460.1446, -460.1513, -460.1550, -460.1574, -460.1591,
        -460.1603, -460.1611, -460.1617, -460.1622, -460.1625, -460.1627,
        -460.1628, -460.1629, -460.1630, -460.1631, -460.1631, -460.1631,
        -460.1631, -460.1632, -460.1632, -460.1632, -460.1632, -460.1632,
        -460.1632], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6216e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.6629e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4321, -920.4321, -920.4320, -920.4320, -920.4320, -920.4320,
        -920.4320, -920.4320, -920.4320, -920.4320], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1631, -460.1631, -460.1631, -460.1631, -460.1632, -460.1632,
        -460.1632, -460.1632, -460.1632, -460.1632], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 16 	 5 	 Cl2 	 Cl2 	 2.8765609177534222e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------15----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3354, -0.4628, -0.4779, -0.4852, -0.4897, -0.4927, -0.4947, -0.4962,
        -0.4971, -0.4978, -0.4983, -0.4987, -0.4989, -0.4991, -0.4992, -0.4993,
        -0.4993, -0.4993, -0.4994, -0.4994, -0.4994, -0.4994, -0.4994, -0.4994,
        -0.4994], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.3294e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(1.8878e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.8659e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4993, -0.4993, -0.4993, -0.4994, -0.4994, -0.4994, -0.4994, -0.4994,
        -0.4994, -0.4994], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 16 	 15 	 H 	 H 	 7.701613680525123e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  , 10LiH
SUBMOLECULES: ['HLi', 'Li', 'H']
SUBMOLECULE INDICES: [10, 16, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0923], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0923], dtype=torch.float64)
E_PRED: tensor([-7.9514, -8.0143, -8.0310, -8.0397, -8.0453, -8.0493, -8.0520, -8.0540,
        -8.0553, -8.0563, -8.0570, -8.0575, -8.0578, -8.0581, -8.0583, -8.0584,
        -8.0585, -8.0585, -8.0586, -8.0586, -8.0586, -8.0586, -8.0586, -8.0587,
        -8.0587], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 54, 54])
mo_energy   ---   torch.Size([2, 54])
dm_ref   ---   torch.Size([1, 2, 54, 54])
rho   ---   torch.Size([1, 2, 1271])
ao_eval   ---   torch.Size([1, 10, 1271, 54])
grid_weights   ---   torch.Size([1, 1271])
-8.038079906478378
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 54])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 54])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.2373e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.4747e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3077, -0.4555, -0.4737, -0.4825, -0.4879, -0.4914, -0.4939, -0.4955,
        -0.4967, -0.4975, -0.4981, -0.4985, -0.4988, -0.4990, -0.4991, -0.4992,
        -0.4993, -0.4993, -0.4994, -0.4994, -0.4994, -0.4994, -0.4994, -0.4994,
        -0.4994], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.3307e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.1238e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(4.3408e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4553, -7.4622, -7.4655, -7.4674, -7.4687, -7.4696, -7.4706, -7.4713,
        -7.4714, -7.4711, -7.4709, -7.4708, -7.4708, -7.4709, -7.4709, -7.4710,
        -7.4710, -7.4710, -7.4710, -7.4710, -7.4711, -7.4711, -7.4711, -7.4711,
        -7.4711], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.8242e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(3.4915e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.3092e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiH': tensor([-0.0923], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiH': tensor([-8.0584, -8.0585, -8.0585, -8.0586, -8.0586, -8.0586, -8.0586, -8.0586,
        -8.0587, -8.0587], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4992, -0.4993, -0.4993, -0.4994, -0.4994, -0.4994, -0.4994, -0.4994,
        -0.4994, -0.4994], dtype=torch.float64, grad_fn=<SliceBackward0>), 'Li': tensor([-7.4710, -7.4710, -7.4710, -7.4710, -7.4710, -7.4711, -7.4711, -7.4711,
        -7.4711, -7.4711], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 16 	 10 	 HLi 	 LiH 	 3.957441390585275e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------13----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1206, -460.1442, -460.1514, -460.1554, -460.1581, -460.1599,
        -460.1612, -460.1622, -460.1628, -460.1633, -460.1636, -460.1639,
        -460.1640, -460.1642, -460.1642, -460.1643, -460.1643, -460.1644,
        -460.1644, -460.1644, -460.1644, -460.1644, -460.1644, -460.1644,
        -460.1644], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8988e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.8988e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1643, -460.1643, -460.1644, -460.1644, -460.1644, -460.1644,
        -460.1644, -460.1644, -460.1644, -460.1644], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 16 	 13 	 Cl 	 Cl 	 6.302702439337368e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 15, 15]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0231, -1.1106, -1.1333, -1.1449, -1.1522, -1.1572, -1.1606, -1.1630,
        -1.1647, -1.1659, -1.1667, -1.1673, -1.1677, -1.1680, -1.1682, -1.1683,
        -1.1684, -1.1685, -1.1685, -1.1686, -1.1686, -1.1686, -1.1686, -1.1686,
        -1.1686], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668206
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6685e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3371e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2741, -0.4461, -0.4684, -0.4791, -0.4855, -0.4898, -0.4928, -0.4948,
        -0.4962, -0.4972, -0.4978, -0.4983, -0.4987, -0.4989, -0.4990, -0.4992,
        -0.4992, -0.4993, -0.4993, -0.4994, -0.4994, -0.4994, -0.4994, -0.4994,
        -0.4994], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.3151e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.5175e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.2001e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1683, -1.1684, -1.1685, -1.1685, -1.1686, -1.1686, -1.1686, -1.1686,
        -1.1686, -1.1686], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4992, -0.4992, -0.4993, -0.4993, -0.4994, -0.4994, -0.4994, -0.4994,
        -0.4994, -0.4994], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 16 	 0 	 H2 	 H2 	 4.840078283628267e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7335, -37.7704, -37.7882, -37.7988, -37.8060, -37.8112, -37.8149,
        -37.8176, -37.8195, -37.8209, -37.8218, -37.8225, -37.8230, -37.8233,
        -37.8236, -37.8237, -37.8238, -37.8239, -37.8240, -37.8240, -37.8240,
        -37.8241, -37.8241, -37.8241, -37.8241], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1690e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.1690e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8237, -37.8238, -37.8239, -37.8240, -37.8240, -37.8240, -37.8241,
        -37.8241, -37.8241, -37.8241], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 16 	 12 	 C 	 C 	 6.299263664420599e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,  6FF
SUBMOLECULES: ['F2', 'F', 'F']
SUBMOLECULE INDICES: [6, 14, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0618], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0618], dtype=torch.float64)
E_PRED: tensor([-199.6143, -199.5590, -199.5445, -199.5371, -199.5324, -199.5292,
        -199.5269, -199.5254, -199.5243, -199.5235, -199.5230, -199.5226,
        -199.5223, -199.5221, -199.5220, -199.5219, -199.5218, -199.5218,
        -199.5217, -199.5217, -199.5217, -199.5217, -199.5217, -199.5217,
        -199.5217], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 4698])
ao_eval   ---   torch.Size([1, 10, 4698, 78])
grid_weights   ---   torch.Size([1, 4698])
-199.3364659747656
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.4807e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.9614e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6717, -99.6927, -99.7034, -99.7099, -99.7145, -99.7179, -99.7203,
        -99.7221, -99.7233, -99.7242, -99.7249, -99.7253, -99.7257, -99.7259,
        -99.7261, -99.7262, -99.7262, -99.7263, -99.7263, -99.7264, -99.7264,
        -99.7264, -99.7264, -99.7264, -99.7264], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.0911e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.9655e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'FF': tensor([-0.0618], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'FF': tensor([-199.5219, -199.5218, -199.5218, -199.5217, -199.5217, -199.5217,
        -199.5217, -199.5217, -199.5217, -199.5217], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7262, -99.7262, -99.7263, -99.7263, -99.7264, -99.7264, -99.7264,
        -99.7264, -99.7264, -99.7264], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 16 	 6 	 F2 	 F2 	 1.1541059096135752e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  , 11NaNa
SUBMOLECULES: ['Na2', 'Na', 'Na']
SUBMOLECULE INDICES: [11, 18, 18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0273], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0273], dtype=torch.float64)
E_PRED: tensor([-324.6038, -324.5576, -324.5455, -324.5394, -324.5355, -324.5328,
        -324.5310, -324.5297, -324.5288, -324.5281, -324.5277, -324.5274,
        -324.5272, -324.5270, -324.5269, -324.5268, -324.5268, -324.5267,
        -324.5267, -324.5267, -324.5267, -324.5267, -324.5267, -324.5267,
        -324.5267], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 1992])
ao_eval   ---   torch.Size([1, 10, 1992, 94])
grid_weights   ---   torch.Size([1, 1992])
-324.03216786711033
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(4.5215e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.0430e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2325, -162.2431, -162.2464, -162.2481, -162.2491, -162.2500,
        -162.2506, -162.2510, -162.2511, -162.2512, -162.2512, -162.2513,
        -162.2513, -162.2514, -162.2514, -162.2514, -162.2514, -162.2514,
        -162.2514, -162.2514, -162.2514, -162.2514, -162.2514, -162.2514,
        -162.2514], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0819e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.0441e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NaNa': tensor([-0.0273], dtype=torch.float64), 'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'NaNa': tensor([-324.5268, -324.5268, -324.5267, -324.5267, -324.5267, -324.5267,
        -324.5267, -324.5267, -324.5267, -324.5267], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Na': tensor([-162.2514, -162.2514, -162.2514, -162.2514, -162.2514, -162.2514,
        -162.2514, -162.2514, -162.2514, -162.2514], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 16 	 11 	 Na2 	 Na2 	 2.912274310106902e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 12, 17, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-93.9505, -93.5008, -93.3839, -93.3336, -93.2971, -93.2737, -93.2569,
        -93.2451, -93.2367, -93.2307, -93.2264, -93.2233, -93.2211, -93.2195,
        -93.2183, -93.2175, -93.2169, -93.2164, -93.2161, -93.2158, -93.2157,
        -93.2155, -93.2154, -93.2154, -93.2153], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633898
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.7056e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0005, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7530, -37.7894, -37.8016, -37.8084, -37.8128, -37.8160, -37.8182,
        -37.8197, -37.8209, -37.8216, -37.8222, -37.8226, -37.8229, -37.8231,
        -37.8232, -37.8233, -37.8234, -37.8234, -37.8234, -37.8235, -37.8235,
        -37.8235, -37.8235, -37.8235, -37.8235], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2431e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0005, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2492, -0.4387, -0.4643, -0.4764, -0.4837, -0.4886, -0.4919, -0.4942,
        -0.4957, -0.4968, -0.4976, -0.4981, -0.4985, -0.4988, -0.4990, -0.4991,
        -0.4992, -0.4993, -0.4993, -0.4993, -0.4993, -0.4994, -0.4994, -0.4994,
        -0.4994], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.2695e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.9672e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4059, -54.4714, -54.5046, -54.5247, -54.5384, -54.5483, -54.5553,
        -54.5604, -54.5640, -54.5665, -54.5683, -54.5695, -54.5704, -54.5711,
        -54.5715, -54.5718, -54.5720, -54.5722, -54.5723, -54.5723, -54.5724,
        -54.5724, -54.5725, -54.5725, -54.5725], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.0613e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2175, -93.2169, -93.2164, -93.2161, -93.2158, -93.2157, -93.2155,
        -93.2154, -93.2154, -93.2153], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8233, -37.8234, -37.8234, -37.8234, -37.8235, -37.8235, -37.8235,
        -37.8235, -37.8235, -37.8235], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4991, -0.4992, -0.4993, -0.4993, -0.4993, -0.4993, -0.4994, -0.4994,
        -0.4994, -0.4994], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5718, -54.5720, -54.5722, -54.5723, -54.5723, -54.5724, -54.5724,
        -54.5725, -54.5725, -54.5725], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 16 	 3 	 CHN 	 CNH 	 0.007509983454640776

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e16)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e16/2022-11-29_10:09:21.574160_1.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e16/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 16 || ,[' rho : 2.923016', ' ae : 56.026269', ' E : 3.338081'] ,|| total loss 41.718861 || CHKPT: _1.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 17, 17]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.7457, -109.8678, -109.7355, -109.6588, -109.6091, -109.5751,
        -109.5515, -109.5350, -109.5235, -109.5154, -109.5098, -109.5059,
        -109.5032, -109.5012, -109.4999, -109.4990, -109.4983, -109.4978,
        -109.4975, -109.4973, -109.4971, -109.4970, -109.4970, -109.4969,
        -109.4969], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018879
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.2432e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0002, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4367, -54.5036, -54.5279, -54.5416, -54.5506, -54.5570, -54.5615,
        -54.5646, -54.5669, -54.5685, -54.5696, -54.5703, -54.5709, -54.5713,
        -54.5715, -54.5717, -54.5719, -54.5720, -54.5720, -54.5721, -54.5721,
        -54.5721, -54.5721, -54.5722, -54.5722], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.1069e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0002, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4990, -109.4983, -109.4978, -109.4975, -109.4973, -109.4971,
        -109.4970, -109.4970, -109.4969, -109.4969], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5717, -54.5719, -54.5720, -54.5720, -54.5721, -54.5721, -54.5721,
        -54.5721, -54.5722, -54.5722], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 17 	 1 	 N2 	 N2 	 3.0481333984365156e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 15, 15]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0263, -1.1118, -1.1340, -1.1453, -1.1525, -1.1573, -1.1607, -1.1630,
        -1.1647, -1.1658, -1.1666, -1.1672, -1.1676, -1.1679, -1.1680, -1.1682,
        -1.1683, -1.1683, -1.1684, -1.1684, -1.1684, -1.1685, -1.1685, -1.1685,
        -1.1685], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668206
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6572e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3144e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2757, -0.4465, -0.4687, -0.4792, -0.4856, -0.4899, -0.4928, -0.4948,
        -0.4962, -0.4971, -0.4978, -0.4983, -0.4986, -0.4988, -0.4990, -0.4991,
        -0.4992, -0.4993, -0.4993, -0.4993, -0.4993, -0.4993, -0.4994, -0.4994,
        -0.4994], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.2454e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.7448e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.1635e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1682, -1.1683, -1.1683, -1.1684, -1.1684, -1.1684, -1.1685, -1.1685,
        -1.1685, -1.1685], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4991, -0.4992, -0.4993, -0.4993, -0.4993, -0.4993, -0.4993, -0.4994,
        -0.4994, -0.4994], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 17 	 0 	 H2 	 H2 	 4.924528244883167e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------13----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0881, -460.1189, -460.1298, -460.1359, -460.1401, -460.1431,
        -460.1453, -460.1469, -460.1480, -460.1488, -460.1493, -460.1497,
        -460.1500, -460.1502, -460.1504, -460.1505, -460.1505, -460.1506,
        -460.1506, -460.1506, -460.1507, -460.1507, -460.1507, -460.1507,
        -460.1507], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.8616e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(4.8616e-09, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1505, -460.1505, -460.1506, -460.1506, -460.1506, -460.1507,
        -460.1507, -460.1507, -460.1507, -460.1507], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 17 	 13 	 Cl 	 Cl 	 1.6813846169463952e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 13, 13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4539, -920.4233, -920.4159, -920.4119, -920.4094, -920.4076,
        -920.4063, -920.4055, -920.4048, -920.4044, -920.4041, -920.4039,
        -920.4037, -920.4036, -920.4036, -920.4035, -920.4035, -920.4035,
        -920.4034, -920.4034, -920.4034, -920.4034, -920.4034, -920.4034,
        -920.4034], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885617
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.7734e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.5467e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0874, -460.1179, -460.1285, -460.1345, -460.1386, -460.1415,
        -460.1436, -460.1451, -460.1462, -460.1470, -460.1475, -460.1479,
        -460.1482, -460.1484, -460.1485, -460.1486, -460.1487, -460.1487,
        -460.1488, -460.1488, -460.1488, -460.1488, -460.1488, -460.1488,
        -460.1488], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.9867e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.5468e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4035, -920.4035, -920.4035, -920.4034, -920.4034, -920.4034,
        -920.4034, -920.4034, -920.4034, -920.4034], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1486, -460.1487, -460.1487, -460.1488, -460.1488, -460.1488,
        -460.1488, -460.1488, -460.1488, -460.1488], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 17 	 5 	 Cl2 	 Cl2 	 2.928237082083573e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  , 11NaNa
SUBMOLECULES: ['Na2', 'Na', 'Na']
SUBMOLECULE INDICES: [11, 18, 18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0273], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0273], dtype=torch.float64)
E_PRED: tensor([-324.6020, -324.5512, -324.5379, -324.5312, -324.5269, -324.5240,
        -324.5220, -324.5205, -324.5196, -324.5189, -324.5184, -324.5180,
        -324.5178, -324.5176, -324.5175, -324.5174, -324.5174, -324.5173,
        -324.5173, -324.5173, -324.5173, -324.5173, -324.5172, -324.5172,
        -324.5172], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 1992])
ao_eval   ---   torch.Size([1, 10, 1992, 94])
grid_weights   ---   torch.Size([1, 1992])
-324.03216786711033
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(4.3820e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.7641e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2295, -162.2393, -162.2422, -162.2437, -162.2447, -162.2455,
        -162.2460, -162.2463, -162.2464, -162.2465, -162.2465, -162.2466,
        -162.2466, -162.2466, -162.2467, -162.2467, -162.2467, -162.2467,
        -162.2467, -162.2467, -162.2467, -162.2467, -162.2467, -162.2467,
        -162.2467], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(6.6407e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.7707e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NaNa': tensor([-0.0273], dtype=torch.float64), 'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'NaNa': tensor([-324.5174, -324.5174, -324.5173, -324.5173, -324.5173, -324.5173,
        -324.5173, -324.5172, -324.5172, -324.5172], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Na': tensor([-162.2467, -162.2467, -162.2467, -162.2467, -162.2467, -162.2467,
        -162.2467, -162.2467, -162.2467, -162.2467], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 17 	 11 	 Na2 	 Na2 	 2.884902416945888e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------16----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [16]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4543, -7.4605, -7.4641, -7.4662, -7.4675, -7.4686, -7.4695, -7.4704,
        -7.4706, -7.4704, -7.4701, -7.4701, -7.4701, -7.4701, -7.4701, -7.4702,
        -7.4702, -7.4702, -7.4702, -7.4703, -7.4703, -7.4703, -7.4703, -7.4703,
        -7.4703], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.2175e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(4.3115e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.8478e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4702, -7.4702, -7.4702, -7.4702, -7.4703, -7.4703, -7.4703, -7.4703,
        -7.4703, -7.4703], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 17 	 16 	 Li 	 Li 	 1.4114687794466425e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,  6FF
SUBMOLECULES: ['F2', 'F', 'F']
SUBMOLECULE INDICES: [6, 14, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0618], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0618], dtype=torch.float64)
E_PRED: tensor([-199.6821, -199.5826, -199.5558, -199.5419, -199.5331, -199.5270,
        -199.5228, -199.5199, -199.5178, -199.5163, -199.5153, -199.5146,
        -199.5141, -199.5137, -199.5134, -199.5133, -199.5131, -199.5131,
        -199.5130, -199.5130, -199.5129, -199.5129, -199.5129, -199.5129,
        -199.5129], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 4698])
ao_eval   ---   torch.Size([1, 10, 4698, 78])
grid_weights   ---   torch.Size([1, 4698])
-199.3364659747656
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.3455e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.6910e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6741, -99.6966, -99.7052, -99.7101, -99.7135, -99.7159, -99.7177,
        -99.7189, -99.7198, -99.7204, -99.7209, -99.7212, -99.7214, -99.7216,
        -99.7217, -99.7218, -99.7218, -99.7218, -99.7219, -99.7219, -99.7219,
        -99.7219, -99.7219, -99.7219, -99.7219], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0287e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.7013e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'FF': tensor([-0.0618], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'FF': tensor([-199.5133, -199.5131, -199.5131, -199.5130, -199.5130, -199.5129,
        -199.5129, -199.5129, -199.5129, -199.5129], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7218, -99.7218, -99.7218, -99.7219, -99.7219, -99.7219, -99.7219,
        -99.7219, -99.7219, -99.7219], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 17 	 6 	 F2 	 F2 	 1.2126603153414294e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------18----------------
TRAINING ON MOLECULE:  ,Na
SUBMOLECULES: ['Na']
SUBMOLECULE INDICES: [18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2216, -162.2337, -162.2379, -162.2402, -162.2416, -162.2426,
        -162.2434, -162.2440, -162.2443, -162.2444, -162.2445, -162.2445,
        -162.2446, -162.2446, -162.2446, -162.2447, -162.2447, -162.2447,
        -162.2447, -162.2447, -162.2447, -162.2447, -162.2447, -162.2447,
        -162.2447], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0446e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.0446e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'Na': tensor([-162.2447, -162.2447, -162.2447, -162.2447, -162.2447, -162.2447,
        -162.2447, -162.2447, -162.2447, -162.2447], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 17 	 18 	 Na 	 Na 	 2.2884650384641057e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,  7CCHH
SUBMOLECULES: ['C2H2', 'C', 'C', 'H', 'H']
SUBMOLECULE INDICES: [7, 12, 12, 15, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C2H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6459], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6459], dtype=torch.float64)
E_PRED: tensor([-78.1347, -73.0871, -75.0656, -75.8391, -76.2888, -76.5840, -76.7853,
        -76.9246, -77.0217, -77.0897, -77.1372, -77.1705, -77.1938, -77.2101,
        -77.2216, -77.2297, -77.2353, -77.2393, -77.2420, -77.2440, -77.2453,
        -77.2463, -77.2470, -77.2474, -77.2478], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 108, 108])
mo_energy   ---   torch.Size([2, 108])
dm_ref   ---   torch.Size([1, 2, 108, 108])
rho   ---   torch.Size([1, 2, 1924])
ao_eval   ---   torch.Size([1, 10, 1924, 108])
grid_weights   ---   torch.Size([1, 1924])
-77.2336470993193
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 108])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 108])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6577e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7345, -37.7730, -37.7895, -37.7992, -37.8057, -37.8104, -37.8137,
        -37.8161, -37.8178, -37.8190, -37.8198, -37.8204, -37.8208, -37.8211,
        -37.8214, -37.8215, -37.8216, -37.8217, -37.8217, -37.8218, -37.8218,
        -37.8218, -37.8218, -37.8218, -37.8218], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5065e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2389, -0.4355, -0.4625, -0.4752, -0.4829, -0.4880, -0.4915, -0.4939,
        -0.4955, -0.4967, -0.4975, -0.4980, -0.4984, -0.4987, -0.4989, -0.4990,
        -0.4991, -0.4992, -0.4992, -0.4993, -0.4993, -0.4993, -0.4993, -0.4993,
        -0.4993], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.1795e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(3.4498e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CCHH': tensor([-0.6459], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'CCHH': tensor([-77.2297, -77.2353, -77.2393, -77.2420, -77.2440, -77.2453, -77.2463,
        -77.2470, -77.2474, -77.2478], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8215, -37.8216, -37.8217, -37.8217, -37.8218, -37.8218, -37.8218,
        -37.8218, -37.8218, -37.8218], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4990, -0.4991, -0.4992, -0.4992, -0.4993, -0.4993, -0.4993, -0.4993,
        -0.4993, -0.4993], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 17 	 7 	 C2H2 	 C2H2 	 0.00039165444283724616

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  , 10LiH
SUBMOLECULES: ['HLi', 'Li', 'H']
SUBMOLECULE INDICES: [10, 16, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0923], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0923], dtype=torch.float64)
E_PRED: tensor([-7.9716, -8.0217, -8.0352, -8.0423, -8.0469, -8.0501, -8.0523, -8.0539,
        -8.0550, -8.0558, -8.0564, -8.0568, -8.0571, -8.0572, -8.0574, -8.0575,
        -8.0576, -8.0576, -8.0576, -8.0577, -8.0577, -8.0577, -8.0577, -8.0577,
        -8.0577], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 54, 54])
mo_energy   ---   torch.Size([2, 54])
dm_ref   ---   torch.Size([1, 2, 54, 54])
rho   ---   torch.Size([1, 2, 1271])
ao_eval   ---   torch.Size([1, 10, 1271, 54])
grid_weights   ---   torch.Size([1, 1271])
-8.038079906478378
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 54])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 54])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.1371e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.2741e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2863, -0.4495, -0.4703, -0.4802, -0.4863, -0.4903, -0.4931, -0.4950,
        -0.4963, -0.4972, -0.4978, -0.4983, -0.4986, -0.4988, -0.4990, -0.4991,
        -0.4992, -0.4992, -0.4992, -0.4993, -0.4993, -0.4993, -0.4993, -0.4993,
        -0.4993], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.1775e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.8844e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(4.1097e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4552, -7.4624, -7.4654, -7.4671, -7.4682, -7.4692, -7.4701, -7.4706,
        -7.4704, -7.4701, -7.4700, -7.4700, -7.4700, -7.4700, -7.4701, -7.4701,
        -7.4701, -7.4702, -7.4702, -7.4702, -7.4702, -7.4702, -7.4702, -7.4702,
        -7.4702], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.0977e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(4.3931e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.9336e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiH': tensor([-0.0923], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiH': tensor([-8.0575, -8.0576, -8.0576, -8.0576, -8.0577, -8.0577, -8.0577, -8.0577,
        -8.0577, -8.0577], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4991, -0.4992, -0.4992, -0.4992, -0.4993, -0.4993, -0.4993, -0.4993,
        -0.4993, -0.4993], dtype=torch.float64, grad_fn=<SliceBackward0>), 'Li': tensor([-7.4701, -7.4701, -7.4702, -7.4702, -7.4702, -7.4702, -7.4702, -7.4702,
        -7.4702, -7.4702], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 17 	 10 	 HLi 	 LiH 	 3.930274073182964e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,  9ClH
SUBMOLECULES: ['HCl', 'Cl', 'H']
SUBMOLECULE INDICES: [9, 13, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='ClH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1712], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1712], dtype=torch.float64)
E_PRED: tensor([-460.7278, -460.7793, -460.7938, -460.8012, -460.8059, -460.8091,
        -460.8113, -460.8128, -460.8139, -460.8147, -460.8152, -460.8155,
        -460.8158, -460.8160, -460.8161, -460.8162, -460.8163, -460.8163,
        -460.8163, -460.8164, -460.8164, -460.8164, -460.8164, -460.8164,
        -460.8164], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 62, 62])
mo_energy   ---   torch.Size([2, 62])
dm_ref   ---   torch.Size([1, 2, 62, 62])
rho   ---   torch.Size([1, 2, 1068])
ao_eval   ---   torch.Size([1, 10, 1068, 62])
grid_weights   ---   torch.Size([1, 1068])
-460.4234538667477
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 62])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 62])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(4.8129e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.6258e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0771, -460.1086, -460.1198, -460.1263, -460.1307, -460.1339,
        -460.1361, -460.1378, -460.1390, -460.1398, -460.1404, -460.1408,
        -460.1411, -460.1413, -460.1415, -460.1416, -460.1417, -460.1417,
        -460.1418, -460.1418, -460.1418, -460.1418, -460.1418, -460.1418,
        -460.1418], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.7904e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.6286e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3412, -0.4643, -0.4787, -0.4857, -0.4900, -0.4928, -0.4948, -0.4962,
        -0.4971, -0.4978, -0.4983, -0.4986, -0.4988, -0.4990, -0.4991, -0.4991,
        -0.4992, -0.4992, -0.4993, -0.4993, -0.4993, -0.4993, -0.4993, -0.4993,
        -0.4993], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.1754e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.3800e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClH': tensor([-0.1712], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'ClH': tensor([-460.8162, -460.8163, -460.8163, -460.8163, -460.8164, -460.8164,
        -460.8164, -460.8164, -460.8164, -460.8164], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1416, -460.1417, -460.1417, -460.1418, -460.1418, -460.1418,
        -460.1418, -460.1418, -460.1418, -460.1418], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4991, -0.4992, -0.4992, -0.4993, -0.4993, -0.4993, -0.4993, -0.4993,
        -0.4993, -0.4993], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 17 	 9 	 HCl 	 ClH 	 3.739384459814961e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 12, 17, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-94.0529, -93.5416, -93.4032, -93.3476, -93.3052, -93.2787, -93.2595,
        -93.2460, -93.2364, -93.2296, -93.2247, -93.2212, -93.2186, -93.2168,
        -93.2155, -93.2145, -93.2138, -93.2133, -93.2130, -93.2127, -93.2125,
        -93.2124, -93.2123, -93.2122, -93.2121], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633898
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.6817e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0005, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7473, -37.7849, -37.7980, -37.8053, -37.8101, -37.8135, -37.8160,
        -37.8177, -37.8189, -37.8197, -37.8204, -37.8208, -37.8211, -37.8213,
        -37.8214, -37.8215, -37.8216, -37.8217, -37.8217, -37.8217, -37.8218,
        -37.8218, -37.8218, -37.8218, -37.8218], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5063e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0005, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3344, -0.4625, -0.4777, -0.4850, -0.4895, -0.4925, -0.4946, -0.4960,
        -0.4970, -0.4977, -0.4982, -0.4985, -0.4988, -0.4989, -0.4991, -0.4991,
        -0.4992, -0.4992, -0.4993, -0.4993, -0.4993, -0.4993, -0.4993, -0.4993,
        -0.4993], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.1730e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.4442e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4397, -54.5051, -54.5283, -54.5413, -54.5498, -54.5558, -54.5600,
        -54.5630, -54.5651, -54.5666, -54.5676, -54.5683, -54.5688, -54.5692,
        -54.5695, -54.5696, -54.5698, -54.5698, -54.5699, -54.5699, -54.5700,
        -54.5700, -54.5700, -54.5700, -54.5700], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.6554e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2145, -93.2138, -93.2133, -93.2130, -93.2127, -93.2125, -93.2124,
        -93.2123, -93.2122, -93.2121], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8215, -37.8216, -37.8217, -37.8217, -37.8217, -37.8218, -37.8218,
        -37.8218, -37.8218, -37.8218], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4991, -0.4992, -0.4992, -0.4993, -0.4993, -0.4993, -0.4993, -0.4993,
        -0.4993, -0.4993], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5696, -54.5698, -54.5698, -54.5699, -54.5699, -54.5700, -54.5700,
        -54.5700, -54.5700, -54.5700], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 17 	 3 	 CHN 	 CNH 	 0.007422627213502886

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------19----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9474, -74.9880, -75.0082, -75.0206, -75.0292, -75.0354, -75.0399,
        -75.0431, -75.0455, -75.0471, -75.0483, -75.0491, -75.0497, -75.0501,
        -75.0504, -75.0506, -75.0507, -75.0509, -75.0509, -75.0510, -75.0510,
        -75.0510, -75.0510, -75.0511, -75.0511], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.9177e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.9177e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0506, -75.0507, -75.0509, -75.0509, -75.0510, -75.0510, -75.0510,
        -75.0510, -75.0511, -75.0511], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 17 	 19 	 O 	 O 	 6.168203206353287e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------14----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6655, -99.6839, -99.6952, -99.7024, -99.7075, -99.7113, -99.7140,
        -99.7160, -99.7175, -99.7185, -99.7192, -99.7198, -99.7201, -99.7204,
        -99.7206, -99.7207, -99.7208, -99.7209, -99.7209, -99.7210, -99.7210,
        -99.7210, -99.7210, -99.7210, -99.7210], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2003e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.2003e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7207, -99.7208, -99.7209, -99.7209, -99.7210, -99.7210, -99.7210,
        -99.7210, -99.7210, -99.7210], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 17 	 14 	 F 	 F 	 3.880427617786114e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7334, -37.7714, -37.7884, -37.7984, -37.8051, -37.8099, -37.8134,
        -37.8159, -37.8176, -37.8189, -37.8198, -37.8204, -37.8208, -37.8211,
        -37.8214, -37.8215, -37.8216, -37.8217, -37.8218, -37.8218, -37.8218,
        -37.8218, -37.8218, -37.8219, -37.8219], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5023e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.5023e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8215, -37.8216, -37.8217, -37.8218, -37.8218, -37.8218, -37.8218,
        -37.8218, -37.8219, -37.8219], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 17 	 12 	 C 	 C 	 8.12800190937884e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 16, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2428, -107.2761, -107.2383, -107.2323, -107.2280, -107.2257,
        -107.2249, -107.2244, -107.2242, -107.2242, -107.2244, -107.2247,
        -107.2251, -107.2255, -107.2260, -107.2264, -107.2267, -107.2271,
        -107.2274, -107.2276, -107.2278, -107.2280, -107.2281, -107.2282,
        -107.2283], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.305942205048
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.5019e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6669, -99.6873, -99.6981, -99.7048, -99.7095, -99.7129, -99.7154,
        -99.7172, -99.7185, -99.7194, -99.7201, -99.7206, -99.7209, -99.7211,
        -99.7213, -99.7214, -99.7215, -99.7215, -99.7216, -99.7216, -99.7216,
        -99.7216, -99.7217, -99.7217, -99.7217], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0816e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4563, -7.4636, -7.4663, -7.4678, -7.4688, -7.4698, -7.4706, -7.4707,
        -7.4704, -7.4702, -7.4701, -7.4702, -7.4702, -7.4702, -7.4703, -7.4703,
        -7.4703, -7.4703, -7.4703, -7.4704, -7.4704, -7.4704, -7.4704, -7.4704,
        -7.4704], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.0354e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(4.2064e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2264, -107.2267, -107.2271, -107.2274, -107.2276, -107.2278,
        -107.2280, -107.2281, -107.2282, -107.2283], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7214, -99.7215, -99.7215, -99.7216, -99.7216, -99.7216, -99.7216,
        -99.7217, -99.7217, -99.7217], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4703, -7.4703, -7.4703, -7.4703, -7.4704, -7.4704, -7.4704, -7.4704,
        -7.4704, -7.4704], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 17 	 2 	 FLi 	 LiF 	 0.008110828193573186

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,  8OC
SUBMOLECULES: ['CO', 'O', 'C']
SUBMOLECULE INDICES: [8, 19, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='OC', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4142], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4142], dtype=torch.float64)
E_PRED: tensor([-113.6083, -113.3706, -113.3149, -113.2851, -113.2671, -113.2546,
        -113.2460, -113.2399, -113.2357, -113.2327, -113.2307, -113.2292,
        -113.2282, -113.2275, -113.2270, -113.2266, -113.2264, -113.2262,
        -113.2261, -113.2260, -113.2259, -113.2259, -113.2258, -113.2258,
        -113.2258], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 3279])
ao_eval   ---   torch.Size([1, 10, 3279, 78])
grid_weights   ---   torch.Size([1, 3279])
-113.201730216515
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.3863e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7402, -37.7791, -37.7941, -37.8026, -37.8083, -37.8124, -37.8152,
        -37.8173, -37.8188, -37.8198, -37.8205, -37.8210, -37.8214, -37.8217,
        -37.8218, -37.8220, -37.8221, -37.8221, -37.8222, -37.8222, -37.8222,
        -37.8222, -37.8222, -37.8223, -37.8223], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4353e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9481, -74.9884, -75.0087, -75.0212, -75.0299, -75.0361, -75.0407,
        -75.0439, -75.0463, -75.0479, -75.0491, -75.0500, -75.0505, -75.0510,
        -75.0513, -75.0515, -75.0516, -75.0517, -75.0518, -75.0518, -75.0519,
        -75.0519, -75.0519, -75.0519, -75.0519], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7218e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'OC': tensor([-0.4142], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'OC': tensor([-113.2266, -113.2264, -113.2262, -113.2261, -113.2260, -113.2259,
        -113.2259, -113.2258, -113.2258, -113.2258], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8220, -37.8221, -37.8221, -37.8222, -37.8222, -37.8222, -37.8222,
        -37.8222, -37.8223, -37.8223], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0515, -75.0516, -75.0517, -75.0518, -75.0518, -75.0519, -75.0519,
        -75.0519, -75.0519, -75.0519], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 17 	 8 	 CO 	 OC 	 0.0009149389830686045

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------17----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [17]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4118, -54.4807, -54.5112, -54.5291, -54.5412, -54.5498, -54.5560,
        -54.5603, -54.5634, -54.5656, -54.5671, -54.5682, -54.5690, -54.5695,
        -54.5699, -54.5702, -54.5704, -54.5705, -54.5706, -54.5706, -54.5707,
        -54.5707, -54.5707, -54.5708, -54.5708], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.4836e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.4836e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5702, -54.5704, -54.5705, -54.5706, -54.5706, -54.5707, -54.5707,
        -54.5707, -54.5708, -54.5708], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 17 	 17 	 N 	 N 	 7.956067438648401e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------15----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3008, -0.4536, -0.4726, -0.4817, -0.4873, -0.4910, -0.4935, -0.4953,
        -0.4965, -0.4974, -0.4980, -0.4984, -0.4987, -0.4989, -0.4990, -0.4991,
        -0.4992, -0.4992, -0.4993, -0.4993, -0.4993, -0.4993, -0.4993, -0.4993,
        -0.4993], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.1969e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.6785e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.8394e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4991, -0.4992, -0.4992, -0.4993, -0.4993, -0.4993, -0.4993, -0.4993,
        -0.4993, -0.4993], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 17 	 15 	 H 	 H 	 1.060034654666021e-07

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 12, 19, 19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.8095, -188.8649, -188.6661, -188.5489, -188.4764, -188.4269,
        -188.3923, -188.3679, -188.3507, -188.3385, -188.3298, -188.3237,
        -188.3193, -188.3162, -188.3140, -188.3124, -188.3113, -188.3105,
        -188.3099, -188.3095, -188.3092, -188.3090, -188.3088, -188.3087,
        -188.3086], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.4017587505662
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7480e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7318, -37.7677, -37.7858, -37.7967, -37.8042, -37.8095, -37.8134,
        -37.8161, -37.8181, -37.8195, -37.8205, -37.8212, -37.8217, -37.8221,
        -37.8223, -37.8225, -37.8226, -37.8227, -37.8227, -37.8228, -37.8228,
        -37.8228, -37.8228, -37.8229, -37.8229], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3495e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9551, -74.9982, -75.0165, -75.0273, -75.0347, -75.0399, -75.0437,
        -75.0464, -75.0483, -75.0497, -75.0507, -75.0514, -75.0519, -75.0522,
        -75.0524, -75.0526, -75.0527, -75.0528, -75.0529, -75.0529, -75.0529,
        -75.0530, -75.0530, -75.0530, -75.0530], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4884e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3124, -188.3113, -188.3105, -188.3099, -188.3095, -188.3092,
        -188.3090, -188.3088, -188.3087, -188.3086], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8225, -37.8226, -37.8227, -37.8227, -37.8228, -37.8228, -37.8228,
        -37.8228, -37.8229, -37.8229], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0526, -75.0527, -75.0528, -75.0529, -75.0529, -75.0529, -75.0530,
        -75.0530, -75.0530, -75.0530], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 17 	 4 	 CO2 	 CO2 	 0.013728801002252633

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e17)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e17/2022-11-29_10:09:21.574160_2.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e17/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 17 || ,[' rho : 2.902998', ' ae : 55.638416', ' E : 3.628594'] ,|| total loss 41.430620 || CHKPT: _2.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 15, 15]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0554, -1.1236, -1.1413, -1.1504, -1.1561, -1.1600, -1.1627, -1.1646,
        -1.1659, -1.1668, -1.1674, -1.1679, -1.1682, -1.1684, -1.1686, -1.1687,
        -1.1687, -1.1688, -1.1688, -1.1689, -1.1689, -1.1689, -1.1689, -1.1689,
        -1.1689], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668206
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7172e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.4343e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2353, -0.4344, -0.4619, -0.4748, -0.4827, -0.4878, -0.4914, -0.4938,
        -0.4955, -0.4966, -0.4974, -0.4980, -0.4984, -0.4987, -0.4989, -0.4990,
        -0.4991, -0.4992, -0.4992, -0.4993, -0.4993, -0.4993, -0.4993, -0.4993,
        -0.4993], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.2055e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(3.4269e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.2754e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1687, -1.1687, -1.1688, -1.1688, -1.1689, -1.1689, -1.1689, -1.1689,
        -1.1689, -1.1689], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4990, -0.4991, -0.4992, -0.4992, -0.4993, -0.4993, -0.4993, -0.4993,
        -0.4993, -0.4993], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 18 	 0 	 H2 	 H2 	 3.8942623351109626e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,  9ClH
SUBMOLECULES: ['HCl', 'Cl', 'H']
SUBMOLECULE INDICES: [9, 13, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='ClH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1712], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1712], dtype=torch.float64)
E_PRED: tensor([-460.7230, -460.7804, -460.7965, -460.8047, -460.8099, -460.8134,
        -460.8159, -460.8176, -460.8188, -460.8196, -460.8202, -460.8206,
        -460.8209, -460.8211, -460.8212, -460.8213, -460.8214, -460.8214,
        -460.8215, -460.8215, -460.8215, -460.8215, -460.8215, -460.8215,
        -460.8216], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 62, 62])
mo_energy   ---   torch.Size([2, 62])
dm_ref   ---   torch.Size([1, 2, 62, 62])
rho   ---   torch.Size([1, 2, 1068])
ao_eval   ---   torch.Size([1, 10, 1068, 62])
grid_weights   ---   torch.Size([1, 1068])
-460.4234538667477
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 62])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 62])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(4.7531e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.5063e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1000, -460.1249, -460.1327, -460.1370, -460.1399, -460.1419,
        -460.1434, -460.1444, -460.1451, -460.1456, -460.1460, -460.1463,
        -460.1465, -460.1466, -460.1467, -460.1467, -460.1468, -460.1468,
        -460.1468, -460.1468, -460.1469, -460.1469, -460.1469, -460.1469,
        -460.1469], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0404e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.5064e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2689, -0.4445, -0.4675, -0.4785, -0.4851, -0.4895, -0.4925, -0.4946,
        -0.4960, -0.4970, -0.4977, -0.4982, -0.4985, -0.4988, -0.4990, -0.4991,
        -0.4992, -0.4992, -0.4993, -0.4993, -0.4993, -0.4993, -0.4993, -0.4993,
        -0.4993], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.2067e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(3.0069e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClH': tensor([-0.1712], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'ClH': tensor([-460.8213, -460.8214, -460.8214, -460.8215, -460.8215, -460.8215,
        -460.8215, -460.8215, -460.8215, -460.8216], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1467, -460.1468, -460.1468, -460.1468, -460.1468, -460.1469,
        -460.1469, -460.1469, -460.1469, -460.1469], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4991, -0.4992, -0.4992, -0.4993, -0.4993, -0.4993, -0.4993, -0.4993,
        -0.4993, -0.4993], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 18 	 9 	 HCl 	 ClH 	 3.94884542953731e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,  8OC
SUBMOLECULES: ['CO', 'O', 'C']
SUBMOLECULE INDICES: [8, 19, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='OC', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4142], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4142], dtype=torch.float64)
E_PRED: tensor([-113.6583, -113.3913, -113.3284, -113.2947, -113.2744, -113.2604,
        -113.2506, -113.2438, -113.2390, -113.2357, -113.2333, -113.2317,
        -113.2305, -113.2297, -113.2291, -113.2287, -113.2284, -113.2282,
        -113.2281, -113.2280, -113.2279, -113.2279, -113.2279, -113.2278,
        -113.2278], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 3279])
ao_eval   ---   torch.Size([1, 10, 3279, 78])
grid_weights   ---   torch.Size([1, 3279])
-113.201730216515
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.3854e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7318, -37.7677, -37.7859, -37.7967, -37.8042, -37.8095, -37.8133,
        -37.8161, -37.8181, -37.8195, -37.8205, -37.8212, -37.8217, -37.8220,
        -37.8223, -37.8224, -37.8225, -37.8226, -37.8227, -37.8227, -37.8228,
        -37.8228, -37.8228, -37.8228, -37.8228], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3577e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9513, -74.9931, -75.0127, -75.0245, -75.0326, -75.0385, -75.0427,
        -75.0457, -75.0479, -75.0494, -75.0505, -75.0513, -75.0518, -75.0522,
        -75.0525, -75.0527, -75.0528, -75.0529, -75.0530, -75.0530, -75.0531,
        -75.0531, -75.0531, -75.0531, -75.0531], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4657e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'OC': tensor([-0.4142], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'OC': tensor([-113.2287, -113.2284, -113.2282, -113.2281, -113.2280, -113.2279,
        -113.2279, -113.2279, -113.2278, -113.2278], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8224, -37.8225, -37.8226, -37.8227, -37.8227, -37.8228, -37.8228,
        -37.8228, -37.8228, -37.8228], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0527, -75.0528, -75.0529, -75.0530, -75.0530, -75.0531, -75.0531,
        -75.0531, -75.0531, -75.0531], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 18 	 8 	 CO 	 OC 	 0.0009069389101803204

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 12, 17, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-94.0880, -93.5576, -93.4128, -93.3557, -93.3116, -93.2842, -93.2643,
        -93.2504, -93.2405, -93.2334, -93.2284, -93.2247, -93.2221, -93.2202,
        -93.2189, -93.2179, -93.2172, -93.2167, -93.2163, -93.2160, -93.2158,
        -93.2157, -93.2156, -93.2155, -93.2154], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633898
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.6662e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0005, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7467, -37.7846, -37.7981, -37.8057, -37.8107, -37.8142, -37.8167,
        -37.8185, -37.8198, -37.8207, -37.8213, -37.8217, -37.8221, -37.8223,
        -37.8224, -37.8225, -37.8226, -37.8227, -37.8227, -37.8227, -37.8228,
        -37.8228, -37.8228, -37.8228, -37.8228], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3508e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0005, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3149, -0.4574, -0.4748, -0.4831, -0.4882, -0.4917, -0.4940, -0.4956,
        -0.4967, -0.4975, -0.4981, -0.4985, -0.4987, -0.4989, -0.4990, -0.4991,
        -0.4992, -0.4992, -0.4993, -0.4993, -0.4993, -0.4993, -0.4993, -0.4993,
        -0.4993], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.2080e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.5394e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4172, -54.4866, -54.5157, -54.5325, -54.5439, -54.5519, -54.5576,
        -54.5617, -54.5646, -54.5666, -54.5680, -54.5690, -54.5698, -54.5702,
        -54.5706, -54.5708, -54.5710, -54.5711, -54.5712, -54.5713, -54.5713,
        -54.5713, -54.5714, -54.5714, -54.5714], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.3152e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2179, -93.2172, -93.2167, -93.2163, -93.2160, -93.2158, -93.2157,
        -93.2156, -93.2155, -93.2154], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8225, -37.8226, -37.8227, -37.8227, -37.8227, -37.8228, -37.8228,
        -37.8228, -37.8228, -37.8228], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4991, -0.4992, -0.4992, -0.4993, -0.4993, -0.4993, -0.4993, -0.4993,
        -0.4993, -0.4993], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5708, -54.5710, -54.5711, -54.5712, -54.5713, -54.5713, -54.5713,
        -54.5714, -54.5714, -54.5714], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 18 	 3 	 CHN 	 CNH 	 0.007346256154218857

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,  6FF
SUBMOLECULES: ['F2', 'F', 'F']
SUBMOLECULE INDICES: [6, 14, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0618], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0618], dtype=torch.float64)
E_PRED: tensor([-199.6602, -199.5753, -199.5526, -199.5409, -199.5334, -199.5283,
        -199.5248, -199.5223, -199.5206, -199.5193, -199.5185, -199.5179,
        -199.5174, -199.5171, -199.5169, -199.5168, -199.5167, -199.5166,
        -199.5165, -199.5165, -199.5165, -199.5165, -199.5164, -199.5164,
        -199.5164], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 4698])
ao_eval   ---   torch.Size([1, 10, 4698, 78])
grid_weights   ---   torch.Size([1, 4698])
-199.3364659747656
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.3990e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.7979e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6704, -99.6921, -99.7023, -99.7084, -99.7127, -99.7158, -99.7180,
        -99.7196, -99.7208, -99.7216, -99.7222, -99.7226, -99.7229, -99.7231,
        -99.7233, -99.7234, -99.7234, -99.7235, -99.7235, -99.7235, -99.7236,
        -99.7236, -99.7236, -99.7236, -99.7236], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.6825e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.8056e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'FF': tensor([-0.0618], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'FF': tensor([-199.5168, -199.5167, -199.5166, -199.5165, -199.5165, -199.5165,
        -199.5165, -199.5164, -199.5164, -199.5164], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7234, -99.7234, -99.7235, -99.7235, -99.7235, -99.7236, -99.7236,
        -99.7236, -99.7236, -99.7236], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 18 	 6 	 F2 	 F2 	 1.2929763973327445e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------14----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6703, -99.6921, -99.7022, -99.7083, -99.7126, -99.7156, -99.7179,
        -99.7195, -99.7206, -99.7215, -99.7221, -99.7225, -99.7228, -99.7230,
        -99.7231, -99.7232, -99.7233, -99.7233, -99.7234, -99.7234, -99.7234,
        -99.7234, -99.7234, -99.7234, -99.7235], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.8955e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.8955e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7232, -99.7233, -99.7233, -99.7234, -99.7234, -99.7234, -99.7234,
        -99.7234, -99.7234, -99.7235], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 18 	 14 	 F 	 F 	 2.5537542419814163e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,  7CCHH
SUBMOLECULES: ['C2H2', 'C', 'C', 'H', 'H']
SUBMOLECULE INDICES: [7, 12, 12, 15, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C2H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6459], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6459], dtype=torch.float64)
E_PRED: tensor([-78.3860, -73.9165, -75.4403, -76.0677, -76.4414, -76.6892, -76.8591,
        -76.9770, -77.0592, -77.1168, -77.1570, -77.1852, -77.2049, -77.2188,
        -77.2285, -77.2353, -77.2401, -77.2434, -77.2457, -77.2474, -77.2485,
        -77.2493, -77.2499, -77.2503, -77.2506], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 108, 108])
mo_energy   ---   torch.Size([2, 108])
dm_ref   ---   torch.Size([1, 2, 108, 108])
rho   ---   torch.Size([1, 2, 1924])
ao_eval   ---   torch.Size([1, 10, 1924, 108])
grid_weights   ---   torch.Size([1, 1924])
-77.2336470993193
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 108])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 108])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6455e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7543, -37.7899, -37.8017, -37.8081, -37.8124, -37.8154, -37.8175,
        -37.8190, -37.8201, -37.8208, -37.8214, -37.8217, -37.8220, -37.8222,
        -37.8223, -37.8224, -37.8225, -37.8225, -37.8225, -37.8226, -37.8226,
        -37.8226, -37.8226, -37.8226, -37.8226], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3758e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2678, -0.4442, -0.4673, -0.4783, -0.4850, -0.4894, -0.4925, -0.4945,
        -0.4960, -0.4970, -0.4977, -0.4982, -0.4985, -0.4988, -0.4989, -0.4991,
        -0.4991, -0.4992, -0.4992, -0.4993, -0.4993, -0.4993, -0.4993, -0.4993,
        -0.4993], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.2010e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(3.0873e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CCHH': tensor([-0.6459], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'CCHH': tensor([-77.2353, -77.2401, -77.2434, -77.2457, -77.2474, -77.2485, -77.2493,
        -77.2499, -77.2503, -77.2506], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8224, -37.8225, -37.8225, -37.8225, -37.8226, -37.8226, -37.8226,
        -37.8226, -37.8226, -37.8226], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4991, -0.4991, -0.4992, -0.4992, -0.4993, -0.4993, -0.4993, -0.4993,
        -0.4993, -0.4993], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 18 	 7 	 C2H2 	 C2H2 	 0.0003668403048485542

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 13, 13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4586, -920.4236, -920.4150, -920.4103, -920.4073, -920.4052,
        -920.4037, -920.4026, -920.4019, -920.4014, -920.4010, -920.4007,
        -920.4006, -920.4004, -920.4003, -920.4003, -920.4002, -920.4002,
        -920.4002, -920.4002, -920.4002, -920.4002, -920.4002, -920.4002,
        -920.4002], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885617
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.7165e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.4329e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0869, -460.1170, -460.1274, -460.1333, -460.1372, -460.1401,
        -460.1421, -460.1436, -460.1447, -460.1454, -460.1459, -460.1463,
        -460.1466, -460.1468, -460.1469, -460.1470, -460.1471, -460.1471,
        -460.1471, -460.1472, -460.1472, -460.1472, -460.1472, -460.1472,
        -460.1472], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(6.3645e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.4330e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4003, -920.4002, -920.4002, -920.4002, -920.4002, -920.4002,
        -920.4002, -920.4002, -920.4002, -920.4002], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1470, -460.1471, -460.1471, -460.1471, -460.1472, -460.1472,
        -460.1472, -460.1472, -460.1472, -460.1472], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 18 	 5 	 Cl2 	 Cl2 	 2.9303750683579795e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  , 11NaNa
SUBMOLECULES: ['Na2', 'Na', 'Na']
SUBMOLECULE INDICES: [11, 18, 18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0273], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0273], dtype=torch.float64)
E_PRED: tensor([-324.6478, -324.5705, -324.5504, -324.5402, -324.5337, -324.5293,
        -324.5262, -324.5241, -324.5226, -324.5216, -324.5209, -324.5203,
        -324.5200, -324.5197, -324.5196, -324.5194, -324.5194, -324.5193,
        -324.5193, -324.5192, -324.5192, -324.5192, -324.5192, -324.5192,
        -324.5192], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 1992])
ao_eval   ---   torch.Size([1, 10, 1992, 94])
grid_weights   ---   torch.Size([1, 1992])
-324.03216786711033
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(4.3537e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.7074e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2289, -162.2393, -162.2426, -162.2443, -162.2453, -162.2461,
        -162.2468, -162.2471, -162.2473, -162.2473, -162.2474, -162.2474,
        -162.2475, -162.2475, -162.2475, -162.2475, -162.2475, -162.2476,
        -162.2476, -162.2476, -162.2476, -162.2476, -162.2476, -162.2476,
        -162.2476], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.2727e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.7126e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NaNa': tensor([-0.0273], dtype=torch.float64), 'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'NaNa': tensor([-324.5194, -324.5194, -324.5193, -324.5193, -324.5192, -324.5192,
        -324.5192, -324.5192, -324.5192, -324.5192], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Na': tensor([-162.2475, -162.2475, -162.2476, -162.2476, -162.2476, -162.2476,
        -162.2476, -162.2476, -162.2476, -162.2476], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 18 	 11 	 Na2 	 Na2 	 2.5587172773507907e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7384, -37.7772, -37.7928, -37.8018, -37.8079, -37.8121, -37.8152,
        -37.8174, -37.8189, -37.8200, -37.8208, -37.8214, -37.8217, -37.8220,
        -37.8222, -37.8223, -37.8224, -37.8225, -37.8225, -37.8226, -37.8226,
        -37.8226, -37.8226, -37.8226, -37.8226], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3765e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.3765e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8223, -37.8224, -37.8225, -37.8225, -37.8226, -37.8226, -37.8226,
        -37.8226, -37.8226, -37.8226], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 18 	 12 	 C 	 C 	 7.457671482125994e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------19----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9481, -74.9837, -75.0051, -75.0187, -75.0283, -75.0353, -75.0404,
        -75.0441, -75.0468, -75.0487, -75.0500, -75.0510, -75.0517, -75.0521,
        -75.0525, -75.0527, -75.0529, -75.0530, -75.0531, -75.0531, -75.0532,
        -75.0532, -75.0532, -75.0532, -75.0532], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4512e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.4512e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0527, -75.0529, -75.0530, -75.0531, -75.0531, -75.0532, -75.0532,
        -75.0532, -75.0532, -75.0532], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 18 	 19 	 O 	 O 	 4.624782409731328e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------16----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [16]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4584, -7.4651, -7.4674, -7.4686, -7.4696, -7.4705, -7.4709, -7.4707,
        -7.4705, -7.4703, -7.4703, -7.4703, -7.4704, -7.4704, -7.4705, -7.4705,
        -7.4705, -7.4705, -7.4705, -7.4705, -7.4705, -7.4705, -7.4705, -7.4706,
        -7.4706], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(8.8071e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(4.0175e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.7654e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4705, -7.4705, -7.4705, -7.4705, -7.4705, -7.4705, -7.4705, -7.4705,
        -7.4706, -7.4706], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 18 	 16 	 Li 	 Li 	 1.3181305718495205e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------18----------------
TRAINING ON MOLECULE:  ,Na
SUBMOLECULES: ['Na']
SUBMOLECULE INDICES: [18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2271, -162.2387, -162.2427, -162.2448, -162.2461, -162.2470,
        -162.2478, -162.2483, -162.2486, -162.2487, -162.2488, -162.2488,
        -162.2489, -162.2489, -162.2489, -162.2489, -162.2489, -162.2490,
        -162.2490, -162.2490, -162.2490, -162.2490, -162.2490, -162.2490,
        -162.2490], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.3840e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3840e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'Na': tensor([-162.2489, -162.2489, -162.2490, -162.2490, -162.2490, -162.2490,
        -162.2490, -162.2490, -162.2490, -162.2490], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 18 	 18 	 Na 	 Na 	 7.395741567952228e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  , 10LiH
SUBMOLECULES: ['HLi', 'Li', 'H']
SUBMOLECULE INDICES: [10, 16, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0923], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0923], dtype=torch.float64)
E_PRED: tensor([-7.9454, -8.0117, -8.0294, -8.0386, -8.0445, -8.0487, -8.0516, -8.0537,
        -8.0552, -8.0562, -8.0570, -8.0575, -8.0579, -8.0581, -8.0583, -8.0585,
        -8.0586, -8.0586, -8.0587, -8.0587, -8.0587, -8.0587, -8.0587, -8.0588,
        -8.0588], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 54, 54])
mo_energy   ---   torch.Size([2, 54])
dm_ref   ---   torch.Size([1, 2, 54, 54])
rho   ---   torch.Size([1, 2, 1271])
ao_eval   ---   torch.Size([1, 10, 1271, 54])
grid_weights   ---   torch.Size([1, 1271])
-8.038079906478378
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 54])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 54])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.1317e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.2634e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2970, -0.4525, -0.4720, -0.4813, -0.4870, -0.4908, -0.4934, -0.4952,
        -0.4965, -0.4973, -0.4979, -0.4984, -0.4987, -0.4989, -0.4990, -0.4991,
        -0.4992, -0.4992, -0.4993, -0.4993, -0.4993, -0.4993, -0.4993, -0.4993,
        -0.4993], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.2274e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.7024e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(4.1089e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4548, -7.4610, -7.4645, -7.4666, -7.4680, -7.4690, -7.4700, -7.4708,
        -7.4710, -7.4708, -7.4705, -7.4704, -7.4704, -7.4705, -7.4705, -7.4705,
        -7.4706, -7.4706, -7.4706, -7.4706, -7.4706, -7.4707, -7.4707, -7.4707,
        -7.4707], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(8.8479e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(3.9081e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.8824e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiH': tensor([-0.0923], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiH': tensor([-8.0585, -8.0586, -8.0586, -8.0587, -8.0587, -8.0587, -8.0587, -8.0587,
        -8.0588, -8.0588], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4991, -0.4992, -0.4992, -0.4993, -0.4993, -0.4993, -0.4993, -0.4993,
        -0.4993, -0.4993], dtype=torch.float64, grad_fn=<SliceBackward0>), 'Li': tensor([-7.4705, -7.4706, -7.4706, -7.4706, -7.4706, -7.4706, -7.4707, -7.4707,
        -7.4707, -7.4707], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 18 	 10 	 HLi 	 LiH 	 2.8878385390759363e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 12, 19, 19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.7665, -188.8511, -188.6591, -188.5458, -188.4758, -188.4280,
        -188.3946, -188.3711, -188.3544, -188.3426, -188.3343, -188.3283,
        -188.3241, -188.3211, -188.3190, -188.3174, -188.3163, -188.3156,
        -188.3150, -188.3146, -188.3143, -188.3141, -188.3140, -188.3139,
        -188.3138], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.4017587505662
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7415e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7327, -37.7685, -37.7866, -37.7974, -37.8049, -37.8102, -37.8140,
        -37.8168, -37.8187, -37.8201, -37.8211, -37.8218, -37.8223, -37.8226,
        -37.8229, -37.8231, -37.8232, -37.8233, -37.8233, -37.8234, -37.8234,
        -37.8234, -37.8234, -37.8234, -37.8234], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2632e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9598, -75.0028, -75.0204, -75.0305, -75.0374, -75.0424, -75.0459,
        -75.0484, -75.0502, -75.0515, -75.0524, -75.0530, -75.0535, -75.0538,
        -75.0540, -75.0542, -75.0543, -75.0544, -75.0544, -75.0545, -75.0545,
        -75.0545, -75.0545, -75.0545, -75.0545], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1858e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3174, -188.3163, -188.3156, -188.3150, -188.3146, -188.3143,
        -188.3141, -188.3140, -188.3139, -188.3138], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8231, -37.8232, -37.8233, -37.8233, -37.8234, -37.8234, -37.8234,
        -37.8234, -37.8234, -37.8234], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0542, -75.0543, -75.0544, -75.0544, -75.0545, -75.0545, -75.0545,
        -75.0545, -75.0545, -75.0545], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 18 	 4 	 CO2 	 CO2 	 0.013563551705234095

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 16, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2348, -107.2785, -107.2400, -107.2353, -107.2317, -107.2298,
        -107.2293, -107.2291, -107.2290, -107.2291, -107.2294, -107.2297,
        -107.2301, -107.2306, -107.2311, -107.2316, -107.2320, -107.2324,
        -107.2327, -107.2329, -107.2332, -107.2333, -107.2335, -107.2336,
        -107.2337], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.305942205048
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.5758e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6749, -99.6973, -99.7067, -99.7122, -99.7161, -99.7188, -99.7208,
        -99.7222, -99.7232, -99.7239, -99.7245, -99.7248, -99.7251, -99.7253,
        -99.7254, -99.7255, -99.7255, -99.7256, -99.7256, -99.7256, -99.7257,
        -99.7257, -99.7257, -99.7257, -99.7257], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.8945e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4577, -7.4647, -7.4672, -7.4685, -7.4695, -7.4704, -7.4710, -7.4709,
        -7.4706, -7.4705, -7.4704, -7.4705, -7.4705, -7.4705, -7.4706, -7.4706,
        -7.4706, -7.4706, -7.4706, -7.4707, -7.4707, -7.4707, -7.4707, -7.4707,
        -7.4707], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(8.8119e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(3.8886e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2316, -107.2320, -107.2324, -107.2327, -107.2329, -107.2332,
        -107.2333, -107.2335, -107.2336, -107.2337], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7255, -99.7255, -99.7256, -99.7256, -99.7256, -99.7257, -99.7257,
        -99.7257, -99.7257, -99.7257], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4706, -7.4706, -7.4706, -7.4706, -7.4707, -7.4707, -7.4707, -7.4707,
        -7.4707, -7.4707], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 18 	 2 	 FLi 	 LiF 	 0.008017083420147763

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 17, 17]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.9292, -109.3758, -109.4910, -109.4996, -109.4986, -109.4975,
        -109.4969, -109.4968, -109.4970, -109.4972, -109.4975, -109.4977,
        -109.4979, -109.4980, -109.4982, -109.4983, -109.4983, -109.4984,
        -109.4984, -109.4984, -109.4985, -109.4985, -109.4985, -109.4985,
        -109.4985], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018879
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.2401e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0002, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4414, -54.5069, -54.5303, -54.5433, -54.5519, -54.5579, -54.5622,
        -54.5652, -54.5673, -54.5688, -54.5699, -54.5706, -54.5711, -54.5715,
        -54.5718, -54.5719, -54.5721, -54.5722, -54.5722, -54.5723, -54.5723,
        -54.5723, -54.5723, -54.5723, -54.5723], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.0600e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0002, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4983, -109.4983, -109.4984, -109.4984, -109.4984, -109.4985,
        -109.4985, -109.4985, -109.4985, -109.4985], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5719, -54.5721, -54.5722, -54.5722, -54.5723, -54.5723, -54.5723,
        -54.5723, -54.5723, -54.5723], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 18 	 1 	 N2 	 N2 	 2.4391544513633693e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------17----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [17]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4041, -54.4656, -54.5001, -54.5212, -54.5358, -54.5463, -54.5539,
        -54.5593, -54.5632, -54.5659, -54.5678, -54.5692, -54.5701, -54.5708,
        -54.5713, -54.5716, -54.5718, -54.5720, -54.5721, -54.5722, -54.5722,
        -54.5723, -54.5723, -54.5723, -54.5723], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.1076e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.1076e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5716, -54.5718, -54.5720, -54.5721, -54.5722, -54.5722, -54.5723,
        -54.5723, -54.5723, -54.5723], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 18 	 17 	 N 	 N 	 6.67094995251446e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------13----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1134, -460.1359, -460.1427, -460.1465, -460.1490, -460.1507,
        -460.1519, -460.1528, -460.1534, -460.1538, -460.1542, -460.1544,
        -460.1545, -460.1546, -460.1547, -460.1548, -460.1548, -460.1548,
        -460.1549, -460.1549, -460.1549, -460.1549, -460.1549, -460.1549,
        -460.1549], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.3160e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3160e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1548, -460.1548, -460.1548, -460.1549, -460.1549, -460.1549,
        -460.1549, -460.1549, -460.1549, -460.1549], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 18 	 13 	 Cl 	 Cl 	 1.1086005992681051e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------15----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2535, -0.4400, -0.4650, -0.4768, -0.4840, -0.4887, -0.4920, -0.4942,
        -0.4958, -0.4968, -0.4976, -0.4981, -0.4985, -0.4987, -0.4989, -0.4990,
        -0.4991, -0.4992, -0.4992, -0.4993, -0.4993, -0.4993, -0.4993, -0.4993,
        -0.4993], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.2390e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(3.2055e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.8478e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4990, -0.4991, -0.4992, -0.4992, -0.4993, -0.4993, -0.4993, -0.4993,
        -0.4993, -0.4993], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 18 	 15 	 H 	 H 	 1.0706996775466077e-07

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e18)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e18/2022-11-29_10:09:21.574160_0.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e18/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 18 || ,[' rho : 2.905099', ' ae : 55.249821', ' E : 3.299261'] ,|| total loss 41.172469 || CHKPT: _0.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------12----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7361, -37.7743, -37.7909, -37.8005, -37.8071, -37.8117, -37.8151,
        -37.8174, -37.8191, -37.8203, -37.8212, -37.8218, -37.8222, -37.8225,
        -37.8227, -37.8229, -37.8230, -37.8231, -37.8231, -37.8231, -37.8232,
        -37.8232, -37.8232, -37.8232, -37.8232], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2935e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.2935e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8229, -37.8230, -37.8231, -37.8231, -37.8231, -37.8232, -37.8232,
        -37.8232, -37.8232, -37.8232], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 19 	 12 	 C 	 C 	 6.993320321127961e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 16, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2694, -107.2907, -107.2513, -107.2433, -107.2377, -107.2344,
        -107.2327, -107.2317, -107.2310, -107.2307, -107.2307, -107.2309,
        -107.2312, -107.2316, -107.2320, -107.2324, -107.2327, -107.2331,
        -107.2333, -107.2336, -107.2338, -107.2339, -107.2340, -107.2342,
        -107.2342], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.305942205048
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.5934e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6730, -99.6946, -99.7047, -99.7108, -99.7151, -99.7182, -99.7204,
        -99.7220, -99.7232, -99.7240, -99.7246, -99.7250, -99.7253, -99.7255,
        -99.7256, -99.7257, -99.7258, -99.7259, -99.7259, -99.7259, -99.7259,
        -99.7260, -99.7260, -99.7260, -99.7260], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.5752e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4571, -7.4642, -7.4668, -7.4682, -7.4691, -7.4701, -7.4708, -7.4707,
        -7.4704, -7.4703, -7.4702, -7.4702, -7.4703, -7.4703, -7.4703, -7.4704,
        -7.4704, -7.4704, -7.4704, -7.4704, -7.4704, -7.4704, -7.4705, -7.4705,
        -7.4705], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(8.6408e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(4.1209e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2324, -107.2327, -107.2331, -107.2333, -107.2336, -107.2338,
        -107.2339, -107.2340, -107.2342, -107.2342], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7257, -99.7258, -99.7259, -99.7259, -99.7259, -99.7259, -99.7260,
        -99.7260, -99.7260, -99.7260], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4704, -7.4704, -7.4704, -7.4704, -7.4704, -7.4704, -7.4704, -7.4705,
        -7.4705, -7.4705], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 19 	 2 	 FLi 	 LiF 	 0.007975556823684123

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,  8OC
SUBMOLECULES: ['CO', 'O', 'C']
SUBMOLECULE INDICES: [8, 19, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='OC', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4142], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4142], dtype=torch.float64)
E_PRED: tensor([-113.6565, -113.3923, -113.3301, -113.2969, -113.2768, -113.2629,
        -113.2533, -113.2466, -113.2419, -113.2385, -113.2362, -113.2346,
        -113.2334, -113.2326, -113.2321, -113.2317, -113.2314, -113.2312,
        -113.2311, -113.2310, -113.2309, -113.2309, -113.2308, -113.2308,
        -113.2308], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 3279])
ao_eval   ---   torch.Size([1, 10, 3279, 78])
grid_weights   ---   torch.Size([1, 3279])
-113.201730216515
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.3769e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7384, -37.7771, -37.7929, -37.8020, -37.8082, -37.8125, -37.8156,
        -37.8178, -37.8194, -37.8205, -37.8213, -37.8219, -37.8223, -37.8226,
        -37.8228, -37.8229, -37.8230, -37.8231, -37.8231, -37.8231, -37.8232,
        -37.8232, -37.8232, -37.8232, -37.8232], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2921e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9498, -74.9846, -75.0060, -75.0198, -75.0295, -75.0366, -75.0417,
        -75.0455, -75.0481, -75.0501, -75.0514, -75.0524, -75.0531, -75.0536,
        -75.0539, -75.0542, -75.0543, -75.0544, -75.0545, -75.0546, -75.0546,
        -75.0547, -75.0547, -75.0547, -75.0547], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1736e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'OC': tensor([-0.4142], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'OC': tensor([-113.2317, -113.2314, -113.2312, -113.2311, -113.2310, -113.2309,
        -113.2309, -113.2308, -113.2308, -113.2308], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8229, -37.8230, -37.8231, -37.8231, -37.8231, -37.8232, -37.8232,
        -37.8232, -37.8232, -37.8232], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0542, -75.0543, -75.0544, -75.0545, -75.0546, -75.0546, -75.0547,
        -75.0547, -75.0547, -75.0547], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 19 	 8 	 CO 	 OC 	 0.0008784158015453446

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  , 10LiH
SUBMOLECULES: ['HLi', 'Li', 'H']
SUBMOLECULE INDICES: [10, 16, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0923], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0923], dtype=torch.float64)
E_PRED: tensor([-7.9727, -8.0225, -8.0360, -8.0431, -8.0477, -8.0508, -8.0531, -8.0547,
        -8.0558, -8.0566, -8.0571, -8.0576, -8.0578, -8.0580, -8.0582, -8.0583,
        -8.0583, -8.0584, -8.0584, -8.0584, -8.0585, -8.0585, -8.0585, -8.0585,
        -8.0585], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 54, 54])
mo_energy   ---   torch.Size([2, 54])
dm_ref   ---   torch.Size([1, 2, 54, 54])
rho   ---   torch.Size([1, 2, 1271])
ao_eval   ---   torch.Size([1, 10, 1271, 54])
grid_weights   ---   torch.Size([1, 1271])
-8.038079906478378
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 54])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 54])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.1054e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.2108e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2919, -0.4511, -0.4712, -0.4808, -0.4867, -0.4906, -0.4933, -0.4951,
        -0.4964, -0.4973, -0.4979, -0.4983, -0.4986, -0.4988, -0.4990, -0.4991,
        -0.4992, -0.4992, -0.4993, -0.4993, -0.4993, -0.4993, -0.4993, -0.4993,
        -0.4993], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.2358e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.7961e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(4.0580e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4563, -7.4635, -7.4663, -7.4678, -7.4688, -7.4698, -7.4706, -7.4708,
        -7.4705, -7.4703, -7.4702, -7.4702, -7.4702, -7.4703, -7.4703, -7.4703,
        -7.4704, -7.4704, -7.4704, -7.4704, -7.4704, -7.4704, -7.4704, -7.4704,
        -7.4704], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(8.5963e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(4.1645e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.7814e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiH': tensor([-0.0923], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiH': tensor([-8.0583, -8.0583, -8.0584, -8.0584, -8.0584, -8.0585, -8.0585, -8.0585,
        -8.0585, -8.0585], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4991, -0.4992, -0.4992, -0.4993, -0.4993, -0.4993, -0.4993, -0.4993,
        -0.4993, -0.4993], dtype=torch.float64, grad_fn=<SliceBackward0>), 'Li': tensor([-7.4703, -7.4704, -7.4704, -7.4704, -7.4704, -7.4704, -7.4704, -7.4704,
        -7.4704, -7.4704], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 19 	 10 	 HLi 	 LiH 	 2.9012060178969854e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------13----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1138, -460.1363, -460.1431, -460.1469, -460.1493, -460.1511,
        -460.1523, -460.1532, -460.1538, -460.1542, -460.1545, -460.1548,
        -460.1549, -460.1550, -460.1551, -460.1552, -460.1552, -460.1552,
        -460.1552, -460.1552, -460.1553, -460.1553, -460.1553, -460.1553,
        -460.1553], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.6980e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.6980e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1552, -460.1552, -460.1552, -460.1552, -460.1552, -460.1553,
        -460.1553, -460.1553, -460.1553, -460.1553], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 19 	 13 	 Cl 	 Cl 	 1.2354981446917047e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,  9ClH
SUBMOLECULES: ['HCl', 'Cl', 'H']
SUBMOLECULE INDICES: [9, 13, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='ClH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1712], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1712], dtype=torch.float64)
E_PRED: tensor([-460.7600, -460.8001, -460.8114, -460.8172, -460.8209, -460.8234,
        -460.8251, -460.8263, -460.8272, -460.8278, -460.8282, -460.8285,
        -460.8287, -460.8288, -460.8289, -460.8290, -460.8290, -460.8291,
        -460.8291, -460.8291, -460.8291, -460.8291, -460.8291, -460.8291,
        -460.8291], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 62, 62])
mo_energy   ---   torch.Size([2, 62])
dm_ref   ---   torch.Size([1, 2, 62, 62])
rho   ---   torch.Size([1, 2, 1068])
ao_eval   ---   torch.Size([1, 10, 1068, 62])
grid_weights   ---   torch.Size([1, 1068])
-460.4234538667477
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 62])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 62])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(4.8178e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.6355e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0895, -460.1211, -460.1323, -460.1387, -460.1431, -460.1463,
        -460.1486, -460.1502, -460.1514, -460.1523, -460.1529, -460.1533,
        -460.1536, -460.1538, -460.1539, -460.1540, -460.1541, -460.1542,
        -460.1542, -460.1542, -460.1542, -460.1543, -460.1543, -460.1543,
        -460.1543], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.7143e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.6383e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2144, -0.4277, -0.4582, -0.4725, -0.4811, -0.4867, -0.4906, -0.4932,
        -0.4951, -0.4964, -0.4973, -0.4979, -0.4983, -0.4986, -0.4988, -0.4990,
        -0.4991, -0.4992, -0.4992, -0.4992, -0.4993, -0.4993, -0.4993, -0.4993,
        -0.4993], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.2259e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(3.8272e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClH': tensor([-0.1712], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'ClH': tensor([-460.8290, -460.8290, -460.8291, -460.8291, -460.8291, -460.8291,
        -460.8291, -460.8291, -460.8291, -460.8291], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1540, -460.1541, -460.1542, -460.1542, -460.1542, -460.1542,
        -460.1543, -460.1543, -460.1543, -460.1543], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4990, -0.4991, -0.4992, -0.4992, -0.4992, -0.4993, -0.4993, -0.4993,
        -0.4993, -0.4993], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 19 	 9 	 HCl 	 ClH 	 4.37168299024546e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------16----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [16]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4559, -7.4630, -7.4659, -7.4675, -7.4685, -7.4695, -7.4704, -7.4706,
        -7.4704, -7.4701, -7.4700, -7.4700, -7.4701, -7.4701, -7.4701, -7.4702,
        -7.4702, -7.4702, -7.4702, -7.4702, -7.4703, -7.4703, -7.4703, -7.4703,
        -7.4703], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(8.4833e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(4.3252e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.7010e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4702, -7.4702, -7.4702, -7.4702, -7.4702, -7.4703, -7.4703, -7.4703,
        -7.4703, -7.4703], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 19 	 16 	 Li 	 Li 	 1.4177333840841981e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 12, 17, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-94.1203, -93.5713, -93.4201, -93.3617, -93.3160, -93.2879, -93.2674,
        -93.2531, -93.2429, -93.2356, -93.2304, -93.2267, -93.2240, -93.2221,
        -93.2207, -93.2197, -93.2190, -93.2185, -93.2181, -93.2178, -93.2176,
        -93.2174, -93.2173, -93.2173, -93.2172], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633898
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.6310e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0005, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7500, -37.7869, -37.7997, -37.8068, -37.8115, -37.8148, -37.8171,
        -37.8188, -37.8199, -37.8208, -37.8214, -37.8218, -37.8221, -37.8223,
        -37.8224, -37.8225, -37.8226, -37.8226, -37.8227, -37.8227, -37.8227,
        -37.8227, -37.8227, -37.8227, -37.8227], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3583e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0005, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2974, -0.4526, -0.4721, -0.4814, -0.4870, -0.4908, -0.4934, -0.4952,
        -0.4964, -0.4973, -0.4979, -0.4983, -0.4986, -0.4988, -0.4990, -0.4991,
        -0.4992, -0.4992, -0.4992, -0.4993, -0.4993, -0.4993, -0.4993, -0.4993,
        -0.4993], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.2120e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.8409e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0005, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4223, -54.4914, -54.5192, -54.5352, -54.5459, -54.5535, -54.5588,
        -54.5626, -54.5653, -54.5673, -54.5686, -54.5695, -54.5702, -54.5707,
        -54.5710, -54.5712, -54.5714, -54.5715, -54.5716, -54.5716, -54.5717,
        -54.5717, -54.5717, -54.5717, -54.5717], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.2232e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0005, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2197, -93.2190, -93.2185, -93.2181, -93.2178, -93.2176, -93.2174,
        -93.2173, -93.2173, -93.2172], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8225, -37.8226, -37.8226, -37.8227, -37.8227, -37.8227, -37.8227,
        -37.8227, -37.8227, -37.8227], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4991, -0.4992, -0.4992, -0.4992, -0.4993, -0.4993, -0.4993, -0.4993,
        -0.4993, -0.4993], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5712, -54.5714, -54.5715, -54.5716, -54.5716, -54.5717, -54.5717,
        -54.5717, -54.5717, -54.5717], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 19 	 3 	 CHN 	 CNH 	 0.007220090879062019

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,  7CCHH
SUBMOLECULES: ['C2H2', 'C', 'C', 'H', 'H']
SUBMOLECULE INDICES: [7, 12, 12, 15, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C2H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6459], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6459], dtype=torch.float64)
E_PRED: tensor([-77.6914, -72.8234, -75.0026, -75.8227, -76.2864, -76.5858, -76.7883,
        -76.9278, -77.0249, -77.0928, -77.1405, -77.1739, -77.1973, -77.2138,
        -77.2253, -77.2334, -77.2391, -77.2432, -77.2460, -77.2479, -77.2493,
        -77.2503, -77.2510, -77.2515, -77.2518], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 108, 108])
mo_energy   ---   torch.Size([2, 108])
dm_ref   ---   torch.Size([1, 2, 108, 108])
rho   ---   torch.Size([1, 2, 1924])
ao_eval   ---   torch.Size([1, 10, 1924, 108])
grid_weights   ---   torch.Size([1, 1924])
-77.2336470993193
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 108])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 108])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6263e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7458, -37.7838, -37.7974, -37.8051, -37.8102, -37.8138, -37.8164,
        -37.8182, -37.8195, -37.8204, -37.8210, -37.8215, -37.8218, -37.8220,
        -37.8222, -37.8223, -37.8224, -37.8224, -37.8225, -37.8225, -37.8225,
        -37.8225, -37.8225, -37.8225, -37.8225], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3887e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2461, -0.4377, -0.4637, -0.4760, -0.4834, -0.4883, -0.4917, -0.4940,
        -0.4956, -0.4967, -0.4975, -0.4980, -0.4984, -0.4987, -0.4989, -0.4990,
        -0.4991, -0.4992, -0.4992, -0.4992, -0.4993, -0.4993, -0.4993, -0.4993,
        -0.4993], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.2019e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(3.4847e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CCHH': tensor([-0.6459], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'CCHH': tensor([-77.2334, -77.2391, -77.2432, -77.2460, -77.2479, -77.2493, -77.2503,
        -77.2510, -77.2515, -77.2518], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8223, -37.8224, -37.8224, -37.8225, -37.8225, -37.8225, -37.8225,
        -37.8225, -37.8225, -37.8225], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4990, -0.4991, -0.4992, -0.4992, -0.4992, -0.4993, -0.4993, -0.4993,
        -0.4993, -0.4993], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 19 	 7 	 C2H2 	 C2H2 	 0.0003429477076191917

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------18----------------
TRAINING ON MOLECULE:  ,Na
SUBMOLECULES: ['Na']
SUBMOLECULE INDICES: [18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2267, -162.2384, -162.2425, -162.2447, -162.2460, -162.2469,
        -162.2477, -162.2482, -162.2485, -162.2486, -162.2487, -162.2487,
        -162.2488, -162.2488, -162.2488, -162.2488, -162.2489, -162.2489,
        -162.2489, -162.2489, -162.2489, -162.2489, -162.2489, -162.2489,
        -162.2489], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.4847e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.4847e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'Na': tensor([-162.2488, -162.2489, -162.2489, -162.2489, -162.2489, -162.2489,
        -162.2489, -162.2489, -162.2489, -162.2489], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 19 	 18 	 Na 	 Na 	 7.614621166715498e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------17----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [17]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4342, -54.5012, -54.5260, -54.5399, -54.5491, -54.5556, -54.5602,
        -54.5634, -54.5657, -54.5674, -54.5685, -54.5693, -54.5699, -54.5703,
        -54.5705, -54.5707, -54.5709, -54.5710, -54.5710, -54.5711, -54.5711,
        -54.5711, -54.5711, -54.5711, -54.5712], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.3600e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.3600e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5707, -54.5709, -54.5710, -54.5710, -54.5711, -54.5711, -54.5711,
        -54.5711, -54.5711, -54.5712], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 19 	 17 	 N 	 N 	 7.61928940965011e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 17, 17]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.6733, -109.8995, -109.7510, -109.6692, -109.6165, -109.5804,
        -109.5553, -109.5377, -109.5255, -109.5169, -109.5109, -109.5067,
        -109.5037, -109.5017, -109.5002, -109.4992, -109.4985, -109.4980,
        -109.4977, -109.4974, -109.4973, -109.4971, -109.4971, -109.4970,
        -109.4970], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018879
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.2329e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0002, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4249, -54.4936, -54.5206, -54.5361, -54.5464, -54.5537, -54.5588,
        -54.5625, -54.5651, -54.5669, -54.5682, -54.5691, -54.5697, -54.5702,
        -54.5705, -54.5707, -54.5708, -54.5710, -54.5710, -54.5711, -54.5711,
        -54.5711, -54.5712, -54.5712, -54.5712], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.3605e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0002, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4992, -109.4985, -109.4980, -109.4977, -109.4974, -109.4973,
        -109.4971, -109.4971, -109.4970, -109.4970], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5707, -54.5708, -54.5710, -54.5710, -54.5711, -54.5711, -54.5711,
        -54.5712, -54.5712, -54.5712], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 19 	 1 	 N2 	 N2 	 2.0491081436570118e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------14----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6789, -99.7008, -99.7089, -99.7135, -99.7167, -99.7189, -99.7205,
        -99.7217, -99.7225, -99.7230, -99.7235, -99.7237, -99.7240, -99.7241,
        -99.7242, -99.7243, -99.7243, -99.7244, -99.7244, -99.7244, -99.7244,
        -99.7244, -99.7244, -99.7244, -99.7244], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(6.4487e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.4487e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7243, -99.7243, -99.7244, -99.7244, -99.7244, -99.7244, -99.7244,
        -99.7244, -99.7244, -99.7244], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 19 	 14 	 F 	 F 	 2.0955909562821364e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 13, 13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4649, -920.4296, -920.4209, -920.4161, -920.4130, -920.4109,
        -920.4093, -920.4083, -920.4075, -920.4070, -920.4066, -920.4064,
        -920.4062, -920.4061, -920.4060, -920.4059, -920.4059, -920.4058,
        -920.4058, -920.4058, -920.4058, -920.4058, -920.4058, -920.4058,
        -920.4058], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885617
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.7277e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.4555e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1024, -460.1275, -460.1355, -460.1399, -460.1428, -460.1448,
        -460.1463, -460.1473, -460.1481, -460.1486, -460.1490, -460.1492,
        -460.1494, -460.1496, -460.1497, -460.1497, -460.1498, -460.1498,
        -460.1498, -460.1498, -460.1498, -460.1499, -460.1499, -460.1499,
        -460.1499], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.3518e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.4557e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4059, -920.4059, -920.4058, -920.4058, -920.4058, -920.4058,
        -920.4058, -920.4058, -920.4058, -920.4058], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1497, -460.1498, -460.1498, -460.1498, -460.1498, -460.1498,
        -460.1499, -460.1499, -460.1499, -460.1499], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 19 	 5 	 Cl2 	 Cl2 	 3.092244481232157e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------15----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3252, -0.4601, -0.4763, -0.4841, -0.4889, -0.4921, -0.4943, -0.4958,
        -0.4969, -0.4976, -0.4981, -0.4985, -0.4987, -0.4989, -0.4990, -0.4991,
        -0.4992, -0.4992, -0.4992, -0.4993, -0.4993, -0.4993, -0.4993, -0.4993,
        -0.4993], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.1932e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.6775e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.8387e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4991, -0.4992, -0.4992, -0.4992, -0.4993, -0.4993, -0.4993, -0.4993,
        -0.4993, -0.4993], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 19 	 15 	 H 	 H 	 1.188265874876684e-07

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 15, 15]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-0.9751, -1.0918, -1.1220, -1.1375, -1.1473, -1.1539, -1.1585, -1.1617,
        -1.1640, -1.1656, -1.1667, -1.1674, -1.1680, -1.1683, -1.1686, -1.1688,
        -1.1689, -1.1690, -1.1691, -1.1691, -1.1692, -1.1692, -1.1692, -1.1692,
        -1.1692], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668206
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.8294e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.6588e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2992, -0.4531, -0.4723, -0.4815, -0.4872, -0.4909, -0.4935, -0.4952,
        -0.4965, -0.4973, -0.4979, -0.4983, -0.4986, -0.4988, -0.4990, -0.4991,
        -0.4991, -0.4992, -0.4992, -0.4992, -0.4993, -0.4993, -0.4993, -0.4993,
        -0.4993], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.1954e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.9184e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.4979e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1688, -1.1689, -1.1690, -1.1691, -1.1691, -1.1692, -1.1692, -1.1692,
        -1.1692, -1.1692], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4991, -0.4991, -0.4992, -0.4992, -0.4992, -0.4993, -0.4993, -0.4993,
        -0.4993, -0.4993], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 19 	 0 	 H2 	 H2 	 3.2298472162604276e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 12, 19, 19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.6664, -188.8126, -188.6343, -188.5292, -188.4643, -188.4200,
        -188.3891, -188.3672, -188.3518, -188.3409, -188.3331, -188.3276,
        -188.3237, -188.3209, -188.3189, -188.3175, -188.3165, -188.3158,
        -188.3152, -188.3149, -188.3146, -188.3144, -188.3143, -188.3142,
        -188.3141], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.4017587505662
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7292e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7517, -37.7881, -37.8005, -37.8073, -37.8118, -37.8150, -37.8173,
        -37.8189, -37.8200, -37.8208, -37.8214, -37.8218, -37.8220, -37.8222,
        -37.8224, -37.8225, -37.8225, -37.8226, -37.8226, -37.8226, -37.8227,
        -37.8227, -37.8227, -37.8227, -37.8227], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3635e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9494, -74.9860, -75.0071, -75.0204, -75.0298, -75.0366, -75.0415,
        -75.0451, -75.0477, -75.0495, -75.0509, -75.0518, -75.0524, -75.0529,
        -75.0532, -75.0535, -75.0536, -75.0537, -75.0538, -75.0539, -75.0539,
        -75.0539, -75.0540, -75.0540, -75.0540], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3062e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3175, -188.3165, -188.3158, -188.3152, -188.3149, -188.3146,
        -188.3144, -188.3143, -188.3142, -188.3141], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8225, -37.8225, -37.8226, -37.8226, -37.8226, -37.8227, -37.8227,
        -37.8227, -37.8227, -37.8227], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0535, -75.0536, -75.0537, -75.0538, -75.0539, -75.0539, -75.0539,
        -75.0540, -75.0540, -75.0540], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 19 	 4 	 CO2 	 CO2 	 0.013318980228086762

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------19----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9492, -74.9832, -75.0047, -75.0185, -75.0283, -75.0354, -75.0407,
        -75.0444, -75.0472, -75.0491, -75.0505, -75.0515, -75.0522, -75.0527,
        -75.0530, -75.0533, -75.0534, -75.0536, -75.0536, -75.0537, -75.0537,
        -75.0538, -75.0538, -75.0538, -75.0538], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3416e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.3416e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0533, -75.0534, -75.0536, -75.0536, -75.0537, -75.0537, -75.0538,
        -75.0538, -75.0538, -75.0538], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 19 	 19 	 O 	 O 	 4.264012920045518e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,  6FF
SUBMOLECULES: ['F2', 'F', 'F']
SUBMOLECULE INDICES: [6, 14, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0618], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0618], dtype=torch.float64)
E_PRED: tensor([-199.6114, -199.5569, -199.5426, -199.5353, -199.5306, -199.5274,
        -199.5252, -199.5237, -199.5226, -199.5218, -199.5213, -199.5209,
        -199.5206, -199.5205, -199.5203, -199.5202, -199.5202, -199.5201,
        -199.5201, -199.5201, -199.5200, -199.5200, -199.5200, -199.5200,
        -199.5200], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 4698])
ao_eval   ---   torch.Size([1, 10, 4698, 78])
grid_weights   ---   torch.Size([1, 4698])
-199.3364659747656
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.5408e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.0816e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6757, -99.6979, -99.7070, -99.7123, -99.7159, -99.7185, -99.7204,
        -99.7217, -99.7227, -99.7234, -99.7239, -99.7242, -99.7245, -99.7246,
        -99.7248, -99.7248, -99.7249, -99.7249, -99.7250, -99.7250, -99.7250,
        -99.7250, -99.7250, -99.7250, -99.7250], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.6842e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.0873e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'FF': tensor([-0.0618], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'FF': tensor([-199.5202, -199.5202, -199.5201, -199.5201, -199.5201, -199.5200,
        -199.5200, -199.5200, -199.5200, -199.5200], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7248, -99.7249, -99.7249, -99.7250, -99.7250, -99.7250, -99.7250,
        -99.7250, -99.7250, -99.7250], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 19 	 6 	 F2 	 F2 	 1.5509630398838067e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  , 11NaNa
SUBMOLECULES: ['Na2', 'Na', 'Na']
SUBMOLECULE INDICES: [11, 18, 18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0273], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0273], dtype=torch.float64)
E_PRED: tensor([-324.6156, -324.5602, -324.5458, -324.5385, -324.5338, -324.5307,
        -324.5285, -324.5270, -324.5259, -324.5252, -324.5247, -324.5243,
        -324.5240, -324.5239, -324.5237, -324.5236, -324.5236, -324.5235,
        -324.5235, -324.5235, -324.5235, -324.5235, -324.5234, -324.5234,
        -324.5234], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 1992])
ao_eval   ---   torch.Size([1, 10, 1992, 94])
grid_weights   ---   torch.Size([1, 1992])
-324.03216786711033
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(4.4335e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.8669e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2317, -162.2418, -162.2450, -162.2465, -162.2475, -162.2483,
        -162.2489, -162.2492, -162.2493, -162.2494, -162.2495, -162.2495,
        -162.2495, -162.2496, -162.2496, -162.2496, -162.2496, -162.2496,
        -162.2496, -162.2496, -162.2496, -162.2496, -162.2496, -162.2496,
        -162.2496], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.6275e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.8695e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NaNa': tensor([-0.0273], dtype=torch.float64), 'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'NaNa': tensor([-324.5236, -324.5236, -324.5235, -324.5235, -324.5235, -324.5235,
        -324.5235, -324.5234, -324.5234, -324.5234], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Na': tensor([-162.2496, -162.2496, -162.2496, -162.2496, -162.2496, -162.2496,
        -162.2496, -162.2496, -162.2496, -162.2496], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 19 	 11 	 Na2 	 Na2 	 2.3595285161669368e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e19)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e19/2022-11-29_10:09:21.574160_1.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e19/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 19 || ,[' rho : 2.902169', ' ae : 54.826786', ' E : 3.292986'] ,|| total loss 40.884573 || CHKPT: _1.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 16, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.3133, -107.3049, -107.2653, -107.2526, -107.2445, -107.2395,
        -107.2363, -107.2341, -107.2327, -107.2320, -107.2316, -107.2316,
        -107.2317, -107.2319, -107.2322, -107.2325, -107.2327, -107.2330,
        -107.2332, -107.2334, -107.2335, -107.2336, -107.2338, -107.2338,
        -107.2339], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.305942205048
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.5959e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6748, -99.6970, -99.7063, -99.7118, -99.7156, -99.7183, -99.7202,
        -99.7216, -99.7226, -99.7233, -99.7238, -99.7242, -99.7245, -99.7246,
        -99.7248, -99.7248, -99.7249, -99.7249, -99.7250, -99.7250, -99.7250,
        -99.7250, -99.7250, -99.7250, -99.7250], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.6717e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4553, -7.4623, -7.4654, -7.4671, -7.4682, -7.4691, -7.4701, -7.4704,
        -7.4702, -7.4700, -7.4698, -7.4698, -7.4699, -7.4699, -7.4699, -7.4700,
        -7.4700, -7.4700, -7.4700, -7.4700, -7.4701, -7.4701, -7.4701, -7.4701,
        -7.4701], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(8.1068e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(4.5488e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2325, -107.2327, -107.2330, -107.2332, -107.2334, -107.2335,
        -107.2336, -107.2338, -107.2338, -107.2339], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7248, -99.7249, -99.7249, -99.7250, -99.7250, -99.7250, -99.7250,
        -99.7250, -99.7250, -99.7250], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4700, -7.4700, -7.4700, -7.4700, -7.4700, -7.4701, -7.4701, -7.4701,
        -7.4701, -7.4701], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 20 	 2 	 FLi 	 LiF 	 0.007889331311159748

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------19----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9601, -75.0028, -75.0202, -75.0302, -75.0370, -75.0418, -75.0453,
        -75.0478, -75.0496, -75.0508, -75.0517, -75.0523, -75.0528, -75.0531,
        -75.0533, -75.0535, -75.0536, -75.0536, -75.0537, -75.0537, -75.0538,
        -75.0538, -75.0538, -75.0538, -75.0538], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3207e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.3207e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0535, -75.0536, -75.0536, -75.0537, -75.0537, -75.0538, -75.0538,
        -75.0538, -75.0538, -75.0538], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 20 	 19 	 O 	 O 	 4.258191996668534e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,  6FF
SUBMOLECULES: ['F2', 'F', 'F']
SUBMOLECULE INDICES: [6, 14, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0618], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0618], dtype=torch.float64)
E_PRED: tensor([-199.6342, -199.5668, -199.5490, -199.5399, -199.5340, -199.5300,
        -199.5273, -199.5253, -199.5240, -199.5230, -199.5223, -199.5218,
        -199.5215, -199.5213, -199.5211, -199.5210, -199.5209, -199.5209,
        -199.5208, -199.5208, -199.5208, -199.5208, -199.5207, -199.5207,
        -199.5207], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 4698])
ao_eval   ---   torch.Size([1, 10, 4698, 78])
grid_weights   ---   torch.Size([1, 4698])
-199.3364659747656
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.5716e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.1431e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6736, -99.6955, -99.7053, -99.7111, -99.7151, -99.7180, -99.7201,
        -99.7216, -99.7227, -99.7235, -99.7240, -99.7244, -99.7247, -99.7249,
        -99.7250, -99.7251, -99.7252, -99.7252, -99.7253, -99.7253, -99.7253,
        -99.7253, -99.7253, -99.7253, -99.7253], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.3254e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.1485e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'FF': tensor([-0.0618], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'FF': tensor([-199.5210, -199.5209, -199.5209, -199.5208, -199.5208, -199.5208,
        -199.5208, -199.5207, -199.5207, -199.5207], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7251, -99.7252, -99.7252, -99.7253, -99.7253, -99.7253, -99.7253,
        -99.7253, -99.7253, -99.7253], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 20 	 6 	 F2 	 F2 	 1.5956760348014566e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------15----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2123, -0.4270, -0.4578, -0.4722, -0.4809, -0.4866, -0.4905, -0.4932,
        -0.4950, -0.4963, -0.4972, -0.4978, -0.4983, -0.4986, -0.4988, -0.4989,
        -0.4990, -0.4991, -0.4992, -0.4992, -0.4992, -0.4993, -0.4993, -0.4993,
        -0.4993], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.1997e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(4.0687e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.8400e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4989, -0.4990, -0.4991, -0.4992, -0.4992, -0.4992, -0.4993, -0.4993,
        -0.4993, -0.4993], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 20 	 15 	 H 	 H 	 1.2421609785940928e-07

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------18----------------
TRAINING ON MOLECULE:  ,Na
SUBMOLECULES: ['Na']
SUBMOLECULE INDICES: [18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2252, -162.2378, -162.2426, -162.2453, -162.2470, -162.2481,
        -162.2490, -162.2497, -162.2501, -162.2503, -162.2504, -162.2505,
        -162.2505, -162.2506, -162.2506, -162.2506, -162.2507, -162.2507,
        -162.2507, -162.2507, -162.2507, -162.2507, -162.2507, -162.2507,
        -162.2507], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6419e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.6419e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'Na': tensor([-162.2506, -162.2507, -162.2507, -162.2507, -162.2507, -162.2507,
        -162.2507, -162.2507, -162.2507, -162.2507], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 20 	 18 	 Na 	 Na 	 3.5669055936882587e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,  8OC
SUBMOLECULES: ['CO', 'O', 'C']
SUBMOLECULE INDICES: [8, 19, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='OC', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4142], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4142], dtype=torch.float64)
E_PRED: tensor([-113.6077, -113.3733, -113.3185, -113.2891, -113.2714, -113.2592,
        -113.2507, -113.2448, -113.2406, -113.2377, -113.2356, -113.2342,
        -113.2332, -113.2325, -113.2320, -113.2316, -113.2314, -113.2312,
        -113.2311, -113.2310, -113.2309, -113.2309, -113.2309, -113.2308,
        -113.2308], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 3279])
ao_eval   ---   torch.Size([1, 10, 3279, 78])
grid_weights   ---   torch.Size([1, 3279])
-113.201730216515
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.3643e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7344, -37.7720, -37.7890, -37.7990, -37.8058, -37.8106, -37.8141,
        -37.8166, -37.8184, -37.8196, -37.8205, -37.8212, -37.8216, -37.8219,
        -37.8221, -37.8223, -37.8224, -37.8225, -37.8225, -37.8226, -37.8226,
        -37.8226, -37.8226, -37.8226, -37.8226], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3821e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9527, -74.9937, -75.0134, -75.0253, -75.0335, -75.0395, -75.0438,
        -75.0469, -75.0491, -75.0507, -75.0518, -75.0526, -75.0531, -75.0535,
        -75.0538, -75.0540, -75.0541, -75.0542, -75.0543, -75.0543, -75.0544,
        -75.0544, -75.0544, -75.0544, -75.0544], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2110e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'OC': tensor([-0.4142], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'OC': tensor([-113.2316, -113.2314, -113.2312, -113.2311, -113.2310, -113.2309,
        -113.2309, -113.2309, -113.2308, -113.2308], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8223, -37.8224, -37.8225, -37.8225, -37.8226, -37.8226, -37.8226,
        -37.8226, -37.8226, -37.8226], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0540, -75.0541, -75.0542, -75.0543, -75.0543, -75.0544, -75.0544,
        -75.0544, -75.0544, -75.0544], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 20 	 8 	 CO 	 OC 	 0.0008532228285481839

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 12, 17, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-94.1490, -93.5833, -93.4264, -93.3669, -93.3197, -93.2909, -93.2698,
        -93.2552, -93.2447, -93.2373, -93.2320, -93.2282, -93.2254, -93.2235,
        -93.2221, -93.2210, -93.2203, -93.2198, -93.2194, -93.2191, -93.2189,
        -93.2188, -93.2186, -93.2186, -93.2185], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633898
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.6068e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0005, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7424, -37.7809, -37.7954, -37.8037, -37.8092, -37.8132, -37.8159,
        -37.8179, -37.8193, -37.8203, -37.8210, -37.8215, -37.8219, -37.8221,
        -37.8223, -37.8224, -37.8225, -37.8226, -37.8226, -37.8226, -37.8227,
        -37.8227, -37.8227, -37.8227, -37.8227], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3663e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0005, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3128, -0.4568, -0.4744, -0.4829, -0.4881, -0.4915, -0.4939, -0.4955,
        -0.4967, -0.4975, -0.4980, -0.4984, -0.4987, -0.4989, -0.4990, -0.4991,
        -0.4991, -0.4992, -0.4992, -0.4992, -0.4993, -0.4993, -0.4993, -0.4993,
        -0.4993], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.2105e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.7948e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0005, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4156, -54.4844, -54.5142, -54.5316, -54.5433, -54.5517, -54.5576,
        -54.5618, -54.5648, -54.5669, -54.5684, -54.5695, -54.5702, -54.5707,
        -54.5711, -54.5714, -54.5715, -54.5717, -54.5718, -54.5718, -54.5719,
        -54.5719, -54.5719, -54.5719, -54.5719], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.1818e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0005, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2210, -93.2203, -93.2198, -93.2194, -93.2191, -93.2189, -93.2188,
        -93.2186, -93.2186, -93.2185], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8224, -37.8225, -37.8226, -37.8226, -37.8226, -37.8227, -37.8227,
        -37.8227, -37.8227, -37.8227], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4991, -0.4991, -0.4992, -0.4992, -0.4992, -0.4993, -0.4993, -0.4993,
        -0.4993, -0.4993], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5714, -54.5715, -54.5717, -54.5718, -54.5718, -54.5719, -54.5719,
        -54.5719, -54.5719, -54.5719], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 20 	 3 	 CHN 	 CNH 	 0.007125593563882468

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  , 10LiH
SUBMOLECULES: ['HLi', 'Li', 'H']
SUBMOLECULE INDICES: [10, 16, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0923], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0923], dtype=torch.float64)
E_PRED: tensor([-7.9510, -8.0137, -8.0304, -8.0391, -8.0448, -8.0488, -8.0516, -8.0535,
        -8.0550, -8.0560, -8.0567, -8.0572, -8.0575, -8.0578, -8.0580, -8.0581,
        -8.0582, -8.0582, -8.0583, -8.0583, -8.0583, -8.0583, -8.0584, -8.0584,
        -8.0584], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 54, 54])
mo_energy   ---   torch.Size([2, 54])
dm_ref   ---   torch.Size([1, 2, 54, 54])
rho   ---   torch.Size([1, 2, 1271])
ao_eval   ---   torch.Size([1, 10, 1271, 54])
grid_weights   ---   torch.Size([1, 1271])
-8.038079906478378
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 54])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 54])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.0501e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.1002e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3093, -0.4559, -0.4739, -0.4825, -0.4878, -0.4914, -0.4938, -0.4954,
        -0.4966, -0.4974, -0.4980, -0.4984, -0.4987, -0.4988, -0.4990, -0.4991,
        -0.4991, -0.4992, -0.4992, -0.4992, -0.4993, -0.4993, -0.4993, -0.4993,
        -0.4993], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.2097e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.8384e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.9422e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4548, -7.4615, -7.4648, -7.4667, -7.4679, -7.4688, -7.4698, -7.4704,
        -7.4703, -7.4700, -7.4698, -7.4698, -7.4698, -7.4699, -7.4699, -7.4699,
        -7.4700, -7.4700, -7.4700, -7.4700, -7.4700, -7.4700, -7.4701, -7.4701,
        -7.4701], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(8.0148e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(4.5722e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.5497e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiH': tensor([-0.0923], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiH': tensor([-8.0581, -8.0582, -8.0582, -8.0583, -8.0583, -8.0583, -8.0583, -8.0584,
        -8.0584, -8.0584], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4991, -0.4991, -0.4992, -0.4992, -0.4992, -0.4993, -0.4993, -0.4993,
        -0.4993, -0.4993], dtype=torch.float64, grad_fn=<SliceBackward0>), 'Li': tensor([-7.4699, -7.4700, -7.4700, -7.4700, -7.4700, -7.4700, -7.4700, -7.4701,
        -7.4701, -7.4701], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 20 	 10 	 HLi 	 LiH 	 2.4802211808695748e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,  7CCHH
SUBMOLECULES: ['C2H2', 'C', 'C', 'H', 'H']
SUBMOLECULE INDICES: [7, 12, 12, 15, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C2H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6459], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6459], dtype=torch.float64)
E_PRED: tensor([-77.8009, -72.8600, -75.0034, -75.8175, -76.2813, -76.5819, -76.7858,
        -76.9266, -77.0245, -77.0931, -77.1411, -77.1748, -77.1984, -77.2150,
        -77.2267, -77.2348, -77.2406, -77.2446, -77.2474, -77.2494, -77.2508,
        -77.2518, -77.2525, -77.2530, -77.2533], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 108, 108])
mo_energy   ---   torch.Size([2, 108])
dm_ref   ---   torch.Size([1, 2, 108, 108])
rho   ---   torch.Size([1, 2, 1924])
ao_eval   ---   torch.Size([1, 10, 1924, 108])
grid_weights   ---   torch.Size([1, 1924])
-77.2336470993193
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 108])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 108])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6125e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7345, -37.7720, -37.7890, -37.7990, -37.8058, -37.8106, -37.8141,
        -37.8166, -37.8184, -37.8197, -37.8206, -37.8212, -37.8216, -37.8219,
        -37.8222, -37.8223, -37.8224, -37.8225, -37.8226, -37.8226, -37.8226,
        -37.8226, -37.8227, -37.8227, -37.8227], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3765e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2453, -0.4374, -0.4636, -0.4759, -0.4834, -0.4883, -0.4917, -0.4940,
        -0.4956, -0.4967, -0.4975, -0.4980, -0.4984, -0.4987, -0.4989, -0.4990,
        -0.4991, -0.4991, -0.4992, -0.4992, -0.4992, -0.4993, -0.4993, -0.4993,
        -0.4993], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.2083e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(3.5828e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CCHH': tensor([-0.6459], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'CCHH': tensor([-77.2348, -77.2406, -77.2446, -77.2474, -77.2494, -77.2508, -77.2518,
        -77.2525, -77.2530, -77.2533], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8223, -37.8224, -37.8225, -37.8226, -37.8226, -37.8226, -37.8226,
        -37.8227, -37.8227, -37.8227], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4990, -0.4991, -0.4991, -0.4992, -0.4992, -0.4992, -0.4993, -0.4993,
        -0.4993, -0.4993], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 20 	 7 	 C2H2 	 C2H2 	 0.00032037133206612087

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 13, 13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4515, -920.4295, -920.4244, -920.4217, -920.4200, -920.4188,
        -920.4180, -920.4175, -920.4171, -920.4168, -920.4166, -920.4165,
        -920.4164, -920.4164, -920.4163, -920.4163, -920.4163, -920.4163,
        -920.4162, -920.4162, -920.4162, -920.4162, -920.4162, -920.4162,
        -920.4162], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885617
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.7589e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.5177e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0911, -460.1224, -460.1334, -460.1398, -460.1441, -460.1472,
        -460.1494, -460.1510, -460.1522, -460.1530, -460.1536, -460.1540,
        -460.1543, -460.1545, -460.1547, -460.1548, -460.1548, -460.1549,
        -460.1549, -460.1549, -460.1550, -460.1550, -460.1550, -460.1550,
        -460.1550], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.3769e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.5211e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4163, -920.4163, -920.4163, -920.4162, -920.4162, -920.4162,
        -920.4162, -920.4162, -920.4162, -920.4162], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1548, -460.1548, -460.1549, -460.1549, -460.1549, -460.1550,
        -460.1550, -460.1550, -460.1550, -460.1550], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 20 	 5 	 Cl2 	 Cl2 	 3.209231080830483e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------16----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [16]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4555, -7.4625, -7.4655, -7.4671, -7.4682, -7.4692, -7.4701, -7.4704,
        -7.4702, -7.4699, -7.4698, -7.4698, -7.4698, -7.4699, -7.4699, -7.4700,
        -7.4700, -7.4700, -7.4700, -7.4700, -7.4700, -7.4700, -7.4701, -7.4701,
        -7.4701], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(7.9205e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(4.5719e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.5887e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4700, -7.4700, -7.4700, -7.4700, -7.4700, -7.4700, -7.4700, -7.4701,
        -7.4701, -7.4701], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 20 	 16 	 Li 	 Li 	 1.4983655351265268e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------13----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1081, -460.1330, -460.1409, -460.1452, -460.1481, -460.1501,
        -460.1516, -460.1526, -460.1533, -460.1539, -460.1542, -460.1545,
        -460.1547, -460.1548, -460.1549, -460.1550, -460.1550, -460.1550,
        -460.1551, -460.1551, -460.1551, -460.1551, -460.1551, -460.1551,
        -460.1551], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.5110e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.5110e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1550, -460.1550, -460.1550, -460.1551, -460.1551, -460.1551,
        -460.1551, -460.1551, -460.1551, -460.1551], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 20 	 13 	 Cl 	 Cl 	 1.17602174919304e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 15, 15]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0507, -1.1219, -1.1404, -1.1499, -1.1559, -1.1600, -1.1628, -1.1648,
        -1.1661, -1.1671, -1.1678, -1.1682, -1.1686, -1.1688, -1.1690, -1.1691,
        -1.1691, -1.1692, -1.1692, -1.1693, -1.1693, -1.1693, -1.1693, -1.1693,
        -1.1693], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668206
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.8888e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.7776e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2569, -0.4409, -0.4655, -0.4771, -0.4842, -0.4889, -0.4920, -0.4942,
        -0.4958, -0.4968, -0.4976, -0.4981, -0.4984, -0.4987, -0.4989, -0.4990,
        -0.4991, -0.4991, -0.4992, -0.4992, -0.4992, -0.4993, -0.4993, -0.4993,
        -0.4993], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.1983e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(3.4966e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.6173e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1691, -1.1691, -1.1692, -1.1692, -1.1693, -1.1693, -1.1693, -1.1693,
        -1.1693, -1.1693], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4990, -0.4991, -0.4991, -0.4992, -0.4992, -0.4992, -0.4993, -0.4993,
        -0.4993, -0.4993], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 20 	 0 	 H2 	 H2 	 2.9639558701064637e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 17, 17]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.6504, -109.9049, -109.7541, -109.6718, -109.6188, -109.5825,
        -109.5573, -109.5396, -109.5273, -109.5186, -109.5126, -109.5083,
        -109.5054, -109.5033, -109.5019, -109.5008, -109.5001, -109.4996,
        -109.4993, -109.4990, -109.4989, -109.4987, -109.4987, -109.4986,
        -109.4986], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018879
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.2324e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0002, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4071, -54.4727, -54.5053, -54.5249, -54.5384, -54.5480, -54.5548,
        -54.5597, -54.5632, -54.5657, -54.5674, -54.5687, -54.5695, -54.5701,
        -54.5706, -54.5709, -54.5711, -54.5712, -54.5713, -54.5714, -54.5714,
        -54.5715, -54.5715, -54.5715, -54.5715], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.2959e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0002, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.5008, -109.5001, -109.4996, -109.4993, -109.4990, -109.4989,
        -109.4987, -109.4987, -109.4986, -109.4986], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5709, -54.5711, -54.5712, -54.5713, -54.5714, -54.5714, -54.5715,
        -54.5715, -54.5715, -54.5715], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 20 	 1 	 N2 	 N2 	 1.6666824913921188e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7335, -37.7705, -37.7878, -37.7980, -37.8050, -37.8099, -37.8135,
        -37.8161, -37.8179, -37.8192, -37.8201, -37.8207, -37.8212, -37.8215,
        -37.8217, -37.8219, -37.8220, -37.8221, -37.8221, -37.8222, -37.8222,
        -37.8222, -37.8222, -37.8223, -37.8223], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4399e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.4399e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8219, -37.8220, -37.8221, -37.8221, -37.8222, -37.8222, -37.8222,
        -37.8222, -37.8223, -37.8223], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 20 	 12 	 C 	 C 	 7.781930649550706e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  , 11NaNa
SUBMOLECULES: ['Na2', 'Na', 'Na']
SUBMOLECULE INDICES: [11, 18, 18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0273], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0273], dtype=torch.float64)
E_PRED: tensor([-324.6445, -324.5721, -324.5533, -324.5437, -324.5377, -324.5336,
        -324.5307, -324.5288, -324.5274, -324.5264, -324.5258, -324.5253,
        -324.5250, -324.5247, -324.5246, -324.5245, -324.5244, -324.5243,
        -324.5243, -324.5243, -324.5242, -324.5242, -324.5242, -324.5242,
        -324.5242], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 1992])
ao_eval   ---   torch.Size([1, 10, 1992, 94])
grid_weights   ---   torch.Size([1, 1992])
-324.03216786711033
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(4.4558e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.9115e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2279, -162.2396, -162.2436, -162.2458, -162.2471, -162.2480,
        -162.2488, -162.2493, -162.2496, -162.2497, -162.2497, -162.2498,
        -162.2498, -162.2499, -162.2499, -162.2499, -162.2499, -162.2499,
        -162.2500, -162.2500, -162.2500, -162.2500, -162.2500, -162.2500,
        -162.2500], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.3015e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.9138e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NaNa': tensor([-0.0273], dtype=torch.float64), 'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'NaNa': tensor([-324.5245, -324.5244, -324.5243, -324.5243, -324.5243, -324.5242,
        -324.5242, -324.5242, -324.5242, -324.5242], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Na': tensor([-162.2499, -162.2499, -162.2499, -162.2500, -162.2500, -162.2500,
        -162.2500, -162.2500, -162.2500, -162.2500], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 20 	 11 	 Na2 	 Na2 	 2.190023585484067e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,  9ClH
SUBMOLECULES: ['HCl', 'Cl', 'H']
SUBMOLECULE INDICES: [9, 13, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='ClH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1712], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1712], dtype=torch.float64)
E_PRED: tensor([-460.7586, -460.7977, -460.8087, -460.8144, -460.8180, -460.8205,
        -460.8222, -460.8233, -460.8242, -460.8247, -460.8252, -460.8254,
        -460.8256, -460.8258, -460.8259, -460.8259, -460.8260, -460.8260,
        -460.8261, -460.8261, -460.8261, -460.8261, -460.8261, -460.8261,
        -460.8261], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 62, 62])
mo_energy   ---   torch.Size([2, 62])
dm_ref   ---   torch.Size([1, 2, 62, 62])
rho   ---   torch.Size([1, 2, 1068])
ao_eval   ---   torch.Size([1, 10, 1068, 62])
grid_weights   ---   torch.Size([1, 1068])
-460.4234538667477
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 62])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 62])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(4.7915e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.5830e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1065, -460.1304, -460.1378, -460.1419, -460.1446, -460.1465,
        -460.1479, -460.1488, -460.1495, -460.1500, -460.1504, -460.1506,
        -460.1508, -460.1509, -460.1510, -460.1510, -460.1511, -460.1511,
        -460.1511, -460.1511, -460.1512, -460.1512, -460.1512, -460.1512,
        -460.1512], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(6.9046e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.5837e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2433, -0.4368, -0.4632, -0.4756, -0.4832, -0.4882, -0.4916, -0.4939,
        -0.4955, -0.4966, -0.4974, -0.4980, -0.4984, -0.4986, -0.4988, -0.4990,
        -0.4991, -0.4991, -0.4992, -0.4992, -0.4992, -0.4992, -0.4992, -0.4993,
        -0.4993], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.1772e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(3.7742e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClH': tensor([-0.1712], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'ClH': tensor([-460.8259, -460.8260, -460.8260, -460.8261, -460.8261, -460.8261,
        -460.8261, -460.8261, -460.8261, -460.8261], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1510, -460.1511, -460.1511, -460.1511, -460.1511, -460.1512,
        -460.1512, -460.1512, -460.1512, -460.1512], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4990, -0.4991, -0.4991, -0.4992, -0.4992, -0.4992, -0.4992, -0.4992,
        -0.4993, -0.4993], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 20 	 9 	 HCl 	 ClH 	 4.612545374201118e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------17----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [17]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4089, -54.4758, -54.5076, -54.5265, -54.5394, -54.5486, -54.5552,
        -54.5599, -54.5632, -54.5656, -54.5673, -54.5684, -54.5693, -54.5698,
        -54.5702, -54.5705, -54.5707, -54.5709, -54.5710, -54.5710, -54.5711,
        -54.5711, -54.5711, -54.5712, -54.5712], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.3845e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.3845e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5705, -54.5707, -54.5709, -54.5710, -54.5710, -54.5711, -54.5711,
        -54.5711, -54.5712, -54.5712], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 20 	 17 	 N 	 N 	 7.613337838198044e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 12, 19, 19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.3137, -188.6798, -188.5490, -188.4720, -188.4247, -188.3924,
        -188.3698, -188.3539, -188.3427, -188.3347, -188.3291, -188.3250,
        -188.3221, -188.3201, -188.3186, -188.3176, -188.3168, -188.3163,
        -188.3159, -188.3156, -188.3154, -188.3153, -188.3152, -188.3151,
        -188.3151], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.4017587505662
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7199e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7336, -37.7708, -37.7880, -37.7981, -37.8050, -37.8100, -37.8135,
        -37.8160, -37.8179, -37.8191, -37.8201, -37.8207, -37.8211, -37.8215,
        -37.8217, -37.8219, -37.8220, -37.8220, -37.8221, -37.8221, -37.8222,
        -37.8222, -37.8222, -37.8222, -37.8222], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4484e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9496, -74.9866, -75.0075, -75.0206, -75.0299, -75.0366, -75.0415,
        -75.0450, -75.0476, -75.0494, -75.0507, -75.0516, -75.0523, -75.0527,
        -75.0530, -75.0533, -75.0534, -75.0535, -75.0536, -75.0537, -75.0537,
        -75.0537, -75.0538, -75.0538, -75.0538], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3433e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3176, -188.3168, -188.3163, -188.3159, -188.3156, -188.3154,
        -188.3153, -188.3152, -188.3151, -188.3151], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8219, -37.8220, -37.8220, -37.8221, -37.8221, -37.8222, -37.8222,
        -37.8222, -37.8222, -37.8222], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0533, -75.0534, -75.0535, -75.0536, -75.0537, -75.0537, -75.0537,
        -75.0538, -75.0538, -75.0538], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 20 	 4 	 CO2 	 CO2 	 0.013117369886774435

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------14----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6766, -99.6987, -99.7075, -99.7126, -99.7162, -99.7187, -99.7205,
        -99.7218, -99.7227, -99.7233, -99.7238, -99.7241, -99.7244, -99.7245,
        -99.7246, -99.7247, -99.7248, -99.7248, -99.7249, -99.7249, -99.7249,
        -99.7249, -99.7249, -99.7249, -99.7249], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.8304e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.8304e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7247, -99.7248, -99.7248, -99.7249, -99.7249, -99.7249, -99.7249,
        -99.7249, -99.7249, -99.7249], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 20 	 14 	 F 	 F 	 1.888893892625726e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e20)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e20/2022-11-29_10:09:21.574160_2.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e20/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 20 || ,[' rho : 2.896200', ' ae : 54.432261', ' E : 3.314746'] ,|| total loss 40.611635 || CHKPT: _2.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 17, 17]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.9115, -109.4653, -109.5342, -109.5268, -109.5171, -109.5102,
        -109.5057, -109.5028, -109.5009, -109.4998, -109.4990, -109.4985,
        -109.4982, -109.4980, -109.4979, -109.4978, -109.4978, -109.4977,
        -109.4977, -109.4977, -109.4977, -109.4977, -109.4977, -109.4977,
        -109.4977], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018879
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.2299e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0002, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4346, -54.5013, -54.5260, -54.5399, -54.5491, -54.5555, -54.5601,
        -54.5633, -54.5656, -54.5672, -54.5684, -54.5692, -54.5697, -54.5701,
        -54.5704, -54.5706, -54.5707, -54.5708, -54.5709, -54.5709, -54.5710,
        -54.5710, -54.5710, -54.5710, -54.5710], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.3958e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0002, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4978, -109.4978, -109.4977, -109.4977, -109.4977, -109.4977,
        -109.4977, -109.4977, -109.4977, -109.4977], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5706, -54.5707, -54.5708, -54.5709, -54.5709, -54.5710, -54.5710,
        -54.5710, -54.5710, -54.5710], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 21 	 1 	 N2 	 N2 	 1.648219447697805e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 12, 19, 19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.5460, -188.7668, -188.6050, -188.5096, -188.4508, -188.4107,
        -188.3826, -188.3629, -188.3489, -188.3390, -188.3320, -188.3270,
        -188.3234, -188.3209, -188.3191, -188.3178, -188.3169, -188.3162,
        -188.3157, -188.3154, -188.3151, -188.3150, -188.3148, -188.3148,
        -188.3147], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.4017587505662
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7175e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7454, -37.7832, -37.7969, -37.8045, -37.8096, -37.8132, -37.8157,
        -37.8176, -37.8189, -37.8198, -37.8204, -37.8209, -37.8212, -37.8214,
        -37.8216, -37.8217, -37.8218, -37.8218, -37.8218, -37.8219, -37.8219,
        -37.8219, -37.8219, -37.8219, -37.8219], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4851e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9593, -75.0020, -75.0194, -75.0295, -75.0364, -75.0413, -75.0449,
        -75.0474, -75.0492, -75.0505, -75.0514, -75.0520, -75.0524, -75.0528,
        -75.0530, -75.0531, -75.0533, -75.0533, -75.0534, -75.0534, -75.0534,
        -75.0535, -75.0535, -75.0535, -75.0535], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3834e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3178, -188.3169, -188.3162, -188.3157, -188.3154, -188.3151,
        -188.3150, -188.3148, -188.3148, -188.3147], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8217, -37.8218, -37.8218, -37.8218, -37.8219, -37.8219, -37.8219,
        -37.8219, -37.8219, -37.8219], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0531, -75.0533, -75.0533, -75.0534, -75.0534, -75.0534, -75.0535,
        -75.0535, -75.0535, -75.0535], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 21 	 4 	 CO2 	 CO2 	 0.013062955394017162

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 15, 15]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0124, -1.1066, -1.1310, -1.1436, -1.1515, -1.1569, -1.1606, -1.1632,
        -1.1650, -1.1663, -1.1672, -1.1678, -1.1682, -1.1685, -1.1687, -1.1689,
        -1.1690, -1.1691, -1.1691, -1.1692, -1.1692, -1.1692, -1.1692, -1.1692,
        -1.1692], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668206
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.9058e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.8117e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3277, -0.4607, -0.4766, -0.4843, -0.4890, -0.4922, -0.4943, -0.4958,
        -0.4968, -0.4976, -0.4981, -0.4984, -0.4987, -0.4988, -0.4990, -0.4991,
        -0.4991, -0.4992, -0.4992, -0.4992, -0.4992, -0.4992, -0.4992, -0.4992,
        -0.4992], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.1642e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.9414e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.6445e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1689, -1.1690, -1.1691, -1.1691, -1.1692, -1.1692, -1.1692, -1.1692,
        -1.1692, -1.1692], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4991, -0.4991, -0.4992, -0.4992, -0.4992, -0.4992, -0.4992, -0.4992,
        -0.4992, -0.4992], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 21 	 0 	 H2 	 H2 	 3.0367070935959e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------17----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [17]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4385, -54.5041, -54.5278, -54.5409, -54.5497, -54.5558, -54.5601,
        -54.5632, -54.5653, -54.5668, -54.5679, -54.5687, -54.5692, -54.5696,
        -54.5698, -54.5700, -54.5701, -54.5702, -54.5703, -54.5703, -54.5704,
        -54.5704, -54.5704, -54.5704, -54.5704], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.5546e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.5546e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5700, -54.5701, -54.5702, -54.5703, -54.5703, -54.5704, -54.5704,
        -54.5704, -54.5704, -54.5704], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 21 	 17 	 N 	 N 	 8.266038840713302e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 16, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2108, -107.2717, -107.2331, -107.2306, -107.2283, -107.2272,
        -107.2271, -107.2274, -107.2277, -107.2279, -107.2282, -107.2286,
        -107.2290, -107.2296, -107.2301, -107.2306, -107.2312, -107.2316,
        -107.2320, -107.2323, -107.2326, -107.2328, -107.2330, -107.2331,
        -107.2332], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.305942205048
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.6220e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6697, -99.6883, -99.6993, -99.7062, -99.7112, -99.7148, -99.7174,
        -99.7193, -99.7207, -99.7217, -99.7224, -99.7229, -99.7233, -99.7235,
        -99.7237, -99.7238, -99.7239, -99.7240, -99.7240, -99.7240, -99.7241,
        -99.7241, -99.7241, -99.7241, -99.7241], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(6.9787e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4538, -7.4599, -7.4634, -7.4655, -7.4669, -7.4678, -7.4688, -7.4696,
        -7.4697, -7.4695, -7.4692, -7.4692, -7.4692, -7.4692, -7.4693, -7.4693,
        -7.4693, -7.4694, -7.4694, -7.4694, -7.4694, -7.4694, -7.4694, -7.4694,
        -7.4694], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(7.4614e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(5.3193e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2306, -107.2312, -107.2316, -107.2320, -107.2323, -107.2326,
        -107.2328, -107.2330, -107.2331, -107.2332], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7238, -99.7239, -99.7240, -99.7240, -99.7240, -99.7241, -99.7241,
        -99.7241, -99.7241, -99.7241], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4693, -7.4693, -7.4694, -7.4694, -7.4694, -7.4694, -7.4694, -7.4694,
        -7.4694, -7.4694], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 21 	 2 	 FLi 	 LiF 	 0.007816433547958222

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 13, 13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4375, -920.4178, -920.4132, -920.4109, -920.4094, -920.4084,
        -920.4077, -920.4073, -920.4069, -920.4067, -920.4065, -920.4064,
        -920.4064, -920.4063, -920.4063, -920.4062, -920.4062, -920.4062,
        -920.4062, -920.4062, -920.4062, -920.4062, -920.4062, -920.4062,
        -920.4062], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885617
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.7971e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.5942e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0893, -460.1195, -460.1299, -460.1358, -460.1398, -460.1427,
        -460.1447, -460.1462, -460.1473, -460.1480, -460.1486, -460.1489,
        -460.1492, -460.1494, -460.1495, -460.1496, -460.1497, -460.1497,
        -460.1498, -460.1498, -460.1498, -460.1498, -460.1498, -460.1498,
        -460.1498], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.2143e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.5944e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4062, -920.4062, -920.4062, -920.4062, -920.4062, -920.4062,
        -920.4062, -920.4062, -920.4062, -920.4062], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1496, -460.1497, -460.1497, -460.1498, -460.1498, -460.1498,
        -460.1498, -460.1498, -460.1498, -460.1498], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 21 	 5 	 Cl2 	 Cl2 	 3.3780208847593894e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,  9ClH
SUBMOLECULES: ['HCl', 'Cl', 'H']
SUBMOLECULE INDICES: [9, 13, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='ClH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1712], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1712], dtype=torch.float64)
E_PRED: tensor([-460.7501, -460.7935, -460.8058, -460.8120, -460.8160, -460.8187,
        -460.8206, -460.8219, -460.8228, -460.8235, -460.8239, -460.8242,
        -460.8244, -460.8246, -460.8247, -460.8248, -460.8248, -460.8249,
        -460.8249, -460.8249, -460.8249, -460.8249, -460.8249, -460.8249,
        -460.8249], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 62, 62])
mo_energy   ---   torch.Size([2, 62])
dm_ref   ---   torch.Size([1, 2, 62, 62])
rho   ---   torch.Size([1, 2, 1068])
ao_eval   ---   torch.Size([1, 10, 1068, 62])
grid_weights   ---   torch.Size([1, 1068])
-460.4234538667477
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 62])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 62])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(4.8848e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.7696e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0909, -460.1206, -460.1308, -460.1365, -460.1404, -460.1431,
        -460.1451, -460.1466, -460.1476, -460.1483, -460.1488, -460.1492,
        -460.1494, -460.1496, -460.1498, -460.1498, -460.1499, -460.1500,
        -460.1500, -460.1500, -460.1500, -460.1500, -460.1500, -460.1500,
        -460.1500], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.8057e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.7699e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2318, -0.4332, -0.4612, -0.4744, -0.4823, -0.4876, -0.4911, -0.4936,
        -0.4953, -0.4965, -0.4973, -0.4979, -0.4983, -0.4986, -0.4988, -0.4989,
        -0.4990, -0.4991, -0.4991, -0.4992, -0.4992, -0.4992, -0.4992, -0.4992,
        -0.4992], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.1561e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(4.1476e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClH': tensor([-0.1712], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'ClH': tensor([-460.8248, -460.8248, -460.8249, -460.8249, -460.8249, -460.8249,
        -460.8249, -460.8249, -460.8249, -460.8249], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1498, -460.1499, -460.1500, -460.1500, -460.1500, -460.1500,
        -460.1500, -460.1500, -460.1500, -460.1500], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4989, -0.4990, -0.4991, -0.4991, -0.4992, -0.4992, -0.4992, -0.4992,
        -0.4992, -0.4992], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 21 	 9 	 HCl 	 ClH 	 4.612175267670661e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------16----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [16]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4541, -7.4608, -7.4641, -7.4659, -7.4671, -7.4680, -7.4690, -7.4696,
        -7.4694, -7.4691, -7.4690, -7.4690, -7.4690, -7.4690, -7.4691, -7.4691,
        -7.4692, -7.4692, -7.4692, -7.4692, -7.4692, -7.4692, -7.4692, -7.4692,
        -7.4692], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(7.3607e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(5.5582e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.4777e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4691, -7.4692, -7.4692, -7.4692, -7.4692, -7.4692, -7.4692, -7.4692,
        -7.4692, -7.4692], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 21 	 16 	 Li 	 Li 	 1.8218942653783272e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------15----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2933, -0.4514, -0.4713, -0.4809, -0.4867, -0.4906, -0.4932, -0.4950,
        -0.4963, -0.4972, -0.4978, -0.4982, -0.4985, -0.4987, -0.4989, -0.4990,
        -0.4991, -0.4991, -0.4991, -0.4992, -0.4992, -0.4992, -0.4992, -0.4992,
        -0.4992], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.1556e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(3.3976e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.8312e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4990, -0.4991, -0.4991, -0.4991, -0.4992, -0.4992, -0.4992, -0.4992,
        -0.4992, -0.4992], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 21 	 15 	 H 	 H 	 1.4377389530450564e-07

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 12, 17, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-93.9646, -93.5061, -93.3859, -93.3354, -93.2981, -93.2746, -93.2576,
        -93.2457, -93.2373, -93.2313, -93.2270, -93.2240, -93.2218, -93.2202,
        -93.2190, -93.2182, -93.2176, -93.2172, -93.2169, -93.2167, -93.2165,
        -93.2164, -93.2163, -93.2162, -93.2162], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633898
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.5706e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0005, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7368, -37.7752, -37.7909, -37.7999, -37.8060, -37.8103, -37.8134,
        -37.8156, -37.8172, -37.8183, -37.8191, -37.8196, -37.8200, -37.8203,
        -37.8205, -37.8206, -37.8207, -37.8208, -37.8208, -37.8209, -37.8209,
        -37.8209, -37.8209, -37.8209, -37.8209], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6493e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0005, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2565, -0.4408, -0.4654, -0.4770, -0.4841, -0.4888, -0.4920, -0.4942,
        -0.4957, -0.4968, -0.4975, -0.4980, -0.4984, -0.4986, -0.4988, -0.4989,
        -0.4990, -0.4991, -0.4991, -0.4992, -0.4992, -0.4992, -0.4992, -0.4992,
        -0.4992], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.1551e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(3.8429e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0005, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4325, -54.4995, -54.5244, -54.5385, -54.5478, -54.5543, -54.5590,
        -54.5623, -54.5646, -54.5662, -54.5674, -54.5682, -54.5687, -54.5691,
        -54.5694, -54.5696, -54.5697, -54.5698, -54.5699, -54.5700, -54.5700,
        -54.5700, -54.5700, -54.5700, -54.5700], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.6562e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0005, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2182, -93.2176, -93.2172, -93.2169, -93.2167, -93.2165, -93.2164,
        -93.2163, -93.2162, -93.2162], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8206, -37.8207, -37.8208, -37.8208, -37.8209, -37.8209, -37.8209,
        -37.8209, -37.8209, -37.8209], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4989, -0.4990, -0.4991, -0.4991, -0.4992, -0.4992, -0.4992, -0.4992,
        -0.4992, -0.4992], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5696, -54.5697, -54.5698, -54.5699, -54.5700, -54.5700, -54.5700,
        -54.5700, -54.5700, -54.5700], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 21 	 3 	 CHN 	 CNH 	 0.007012708191605146

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  , 10LiH
SUBMOLECULES: ['HLi', 'Li', 'H']
SUBMOLECULE INDICES: [10, 16, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0923], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0923], dtype=torch.float64)
E_PRED: tensor([-7.9639, -8.0181, -8.0327, -8.0404, -8.0454, -8.0489, -8.0513, -8.0531,
        -8.0543, -8.0552, -8.0558, -8.0563, -8.0566, -8.0568, -8.0569, -8.0571,
        -8.0571, -8.0572, -8.0572, -8.0573, -8.0573, -8.0573, -8.0573, -8.0573,
        -8.0573], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 54, 54])
mo_energy   ---   torch.Size([2, 54])
dm_ref   ---   torch.Size([1, 2, 54, 54])
rho   ---   torch.Size([1, 2, 1271])
ao_eval   ---   torch.Size([1, 10, 1271, 54])
grid_weights   ---   torch.Size([1, 1271])
-8.038079906478378
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 54])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 54])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.6380e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.9276e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2876, -0.4498, -0.4704, -0.4803, -0.4863, -0.4903, -0.4930, -0.4949,
        -0.4962, -0.4971, -0.4977, -0.4982, -0.4985, -0.4987, -0.4989, -0.4990,
        -0.4991, -0.4991, -0.4991, -0.4992, -0.4992, -0.4992, -0.4992, -0.4992,
        -0.4992], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.1515e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(3.4986e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.7579e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4551, -7.4621, -7.4650, -7.4665, -7.4675, -7.4685, -7.4693, -7.4694,
        -7.4691, -7.4689, -7.4688, -7.4688, -7.4689, -7.4689, -7.4690, -7.4690,
        -7.4690, -7.4691, -7.4691, -7.4691, -7.4691, -7.4691, -7.4691, -7.4691,
        -7.4691], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(7.2667e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(5.7201e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.2170e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiH': tensor([-0.0923], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiH': tensor([-8.0571, -8.0571, -8.0572, -8.0572, -8.0573, -8.0573, -8.0573, -8.0573,
        -8.0573, -8.0573], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4990, -0.4991, -0.4991, -0.4991, -0.4992, -0.4992, -0.4992, -0.4992,
        -0.4992, -0.4992], dtype=torch.float64, grad_fn=<SliceBackward0>), 'Li': tensor([-7.4690, -7.4690, -7.4691, -7.4691, -7.4691, -7.4691, -7.4691, -7.4691,
        -7.4691, -7.4691], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 21 	 10 	 HLi 	 LiH 	 2.515563361463795e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------18----------------
TRAINING ON MOLECULE:  ,Na
SUBMOLECULES: ['Na']
SUBMOLECULE INDICES: [18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2271, -162.2385, -162.2423, -162.2444, -162.2456, -162.2465,
        -162.2473, -162.2478, -162.2480, -162.2481, -162.2481, -162.2482,
        -162.2482, -162.2483, -162.2483, -162.2483, -162.2483, -162.2483,
        -162.2483, -162.2484, -162.2484, -162.2484, -162.2484, -162.2484,
        -162.2484], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.1610e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(4.1610e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'Na': tensor([-162.2483, -162.2483, -162.2483, -162.2483, -162.2484, -162.2484,
        -162.2484, -162.2484, -162.2484, -162.2484], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 21 	 18 	 Na 	 Na 	 9.09936618497595e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------19----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9512, -74.9921, -75.0116, -75.0234, -75.0316, -75.0375, -75.0417,
        -75.0448, -75.0470, -75.0486, -75.0497, -75.0505, -75.0510, -75.0514,
        -75.0517, -75.0519, -75.0520, -75.0521, -75.0522, -75.0522, -75.0523,
        -75.0523, -75.0523, -75.0523, -75.0523], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6313e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.6313e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0519, -75.0520, -75.0521, -75.0522, -75.0522, -75.0523, -75.0523,
        -75.0523, -75.0523, -75.0523], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 21 	 19 	 O 	 O 	 5.243248208185936e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------14----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6696, -99.6877, -99.6988, -99.7058, -99.7108, -99.7145, -99.7172,
        -99.7191, -99.7205, -99.7215, -99.7223, -99.7228, -99.7231, -99.7234,
        -99.7236, -99.7237, -99.7238, -99.7238, -99.7239, -99.7239, -99.7239,
        -99.7240, -99.7240, -99.7240, -99.7240], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.1655e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.1655e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7237, -99.7238, -99.7238, -99.7239, -99.7239, -99.7239, -99.7240,
        -99.7240, -99.7240, -99.7240], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 21 	 14 	 F 	 F 	 2.3036117783784836e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,  8OC
SUBMOLECULES: ['CO', 'O', 'C']
SUBMOLECULE INDICES: [8, 19, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='OC', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4142], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4142], dtype=torch.float64)
E_PRED: tensor([-113.6863, -113.4026, -113.3357, -113.2999, -113.2784, -113.2635,
        -113.2532, -113.2460, -113.2409, -113.2373, -113.2348, -113.2330,
        -113.2318, -113.2309, -113.2303, -113.2299, -113.2296, -113.2294,
        -113.2292, -113.2291, -113.2290, -113.2290, -113.2289, -113.2289,
        -113.2289], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 3279])
ao_eval   ---   torch.Size([1, 10, 3279, 78])
grid_weights   ---   torch.Size([1, 3279])
-113.201730216515
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.3461e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7501, -37.7864, -37.7987, -37.8056, -37.8101, -37.8133, -37.8155,
        -37.8171, -37.8183, -37.8191, -37.8196, -37.8200, -37.8203, -37.8205,
        -37.8206, -37.8207, -37.8208, -37.8208, -37.8209, -37.8209, -37.8209,
        -37.8209, -37.8209, -37.8209, -37.8209], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6431e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9489, -74.9845, -75.0055, -75.0189, -75.0283, -75.0352, -75.0402,
        -75.0438, -75.0464, -75.0483, -75.0496, -75.0506, -75.0512, -75.0517,
        -75.0520, -75.0523, -75.0524, -75.0526, -75.0526, -75.0527, -75.0527,
        -75.0528, -75.0528, -75.0528, -75.0528], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5420e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'OC': tensor([-0.4142], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'OC': tensor([-113.2299, -113.2296, -113.2294, -113.2292, -113.2291, -113.2290,
        -113.2290, -113.2289, -113.2289, -113.2289], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8207, -37.8208, -37.8208, -37.8209, -37.8209, -37.8209, -37.8209,
        -37.8209, -37.8209, -37.8209], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0523, -75.0524, -75.0526, -75.0526, -75.0527, -75.0527, -75.0528,
        -75.0528, -75.0528, -75.0528], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 21 	 8 	 CO 	 OC 	 0.0008143831061902841

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  , 11NaNa
SUBMOLECULES: ['Na2', 'Na', 'Na']
SUBMOLECULE INDICES: [11, 18, 18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0273], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0273], dtype=torch.float64)
E_PRED: tensor([-324.6343, -324.5678, -324.5505, -324.5417, -324.5362, -324.5324,
        -324.5298, -324.5280, -324.5268, -324.5259, -324.5253, -324.5248,
        -324.5245, -324.5243, -324.5242, -324.5241, -324.5240, -324.5239,
        -324.5239, -324.5239, -324.5239, -324.5238, -324.5238, -324.5238,
        -324.5238], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 1992])
ao_eval   ---   torch.Size([1, 10, 1992, 94])
grid_weights   ---   torch.Size([1, 1992])
-324.03216786711033
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(4.5617e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.1234e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2324, -162.2423, -162.2453, -162.2468, -162.2478, -162.2486,
        -162.2491, -162.2494, -162.2495, -162.2496, -162.2496, -162.2497,
        -162.2497, -162.2497, -162.2497, -162.2498, -162.2498, -162.2498,
        -162.2498, -162.2498, -162.2498, -162.2498, -162.2498, -162.2498,
        -162.2498], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.4690e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.1258e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NaNa': tensor([-0.0273], dtype=torch.float64), 'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'NaNa': tensor([-324.5241, -324.5240, -324.5239, -324.5239, -324.5239, -324.5239,
        -324.5238, -324.5238, -324.5238, -324.5238], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Na': tensor([-162.2498, -162.2498, -162.2498, -162.2498, -162.2498, -162.2498,
        -162.2498, -162.2498, -162.2498, -162.2498], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 21 	 11 	 Na2 	 Na2 	 2.242141564475009e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,  6FF
SUBMOLECULES: ['F2', 'F', 'F']
SUBMOLECULE INDICES: [6, 14, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0618], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0618], dtype=torch.float64)
E_PRED: tensor([-199.6126, -199.5580, -199.5437, -199.5363, -199.5316, -199.5284,
        -199.5262, -199.5246, -199.5235, -199.5228, -199.5222, -199.5218,
        -199.5216, -199.5214, -199.5213, -199.5212, -199.5211, -199.5211,
        -199.5210, -199.5210, -199.5210, -199.5210, -199.5210, -199.5210,
        -199.5210], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 4698])
ao_eval   ---   torch.Size([1, 10, 4698, 78])
grid_weights   ---   torch.Size([1, 4698])
-199.3364659747656
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.7244e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.4488e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6719, -99.6926, -99.7029, -99.7092, -99.7136, -99.7168, -99.7192,
        -99.7208, -99.7221, -99.7229, -99.7235, -99.7240, -99.7243, -99.7245,
        -99.7247, -99.7248, -99.7248, -99.7249, -99.7249, -99.7250, -99.7250,
        -99.7250, -99.7250, -99.7250, -99.7250], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.7503e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.4546e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'FF': tensor([-0.0618], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'FF': tensor([-199.5212, -199.5211, -199.5211, -199.5210, -199.5210, -199.5210,
        -199.5210, -199.5210, -199.5210, -199.5210], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7248, -99.7248, -99.7249, -99.7249, -99.7250, -99.7250, -99.7250,
        -99.7250, -99.7250, -99.7250], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 21 	 6 	 F2 	 F2 	 1.950503942761331e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------13----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0920, -460.1227, -460.1334, -460.1395, -460.1436, -460.1465,
        -460.1487, -460.1502, -460.1513, -460.1521, -460.1526, -460.1530,
        -460.1533, -460.1535, -460.1536, -460.1537, -460.1538, -460.1538,
        -460.1539, -460.1539, -460.1539, -460.1539, -460.1539, -460.1539,
        -460.1539], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.4368e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.4368e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1537, -460.1538, -460.1538, -460.1539, -460.1539, -460.1539,
        -460.1539, -460.1539, -460.1539, -460.1539], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 21 	 13 	 Cl 	 Cl 	 8.249633964484382e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,  7CCHH
SUBMOLECULES: ['C2H2', 'C', 'C', 'H', 'H']
SUBMOLECULE INDICES: [7, 12, 12, 15, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C2H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6459], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6459], dtype=torch.float64)
E_PRED: tensor([-78.3435, -73.2247, -75.1109, -75.8623, -76.3039, -76.5951, -76.7943,
        -76.9323, -77.0285, -77.0957, -77.1427, -77.1756, -77.1987, -77.2149,
        -77.2263, -77.2342, -77.2398, -77.2437, -77.2464, -77.2484, -77.2497,
        -77.2506, -77.2513, -77.2517, -77.2521], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 108, 108])
mo_energy   ---   torch.Size([2, 108])
dm_ref   ---   torch.Size([1, 2, 108, 108])
rho   ---   torch.Size([1, 2, 1924])
ao_eval   ---   torch.Size([1, 10, 1924, 108])
grid_weights   ---   torch.Size([1, 1924])
-77.2336470993193
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 108])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 108])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.5867e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7550, -37.7897, -37.8011, -37.8073, -37.8114, -37.8143, -37.8163,
        -37.8178, -37.8188, -37.8195, -37.8200, -37.8204, -37.8206, -37.8208,
        -37.8209, -37.8210, -37.8211, -37.8211, -37.8212, -37.8212, -37.8212,
        -37.8212, -37.8212, -37.8212, -37.8212], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5957e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2766, -0.4467, -0.4687, -0.4791, -0.4855, -0.4898, -0.4926, -0.4946,
        -0.4960, -0.4970, -0.4977, -0.4981, -0.4985, -0.4987, -0.4989, -0.4990,
        -0.4990, -0.4991, -0.4991, -0.4992, -0.4992, -0.4992, -0.4992, -0.4992,
        -0.4992], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.1718e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(3.5922e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CCHH': tensor([-0.6459], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'CCHH': tensor([-77.2342, -77.2398, -77.2437, -77.2464, -77.2484, -77.2497, -77.2506,
        -77.2513, -77.2517, -77.2521], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8210, -37.8211, -37.8211, -37.8212, -37.8212, -37.8212, -37.8212,
        -37.8212, -37.8212, -37.8212], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4990, -0.4990, -0.4991, -0.4991, -0.4992, -0.4992, -0.4992, -0.4992,
        -0.4992, -0.4992], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 21 	 7 	 C2H2 	 C2H2 	 0.00028965440162368155

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7458, -37.7833, -37.7967, -37.8042, -37.8091, -37.8127, -37.8151,
        -37.8169, -37.8182, -37.8191, -37.8197, -37.8201, -37.8205, -37.8207,
        -37.8208, -37.8209, -37.8210, -37.8211, -37.8211, -37.8211, -37.8211,
        -37.8212, -37.8212, -37.8212, -37.8212], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6055e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.6055e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8209, -37.8210, -37.8211, -37.8211, -37.8211, -37.8211, -37.8212,
        -37.8212, -37.8212, -37.8212], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 21 	 12 	 C 	 C 	 8.732045057554564e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e21)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e21/2022-11-29_10:09:21.574160_0.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e21/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 21 || ,[' rho : 2.891971', ' ae : 54.184380', ' E : 3.519203'] ,|| total loss 40.439674 || CHKPT: _0.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------8----------------
TRAINING ON MOLECULE:  ,  8OC
SUBMOLECULES: ['CO', 'O', 'C']
SUBMOLECULE INDICES: [8, 19, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='OC', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4142], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4142], dtype=torch.float64)
E_PRED: tensor([-113.5869, -113.3646, -113.3128, -113.2851, -113.2683, -113.2568,
        -113.2488, -113.2431, -113.2392, -113.2364, -113.2345, -113.2331,
        -113.2322, -113.2315, -113.2310, -113.2307, -113.2305, -113.2303,
        -113.2302, -113.2301, -113.2301, -113.2300, -113.2300, -113.2300,
        -113.2300], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 3279])
ao_eval   ---   torch.Size([1, 10, 3279, 78])
grid_weights   ---   torch.Size([1, 3279])
-113.201730216515
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.3457e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7336, -37.7710, -37.7879, -37.7978, -37.8045, -37.8093, -37.8128,
        -37.8152, -37.8170, -37.8182, -37.8191, -37.8198, -37.8202, -37.8205,
        -37.8207, -37.8209, -37.8210, -37.8211, -37.8211, -37.8211, -37.8212,
        -37.8212, -37.8212, -37.8212, -37.8212], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6063e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9495, -74.9847, -75.0058, -75.0192, -75.0287, -75.0357, -75.0407,
        -75.0444, -75.0470, -75.0489, -75.0502, -75.0512, -75.0518, -75.0523,
        -75.0526, -75.0529, -75.0530, -75.0532, -75.0532, -75.0533, -75.0533,
        -75.0534, -75.0534, -75.0534, -75.0534], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4194e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'OC': tensor([-0.4142], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'OC': tensor([-113.2307, -113.2305, -113.2303, -113.2302, -113.2301, -113.2301,
        -113.2300, -113.2300, -113.2300, -113.2300], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8209, -37.8210, -37.8211, -37.8211, -37.8211, -37.8212, -37.8212,
        -37.8212, -37.8212, -37.8212], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0529, -75.0530, -75.0532, -75.0532, -75.0533, -75.0533, -75.0534,
        -75.0534, -75.0534, -75.0534], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 22 	 8 	 CO 	 OC 	 0.0008095106018206428

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------16----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [16]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4544, -7.4612, -7.4643, -7.4661, -7.4672, -7.4681, -7.4691, -7.4695,
        -7.4693, -7.4691, -7.4689, -7.4689, -7.4690, -7.4690, -7.4690, -7.4691,
        -7.4691, -7.4691, -7.4691, -7.4692, -7.4692, -7.4692, -7.4692, -7.4692,
        -7.4692], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(7.1114e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(5.6137e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.4279e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4691, -7.4691, -7.4691, -7.4691, -7.4692, -7.4692, -7.4692, -7.4692,
        -7.4692, -7.4692], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 22 	 16 	 Li 	 Li 	 1.840426616549675e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------19----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9509, -74.9902, -75.0103, -75.0227, -75.0314, -75.0377, -75.0422,
        -75.0455, -75.0478, -75.0495, -75.0507, -75.0515, -75.0521, -75.0526,
        -75.0529, -75.0531, -75.0532, -75.0533, -75.0534, -75.0534, -75.0535,
        -75.0535, -75.0535, -75.0535, -75.0535], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3868e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.3868e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0531, -75.0532, -75.0533, -75.0534, -75.0534, -75.0535, -75.0535,
        -75.0535, -75.0535, -75.0535], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 22 	 19 	 O 	 O 	 4.436111911439111e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,  6FF
SUBMOLECULES: ['F2', 'F', 'F']
SUBMOLECULE INDICES: [6, 14, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0618], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0618], dtype=torch.float64)
E_PRED: tensor([-199.6745, -199.5850, -199.5609, -199.5484, -199.5405, -199.5350,
        -199.5313, -199.5286, -199.5267, -199.5254, -199.5245, -199.5238,
        -199.5234, -199.5231, -199.5228, -199.5227, -199.5226, -199.5225,
        -199.5224, -199.5224, -199.5224, -199.5223, -199.5223, -199.5223,
        -199.5223], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 4698])
ao_eval   ---   torch.Size([1, 10, 4698, 78])
grid_weights   ---   torch.Size([1, 4698])
-199.3364659747656
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.7423e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.4846e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6753, -99.6972, -99.7066, -99.7121, -99.7160, -99.7187, -99.7207,
        -99.7221, -99.7232, -99.7239, -99.7244, -99.7248, -99.7250, -99.7252,
        -99.7254, -99.7254, -99.7255, -99.7256, -99.7256, -99.7256, -99.7256,
        -99.7256, -99.7256, -99.7256, -99.7257], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.9371e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.4895e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'FF': tensor([-0.0618], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'FF': tensor([-199.5227, -199.5226, -199.5225, -199.5224, -199.5224, -199.5224,
        -199.5223, -199.5223, -199.5223, -199.5223], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7254, -99.7255, -99.7256, -99.7256, -99.7256, -99.7256, -99.7256,
        -99.7256, -99.7256, -99.7257], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 22 	 6 	 F2 	 F2 	 1.9845717647382127e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------17----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [17]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4070, -54.4723, -54.5048, -54.5244, -54.5378, -54.5474, -54.5542,
        -54.5591, -54.5626, -54.5651, -54.5668, -54.5681, -54.5689, -54.5695,
        -54.5699, -54.5702, -54.5705, -54.5706, -54.5707, -54.5708, -54.5708,
        -54.5709, -54.5709, -54.5709, -54.5709], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.4560e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.4560e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5702, -54.5705, -54.5706, -54.5707, -54.5708, -54.5708, -54.5709,
        -54.5709, -54.5709, -54.5709], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 22 	 17 	 N 	 N 	 7.832821754275062e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 17, 17]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.8961, -109.5473, -109.5752, -109.5538, -109.5363, -109.5242,
        -109.5160, -109.5106, -109.5069, -109.5044, -109.5028, -109.5016,
        -109.5009, -109.5004, -109.5000, -109.4998, -109.4996, -109.4995,
        -109.4994, -109.4993, -109.4993, -109.4993, -109.4993, -109.4992,
        -109.4992], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018879
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.2302e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0002, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4059, -54.4697, -54.5029, -54.5230, -54.5369, -54.5468, -54.5539,
        -54.5590, -54.5626, -54.5651, -54.5669, -54.5682, -54.5691, -54.5697,
        -54.5702, -54.5705, -54.5707, -54.5708, -54.5710, -54.5710, -54.5711,
        -54.5711, -54.5711, -54.5712, -54.5712], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.3919e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0002, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4998, -109.4996, -109.4995, -109.4994, -109.4993, -109.4993,
        -109.4993, -109.4993, -109.4992, -109.4992], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5705, -54.5707, -54.5708, -54.5710, -54.5710, -54.5711, -54.5711,
        -54.5711, -54.5712, -54.5712], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 22 	 1 	 N2 	 N2 	 1.1802022876531112e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7507, -37.7871, -37.7995, -37.8064, -37.8110, -37.8142, -37.8164,
        -37.8180, -37.8192, -37.8200, -37.8206, -37.8210, -37.8212, -37.8214,
        -37.8216, -37.8217, -37.8217, -37.8218, -37.8218, -37.8218, -37.8219,
        -37.8219, -37.8219, -37.8219, -37.8219], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4876e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.4876e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8217, -37.8217, -37.8218, -37.8218, -37.8218, -37.8219, -37.8219,
        -37.8219, -37.8219, -37.8219], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 22 	 12 	 C 	 C 	 8.09639135537199e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 15, 15]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-0.9787, -1.0932, -1.1229, -1.1381, -1.1478, -1.1543, -1.1589, -1.1620,
        -1.1642, -1.1658, -1.1669, -1.1676, -1.1682, -1.1685, -1.1688, -1.1690,
        -1.1691, -1.1692, -1.1692, -1.1693, -1.1693, -1.1693, -1.1694, -1.1694,
        -1.1694], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668206
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.9951e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.9902e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2290, -0.4323, -0.4607, -0.4740, -0.4821, -0.4874, -0.4910, -0.4935,
        -0.4953, -0.4965, -0.4973, -0.4979, -0.4983, -0.4986, -0.4988, -0.4989,
        -0.4990, -0.4991, -0.4991, -0.4992, -0.4992, -0.4992, -0.4992, -0.4992,
        -0.4992], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.2015e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(4.0899e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.8305e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1690, -1.1691, -1.1692, -1.1692, -1.1693, -1.1693, -1.1693, -1.1694,
        -1.1694, -1.1694], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4989, -0.4990, -0.4991, -0.4991, -0.4992, -0.4992, -0.4992, -0.4992,
        -0.4992, -0.4992], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 22 	 0 	 H2 	 H2 	 2.763641375153882e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 16, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2980, -107.3075, -107.2653, -107.2540, -107.2465, -107.2420,
        -107.2392, -107.2373, -107.2360, -107.2352, -107.2349, -107.2348,
        -107.2350, -107.2353, -107.2357, -107.2361, -107.2365, -107.2368,
        -107.2371, -107.2373, -107.2375, -107.2377, -107.2378, -107.2380,
        -107.2380], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.305942205048
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.6902e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6848, -99.7059, -99.7135, -99.7177, -99.7206, -99.7226, -99.7241,
        -99.7251, -99.7259, -99.7264, -99.7267, -99.7270, -99.7272, -99.7273,
        -99.7274, -99.7275, -99.7275, -99.7276, -99.7276, -99.7276, -99.7276,
        -99.7276, -99.7276, -99.7276, -99.7276], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.8503e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4569, -7.4637, -7.4662, -7.4675, -7.4684, -7.4694, -7.4699, -7.4697,
        -7.4694, -7.4693, -7.4693, -7.4693, -7.4694, -7.4694, -7.4694, -7.4695,
        -7.4695, -7.4695, -7.4695, -7.4695, -7.4695, -7.4695, -7.4695, -7.4695,
        -7.4695], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(7.1819e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(5.1721e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0012, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2361, -107.2365, -107.2368, -107.2371, -107.2373, -107.2375,
        -107.2377, -107.2378, -107.2380, -107.2380], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7275, -99.7275, -99.7276, -99.7276, -99.7276, -99.7276, -99.7276,
        -99.7276, -99.7276, -99.7276], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4695, -7.4695, -7.4695, -7.4695, -7.4695, -7.4695, -7.4695, -7.4695,
        -7.4695, -7.4695], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 22 	 2 	 FLi 	 LiF 	 0.00771331947907649

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------14----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6798, -99.7017, -99.7106, -99.7157, -99.7192, -99.7218, -99.7236,
        -99.7249, -99.7258, -99.7265, -99.7269, -99.7273, -99.7275, -99.7277,
        -99.7278, -99.7279, -99.7279, -99.7280, -99.7280, -99.7280, -99.7280,
        -99.7281, -99.7281, -99.7281, -99.7281], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.4857e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.4857e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7279, -99.7279, -99.7280, -99.7280, -99.7280, -99.7280, -99.7281,
        -99.7281, -99.7281, -99.7281], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 22 	 14 	 F 	 F 	 7.966721900255612e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,  7CCHH
SUBMOLECULES: ['C2H2', 'C', 'C', 'H', 'H']
SUBMOLECULE INDICES: [7, 12, 12, 15, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C2H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6459], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6459], dtype=torch.float64)
E_PRED: tensor([-77.8242, -72.8580, -74.9948, -75.8103, -76.2763, -76.5789, -76.7844,
        -76.9264, -77.0252, -77.0943, -77.1428, -77.1767, -77.2006, -77.2173,
        -77.2290, -77.2373, -77.2431, -77.2471, -77.2500, -77.2520, -77.2534,
        -77.2544, -77.2550, -77.2555, -77.2559], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 108, 108])
mo_energy   ---   torch.Size([2, 108])
dm_ref   ---   torch.Size([1, 2, 108, 108])
rho   ---   torch.Size([1, 2, 1924])
ao_eval   ---   torch.Size([1, 10, 1924, 108])
grid_weights   ---   torch.Size([1, 1924])
-77.2336470993193
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 108])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 108])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.5890e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7565, -37.7911, -37.8025, -37.8088, -37.8129, -37.8158, -37.8179,
        -37.8193, -37.8203, -37.8211, -37.8216, -37.8219, -37.8222, -37.8223,
        -37.8225, -37.8226, -37.8226, -37.8227, -37.8227, -37.8227, -37.8227,
        -37.8227, -37.8227, -37.8228, -37.8228], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3522e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3189, -0.4584, -0.4753, -0.4834, -0.4884, -0.4918, -0.4940, -0.4956,
        -0.4967, -0.4975, -0.4980, -0.4984, -0.4987, -0.4988, -0.4990, -0.4991,
        -0.4991, -0.4992, -0.4992, -0.4992, -0.4992, -0.4992, -0.4993, -0.4993,
        -0.4993], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.2244e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(2.9209e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CCHH': tensor([-0.6459], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'CCHH': tensor([-77.2373, -77.2431, -77.2471, -77.2500, -77.2520, -77.2534, -77.2544,
        -77.2550, -77.2555, -77.2559], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8226, -37.8226, -37.8227, -37.8227, -37.8227, -37.8227, -37.8227,
        -37.8227, -37.8228, -37.8228], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4991, -0.4991, -0.4992, -0.4992, -0.4992, -0.4992, -0.4992, -0.4993,
        -0.4993, -0.4993], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 22 	 7 	 C2H2 	 C2H2 	 0.00027968063755990887

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 12, 19, 19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.3823, -188.7107, -188.5723, -188.4906, -188.4405, -188.4062,
        -188.3823, -188.3654, -188.3535, -188.3450, -188.3390, -188.3348,
        -188.3317, -188.3296, -188.3280, -188.3269, -188.3261, -188.3255,
        -188.3251, -188.3248, -188.3246, -188.3245, -188.3244, -188.3243,
        -188.3242], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.4017587505662
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7090e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7389, -37.7772, -37.7929, -37.8019, -37.8080, -37.8123, -37.8154,
        -37.8176, -37.8192, -37.8203, -37.8211, -37.8217, -37.8221, -37.8223,
        -37.8225, -37.8227, -37.8228, -37.8228, -37.8229, -37.8229, -37.8229,
        -37.8229, -37.8229, -37.8230, -37.8230], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3288e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9576, -74.9994, -75.0182, -75.0294, -75.0371, -75.0426, -75.0466,
        -75.0495, -75.0515, -75.0530, -75.0540, -75.0547, -75.0552, -75.0556,
        -75.0559, -75.0560, -75.0562, -75.0562, -75.0563, -75.0564, -75.0564,
        -75.0564, -75.0564, -75.0564, -75.0564], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.6665e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3269, -188.3261, -188.3255, -188.3251, -188.3248, -188.3246,
        -188.3245, -188.3244, -188.3243, -188.3242], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8227, -37.8228, -37.8228, -37.8229, -37.8229, -37.8229, -37.8229,
        -37.8229, -37.8230, -37.8230], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0560, -75.0562, -75.0562, -75.0563, -75.0564, -75.0564, -75.0564,
        -75.0564, -75.0564, -75.0564], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 22 	 4 	 CO2 	 CO2 	 0.012777046534022363

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------15----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2642, -0.4431, -0.4667, -0.4779, -0.4847, -0.4892, -0.4923, -0.4944,
        -0.4959, -0.4969, -0.4976, -0.4981, -0.4985, -0.4987, -0.4989, -0.4990,
        -0.4991, -0.4991, -0.4992, -0.4992, -0.4992, -0.4992, -0.4993, -0.4993,
        -0.4993], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.2329e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(3.4820e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.8466e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4990, -0.4991, -0.4991, -0.4992, -0.4992, -0.4992, -0.4992, -0.4993,
        -0.4993, -0.4993], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 22 	 15 	 H 	 H 	 1.3007443050430312e-07

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 12, 17, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-94.1024, -93.5662, -93.4191, -93.3623, -93.3177, -93.2904, -93.2704,
        -93.2566, -93.2467, -93.2397, -93.2347, -93.2311, -93.2285, -93.2267,
        -93.2254, -93.2244, -93.2237, -93.2232, -93.2229, -93.2226, -93.2224,
        -93.2223, -93.2222, -93.2221, -93.2221], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633898
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.5626e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0005, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7479, -37.7852, -37.7986, -37.8060, -37.8110, -37.8145, -37.8169,
        -37.8187, -37.8200, -37.8208, -37.8215, -37.8219, -37.8222, -37.8224,
        -37.8226, -37.8227, -37.8228, -37.8228, -37.8229, -37.8229, -37.8229,
        -37.8229, -37.8229, -37.8229, -37.8229], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3290e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0005, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2877, -0.4499, -0.4705, -0.4803, -0.4863, -0.4903, -0.4930, -0.4949,
        -0.4962, -0.4972, -0.4978, -0.4982, -0.4985, -0.4988, -0.4989, -0.4990,
        -0.4991, -0.4992, -0.4992, -0.4992, -0.4992, -0.4992, -0.4993, -0.4993,
        -0.4993], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.2345e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(3.2137e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0005, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4426, -54.5076, -54.5309, -54.5439, -54.5525, -54.5585, -54.5628,
        -54.5658, -54.5679, -54.5694, -54.5704, -54.5712, -54.5717, -54.5721,
        -54.5723, -54.5725, -54.5726, -54.5727, -54.5728, -54.5728, -54.5728,
        -54.5729, -54.5729, -54.5729, -54.5729], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.9296e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0005, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2244, -93.2237, -93.2232, -93.2229, -93.2226, -93.2224, -93.2223,
        -93.2222, -93.2221, -93.2221], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8227, -37.8228, -37.8228, -37.8229, -37.8229, -37.8229, -37.8229,
        -37.8229, -37.8229, -37.8229], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4990, -0.4991, -0.4992, -0.4992, -0.4992, -0.4992, -0.4992, -0.4993,
        -0.4993, -0.4993], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5725, -54.5726, -54.5727, -54.5728, -54.5728, -54.5728, -54.5729,
        -54.5729, -54.5729, -54.5729], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 22 	 3 	 CHN 	 CNH 	 0.006932529149046467

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------18----------------
TRAINING ON MOLECULE:  ,Na
SUBMOLECULES: ['Na']
SUBMOLECULE INDICES: [18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2357, -162.2468, -162.2505, -162.2524, -162.2535, -162.2544,
        -162.2551, -162.2556, -162.2557, -162.2558, -162.2559, -162.2560,
        -162.2560, -162.2560, -162.2561, -162.2561, -162.2561, -162.2561,
        -162.2561, -162.2561, -162.2561, -162.2561, -162.2561, -162.2561,
        -162.2561], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.3795e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.3795e-09, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'Na': tensor([-162.2561, -162.2561, -162.2561, -162.2561, -162.2561, -162.2561,
        -162.2561, -162.2561, -162.2561, -162.2561], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 22 	 18 	 Na 	 Na 	 5.331663909286744e-07

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------13----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1058, -460.1353, -460.1453, -460.1509, -460.1548, -460.1575,
        -460.1595, -460.1609, -460.1619, -460.1626, -460.1631, -460.1634,
        -460.1637, -460.1639, -460.1640, -460.1641, -460.1641, -460.1642,
        -460.1642, -460.1642, -460.1643, -460.1643, -460.1643, -460.1643,
        -460.1643], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8599e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.8599e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1641, -460.1641, -460.1642, -460.1642, -460.1642, -460.1643,
        -460.1643, -460.1643, -460.1643, -460.1643], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 22 	 13 	 Cl 	 Cl 	 6.19354222425428e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,  9ClH
SUBMOLECULES: ['HCl', 'Cl', 'H']
SUBMOLECULE INDICES: [9, 13, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='ClH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1712], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1712], dtype=torch.float64)
E_PRED: tensor([-460.7350, -460.7942, -460.8108, -460.8193, -460.8246, -460.8283,
        -460.8308, -460.8326, -460.8338, -460.8347, -460.8353, -460.8357,
        -460.8360, -460.8362, -460.8363, -460.8364, -460.8365, -460.8365,
        -460.8366, -460.8366, -460.8366, -460.8366, -460.8366, -460.8366,
        -460.8366], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 62, 62])
mo_energy   ---   torch.Size([2, 62])
dm_ref   ---   torch.Size([1, 2, 62, 62])
rho   ---   torch.Size([1, 2, 1068])
ao_eval   ---   torch.Size([1, 10, 1068, 62])
grid_weights   ---   torch.Size([1, 1068])
-460.4234538667477
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 62])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 62])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(4.9171e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.8341e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1093, -460.1364, -460.1452, -460.1501, -460.1534, -460.1557,
        -460.1574, -460.1586, -460.1594, -460.1600, -460.1605, -460.1608,
        -460.1610, -460.1611, -460.1612, -460.1613, -460.1614, -460.1614,
        -460.1614, -460.1614, -460.1614, -460.1615, -460.1615, -460.1615,
        -460.1615], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2725e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.8468e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3142, -0.4571, -0.4746, -0.4830, -0.4881, -0.4915, -0.4939, -0.4955,
        -0.4966, -0.4974, -0.4980, -0.4984, -0.4986, -0.4988, -0.4989, -0.4990,
        -0.4991, -0.4991, -0.4992, -0.4992, -0.4992, -0.4992, -0.4992, -0.4992,
        -0.4992], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.2102e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(3.0825e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClH': tensor([-0.1712], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'ClH': tensor([-460.8364, -460.8365, -460.8365, -460.8366, -460.8366, -460.8366,
        -460.8366, -460.8366, -460.8366, -460.8366], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1613, -460.1614, -460.1614, -460.1614, -460.1614, -460.1614,
        -460.1615, -460.1615, -460.1615, -460.1615], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4990, -0.4991, -0.4991, -0.4992, -0.4992, -0.4992, -0.4992, -0.4992,
        -0.4992, -0.4992], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 22 	 9 	 HCl 	 ClH 	 5.152538484780528e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  , 10LiH
SUBMOLECULES: ['HLi', 'Li', 'H']
SUBMOLECULE INDICES: [10, 16, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0923], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0923], dtype=torch.float64)
E_PRED: tensor([-7.9452, -8.0109, -8.0284, -8.0376, -8.0436, -8.0478, -8.0508, -8.0529,
        -8.0544, -8.0554, -8.0562, -8.0568, -8.0571, -8.0574, -8.0576, -8.0577,
        -8.0578, -8.0579, -8.0579, -8.0580, -8.0580, -8.0580, -8.0580, -8.0580,
        -8.0580], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 54, 54])
mo_energy   ---   torch.Size([2, 54])
dm_ref   ---   torch.Size([1, 2, 54, 54])
rho   ---   torch.Size([1, 2, 1271])
ao_eval   ---   torch.Size([1, 10, 1271, 54])
grid_weights   ---   torch.Size([1, 1271])
-8.038079906478378
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 54])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 54])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.5390e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.9078e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2512, -0.4392, -0.4645, -0.4765, -0.4837, -0.4885, -0.4918, -0.4940,
        -0.4956, -0.4967, -0.4975, -0.4980, -0.4984, -0.4986, -0.4988, -0.4989,
        -0.4990, -0.4991, -0.4991, -0.4992, -0.4992, -0.4992, -0.4992, -0.4992,
        -0.4992], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.1924e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(3.8883e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.7463e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4578, -7.4643, -7.4665, -7.4676, -7.4686, -7.4695, -7.4696, -7.4694,
        -7.4691, -7.4690, -7.4691, -7.4691, -7.4691, -7.4692, -7.4692, -7.4692,
        -7.4693, -7.4693, -7.4693, -7.4693, -7.4693, -7.4693, -7.4693, -7.4693,
        -7.4693], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(6.9396e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(5.4468e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.1397e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiH': tensor([-0.0923], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiH': tensor([-8.0577, -8.0578, -8.0579, -8.0579, -8.0580, -8.0580, -8.0580, -8.0580,
        -8.0580, -8.0580], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4989, -0.4990, -0.4991, -0.4991, -0.4992, -0.4992, -0.4992, -0.4992,
        -0.4992, -0.4992], dtype=torch.float64, grad_fn=<SliceBackward0>), 'Li': tensor([-7.4692, -7.4693, -7.4693, -7.4693, -7.4693, -7.4693, -7.4693, -7.4693,
        -7.4693, -7.4693], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 22 	 10 	 HLi 	 LiH 	 1.78953938044088e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 13, 13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4672, -920.4387, -920.4316, -920.4279, -920.4255, -920.4238,
        -920.4226, -920.4218, -920.4212, -920.4208, -920.4206, -920.4204,
        -920.4202, -920.4201, -920.4201, -920.4200, -920.4200, -920.4200,
        -920.4200, -920.4200, -920.4199, -920.4199, -920.4199, -920.4199,
        -920.4199], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885617
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.8275e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.6550e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1064, -460.1327, -460.1411, -460.1458, -460.1489, -460.1511,
        -460.1527, -460.1538, -460.1546, -460.1552, -460.1556, -460.1559,
        -460.1561, -460.1562, -460.1563, -460.1564, -460.1564, -460.1565,
        -460.1565, -460.1565, -460.1565, -460.1565, -460.1565, -460.1565,
        -460.1565], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.0720e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.6601e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4200, -920.4200, -920.4200, -920.4200, -920.4200, -920.4199,
        -920.4199, -920.4199, -920.4199, -920.4199], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1564, -460.1564, -460.1565, -460.1565, -460.1565, -460.1565,
        -460.1565, -460.1565, -460.1565, -460.1565], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 22 	 5 	 Cl2 	 Cl2 	 3.5652868108464905e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  , 11NaNa
SUBMOLECULES: ['Na2', 'Na', 'Na']
SUBMOLECULE INDICES: [11, 18, 18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0273], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0273], dtype=torch.float64)
E_PRED: tensor([-324.6426, -324.5727, -324.5546, -324.5454, -324.5395, -324.5356,
        -324.5329, -324.5310, -324.5297, -324.5288, -324.5282, -324.5277,
        -324.5274, -324.5272, -324.5270, -324.5269, -324.5268, -324.5268,
        -324.5267, -324.5267, -324.5267, -324.5267, -324.5267, -324.5267,
        -324.5267], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 1992])
ao_eval   ---   torch.Size([1, 10, 1992, 94])
grid_weights   ---   torch.Size([1, 1992])
-324.03216786711033
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(4.5601e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.1202e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2314, -162.2422, -162.2458, -162.2476, -162.2487, -162.2496,
        -162.2502, -162.2506, -162.2508, -162.2509, -162.2509, -162.2510,
        -162.2510, -162.2510, -162.2511, -162.2511, -162.2511, -162.2511,
        -162.2511, -162.2511, -162.2511, -162.2511, -162.2511, -162.2511,
        -162.2511], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2963e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.1215e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NaNa': tensor([-0.0273], dtype=torch.float64), 'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'NaNa': tensor([-324.5269, -324.5268, -324.5268, -324.5267, -324.5267, -324.5267,
        -324.5267, -324.5267, -324.5267, -324.5267], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Na': tensor([-162.2511, -162.2511, -162.2511, -162.2511, -162.2511, -162.2511,
        -162.2511, -162.2511, -162.2511, -162.2511], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 22 	 11 	 Na2 	 Na2 	 1.9831440972254297e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e22)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e22/2022-11-29_10:09:21.574160_1.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e22/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 22 || ,[' rho : 2.897543', ' ae : 53.743557', ' E : 3.465441'] ,|| total loss 40.152461 || CHKPT: _1.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 17, 17]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.7956, -109.8136, -109.7081, -109.6408, -109.5967, -109.5666,
        -109.5458, -109.5313, -109.5212, -109.5142, -109.5093, -109.5058,
        -109.5035, -109.5018, -109.5006, -109.4998, -109.4993, -109.4989,
        -109.4986, -109.4984, -109.4983, -109.4982, -109.4981, -109.4980,
        -109.4980], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018879
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.2256e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0002, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4068, -54.4719, -54.5044, -54.5239, -54.5373, -54.5468, -54.5536,
        -54.5585, -54.5620, -54.5644, -54.5662, -54.5674, -54.5683, -54.5689,
        -54.5693, -54.5696, -54.5698, -54.5699, -54.5700, -54.5701, -54.5702,
        -54.5702, -54.5702, -54.5702, -54.5702], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.6336e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0002, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4998, -109.4993, -109.4989, -109.4986, -109.4984, -109.4983,
        -109.4982, -109.4981, -109.4980, -109.4980], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5696, -54.5698, -54.5699, -54.5700, -54.5701, -54.5702, -54.5702,
        -54.5702, -54.5702, -54.5702], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 23 	 1 	 N2 	 N2 	 9.701821664466837e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,  8OC
SUBMOLECULES: ['CO', 'O', 'C']
SUBMOLECULE INDICES: [8, 19, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='OC', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4142], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4142], dtype=torch.float64)
E_PRED: tensor([-113.6260, -113.3794, -113.3217, -113.2908, -113.2722, -113.2594,
        -113.2505, -113.2442, -113.2398, -113.2367, -113.2346, -113.2330,
        -113.2320, -113.2312, -113.2307, -113.2303, -113.2301, -113.2299,
        -113.2297, -113.2296, -113.2296, -113.2295, -113.2295, -113.2295,
        -113.2295], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 3279])
ao_eval   ---   torch.Size([1, 10, 3279, 78])
grid_weights   ---   torch.Size([1, 3279])
-113.201730216515
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.3359e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7441, -37.7817, -37.7954, -37.8031, -37.8083, -37.8119, -37.8144,
        -37.8163, -37.8176, -37.8185, -37.8191, -37.8196, -37.8199, -37.8201,
        -37.8203, -37.8204, -37.8205, -37.8205, -37.8206, -37.8206, -37.8206,
        -37.8206, -37.8207, -37.8207, -37.8207], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6918e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9523, -74.9931, -75.0124, -75.0242, -75.0323, -75.0381, -75.0423,
        -75.0454, -75.0475, -75.0491, -75.0502, -75.0510, -75.0515, -75.0519,
        -75.0522, -75.0524, -75.0525, -75.0526, -75.0527, -75.0527, -75.0527,
        -75.0528, -75.0528, -75.0528, -75.0528], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5327e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'OC': tensor([-0.4142], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'OC': tensor([-113.2303, -113.2301, -113.2299, -113.2297, -113.2296, -113.2296,
        -113.2295, -113.2295, -113.2295, -113.2295], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8204, -37.8205, -37.8205, -37.8206, -37.8206, -37.8206, -37.8206,
        -37.8207, -37.8207, -37.8207], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0524, -75.0525, -75.0526, -75.0527, -75.0527, -75.0527, -75.0528,
        -75.0528, -75.0528, -75.0528], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 23 	 8 	 CO 	 OC 	 0.0007911457523924852

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7399, -37.7781, -37.7928, -37.8011, -37.8067, -37.8107, -37.8135,
        -37.8155, -37.8170, -37.8180, -37.8187, -37.8192, -37.8196, -37.8198,
        -37.8200, -37.8201, -37.8202, -37.8203, -37.8203, -37.8203, -37.8204,
        -37.8204, -37.8204, -37.8204, -37.8204], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7393e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.7393e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8201, -37.8202, -37.8203, -37.8203, -37.8203, -37.8204, -37.8204,
        -37.8204, -37.8204, -37.8204], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 23 	 12 	 C 	 C 	 9.44913112235339e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 12, 17, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-93.9490, -93.4995, -93.3825, -93.3330, -93.2967, -93.2737, -93.2571,
        -93.2455, -93.2373, -93.2315, -93.2273, -93.2243, -93.2222, -93.2207,
        -93.2196, -93.2188, -93.2182, -93.2178, -93.2175, -93.2173, -93.2171,
        -93.2170, -93.2170, -93.2169, -93.2168], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633898
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.5326e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0005, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7518, -37.7872, -37.7991, -37.8056, -37.8099, -37.8130, -37.8151,
        -37.8166, -37.8177, -37.8185, -37.8190, -37.8194, -37.8196, -37.8198,
        -37.8200, -37.8200, -37.8201, -37.8202, -37.8202, -37.8202, -37.8202,
        -37.8202, -37.8202, -37.8202, -37.8202], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7595e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0005, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2255, -0.4311, -0.4600, -0.4736, -0.4818, -0.4872, -0.4908, -0.4934,
        -0.4951, -0.4963, -0.4972, -0.4978, -0.4982, -0.4985, -0.4987, -0.4988,
        -0.4989, -0.4990, -0.4991, -0.4991, -0.4991, -0.4991, -0.4991, -0.4992,
        -0.4992], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.1163e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(4.6586e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0005, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4132, -54.4814, -54.5112, -54.5287, -54.5405, -54.5489, -54.5549,
        -54.5591, -54.5622, -54.5643, -54.5658, -54.5669, -54.5676, -54.5681,
        -54.5685, -54.5687, -54.5689, -54.5690, -54.5691, -54.5692, -54.5692,
        -54.5693, -54.5693, -54.5693, -54.5693], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.8798e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0005, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2188, -93.2182, -93.2178, -93.2175, -93.2173, -93.2171, -93.2170,
        -93.2170, -93.2169, -93.2168], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8200, -37.8201, -37.8202, -37.8202, -37.8202, -37.8202, -37.8202,
        -37.8202, -37.8202, -37.8202], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4988, -0.4989, -0.4990, -0.4991, -0.4991, -0.4991, -0.4991, -0.4991,
        -0.4992, -0.4992], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5687, -54.5689, -54.5690, -54.5691, -54.5692, -54.5692, -54.5693,
        -54.5693, -54.5693, -54.5693], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 23 	 3 	 CHN 	 CNH 	 0.006841690171596497

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 12, 19, 19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.4599, -188.7330, -188.5830, -188.4944, -188.4399, -188.4027,
        -188.3767, -188.3583, -188.3454, -188.3362, -188.3296, -188.3250,
        -188.3217, -188.3193, -188.3177, -188.3165, -188.3156, -188.3150,
        -188.3145, -188.3142, -188.3140, -188.3138, -188.3137, -188.3136,
        -188.3136], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.4017587505662
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6971e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7375, -37.7757, -37.7910, -37.7997, -37.8056, -37.8098, -37.8128,
        -37.8149, -37.8164, -37.8175, -37.8182, -37.8188, -37.8192, -37.8194,
        -37.8196, -37.8197, -37.8198, -37.8199, -37.8199, -37.8200, -37.8200,
        -37.8200, -37.8200, -37.8200, -37.8200], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8031e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9539, -74.9957, -75.0142, -75.0252, -75.0328, -75.0382, -75.0421,
        -75.0449, -75.0469, -75.0483, -75.0493, -75.0500, -75.0505, -75.0509,
        -75.0511, -75.0513, -75.0514, -75.0515, -75.0516, -75.0516, -75.0517,
        -75.0517, -75.0517, -75.0517, -75.0517], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7627e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3165, -188.3156, -188.3150, -188.3145, -188.3142, -188.3140,
        -188.3138, -188.3137, -188.3136, -188.3136], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8197, -37.8198, -37.8199, -37.8199, -37.8200, -37.8200, -37.8200,
        -37.8200, -37.8200, -37.8200], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0513, -75.0514, -75.0515, -75.0516, -75.0516, -75.0517, -75.0517,
        -75.0517, -75.0517, -75.0517], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 23 	 4 	 CO2 	 CO2 	 0.012589837913709708

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------18----------------
TRAINING ON MOLECULE:  ,Na
SUBMOLECULES: ['Na']
SUBMOLECULE INDICES: [18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2193, -162.2320, -162.2372, -162.2401, -162.2420, -162.2433,
        -162.2442, -162.2450, -162.2455, -162.2457, -162.2458, -162.2459,
        -162.2459, -162.2460, -162.2460, -162.2460, -162.2461, -162.2461,
        -162.2461, -162.2461, -162.2461, -162.2461, -162.2461, -162.2461,
        -162.2461], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.7150e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.7150e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'Na': tensor([-162.2460, -162.2461, -162.2461, -162.2461, -162.2461, -162.2461,
        -162.2461, -162.2461, -162.2461, -162.2461], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 23 	 18 	 Na 	 Na 	 1.6860125835575468e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 16, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.3198, -107.3092, -107.2678, -107.2540, -107.2452, -107.2396,
        -107.2359, -107.2331, -107.2313, -107.2303, -107.2298, -107.2296,
        -107.2297, -107.2299, -107.2301, -107.2304, -107.2307, -107.2309,
        -107.2311, -107.2313, -107.2315, -107.2316, -107.2317, -107.2318,
        -107.2319], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.305942205048
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.6426e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6769, -99.6984, -99.7064, -99.7110, -99.7141, -99.7164, -99.7180,
        -99.7191, -99.7199, -99.7205, -99.7209, -99.7212, -99.7214, -99.7215,
        -99.7216, -99.7217, -99.7218, -99.7218, -99.7218, -99.7218, -99.7218,
        -99.7219, -99.7219, -99.7219, -99.7219], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0390e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4534, -7.4597, -7.4631, -7.4650, -7.4663, -7.4672, -7.4682, -7.4688,
        -7.4687, -7.4684, -7.4683, -7.4682, -7.4682, -7.4683, -7.4683, -7.4684,
        -7.4684, -7.4684, -7.4684, -7.4685, -7.4685, -7.4685, -7.4685, -7.4685,
        -7.4685], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(6.3997e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(6.5305e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2304, -107.2307, -107.2309, -107.2311, -107.2313, -107.2315,
        -107.2316, -107.2317, -107.2318, -107.2319], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7217, -99.7218, -99.7218, -99.7218, -99.7218, -99.7218, -99.7219,
        -99.7219, -99.7219, -99.7219], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4684, -7.4684, -7.4684, -7.4684, -7.4685, -7.4685, -7.4685, -7.4685,
        -7.4685, -7.4685], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 23 	 2 	 FLi 	 LiF 	 0.007653365045559748

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 15, 15]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0261, -1.1120, -1.1344, -1.1458, -1.1531, -1.1580, -1.1614, -1.1638,
        -1.1655, -1.1666, -1.1674, -1.1680, -1.1684, -1.1687, -1.1689, -1.1690,
        -1.1691, -1.1692, -1.1692, -1.1693, -1.1693, -1.1693, -1.1693, -1.1693,
        -1.1693], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668206
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.1073e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(4.2146e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2464, -0.4377, -0.4636, -0.4759, -0.4833, -0.4882, -0.4915, -0.4938,
        -0.4954, -0.4965, -0.4973, -0.4979, -0.4982, -0.4985, -0.4987, -0.4988,
        -0.4989, -0.4990, -0.4990, -0.4991, -0.4991, -0.4991, -0.4991, -0.4991,
        -0.4991], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.0763e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(4.6385e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.0299e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1690, -1.1691, -1.1692, -1.1692, -1.1693, -1.1693, -1.1693, -1.1693,
        -1.1693, -1.1693], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4988, -0.4989, -0.4990, -0.4990, -0.4991, -0.4991, -0.4991, -0.4991,
        -0.4991, -0.4991], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 23 	 0 	 H2 	 H2 	 2.4720128312433656e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,  9ClH
SUBMOLECULES: ['HCl', 'Cl', 'H']
SUBMOLECULE INDICES: [9, 13, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='ClH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1712], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1712], dtype=torch.float64)
E_PRED: tensor([-460.7318, -460.7807, -460.7945, -460.8016, -460.8061, -460.8091,
        -460.8112, -460.8127, -460.8137, -460.8144, -460.8149, -460.8153,
        -460.8155, -460.8157, -460.8158, -460.8159, -460.8159, -460.8160,
        -460.8160, -460.8160, -460.8160, -460.8161, -460.8161, -460.8161,
        -460.8161], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 62, 62])
mo_energy   ---   torch.Size([2, 62])
dm_ref   ---   torch.Size([1, 2, 62, 62])
rho   ---   torch.Size([1, 2, 1068])
ao_eval   ---   torch.Size([1, 10, 1068, 62])
grid_weights   ---   torch.Size([1, 1068])
-460.4234538667477
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 62])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 62])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(4.9303e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.8606e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0850, -460.1137, -460.1232, -460.1286, -460.1322, -460.1348,
        -460.1367, -460.1380, -460.1389, -460.1396, -460.1401, -460.1404,
        -460.1406, -460.1408, -460.1409, -460.1410, -460.1411, -460.1411,
        -460.1411, -460.1412, -460.1412, -460.1412, -460.1412, -460.1412,
        -460.1412], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.3590e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.8639e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2899, -0.4504, -0.4707, -0.4804, -0.4864, -0.4903, -0.4930, -0.4948,
        -0.4961, -0.4970, -0.4977, -0.4981, -0.4984, -0.4986, -0.4988, -0.4989,
        -0.4990, -0.4990, -0.4990, -0.4991, -0.4991, -0.4991, -0.4991, -0.4991,
        -0.4991], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.0695e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(4.1416e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0001, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClH': tensor([-0.1712], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'ClH': tensor([-460.8159, -460.8159, -460.8160, -460.8160, -460.8160, -460.8160,
        -460.8161, -460.8161, -460.8161, -460.8161], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1410, -460.1411, -460.1411, -460.1411, -460.1412, -460.1412,
        -460.1412, -460.1412, -460.1412, -460.1412], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4989, -0.4990, -0.4990, -0.4990, -0.4991, -0.4991, -0.4991, -0.4991,
        -0.4991, -0.4991], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 23 	 9 	 HCl 	 ClH 	 4.787031004343663e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,  6FF
SUBMOLECULES: ['F2', 'F', 'F']
SUBMOLECULE INDICES: [6, 14, 14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0618], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0618], dtype=torch.float64)
E_PRED: tensor([-199.6716, -199.5788, -199.5537, -199.5407, -199.5324, -199.5267,
        -199.5227, -199.5199, -199.5180, -199.5166, -199.5157, -199.5150,
        -199.5145, -199.5142, -199.5139, -199.5138, -199.5136, -199.5136,
        -199.5135, -199.5135, -199.5134, -199.5134, -199.5134, -199.5134,
        -199.5134], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 4698])
ao_eval   ---   torch.Size([1, 10, 4698, 78])
grid_weights   ---   torch.Size([1, 4698])
-199.3364659747656
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.7001e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.4003e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6678, -99.6878, -99.6982, -99.7046, -99.7091, -99.7124, -99.7148,
        -99.7166, -99.7178, -99.7187, -99.7193, -99.7198, -99.7201, -99.7203,
        -99.7205, -99.7206, -99.7207, -99.7207, -99.7208, -99.7208, -99.7208,
        -99.7208, -99.7208, -99.7208, -99.7209], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2279e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.4126e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'FF': tensor([-0.0618], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'FF': tensor([-199.5138, -199.5136, -199.5136, -199.5135, -199.5135, -199.5134,
        -199.5134, -199.5134, -199.5134, -199.5134], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7206, -99.7207, -99.7207, -99.7208, -99.7208, -99.7208, -99.7208,
        -99.7208, -99.7208, -99.7209], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 23 	 6 	 F2 	 F2 	 2.286156861374862e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------14----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [14]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6739, -99.6955, -99.7040, -99.7089, -99.7122, -99.7146, -99.7163,
        -99.7176, -99.7185, -99.7191, -99.7195, -99.7198, -99.7200, -99.7202,
        -99.7203, -99.7204, -99.7204, -99.7205, -99.7205, -99.7205, -99.7205,
        -99.7206, -99.7206, -99.7206, -99.7206], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 13328])
ao_eval   ---   torch.Size([1, 10, 13328, 39])
grid_weights   ---   torch.Size([1, 13328])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2747e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.2747e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7204, -99.7204, -99.7205, -99.7205, -99.7205, -99.7205, -99.7206,
        -99.7206, -99.7206, -99.7206], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 23 	 14 	 F 	 F 	 4.157824555476757e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  , 11NaNa
SUBMOLECULES: ['Na2', 'Na', 'Na']
SUBMOLECULE INDICES: [11, 18, 18]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0273], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0273], dtype=torch.float64)
E_PRED: tensor([-324.5788, -324.5385, -324.5281, -324.5228, -324.5195, -324.5172,
        -324.5157, -324.5146, -324.5138, -324.5133, -324.5129, -324.5126,
        -324.5124, -324.5123, -324.5122, -324.5122, -324.5121, -324.5121,
        -324.5121, -324.5120, -324.5120, -324.5120, -324.5120, -324.5120,
        -324.5120], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 1992])
ao_eval   ---   torch.Size([1, 10, 1992, 94])
grid_weights   ---   torch.Size([1, 1992])
-324.03216786711033
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(4.4399e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.8799e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Na', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-162.2546], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-162.2546], dtype=torch.float64)
E_PRED: tensor([-162.2192, -162.2315, -162.2361, -162.2387, -162.2403, -162.2413,
        -162.2422, -162.2429, -162.2432, -162.2434, -162.2435, -162.2435,
        -162.2436, -162.2436, -162.2437, -162.2437, -162.2437, -162.2437,
        -162.2437, -162.2437, -162.2437, -162.2437, -162.2437, -162.2438,
        -162.2438], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 37432])
ao_eval   ---   torch.Size([1, 10, 37432, 47])
grid_weights   ---   torch.Size([1, 37432])
-162.2546
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2561e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.8925e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NaNa': tensor([-0.0273], dtype=torch.float64), 'Na': tensor([-162.2546], dtype=torch.float64)}
PRED_DICT:  ,{'NaNa': tensor([-324.5122, -324.5121, -324.5121, -324.5121, -324.5120, -324.5120,
        -324.5120, -324.5120, -324.5120, -324.5120], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Na': tensor([-162.2437, -162.2437, -162.2437, -162.2437, -162.2437, -162.2437,
        -162.2437, -162.2437, -162.2438, -162.2438], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 23 	 11 	 Na2 	 Na2 	 1.8627330405069342e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  , 10LiH
SUBMOLECULES: ['HLi', 'Li', 'H']
SUBMOLECULE INDICES: [10, 16, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0923], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0923], dtype=torch.float64)
E_PRED: tensor([-7.9291, -8.0035, -8.0233, -8.0337, -8.0404, -8.0452, -8.0486, -8.0510,
        -8.0527, -8.0539, -8.0548, -8.0554, -8.0558, -8.0561, -8.0564, -8.0565,
        -8.0566, -8.0567, -8.0568, -8.0568, -8.0568, -8.0569, -8.0569, -8.0569,
        -8.0569], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 54, 54])
mo_energy   ---   torch.Size([2, 54])
dm_ref   ---   torch.Size([1, 2, 54, 54])
rho   ---   torch.Size([1, 2, 1271])
ao_eval   ---   torch.Size([1, 10, 1271, 54])
grid_weights   ---   torch.Size([1, 1271])
-8.038079906478378
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 54])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 54])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(8.5570e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.7114e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3227, -0.4593, -0.4757, -0.4837, -0.4885, -0.4918, -0.4940, -0.4956,
        -0.4966, -0.4974, -0.4979, -0.4983, -0.4985, -0.4987, -0.4988, -0.4989,
        -0.4990, -0.4990, -0.4990, -0.4991, -0.4991, -0.4991, -0.4991, -0.4991,
        -0.4991], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.0554e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(3.9118e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.5225e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4552, -7.4621, -7.4646, -7.4660, -7.4669, -7.4679, -7.4684, -7.4683,
        -7.4680, -7.4679, -7.4679, -7.4679, -7.4679, -7.4680, -7.4680, -7.4681,
        -7.4681, -7.4681, -7.4681, -7.4681, -7.4681, -7.4681, -7.4681, -7.4681,
        -7.4681], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(6.1356e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(7.0096e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(4.7566e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiH': tensor([-0.0923], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiH': tensor([-8.0565, -8.0566, -8.0567, -8.0568, -8.0568, -8.0568, -8.0569, -8.0569,
        -8.0569, -8.0569], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4989, -0.4990, -0.4990, -0.4990, -0.4991, -0.4991, -0.4991, -0.4991,
        -0.4991, -0.4991], dtype=torch.float64, grad_fn=<SliceBackward0>), 'Li': tensor([-7.4681, -7.4681, -7.4681, -7.4681, -7.4681, -7.4681, -7.4681, -7.4681,
        -7.4681, -7.4681], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 23 	 10 	 HLi 	 LiH 	 1.6197101545621183e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------15----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2586, -0.4413, -0.4656, -0.4772, -0.4841, -0.4888, -0.4919, -0.4941,
        -0.4956, -0.4967, -0.4974, -0.4979, -0.4983, -0.4985, -0.4987, -0.4988,
        -0.4989, -0.4990, -0.4990, -0.4990, -0.4991, -0.4991, -0.4991, -0.4991,
        -0.4991], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.0536e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(4.6642e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.8108e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4988, -0.4989, -0.4990, -0.4990, -0.4990, -0.4991, -0.4991, -0.4991,
        -0.4991, -0.4991], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 23 	 15 	 H 	 H 	 1.949511931562035e-07

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,  7CCHH
SUBMOLECULES: ['C2H2', 'C', 'C', 'H', 'H']
SUBMOLECULE INDICES: [7, 12, 12, 15, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C2H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6459], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6459], dtype=torch.float64)
E_PRED: tensor([-78.3115, -73.2194, -75.1100, -75.8608, -76.3016, -76.5922, -76.7910,
        -76.9287, -77.0247, -77.0919, -77.1388, -77.1717, -77.1948, -77.2110,
        -77.2223, -77.2303, -77.2358, -77.2397, -77.2424, -77.2443, -77.2457,
        -77.2466, -77.2473, -77.2477, -77.2480], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 108, 108])
mo_energy   ---   torch.Size([2, 108])
dm_ref   ---   torch.Size([1, 2, 108, 108])
rho   ---   torch.Size([1, 2, 1924])
ao_eval   ---   torch.Size([1, 10, 1924, 108])
grid_weights   ---   torch.Size([1, 1924])
-77.2336470993193
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 108])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 108])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.5470e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7312, -37.7683, -37.7852, -37.7951, -37.8018, -37.8066, -37.8100,
        -37.8125, -37.8142, -37.8155, -37.8164, -37.8170, -37.8174, -37.8177,
        -37.8180, -37.8181, -37.8182, -37.8183, -37.8183, -37.8184, -37.8184,
        -37.8184, -37.8184, -37.8184, -37.8185], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.0957e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3006, -0.4533, -0.4724, -0.4815, -0.4871, -0.4908, -0.4933, -0.4951,
        -0.4963, -0.4971, -0.4977, -0.4981, -0.4984, -0.4986, -0.4988, -0.4989,
        -0.4989, -0.4990, -0.4990, -0.4990, -0.4991, -0.4991, -0.4991, -0.4991,
        -0.4991], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.0526e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(4.1692e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CCHH': tensor([-0.6459], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'CCHH': tensor([-77.2303, -77.2358, -77.2397, -77.2424, -77.2443, -77.2457, -77.2466,
        -77.2473, -77.2477, -77.2480], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8181, -37.8182, -37.8183, -37.8183, -37.8184, -37.8184, -37.8184,
        -37.8184, -37.8184, -37.8185], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4989, -0.4989, -0.4990, -0.4990, -0.4990, -0.4991, -0.4991, -0.4991,
        -0.4991, -0.4991], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 23 	 7 	 C2H2 	 C2H2 	 0.00026141572668343714

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------17----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [17]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4090, -54.4766, -54.5071, -54.5250, -54.5373, -54.5459, -54.5521,
        -54.5565, -54.5597, -54.5619, -54.5634, -54.5645, -54.5653, -54.5659,
        -54.5662, -54.5665, -54.5667, -54.5668, -54.5669, -54.5670, -54.5670,
        -54.5671, -54.5671, -54.5671, -54.5671], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.5507e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.5507e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5665, -54.5667, -54.5668, -54.5669, -54.5670, -54.5670, -54.5671,
        -54.5671, -54.5671, -54.5671], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 23 	 17 	 N 	 N 	 0.00011430770149755934

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 13, 13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4245, -920.4017, -920.3963, -920.3934, -920.3916, -920.3904,
        -920.3895, -920.3889, -920.3885, -920.3882, -920.3880, -920.3879,
        -920.3878, -920.3877, -920.3877, -920.3876, -920.3876, -920.3876,
        -920.3876, -920.3876, -920.3876, -920.3876, -920.3876, -920.3876,
        -920.3876], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885617
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.8615e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.7230e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0968, -460.1201, -460.1273, -460.1312, -460.1339, -460.1357,
        -460.1370, -460.1379, -460.1386, -460.1390, -460.1394, -460.1396,
        -460.1398, -460.1399, -460.1400, -460.1400, -460.1401, -460.1401,
        -460.1401, -460.1401, -460.1401, -460.1401, -460.1401, -460.1401,
        -460.1401], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.4345e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.7274e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.3876, -920.3876, -920.3876, -920.3876, -920.3876, -920.3876,
        -920.3876, -920.3876, -920.3876, -920.3876], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1400, -460.1401, -460.1401, -460.1401, -460.1401, -460.1401,
        -460.1401, -460.1401, -460.1401, -460.1401], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 23 	 5 	 Cl2 	 Cl2 	 3.797149727616574e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------13----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [13]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0776, -460.1088, -460.1196, -460.1259, -460.1301, -460.1331,
        -460.1353, -460.1369, -460.1380, -460.1388, -460.1394, -460.1398,
        -460.1401, -460.1403, -460.1405, -460.1406, -460.1406, -460.1407,
        -460.1407, -460.1407, -460.1407, -460.1408, -460.1408, -460.1408,
        -460.1408], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 18106])
ao_eval   ---   torch.Size([1, 10, 18106, 47])
grid_weights   ---   torch.Size([1, 18106])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.8078e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.8078e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1406, -460.1406, -460.1407, -460.1407, -460.1407, -460.1407,
        -460.1408, -460.1408, -460.1408, -460.1408], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 23 	 13 	 Cl 	 Cl 	 1.2213435276759614e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------19----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [19]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9476, -74.9849, -75.0053, -75.0181, -75.0271, -75.0337, -75.0384,
        -75.0419, -75.0443, -75.0461, -75.0473, -75.0482, -75.0489, -75.0493,
        -75.0496, -75.0498, -75.0500, -75.0501, -75.0502, -75.0502, -75.0503,
        -75.0503, -75.0503, -75.0503, -75.0503], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.0966e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.0966e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0498, -75.0500, -75.0501, -75.0502, -75.0502, -75.0503, -75.0503,
        -75.0503, -75.0503, -75.0503], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 23 	 19 	 O 	 O 	 6.739476835481639e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------16----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [16]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4552, -7.4620, -7.4647, -7.4660, -7.4670, -7.4680, -7.4686, -7.4685,
        -7.4682, -7.4681, -7.4680, -7.4681, -7.4681, -7.4681, -7.4682, -7.4682,
        -7.4682, -7.4683, -7.4683, -7.4683, -7.4683, -7.4683, -7.4683, -7.4683,
        -7.4683], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(6.1128e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(6.7790e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.2293e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4682, -7.4682, -7.4683, -7.4683, -7.4683, -7.4683, -7.4683, -7.4683,
        -7.4683, -7.4683], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 23 	 16 	 Li 	 Li 	 2.2251428415120556e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e23)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e23/2022-11-29_10:09:21.574160_2.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/12/MODEL_MGGA_e23/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 23 || ,[' rho : 2.881063', ' ae : 53.467769', ' E : 4.020753'] ,|| total loss 39.944628 || CHKPT: _2.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------15----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2840, -0.4487, -0.4698, -0.4798, -0.4860, -0.4900, -0.4928, -0.4947,
        -0.4960, -0.4970, -0.4976, -0.4981, -0.4984, -0.4986, -0.4988, -0.4989,
        -0.4990, -0.4990, -0.4990, -0.4991, -0.4991, -0.4991, -0.4991, -0.4991,
        -0.4991], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.0972e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(4.1385e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.8195e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 16. Skipping to next.
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4989, -0.4990, -0.4990, -0.4990, -0.4991, -0.4991, -0.4991, -0.4991,
        -0.4991, -0.4991], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 24 	 15 	 H 	 H 	 1.8170102634621006e-07

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  , 10LiH
SUBMOLECULES: ['HLi', 'Li', 'H']
SUBMOLECULE INDICES: [10, 16, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0923], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0923], dtype=torch.float64)
E_PRED: tensor([-7.9636, -8.0177, -8.0324, -8.0402, -8.0453, -8.0488, -8.0513, -8.0531,
        -8.0544, -8.0553, -8.0559, -8.0564, -8.0567, -8.0569, -8.0571, -8.0572,
        -8.0573, -8.0574, -8.0574, -8.0574, -8.0575, -8.0575, -8.0575, -8.0575,
        -8.0575], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 54, 54])
mo_energy   ---   torch.Size([2, 54])
dm_ref   ---   torch.Size([1, 2, 54, 54])
rho   ---   torch.Size([1, 2, 1271])
ao_eval   ---   torch.Size([1, 10, 1271, 54])
grid_weights   ---   torch.Size([1, 1271])
-8.038079906478378
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 54])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 54])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(8.7352e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.7470e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3415, -0.4642, -0.4785, -0.4855, -0.4898, -0.4927, -0.4946, -0.4960,
        -0.4969, -0.4976, -0.4981, -0.4984, -0.4986, -0.4988, -0.4989, -0.4990,
        -0.4990, -0.4991, -0.4991, -0.4991, -0.4991, -0.4991, -0.4991, -0.4991,
        -0.4991], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(9.1096e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(3.4905e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.5690e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4532, -7.4590, -7.4625, -7.4646, -7.4660, -7.4669, -7.4679, -7.4687,
        -7.4688, -7.4685, -7.4683, -7.4682, -7.4682, -7.4683, -7.4683, -7.4684,
        -7.4684, -7.4684, -7.4684, -7.4685, -7.4685, -7.4685, -7.4685, -7.4685,
        -7.4685], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(6.1761e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(6.5439e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(4.8108e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiH': tensor([-0.0923], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiH': tensor([-8.0572, -8.0573, -8.0574, -8.0574, -8.0574, -8.0575, -8.0575, -8.0575,
        -8.0575, -8.0575], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4990, -0.4990, -0.4991, -0.4991, -0.4991, -0.4991, -0.4991, -0.4991,
        -0.4991, -0.4991], dtype=torch.float64, grad_fn=<SliceBackward0>), 'Li': tensor([-7.4684, -7.4684, -7.4684, -7.4684, -7.4685, -7.4685, -7.4685, -7.4685,
        -7.4685, -7.4685], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 24 	 10 	 HLi 	 LiH 	 1.355217157815445e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------16----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [16]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Irrelevant index 15. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4549, -7.4618, -7.4646, -7.4661, -7.4671, -7.4680, -7.4688, -7.4688,
        -7.4685, -7.4683, -7.4683, -7.4683, -7.4683, -7.4684, -7.4684, -7.4685,
        -7.4685, -7.4685, -7.4685, -7.4685, -7.4685, -7.4686, -7.4686, -7.4686,
        -7.4686], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
H_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(6.1887e-07, dtype=torch.float64, grad_fn=<DivBackward0>), 'E': tensor(6.4270e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.2442e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 17. Skipping to next.
Irrelevant index 18. Skipping to next.
Irrelevant index 19. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4685, -7.4685, -7.4685, -7.4685, -7.4685, -7.4685, -7.4686, -7.4686,
        -7.4686, -7.4686], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 24 	 16 	 Li 	 Li 	 2.1088139629366573e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,  7CCHH
SUBMOLECULES: ['C2H2', 'C', 'C', 'H', 'H']
SUBMOLECULE INDICES: [7, 12, 12, 15, 15]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C2H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6459], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6459], dtype=torch.float64)
E_PRED: tensor([-78.3771, -73.3337, -75.1610, -75.8931, -76.3243, -76.6090, -76.8039,
        -76.9391, -77.0333, -77.0992, -77.1453, -77.1777, -77.2003, -77.2162,
        -77.2273, -77.2351, -77.2406, -77.2444, -77.2471, -77.2489, -77.2502,
        -77.2512, -77.2518, -77.2523, -77.2526], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 108, 108])
mo_energy   ---   torch.Size([2, 108])
dm_ref   ---   torch.Size([1, 2, 108, 108])
rho   ---   torch.Size([1, 2, 1924])
ao_eval   ---   torch.Size([1, 10, 1924, 108])
grid_weights   ---   torch.Size([1, 1924])
-77.2336470993193
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 108])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 108])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.5550e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7308, -37.7658, -37.7837, -37.7945, -37.8018, -37.8071, -37.8109,
        -37.8136, -37.8156, -37.8170, -37.8180, -37.8187, -37.8192, -37.8195,
        -37.8197, -37.8199, -37.8200, -37.8201, -37.8202, -37.8202, -37.8203,
        -37.8203, -37.8203, -37.8203, -37.8203], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7646e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 13. Skipping to next.
Irrelevant index 14. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
