{
    "pretrain_loc": "/gpfs/home/awills/dpyscfl/models/pretrained/scan",
    "type": "MGGA",
    "datapath": "/gpfs/scratch/awills/swxcd/data/test_subset_ps2/06",
    "reftraj": "/gpfs/scratch/awills/swxcd/aegis/test_subset_ps2/06/subat_ref.traj",
    "n_hidden": 16,
    "hyb_par": 0.0,
    "E_weight": 0.01,
    "rho_weight": 20,
    "ae_weight": 1,
    "modelpath": "",
    "optimpath": "",
    "logpath": ".",
    "testrun": false,
    "lr": 0.0001,
    "l2": 1e-06,
    "hnorm": false,
    "print_stdout": false,
    "print_names": false,
    "nonsc_weight": 0.01,
    "start_converged": false,
    "scf_steps": 25,
    "polynomial": false,
    "free": false,
    "freec": false,
    "meta_x": null,
    "rho_alt": false,
    "radical_factor": 1.0,
    "forcedensloss": false,
    "forceEloss": false,
    "freezeappend": 0,
    "loadfa": 0,
    "outputlayergrad": false,
    "checkgrad": false,
    "testmol": "",
    "torchtype": "float",
    "testall": false,
    "targetdir": "/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06",
    "valtraj": "",
    "valbasis": "6-311++G(3df,2pd)",
    "valpol": true,
    "valgridlevel": 5,
    "valmaxcycle": 100,
    "noxcdiffpop": false,
    "testpop": false,
    "passthrough": true,
    "chkptmax": 20
}
READING REFERENCE TRAJECTORY.
READING DATASET
LOADING DATASET INTO PYTORCH
PARSING NON-ATOMIC NON-REACTION MOLECULES
{'  0HH': [0], '  1NN': [1], '  2LiF': [2], '  3CNH': [3], '  4COO': [4], '  5ClCl': [5]}
PARSING NEUTRAL, PURE NON-REACTION ATOMS. CHARGE FLAG NOT SET.
{'C': [6], 'Cl': [7], 'F': [8], 'H': [9], 'Li': [10], 'N': [11], 'O': [12]}
PARSING SUPPLEMENTAL NEUTRAL, PURE ATOMS (FROM FRAC DATASET)
{}
PARSING SUPPLEMENTAL CHARGED, PURE ATOMS
{}
PARSING SUPPLEMENTAL FRACTIONAL ATOMS
{}
CONCATENATING SUPPLEMENTAL/FRACTIONAL ATOMS
{}
PARSING REACTIONS
{}
MOLECULES TO TRAIN ON
{'  0HH': [0, 9, 9], '  1NN': [1, 11, 11], '  2LiF': [2, 10, 8], '  3CNH': [3, 6, 11, 9], '  4COO': [4, 6, 12, 12], '  5ClCl': [5, 7, 7], 'C': [6], 'Cl': [7], 'F': [8], 'H': [9], 'Li': [10], 'N': [11], 'O': [12]}
A_COUNT
{0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 3, 7: 2, 8: 2, 9: 3, 10: 2, 11: 3, 12: 2}
GENERATING SCF OBJECT

 ======= Starting training ====== 


FIRST PASS: EVALUATION ON TRAINING DATA
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.5110, -920.4833, -920.4772, -920.4740, -920.4720, -920.4706,
        -920.4696, -920.4689, -920.4685, -920.4681, -920.4679, -920.4677,
        -920.4676, -920.4675, -920.4674, -920.4674, -920.4673, -920.4673,
        -920.4673, -920.4673, -920.4673, -920.4673, -920.4673, -920.4673,
        -920.4673], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.9375e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.8750e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1328, -460.1600, -460.1686, -460.1733, -460.1765, -460.1787,
        -460.1803, -460.1815, -460.1823, -460.1829, -460.1833, -460.1836,
        -460.1838, -460.1839, -460.1840, -460.1841, -460.1841, -460.1842,
        -460.1842, -460.1842, -460.1842, -460.1842, -460.1842, -460.1842,
        -460.1842], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(0.0001, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.0140e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4674, -920.4673, -920.4673, -920.4673, -920.4673, -920.4673,
        -920.4673, -920.4673, -920.4673, -920.4673], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1841, -460.1841, -460.1842, -460.1842, -460.1842, -460.1842,
        -460.1842, -460.1842, -460.1842, -460.1842], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 0 	 5 	 Cl2 	 Cl2 	 4.257528608747732e-06

PASSTHROUGH -- Cl2 DONE.
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.7888, -109.8603, -109.7359, -109.6618, -109.6135, -109.5804,
        -109.5575, -109.5415, -109.5303, -109.5225, -109.5171, -109.5133,
        -109.5106, -109.5088, -109.5075, -109.5066, -109.5059, -109.5055,
        -109.5052, -109.5050, -109.5048, -109.5047, -109.5046, -109.5046,
        -109.5045], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.4558e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4285, -54.5013, -54.5300, -54.5466, -54.5577, -54.5655, -54.5710,
        -54.5750, -54.5777, -54.5797, -54.5811, -54.5821, -54.5827, -54.5832,
        -54.5836, -54.5838, -54.5840, -54.5841, -54.5842, -54.5842, -54.5843,
        -54.5843, -54.5843, -54.5843, -54.5843], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.9136e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.5066, -109.5059, -109.5055, -109.5052, -109.5050, -109.5048,
        -109.5047, -109.5046, -109.5046, -109.5045], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5838, -54.5840, -54.5841, -54.5842, -54.5842, -54.5843, -54.5843,
        -54.5843, -54.5843, -54.5843], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 0 	 1 	 N2 	 N2 	 0.00018401553989200582

PASSTHROUGH -- N2 DONE.
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4656, -7.4728, -7.4751, -7.4764, -7.4772, -7.4781, -7.4788, -7.4790,
        -7.4787, -7.4785, -7.4784, -7.4784, -7.4784, -7.4784, -7.4785, -7.4785,
        -7.4785, -7.4785, -7.4785, -7.4785, -7.4785, -7.4785, -7.4785, -7.4785,
        -7.4785], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.3723e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.3723e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4785, -7.4785, -7.4785, -7.4785, -7.4785, -7.4785, -7.4785, -7.4785,
        -7.4785, -7.4785], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 0 	 10 	 Li 	 Li 	 5.52510110162649e-08

PASSTHROUGH -- Li DONE.
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2480, -0.4388, -0.4646, -0.4768, -0.4842, -0.4891, -0.4924, -0.4947,
        -0.4963, -0.4974, -0.4982, -0.4987, -0.4991, -0.4993, -0.4995, -0.4997,
        -0.4998, -0.4998, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999,
        -0.5000], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.2772e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.2772e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4997, -0.4998, -0.4998, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999,
        -0.4999, -0.5000], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 0 	 9 	 H 	 H 	 7.641674945238651e-10

PASSTHROUGH -- H DONE.
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.4462, -188.7308, -188.5760, -188.4869, -188.4322, -188.3950,
        -188.3691, -188.3509, -188.3380, -188.3289, -188.3225, -188.3179,
        -188.3146, -188.3123, -188.3107, -188.3095, -188.3086, -188.3080,
        -188.3076, -188.3073, -188.3071, -188.3069, -188.3068, -188.3067,
        -188.3067], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.9913e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7402, -37.7787, -37.7976, -37.8089, -37.8167, -37.8222, -37.8262,
        -37.8290, -37.8310, -37.8325, -37.8335, -37.8342, -37.8347, -37.8351,
        -37.8353, -37.8355, -37.8356, -37.8357, -37.8357, -37.8358, -37.8358,
        -37.8358, -37.8359, -37.8359, -37.8359], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6650e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9563, -75.0016, -75.0227, -75.0351, -75.0434, -75.0494, -75.0536,
        -75.0567, -75.0589, -75.0605, -75.0616, -75.0624, -75.0629, -75.0633,
        -75.0636, -75.0638, -75.0639, -75.0640, -75.0641, -75.0641, -75.0642,
        -75.0642, -75.0642, -75.0642, -75.0642], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1910e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3095, -188.3086, -188.3080, -188.3076, -188.3073, -188.3071,
        -188.3069, -188.3068, -188.3067, -188.3067], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8355, -37.8356, -37.8357, -37.8357, -37.8358, -37.8358, -37.8358,
        -37.8359, -37.8359, -37.8359], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0638, -75.0639, -75.0640, -75.0641, -75.0641, -75.0642, -75.0642,
        -75.0642, -75.0642, -75.0642], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 0 	 4 	 CO2 	 CO2 	 0.01830470375100758

PASSTHROUGH -- CO2 DONE.
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9518, -74.9890, -75.0126, -75.0275, -75.0378, -75.0453, -75.0507,
        -75.0546, -75.0574, -75.0594, -75.0608, -75.0618, -75.0625, -75.0630,
        -75.0634, -75.0637, -75.0638, -75.0640, -75.0640, -75.0641, -75.0641,
        -75.0642, -75.0642, -75.0642, -75.0642], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2718e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.2718e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0637, -75.0638, -75.0640, -75.0640, -75.0641, -75.0641, -75.0642,
        -75.0642, -75.0642, -75.0642], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 0 	 12 	 O 	 O 	 2.2397046231482446e-06

PASSTHROUGH -- O DONE.
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2762, -107.2881, -107.2527, -107.2430, -107.2365, -107.2329,
        -107.2313, -107.2308, -107.2307, -107.2307, -107.2308, -107.2310,
        -107.2311, -107.2313, -107.2316, -107.2318, -107.2320, -107.2322,
        -107.2323, -107.2325, -107.2326, -107.2327, -107.2328, -107.2328,
        -107.2329], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.3742e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6753, -99.6967, -99.7086, -99.7159, -99.7209, -99.7246, -99.7274,
        -99.7293, -99.7307, -99.7317, -99.7325, -99.7330, -99.7333, -99.7336,
        -99.7338, -99.7339, -99.7340, -99.7340, -99.7341, -99.7341, -99.7341,
        -99.7341, -99.7342, -99.7342, -99.7342], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.6856e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4624, -7.4689, -7.4725, -7.4745, -7.4759, -7.4768, -7.4776, -7.4785,
        -7.4789, -7.4788, -7.4786, -7.4784, -7.4784, -7.4784, -7.4784, -7.4784,
        -7.4785, -7.4785, -7.4785, -7.4785, -7.4785, -7.4785, -7.4785, -7.4785,
        -7.4785], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.3143e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2318, -107.2320, -107.2322, -107.2323, -107.2325, -107.2326,
        -107.2327, -107.2328, -107.2328, -107.2329], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7339, -99.7340, -99.7340, -99.7341, -99.7341, -99.7341, -99.7341,
        -99.7342, -99.7342, -99.7342], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4784, -7.4785, -7.4785, -7.4785, -7.4785, -7.4785, -7.4785, -7.4785,
        -7.4785, -7.4785], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 0 	 2 	 FLi 	 LiF 	 0.00956471110439638

PASSTHROUGH -- FLi DONE.
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7417, -37.7815, -37.7998, -37.8105, -37.8178, -37.8230, -37.8268,
        -37.8294, -37.8313, -37.8327, -37.8336, -37.8343, -37.8348, -37.8351,
        -37.8353, -37.8355, -37.8356, -37.8357, -37.8358, -37.8358, -37.8358,
        -37.8358, -37.8359, -37.8359, -37.8359], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6527e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.6527e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8355, -37.8356, -37.8357, -37.8358, -37.8358, -37.8358, -37.8358,
        -37.8359, -37.8359, -37.8359], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 0 	 6 	 C 	 C 	 5.0240806124785654e-06

PASSTHROUGH -- C DONE.
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-94.0868, -93.5658, -93.4268, -93.3664, -93.3227, -93.2936, -93.2727,
        -93.2576, -93.2467, -93.2388, -93.2329, -93.2286, -93.2255, -93.2231,
        -93.2213, -93.2200, -93.2190, -93.2183, -93.2177, -93.2173, -93.2170,
        -93.2167, -93.2165, -93.2164, -93.2163], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.6160e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7548, -37.7953, -37.8097, -37.8177, -37.8231, -37.8268, -37.8295,
        -37.8314, -37.8327, -37.8337, -37.8343, -37.8348, -37.8351, -37.8353,
        -37.8355, -37.8356, -37.8357, -37.8358, -37.8358, -37.8358, -37.8358,
        -37.8359, -37.8359, -37.8359, -37.8359], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6018e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3121, -0.4571, -0.4749, -0.4834, -0.4886, -0.4921, -0.4945, -0.4962,
        -0.4973, -0.4981, -0.4987, -0.4991, -0.4993, -0.4995, -0.4997, -0.4997,
        -0.4998, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999, -0.5000,
        -0.5000], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1976e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4442, -54.5139, -54.5389, -54.5529, -54.5623, -54.5688, -54.5734,
        -54.5766, -54.5789, -54.5805, -54.5817, -54.5825, -54.5830, -54.5834,
        -54.5837, -54.5839, -54.5840, -54.5841, -54.5842, -54.5842, -54.5843,
        -54.5843, -54.5843, -54.5843, -54.5843], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8607e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2200, -93.2190, -93.2183, -93.2177, -93.2173, -93.2170, -93.2167,
        -93.2165, -93.2164, -93.2163], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8356, -37.8357, -37.8358, -37.8358, -37.8358, -37.8358, -37.8359,
        -37.8359, -37.8359, -37.8359], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4997, -0.4998, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999,
        -0.5000, -0.5000], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5839, -54.5840, -54.5841, -54.5842, -54.5842, -54.5843, -54.5843,
        -54.5843, -54.5843, -54.5843], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 0 	 3 	 CHN 	 CNH 	 0.009633202393844114

PASSTHROUGH -- CHN DONE.
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1230, -460.1536, -460.1642, -460.1701, -460.1742, -460.1770,
        -460.1791, -460.1806, -460.1817, -460.1824, -460.1830, -460.1833,
        -460.1836, -460.1838, -460.1839, -460.1840, -460.1841, -460.1841,
        -460.1842, -460.1842, -460.1842, -460.1842, -460.1842, -460.1842,
        -460.1842], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(0.0001, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.3886e-06, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1840, -460.1841, -460.1841, -460.1842, -460.1842, -460.1842,
        -460.1842, -460.1842, -460.1842, -460.1842], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 0 	 7 	 Cl 	 Cl 	 0.00030677380499910545

PASSTHROUGH -- Cl DONE.
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6859, -99.7102, -99.7185, -99.7232, -99.7264, -99.7287, -99.7303,
        -99.7314, -99.7322, -99.7328, -99.7332, -99.7335, -99.7337, -99.7338,
        -99.7339, -99.7340, -99.7341, -99.7341, -99.7341, -99.7341, -99.7342,
        -99.7342, -99.7342, -99.7342, -99.7342], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2530e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.2530e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7340, -99.7341, -99.7341, -99.7341, -99.7341, -99.7342, -99.7342,
        -99.7342, -99.7342, -99.7342], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 0 	 8 	 F 	 F 	 1.6807996634226113e-08

PASSTHROUGH -- F DONE.
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4075, -54.4704, -54.5070, -54.5294, -54.5451, -54.5564, -54.5645,
        -54.5703, -54.5744, -54.5774, -54.5794, -54.5809, -54.5819, -54.5827,
        -54.5832, -54.5835, -54.5838, -54.5839, -54.5841, -54.5841, -54.5842,
        -54.5842, -54.5843, -54.5843, -54.5843], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.0835e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.0835e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5835, -54.5838, -54.5839, -54.5841, -54.5841, -54.5842, -54.5842,
        -54.5843, -54.5843, -54.5843], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 0 	 11 	 N 	 N 	 5.644032760197862e-06

PASSTHROUGH -- N DONE.
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0571, -1.1258, -1.1436, -1.1526, -1.1583, -1.1622, -1.1649, -1.1668,
        -1.1681, -1.1690, -1.1696, -1.1701, -1.1704, -1.1706, -1.1708, -1.1709,
        -1.1709, -1.1710, -1.1710, -1.1711, -1.1711, -1.1711, -1.1711, -1.1711,
        -1.1711], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.9501e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.9002e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2212, -0.4304, -0.4600, -0.4738, -0.4822, -0.4877, -0.4915, -0.4940,
        -0.4958, -0.4971, -0.4979, -0.4986, -0.4990, -0.4993, -0.4995, -0.4996,
        -0.4997, -0.4998, -0.4998, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999,
        -0.5000], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.8652e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.9003e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1709, -1.1709, -1.1710, -1.1710, -1.1711, -1.1711, -1.1711, -1.1711,
        -1.1711, -1.1711], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4996, -0.4997, -0.4998, -0.4998, -0.4999, -0.4999, -0.4999, -0.4999,
        -0.4999, -0.5000], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 0 	 0 	 H2 	 H2 	 2.27675738552113e-06

PASSTHROUGH -- H2 DONE.
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e00)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e00/2022-10-25_04:04:39.930803_0.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e00/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 0 || ,[' rho : 3.165448', ' ae : 76.473144', ' E : 4.733705'] ,|| total loss 55.898982 || CHKPT: _0.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
NEXT EPOCH BEGINNING - PASSTHROUGH COMPLETE.
SETTING NETWORK TO TRAINING MODE.
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7552, -37.7956, -37.8099, -37.8179, -37.8232, -37.8269, -37.8295,
        -37.8314, -37.8327, -37.8337, -37.8343, -37.8348, -37.8351, -37.8354,
        -37.8355, -37.8356, -37.8357, -37.8358, -37.8358, -37.8358, -37.8358,
        -37.8359, -37.8359, -37.8359, -37.8359], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6007e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.6007e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8356, -37.8357, -37.8358, -37.8358, -37.8358, -37.8358, -37.8359,
        -37.8359, -37.8359, -37.8359], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 1 	 6 	 C 	 C 	 5.006107879297508e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4635, -7.4708, -7.4739, -7.4757, -7.4768, -7.4776, -7.4785, -7.4792,
        -7.4794, -7.4791, -7.4789, -7.4788, -7.4788, -7.4788, -7.4788, -7.4789,
        -7.4789, -7.4789, -7.4789, -7.4789, -7.4789, -7.4789, -7.4789, -7.4789,
        -7.4789], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.0173e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.0173e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4789, -7.4789, -7.4789, -7.4789, -7.4789, -7.4789, -7.4789, -7.4789,
        -7.4789, -7.4789], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 1 	 10 	 Li 	 Li 	 1.8311899171011032e-07

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-93.8994, -93.4901, -93.3871, -93.3380, -93.3045, -93.2817, -93.2654,
        -93.2537, -93.2451, -93.2388, -93.2342, -93.2307, -93.2282, -93.2263,
        -93.2248, -93.2237, -93.2229, -93.2223, -93.2218, -93.2215, -93.2212,
        -93.2210, -93.2208, -93.2207, -93.2206], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.6223e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7575, -37.7979, -37.8121, -37.8200, -37.8253, -37.8290, -37.8316,
        -37.8334, -37.8347, -37.8357, -37.8363, -37.8368, -37.8371, -37.8373,
        -37.8375, -37.8376, -37.8377, -37.8377, -37.8378, -37.8378, -37.8378,
        -37.8378, -37.8379, -37.8379, -37.8379], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.4838e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2452, -0.4380, -0.4642, -0.4765, -0.4840, -0.4890, -0.4923, -0.4947,
        -0.4963, -0.4974, -0.4982, -0.4987, -0.4991, -0.4994, -0.4996, -0.4997,
        -0.4998, -0.4999, -0.4999, -0.4999, -0.5000, -0.5000, -0.5000, -0.5000,
        -0.5000], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.2370e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4279, -54.5009, -54.5305, -54.5476, -54.5592, -54.5673, -54.5731,
        -54.5772, -54.5801, -54.5821, -54.5836, -54.5846, -54.5853, -54.5858,
        -54.5862, -54.5864, -54.5866, -54.5867, -54.5868, -54.5868, -54.5869,
        -54.5869, -54.5869, -54.5870, -54.5870], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.0298e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2237, -93.2229, -93.2223, -93.2218, -93.2215, -93.2212, -93.2210,
        -93.2208, -93.2207, -93.2206], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8376, -37.8377, -37.8377, -37.8378, -37.8378, -37.8378, -37.8378,
        -37.8379, -37.8379, -37.8379], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4997, -0.4998, -0.4999, -0.4999, -0.4999, -0.5000, -0.5000, -0.5000,
        -0.5000, -0.5000], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5864, -54.5866, -54.5867, -54.5868, -54.5868, -54.5869, -54.5869,
        -54.5869, -54.5870, -54.5870], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 1 	 3 	 CHN 	 CNH 	 0.009667313209399026

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6901, -99.7143, -99.7226, -99.7273, -99.7304, -99.7326, -99.7342,
        -99.7354, -99.7362, -99.7367, -99.7371, -99.7374, -99.7376, -99.7378,
        -99.7379, -99.7379, -99.7380, -99.7380, -99.7380, -99.7381, -99.7381,
        -99.7381, -99.7381, -99.7381, -99.7381], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8083e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.8083e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7379, -99.7380, -99.7380, -99.7380, -99.7381, -99.7381, -99.7381,
        -99.7381, -99.7381, -99.7381], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 1 	 8 	 F 	 F 	 4.08250986618399e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.5282, -920.4992, -920.4927, -920.4894, -920.4872, -920.4857,
        -920.4847, -920.4840, -920.4835, -920.4831, -920.4828, -920.4826,
        -920.4825, -920.4824, -920.4824, -920.4823, -920.4823, -920.4822,
        -920.4822, -920.4822, -920.4822, -920.4822, -920.4822, -920.4822,
        -920.4822], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.9487e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.8975e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1315, -460.1618, -460.1722, -460.1780, -460.1820, -460.1848,
        -460.1868, -460.1882, -460.1893, -460.1900, -460.1905, -460.1909,
        -460.1912, -460.1913, -460.1915, -460.1916, -460.1916, -460.1917,
        -460.1917, -460.1917, -460.1917, -460.1918, -460.1918, -460.1918,
        -460.1918], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(0.0002, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.1003e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4823, -920.4823, -920.4822, -920.4822, -920.4822, -920.4822,
        -920.4822, -920.4822, -920.4822, -920.4822], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1916, -460.1916, -460.1917, -460.1917, -460.1917, -460.1917,
        -460.1918, -460.1918, -460.1918, -460.1918], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 1 	 5 	 Cl2 	 Cl2 	 3.986764879487409e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4497, -54.5181, -54.5423, -54.5558, -54.5648, -54.5710, -54.5754,
        -54.5785, -54.5807, -54.5822, -54.5833, -54.5841, -54.5846, -54.5850,
        -54.5853, -54.5854, -54.5856, -54.5857, -54.5857, -54.5858, -54.5858,
        -54.5858, -54.5858, -54.5858, -54.5858], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.2334e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.2334e-09, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5854, -54.5856, -54.5857, -54.5857, -54.5858, -54.5858, -54.5858,
        -54.5858, -54.5858, -54.5858], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 1 	 11 	 N 	 N 	 2.644161965368222e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.5489, -109.9088, -109.7570, -109.6764, -109.6247, -109.5893,
        -109.5647, -109.5475, -109.5354, -109.5270, -109.5211, -109.5169,
        -109.5140, -109.5120, -109.5106, -109.5096, -109.5089, -109.5084,
        -109.5080, -109.5078, -109.5076, -109.5075, -109.5074, -109.5074,
        -109.5073], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.4615e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4504, -54.5186, -54.5426, -54.5559, -54.5648, -54.5709, -54.5753,
        -54.5783, -54.5805, -54.5820, -54.5831, -54.5839, -54.5844, -54.5848,
        -54.5850, -54.5852, -54.5853, -54.5854, -54.5855, -54.5855, -54.5856,
        -54.5856, -54.5856, -54.5856, -54.5856], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0455e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.5096, -109.5089, -109.5084, -109.5080, -109.5078, -109.5076,
        -109.5075, -109.5074, -109.5074, -109.5073], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5852, -54.5853, -54.5854, -54.5855, -54.5855, -54.5856, -54.5856,
        -54.5856, -54.5856, -54.5856], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 1 	 1 	 N2 	 N2 	 0.00018133315914487007

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9532, -74.9903, -75.0140, -75.0288, -75.0392, -75.0466, -75.0520,
        -75.0559, -75.0587, -75.0607, -75.0621, -75.0631, -75.0638, -75.0643,
        -75.0647, -75.0650, -75.0651, -75.0653, -75.0653, -75.0654, -75.0654,
        -75.0655, -75.0655, -75.0655, -75.0655], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.3424e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.3424e-09, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0650, -75.0651, -75.0653, -75.0653, -75.0654, -75.0654, -75.0655,
        -75.0655, -75.0655, -75.0655], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 1 	 12 	 O 	 O 	 7.56736604606726e-07

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2602, -107.2840, -107.2491, -107.2414, -107.2358, -107.2327,
        -107.2314, -107.2313, -107.2316, -107.2319, -107.2322, -107.2325,
        -107.2327, -107.2330, -107.2332, -107.2335, -107.2337, -107.2340,
        -107.2341, -107.2343, -107.2344, -107.2346, -107.2346, -107.2347,
        -107.2348], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.3764e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6766, -99.6982, -99.7101, -99.7172, -99.7223, -99.7260, -99.7286,
        -99.7306, -99.7320, -99.7330, -99.7337, -99.7342, -99.7346, -99.7348,
        -99.7350, -99.7351, -99.7352, -99.7353, -99.7353, -99.7353, -99.7354,
        -99.7354, -99.7354, -99.7354, -99.7354], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.2366e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4650, -7.4724, -7.4751, -7.4765, -7.4774, -7.4783, -7.4791, -7.4795,
        -7.4794, -7.4792, -7.4790, -7.4790, -7.4790, -7.4790, -7.4790, -7.4790,
        -7.4790, -7.4791, -7.4791, -7.4791, -7.4791, -7.4791, -7.4791, -7.4791,
        -7.4791], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1202e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2335, -107.2337, -107.2340, -107.2341, -107.2343, -107.2344,
        -107.2346, -107.2346, -107.2347, -107.2348], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7351, -99.7352, -99.7353, -99.7353, -99.7353, -99.7354, -99.7354,
        -99.7354, -99.7354, -99.7354], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4790, -7.4790, -7.4791, -7.4791, -7.4791, -7.4791, -7.4791, -7.4791,
        -7.4791, -7.4791], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 1 	 2 	 FLi 	 LiF 	 0.009556160658334752

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1370, -460.1627, -460.1706, -460.1749, -460.1778, -460.1798,
        -460.1813, -460.1823, -460.1830, -460.1835, -460.1839, -460.1842,
        -460.1844, -460.1845, -460.1846, -460.1846, -460.1847, -460.1847,
        -460.1847, -460.1847, -460.1848, -460.1848, -460.1848, -460.1848,
        -460.1848], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(0.0001, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.4325e-06, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1846, -460.1847, -460.1847, -460.1847, -460.1847, -460.1848,
        -460.1848, -460.1848, -460.1848, -460.1848], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 1 	 7 	 Cl 	 Cl 	 0.0003159798334660606

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.7677, -188.8556, -188.6571, -188.5421, -188.4710, -188.4227,
        -188.3891, -188.3654, -188.3487, -188.3369, -188.3285, -188.3226,
        -188.3184, -188.3154, -188.3132, -188.3117, -188.3106, -188.3098,
        -188.3093, -188.3089, -188.3086, -188.3084, -188.3083, -188.3082,
        -188.3081], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.9902e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7519, -37.7930, -37.8082, -37.8168, -37.8225, -37.8266, -37.8294,
        -37.8315, -37.8329, -37.8339, -37.8347, -37.8352, -37.8355, -37.8358,
        -37.8360, -37.8361, -37.8362, -37.8362, -37.8363, -37.8363, -37.8363,
        -37.8363, -37.8363, -37.8364, -37.8364], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3060e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9530, -74.9945, -75.0172, -75.0311, -75.0405, -75.0473, -75.0523,
        -75.0558, -75.0583, -75.0602, -75.0615, -75.0624, -75.0630, -75.0635,
        -75.0638, -75.0640, -75.0642, -75.0643, -75.0644, -75.0644, -75.0645,
        -75.0645, -75.0645, -75.0645, -75.0645], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0349e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3117, -188.3106, -188.3098, -188.3093, -188.3089, -188.3086,
        -188.3084, -188.3083, -188.3082, -188.3081], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8361, -37.8362, -37.8362, -37.8363, -37.8363, -37.8363, -37.8363,
        -37.8363, -37.8364, -37.8364], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0640, -75.0642, -75.0643, -75.0644, -75.0644, -75.0645, -75.0645,
        -75.0645, -75.0645, -75.0645], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 1 	 4 	 CO2 	 CO2 	 0.01825621548312297

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-0.9665, -1.0904, -1.1221, -1.1383, -1.1486, -1.1555, -1.1603, -1.1636,
        -1.1660, -1.1676, -1.1687, -1.1695, -1.1701, -1.1705, -1.1708, -1.1709,
        -1.1711, -1.1712, -1.1712, -1.1713, -1.1713, -1.1713, -1.1714, -1.1714,
        -1.1714], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.9639e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.9278e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2550, -0.4409, -0.4658, -0.4775, -0.4847, -0.4894, -0.4926, -0.4948,
        -0.4964, -0.4974, -0.4982, -0.4987, -0.4991, -0.4993, -0.4995, -0.4997,
        -0.4997, -0.4998, -0.4998, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999,
        -0.4999], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.1940e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.9278e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1709, -1.1711, -1.1712, -1.1712, -1.1713, -1.1713, -1.1713, -1.1714,
        -1.1714, -1.1714], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4997, -0.4997, -0.4998, -0.4998, -0.4999, -0.4999, -0.4999, -0.4999,
        -0.4999, -0.4999], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 1 	 0 	 H2 	 H2 	 1.8674794187467108e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2975, -0.4531, -0.4726, -0.4819, -0.4876, -0.4914, -0.4940, -0.4958,
        -0.4970, -0.4979, -0.4985, -0.4989, -0.4992, -0.4994, -0.4996, -0.4997,
        -0.4998, -0.4998, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999,
        -0.4999], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4847e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.4847e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4997, -0.4998, -0.4998, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999,
        -0.4999, -0.4999], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 1 	 9 	 H 	 H 	 1.711648767884698e-09

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e01)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e01/2022-10-25_04:04:39.930803_1.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e01/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 1 || ,[' rho : 3.167331', ' ae : 76.455649', ' E : 5.231726'] ,|| total loss 55.889593 || CHKPT: _1.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4286, -54.5011, -54.5294, -54.5456, -54.5565, -54.5642, -54.5696,
        -54.5735, -54.5762, -54.5781, -54.5795, -54.5804, -54.5811, -54.5815,
        -54.5819, -54.5821, -54.5823, -54.5824, -54.5825, -54.5825, -54.5825,
        -54.5826, -54.5826, -54.5826, -54.5826], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.3453e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3453e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5821, -54.5823, -54.5824, -54.5825, -54.5825, -54.5825, -54.5826,
        -54.5826, -54.5826, -54.5826], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 2 	 11 	 N 	 N 	 1.0172596940039188e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7410, -37.7812, -37.7991, -37.8097, -37.8168, -37.8219, -37.8255,
        -37.8282, -37.8300, -37.8313, -37.8322, -37.8329, -37.8334, -37.8337,
        -37.8339, -37.8341, -37.8342, -37.8343, -37.8343, -37.8344, -37.8344,
        -37.8344, -37.8344, -37.8344, -37.8344], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.7739e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.7739e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8341, -37.8342, -37.8343, -37.8343, -37.8344, -37.8344, -37.8344,
        -37.8344, -37.8344, -37.8344], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 2 	 6 	 C 	 C 	 8.63646927241634e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.8213, -188.8709, -188.6640, -188.5440, -188.4697, -188.4193,
        -188.3841, -188.3594, -188.3419, -188.3296, -188.3208, -188.3146,
        -188.3102, -188.3071, -188.3049, -188.3033, -188.3021, -188.3013,
        -188.3007, -188.3003, -188.3000, -188.2998, -188.2997, -188.2996,
        -188.2995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.9815e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7388, -37.7775, -37.7963, -37.8075, -37.8151, -37.8206, -37.8245,
        -37.8273, -37.8293, -37.8307, -37.8317, -37.8324, -37.8329, -37.8333,
        -37.8335, -37.8337, -37.8338, -37.8339, -37.8340, -37.8340, -37.8340,
        -37.8341, -37.8341, -37.8341, -37.8341], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.1003e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9502, -74.9929, -75.0152, -75.0286, -75.0377, -75.0443, -75.0490,
        -75.0524, -75.0549, -75.0566, -75.0579, -75.0587, -75.0594, -75.0598,
        -75.0601, -75.0603, -75.0605, -75.0606, -75.0607, -75.0607, -75.0607,
        -75.0608, -75.0608, -75.0608, -75.0608], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.8536e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3033, -188.3021, -188.3013, -188.3007, -188.3003, -188.3000,
        -188.2998, -188.2997, -188.2996, -188.2995], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8337, -37.8338, -37.8339, -37.8340, -37.8340, -37.8340, -37.8341,
        -37.8341, -37.8341, -37.8341], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0603, -75.0605, -75.0606, -75.0607, -75.0607, -75.0607, -75.0608,
        -75.0608, -75.0608, -75.0608], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 2 	 4 	 CO2 	 CO2 	 0.018111655910968454

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.4701, -109.8815, -109.7362, -109.6596, -109.6104, -109.5768,
        -109.5535, -109.5371, -109.5257, -109.5176, -109.5120, -109.5081,
        -109.5053, -109.5034, -109.5020, -109.5011, -109.5004, -109.5000,
        -109.4996, -109.4994, -109.4992, -109.4991, -109.4991, -109.4990,
        -109.4990], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.4414e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4339, -54.5051, -54.5319, -54.5470, -54.5571, -54.5641, -54.5692,
        -54.5727, -54.5752, -54.5770, -54.5782, -54.5791, -54.5797, -54.5801,
        -54.5804, -54.5807, -54.5808, -54.5809, -54.5810, -54.5810, -54.5811,
        -54.5811, -54.5811, -54.5811, -54.5811], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.9000e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.5011, -109.5004, -109.5000, -109.4996, -109.4994, -109.4992,
        -109.4991, -109.4991, -109.4990, -109.4990], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5807, -54.5808, -54.5809, -54.5810, -54.5810, -54.5811, -54.5811,
        -54.5811, -54.5811, -54.5811], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 2 	 1 	 N2 	 N2 	 0.0001738236285202426

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9484, -74.9902, -75.0127, -75.0264, -75.0358, -75.0426, -75.0474,
        -75.0509, -75.0535, -75.0553, -75.0565, -75.0574, -75.0581, -75.0585,
        -75.0588, -75.0591, -75.0592, -75.0593, -75.0594, -75.0595, -75.0595,
        -75.0595, -75.0596, -75.0596, -75.0596], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(6.7843e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.7843e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0591, -75.0592, -75.0593, -75.0594, -75.0595, -75.0595, -75.0595,
        -75.0596, -75.0596, -75.0596], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 2 	 12 	 O 	 O 	 1.3999542910711738e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.3010, -107.2902, -107.2539, -107.2415, -107.2336, -107.2291,
        -107.2268, -107.2257, -107.2250, -107.2246, -107.2244, -107.2243,
        -107.2243, -107.2244, -107.2246, -107.2248, -107.2249, -107.2251,
        -107.2252, -107.2253, -107.2255, -107.2255, -107.2256, -107.2257,
        -107.2257], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.2880e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6733, -99.6979, -99.7078, -99.7136, -99.7176, -99.7204, -99.7224,
        -99.7239, -99.7250, -99.7257, -99.7262, -99.7266, -99.7269, -99.7271,
        -99.7272, -99.7273, -99.7273, -99.7274, -99.7274, -99.7274, -99.7275,
        -99.7275, -99.7275, -99.7275, -99.7275], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.5085e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4620, -7.4692, -7.4724, -7.4743, -7.4754, -7.4762, -7.4771, -7.4779,
        -7.4781, -7.4779, -7.4777, -7.4776, -7.4775, -7.4776, -7.4776, -7.4776,
        -7.4776, -7.4776, -7.4777, -7.4777, -7.4777, -7.4777, -7.4777, -7.4777,
        -7.4777], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6112e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2248, -107.2249, -107.2251, -107.2252, -107.2253, -107.2255,
        -107.2255, -107.2256, -107.2257, -107.2257], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7273, -99.7273, -99.7274, -99.7274, -99.7274, -99.7275, -99.7275,
        -99.7275, -99.7275, -99.7275], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4776, -7.4776, -7.4776, -7.4777, -7.4777, -7.4777, -7.4777, -7.4777,
        -7.4777, -7.4777], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 2 	 2 	 FLi 	 LiF 	 0.009530476438133132

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4663, -920.4377, -920.4313, -920.4279, -920.4258, -920.4244,
        -920.4233, -920.4226, -920.4221, -920.4217, -920.4215, -920.4213,
        -920.4212, -920.4211, -920.4210, -920.4210, -920.4209, -920.4209,
        -920.4209, -920.4209, -920.4209, -920.4209, -920.4209, -920.4209,
        -920.4209], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.7192e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.4384e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1144, -460.1396, -460.1473, -460.1515, -460.1543, -460.1562,
        -460.1576, -460.1586, -460.1593, -460.1598, -460.1602, -460.1604,
        -460.1606, -460.1607, -460.1608, -460.1608, -460.1609, -460.1609,
        -460.1609, -460.1610, -460.1610, -460.1610, -460.1610, -460.1610,
        -460.1610], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7755e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.4561e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4210, -920.4209, -920.4209, -920.4209, -920.4209, -920.4209,
        -920.4209, -920.4209, -920.4209, -920.4209], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1608, -460.1609, -460.1609, -460.1609, -460.1610, -460.1610,
        -460.1610, -460.1610, -460.1610, -460.1610], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 2 	 5 	 Cl2 	 Cl2 	 4.4438478999808005e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4631, -7.4705, -7.4733, -7.4748, -7.4757, -7.4765, -7.4774, -7.4779,
        -7.4778, -7.4775, -7.4774, -7.4773, -7.4773, -7.4773, -7.4774, -7.4774,
        -7.4774, -7.4774, -7.4774, -7.4775, -7.4775, -7.4775, -7.4775, -7.4775,
        -7.4775], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.8956e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.8956e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4774, -7.4774, -7.4774, -7.4774, -7.4775, -7.4775, -7.4775, -7.4775,
        -7.4775, -7.4775], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 2 	 10 	 Li 	 Li 	 8.007871154492915e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6790, -99.7028, -99.7110, -99.7156, -99.7186, -99.7208, -99.7224,
        -99.7235, -99.7243, -99.7248, -99.7252, -99.7255, -99.7257, -99.7258,
        -99.7259, -99.7260, -99.7261, -99.7261, -99.7261, -99.7261, -99.7261,
        -99.7262, -99.7262, -99.7262, -99.7262], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(6.4802e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.4802e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7260, -99.7261, -99.7261, -99.7261, -99.7261, -99.7261, -99.7262,
        -99.7262, -99.7262, -99.7262], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 2 	 8 	 F 	 F 	 1.4005915244364403e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2869, -0.4501, -0.4709, -0.4808, -0.4868, -0.4908, -0.4936, -0.4955,
        -0.4968, -0.4977, -0.4984, -0.4988, -0.4991, -0.4993, -0.4995, -0.4996,
        -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4998, -0.4998, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8997e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.8997e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4996, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4998, -0.4998,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 2 	 9 	 H 	 H 	 6.34356008665426e-09

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-93.9317, -93.4968, -93.3851, -93.3336, -93.2977, -93.2736, -93.2563,
        -93.2439, -93.2349, -93.2283, -93.2235, -93.2200, -93.2173, -93.2154,
        -93.2139, -93.2128, -93.2120, -93.2113, -93.2109, -93.2105, -93.2102,
        -93.2100, -93.2099, -93.2097, -93.2096], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.5029e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7423, -37.7835, -37.8001, -37.8097, -37.8162, -37.8207, -37.8240,
        -37.8263, -37.8280, -37.8291, -37.8300, -37.8305, -37.8309, -37.8312,
        -37.8314, -37.8316, -37.8317, -37.8317, -37.8318, -37.8318, -37.8319,
        -37.8319, -37.8319, -37.8319, -37.8319], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.4357e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3110, -0.4567, -0.4746, -0.4832, -0.4885, -0.4920, -0.4944, -0.4960,
        -0.4972, -0.4980, -0.4985, -0.4989, -0.4992, -0.4994, -0.4995, -0.4996,
        -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4998, -0.4998, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5325e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4128, -54.4850, -54.5167, -54.5354, -54.5480, -54.5570, -54.5635,
        -54.5680, -54.5713, -54.5736, -54.5752, -54.5763, -54.5771, -54.5777,
        -54.5781, -54.5783, -54.5785, -54.5787, -54.5788, -54.5788, -54.5789,
        -54.5789, -54.5789, -54.5790, -54.5790], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.9088e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2128, -93.2120, -93.2113, -93.2109, -93.2105, -93.2102, -93.2100,
        -93.2099, -93.2097, -93.2096], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8316, -37.8317, -37.8317, -37.8318, -37.8318, -37.8319, -37.8319,
        -37.8319, -37.8319, -37.8319], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4996, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4998, -0.4998,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5783, -54.5785, -54.5787, -54.5788, -54.5788, -54.5789, -54.5789,
        -54.5789, -54.5790, -54.5790], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 2 	 3 	 CHN 	 CNH 	 0.009368511985487073

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-0.9851, -1.0971, -1.1259, -1.1406, -1.1499, -1.1561, -1.1605, -1.1635,
        -1.1656, -1.1671, -1.1682, -1.1689, -1.1694, -1.1697, -1.1700, -1.1702,
        -1.1703, -1.1704, -1.1704, -1.1705, -1.1705, -1.1705, -1.1705, -1.1705,
        -1.1705], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.8324e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.6647e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2146, -0.4282, -0.4587, -0.4730, -0.4816, -0.4873, -0.4911, -0.4938,
        -0.4956, -0.4969, -0.4978, -0.4984, -0.4988, -0.4991, -0.4993, -0.4995,
        -0.4996, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4998, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.4651e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.6648e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1702, -1.1703, -1.1704, -1.1704, -1.1705, -1.1705, -1.1705, -1.1705,
        -1.1705, -1.1705], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4995, -0.4996, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4998,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 2 	 0 	 H2 	 H2 	 2.7704991446080988e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1042, -460.1312, -460.1397, -460.1444, -460.1476, -460.1498,
        -460.1514, -460.1525, -460.1533, -460.1539, -460.1543, -460.1546,
        -460.1548, -460.1549, -460.1550, -460.1551, -460.1551, -460.1552,
        -460.1552, -460.1552, -460.1552, -460.1552, -460.1552, -460.1552,
        -460.1552], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.4631e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.4631e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1551, -460.1551, -460.1552, -460.1552, -460.1552, -460.1552,
        -460.1552, -460.1552, -460.1552, -460.1552], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 2 	 7 	 Cl 	 Cl 	 1.221059261574649e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e02)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e02/2022-10-25_04:04:39.930803_2.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e02/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 2 || ,[' rho : 3.134052', ' ae : 75.702651', ' E : 2.376691'] ,|| total loss 55.334870 || CHKPT: _2.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9572, -75.0035, -75.0220, -75.0325, -75.0394, -75.0444, -75.0479,
        -75.0505, -75.0523, -75.0536, -75.0545, -75.0551, -75.0556, -75.0559,
        -75.0561, -75.0563, -75.0564, -75.0564, -75.0565, -75.0565, -75.0566,
        -75.0566, -75.0566, -75.0566, -75.0566], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2526e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.2526e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0563, -75.0564, -75.0564, -75.0565, -75.0565, -75.0566, -75.0566,
        -75.0566, -75.0566, -75.0566], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 3 	 12 	 O 	 O 	 2.6733156341960695e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-93.9274, -93.4941, -93.3830, -93.3316, -93.2959, -93.2720, -93.2548,
        -93.2425, -93.2335, -93.2270, -93.2222, -93.2186, -93.2160, -93.2141,
        -93.2126, -93.2115, -93.2107, -93.2101, -93.2096, -93.2093, -93.2090,
        -93.2088, -93.2086, -93.2085, -93.2084], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.4826e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7527, -37.7924, -37.8062, -37.8139, -37.8190, -37.8226, -37.8251,
        -37.8269, -37.8281, -37.8290, -37.8297, -37.8301, -37.8304, -37.8307,
        -37.8308, -37.8309, -37.8310, -37.8310, -37.8311, -37.8311, -37.8311,
        -37.8311, -37.8311, -37.8312, -37.8312], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(6.3396e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2593, -0.4421, -0.4664, -0.4779, -0.4849, -0.4895, -0.4926, -0.4948,
        -0.4963, -0.4974, -0.4981, -0.4986, -0.4990, -0.4992, -0.4994, -0.4995,
        -0.4996, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4998, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.5143e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4432, -54.5112, -54.5351, -54.5484, -54.5572, -54.5633, -54.5677,
        -54.5707, -54.5729, -54.5744, -54.5755, -54.5762, -54.5768, -54.5771,
        -54.5774, -54.5776, -54.5777, -54.5778, -54.5779, -54.5779, -54.5779,
        -54.5780, -54.5780, -54.5780, -54.5780], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.2396e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2115, -93.2107, -93.2101, -93.2096, -93.2093, -93.2090, -93.2088,
        -93.2086, -93.2085, -93.2084], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8309, -37.8310, -37.8310, -37.8311, -37.8311, -37.8311, -37.8311,
        -37.8311, -37.8312, -37.8312], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4995, -0.4996, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4998,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5776, -54.5777, -54.5778, -54.5779, -54.5779, -54.5779, -54.5780,
        -54.5780, -54.5780, -54.5780], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 3 	 3 	 CHN 	 CNH 	 0.00931882075654866

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2707, -0.4454, -0.4682, -0.4791, -0.4857, -0.4900, -0.4930, -0.4951,
        -0.4965, -0.4975, -0.4982, -0.4987, -0.4990, -0.4993, -0.4994, -0.4996,
        -0.4996, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4998, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.3159e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.3159e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4996, -0.4996, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4998,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 3 	 9 	 H 	 H 	 9.093284620537644e-09

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4459, -54.5128, -54.5360, -54.5489, -54.5574, -54.5633, -54.5675,
        -54.5705, -54.5726, -54.5740, -54.5751, -54.5758, -54.5763, -54.5766,
        -54.5769, -54.5771, -54.5772, -54.5773, -54.5773, -54.5774, -54.5774,
        -54.5774, -54.5774, -54.5775, -54.5775], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0087e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.0087e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5771, -54.5772, -54.5773, -54.5773, -54.5774, -54.5774, -54.5774,
        -54.5774, -54.5775, -54.5775], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 3 	 11 	 N 	 N 	 3.2264168564355536e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4392, -920.4122, -920.4061, -920.4030, -920.4010, -920.3997,
        -920.3987, -920.3980, -920.3976, -920.3972, -920.3970, -920.3968,
        -920.3967, -920.3966, -920.3966, -920.3965, -920.3965, -920.3965,
        -920.3964, -920.3964, -920.3964, -920.3964, -920.3964, -920.3964,
        -920.3964], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.6361e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.2721e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0907, -460.1203, -460.1302, -460.1357, -460.1394, -460.1421,
        -460.1440, -460.1454, -460.1464, -460.1470, -460.1475, -460.1479,
        -460.1481, -460.1483, -460.1484, -460.1485, -460.1486, -460.1486,
        -460.1486, -460.1487, -460.1487, -460.1487, -460.1487, -460.1487,
        -460.1487], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.3388e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.2722e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.3965, -920.3965, -920.3965, -920.3964, -920.3964, -920.3964,
        -920.3964, -920.3964, -920.3964, -920.3964], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1485, -460.1486, -460.1486, -460.1486, -460.1487, -460.1487,
        -460.1487, -460.1487, -460.1487, -460.1487], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 3 	 5 	 Cl2 	 Cl2 	 4.6603487149557805e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0904, -460.1197, -460.1295, -460.1350, -460.1386, -460.1413,
        -460.1431, -460.1445, -460.1454, -460.1461, -460.1466, -460.1469,
        -460.1472, -460.1474, -460.1475, -460.1476, -460.1476, -460.1477,
        -460.1477, -460.1477, -460.1477, -460.1477, -460.1477, -460.1477,
        -460.1478], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.3019e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.3019e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1476, -460.1476, -460.1477, -460.1477, -460.1477, -460.1477,
        -460.1477, -460.1477, -460.1477, -460.1478], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 3 	 7 	 Cl 	 Cl 	 1.5132226044157034e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.8718, -188.8825, -188.6674, -188.5423, -188.4648, -188.4121,
        -188.3754, -188.3496, -188.3314, -188.3185, -188.3094, -188.3029,
        -188.2983, -188.2950, -188.2927, -188.2911, -188.2899, -188.2890,
        -188.2884, -188.2880, -188.2877, -188.2875, -188.2873, -188.2872,
        -188.2871], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.9583e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7396, -37.7804, -37.7975, -37.8074, -37.8141, -37.8188, -37.8222,
        -37.8246, -37.8264, -37.8276, -37.8284, -37.8290, -37.8295, -37.8298,
        -37.8300, -37.8301, -37.8302, -37.8303, -37.8303, -37.8304, -37.8304,
        -37.8304, -37.8304, -37.8304, -37.8305], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.3816e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9448, -74.9874, -75.0095, -75.0229, -75.0320, -75.0386, -75.0433,
        -75.0467, -75.0491, -75.0509, -75.0521, -75.0530, -75.0536, -75.0540,
        -75.0544, -75.0546, -75.0547, -75.0548, -75.0549, -75.0550, -75.0550,
        -75.0550, -75.0550, -75.0550, -75.0551], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6564e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.2911, -188.2899, -188.2890, -188.2884, -188.2880, -188.2877,
        -188.2875, -188.2873, -188.2872, -188.2871], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8301, -37.8302, -37.8303, -37.8303, -37.8304, -37.8304, -37.8304,
        -37.8304, -37.8304, -37.8305], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0546, -75.0547, -75.0548, -75.0549, -75.0550, -75.0550, -75.0550,
        -75.0550, -75.0550, -75.0551], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 3 	 4 	 CO2 	 CO2 	 0.017752939499910185

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4606, -7.4673, -7.4708, -7.4728, -7.4741, -7.4750, -7.4759, -7.4767,
        -7.4771, -7.4770, -7.4767, -7.4766, -7.4766, -7.4766, -7.4766, -7.4766,
        -7.4766, -7.4767, -7.4767, -7.4767, -7.4767, -7.4767, -7.4767, -7.4767,
        -7.4767], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.9761e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.9761e-09, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4766, -7.4766, -7.4767, -7.4767, -7.4767, -7.4767, -7.4767, -7.4767,
        -7.4767, -7.4767], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 3 	 10 	 Li 	 Li 	 4.196839371345182e-07

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7383, -37.7790, -37.7963, -37.8064, -37.8133, -37.8181, -37.8216,
        -37.8240, -37.8258, -37.8271, -37.8279, -37.8286, -37.8290, -37.8293,
        -37.8295, -37.8297, -37.8298, -37.8299, -37.8299, -37.8299, -37.8300,
        -37.8300, -37.8300, -37.8300, -37.8300], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.0399e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.0399e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8297, -37.8298, -37.8299, -37.8299, -37.8299, -37.8300, -37.8300,
        -37.8300, -37.8300, -37.8300], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 3 	 6 	 C 	 C 	 2.5749007697235966e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6677, -99.6922, -99.7020, -99.7077, -99.7116, -99.7144, -99.7164,
        -99.7178, -99.7189, -99.7196, -99.7201, -99.7205, -99.7207, -99.7209,
        -99.7210, -99.7211, -99.7212, -99.7212, -99.7213, -99.7213, -99.7213,
        -99.7213, -99.7213, -99.7213, -99.7213], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7014e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.7014e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7211, -99.7212, -99.7212, -99.7213, -99.7213, -99.7213, -99.7213,
        -99.7213, -99.7213, -99.7213], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 3 	 8 	 F 	 F 	 3.689752007012535e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0613, -1.1270, -1.1440, -1.1526, -1.1581, -1.1618, -1.1644, -1.1662,
        -1.1674, -1.1683, -1.1689, -1.1693, -1.1696, -1.1698, -1.1700, -1.1701,
        -1.1701, -1.1702, -1.1702, -1.1703, -1.1703, -1.1703, -1.1703, -1.1703,
        -1.1703], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7843e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.5686e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3410, -0.4645, -0.4790, -0.4860, -0.4904, -0.4933, -0.4952, -0.4966,
        -0.4976, -0.4982, -0.4987, -0.4990, -0.4993, -0.4994, -0.4995, -0.4996,
        -0.4997, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3710e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.5686e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1701, -1.1701, -1.1702, -1.1702, -1.1703, -1.1703, -1.1703, -1.1703,
        -1.1703, -1.1703], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 3 	 0 	 H2 	 H2 	 3.0109522144981068e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.4314, -109.8629, -109.7210, -109.6464, -109.5985, -109.5658,
        -109.5430, -109.5271, -109.5160, -109.5081, -109.5027, -109.4988,
        -109.4961, -109.4943, -109.4929, -109.4920, -109.4914, -109.4909,
        -109.4906, -109.4904, -109.4902, -109.4901, -109.4900, -109.4900,
        -109.4900], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.4116e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4046, -54.4742, -54.5079, -54.5281, -54.5419, -54.5518, -54.5589,
        -54.5639, -54.5675, -54.5700, -54.5718, -54.5731, -54.5740, -54.5746,
        -54.5750, -54.5753, -54.5755, -54.5757, -54.5758, -54.5759, -54.5759,
        -54.5760, -54.5760, -54.5760, -54.5760], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2986e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4920, -109.4914, -109.4909, -109.4906, -109.4904, -109.4902,
        -109.4901, -109.4900, -109.4900, -109.4900], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5753, -54.5755, -54.5757, -54.5758, -54.5759, -54.5759, -54.5760,
        -54.5760, -54.5760, -54.5760], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 3 	 1 	 N2 	 N2 	 0.0001583604086341873

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2786, -107.2796, -107.2431, -107.2319, -107.2247, -107.2205,
        -107.2186, -107.2177, -107.2172, -107.2170, -107.2169, -107.2169,
        -107.2170, -107.2172, -107.2173, -107.2175, -107.2177, -107.2179,
        -107.2181, -107.2182, -107.2183, -107.2184, -107.2185, -107.2186,
        -107.2186], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.2273e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0010, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6627, -99.6834, -99.6953, -99.7026, -99.7077, -99.7114, -99.7141,
        -99.7161, -99.7175, -99.7185, -99.7193, -99.7198, -99.7201, -99.7204,
        -99.7206, -99.7207, -99.7208, -99.7209, -99.7209, -99.7209, -99.7210,
        -99.7210, -99.7210, -99.7210, -99.7210], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8077e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0010, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4648, -7.4715, -7.4735, -7.4746, -7.4755, -7.4764, -7.4768, -7.4768,
        -7.4765, -7.4764, -7.4763, -7.4763, -7.4763, -7.4764, -7.4764, -7.4764,
        -7.4764, -7.4764, -7.4764, -7.4764, -7.4764, -7.4765, -7.4765, -7.4765,
        -7.4765], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.7815e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0010, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2175, -107.2177, -107.2179, -107.2181, -107.2182, -107.2183,
        -107.2184, -107.2185, -107.2186, -107.2186], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7207, -99.7208, -99.7209, -99.7209, -99.7209, -99.7210, -99.7210,
        -99.7210, -99.7210, -99.7210], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4764, -7.4764, -7.4764, -7.4764, -7.4764, -7.4764, -7.4765, -7.4765,
        -7.4765, -7.4765], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 3 	 2 	 FLi 	 LiF 	 0.009471571479488712

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e03)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e03/2022-10-25_04:04:39.930803_0.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e03/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 3 || ,[' rho : 3.115952', ' ae : 75.275342', ' E : 3.023874'] ,|| total loss 55.022388 || CHKPT: _0.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-94.0095, -93.5267, -93.3995, -93.3433, -93.3031, -93.2764, -93.2573,
        -93.2436, -93.2336, -93.2264, -93.2212, -93.2173, -93.2144, -93.2123,
        -93.2107, -93.2096, -93.2087, -93.2080, -93.2075, -93.2072, -93.2069,
        -93.2067, -93.2065, -93.2064, -93.2063], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.4317e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7567, -37.7946, -37.8072, -37.8141, -37.8187, -37.8219, -37.8242,
        -37.8258, -37.8269, -37.8277, -37.8282, -37.8286, -37.8289, -37.8291,
        -37.8292, -37.8293, -37.8294, -37.8295, -37.8295, -37.8295, -37.8295,
        -37.8295, -37.8295, -37.8296, -37.8296], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.6412e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2776, -0.4474, -0.4693, -0.4798, -0.4861, -0.4903, -0.4932, -0.4952,
        -0.4966, -0.4975, -0.4982, -0.4987, -0.4990, -0.4992, -0.4994, -0.4995,
        -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.3819e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4055, -54.4757, -54.5090, -54.5288, -54.5424, -54.5521, -54.5591,
        -54.5640, -54.5675, -54.5700, -54.5718, -54.5730, -54.5739, -54.5745,
        -54.5749, -54.5752, -54.5754, -54.5756, -54.5757, -54.5757, -54.5758,
        -54.5758, -54.5758, -54.5759, -54.5759], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3240e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2096, -93.2087, -93.2080, -93.2075, -93.2072, -93.2069, -93.2067,
        -93.2065, -93.2064, -93.2063], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8293, -37.8294, -37.8295, -37.8295, -37.8295, -37.8295, -37.8295,
        -37.8295, -37.8296, -37.8296], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4995, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997, -0.4998,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5752, -54.5754, -54.5756, -54.5757, -54.5757, -54.5758, -54.5758,
        -54.5758, -54.5759, -54.5759], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 4 	 3 	 CHN 	 CNH 	 0.00916853690491193

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6743, -99.6979, -99.7059, -99.7104, -99.7134, -99.7156, -99.7171,
        -99.7182, -99.7189, -99.7195, -99.7199, -99.7202, -99.7203, -99.7205,
        -99.7206, -99.7206, -99.7207, -99.7207, -99.7207, -99.7208, -99.7208,
        -99.7208, -99.7208, -99.7208, -99.7208], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8455e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.8455e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7206, -99.7207, -99.7207, -99.7207, -99.7208, -99.7208, -99.7208,
        -99.7208, -99.7208, -99.7208], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 4 	 8 	 F 	 F 	 4.019080605161823e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4626, -7.4700, -7.4726, -7.4739, -7.4748, -7.4757, -7.4765, -7.4768,
        -7.4766, -7.4764, -7.4763, -7.4762, -7.4762, -7.4763, -7.4763, -7.4763,
        -7.4763, -7.4763, -7.4764, -7.4764, -7.4764, -7.4764, -7.4764, -7.4764,
        -7.4764], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.0358e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.0358e-09, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4763, -7.4763, -7.4763, -7.4764, -7.4764, -7.4764, -7.4764, -7.4764,
        -7.4764, -7.4764], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 4 	 10 	 Li 	 Li 	 6.534374697755624e-07

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.7072, -188.8168, -188.6240, -188.5122, -188.4431, -188.3962,
        -188.3635, -188.3405, -188.3243, -188.3128, -188.3046, -188.2989,
        -188.2948, -188.2919, -188.2898, -188.2883, -188.2873, -188.2865,
        -188.2860, -188.2856, -188.2853, -188.2851, -188.2850, -188.2849,
        -188.2848], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.9449e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7501, -37.7900, -37.8040, -37.8118, -37.8170, -37.8206, -37.8232,
        -37.8251, -37.8264, -37.8273, -37.8279, -37.8284, -37.8287, -37.8289,
        -37.8291, -37.8292, -37.8293, -37.8293, -37.8294, -37.8294, -37.8294,
        -37.8294, -37.8294, -37.8294, -37.8294], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.8603e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9433, -74.9852, -75.0074, -75.0209, -75.0302, -75.0369, -75.0417,
        -75.0451, -75.0476, -75.0494, -75.0507, -75.0516, -75.0522, -75.0526,
        -75.0529, -75.0532, -75.0533, -75.0534, -75.0535, -75.0536, -75.0536,
        -75.0536, -75.0536, -75.0536, -75.0537], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.0484e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.2883, -188.2873, -188.2865, -188.2860, -188.2856, -188.2853,
        -188.2851, -188.2850, -188.2849, -188.2848], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8292, -37.8293, -37.8293, -37.8294, -37.8294, -37.8294, -37.8294,
        -37.8294, -37.8294, -37.8294], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0532, -75.0533, -75.0534, -75.0535, -75.0536, -75.0536, -75.0536,
        -75.0536, -75.0536, -75.0537], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 4 	 4 	 CO2 	 CO2 	 0.017563964354098204

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3089, -0.4561, -0.4742, -0.4829, -0.4882, -0.4918, -0.4942, -0.4959,
        -0.4971, -0.4979, -0.4984, -0.4988, -0.4991, -0.4993, -0.4995, -0.4995,
        -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8994e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.8994e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4995, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 4 	 9 	 H 	 H 	 1.4281779621851347e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.9354, -109.3253, -109.4621, -109.4781, -109.4813, -109.4827,
        -109.4839, -109.4849, -109.4858, -109.4866, -109.4872, -109.4877,
        -109.4880, -109.4883, -109.4885, -109.4887, -109.4888, -109.4889,
        -109.4889, -109.4890, -109.4890, -109.4890, -109.4890, -109.4890,
        -109.4891], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.4037e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4252, -54.4968, -54.5243, -54.5399, -54.5504, -54.5577, -54.5629,
        -54.5666, -54.5692, -54.5711, -54.5724, -54.5733, -54.5739, -54.5744,
        -54.5747, -54.5749, -54.5751, -54.5752, -54.5752, -54.5753, -54.5753,
        -54.5754, -54.5754, -54.5754, -54.5754], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3981e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4887, -109.4888, -109.4889, -109.4889, -109.4890, -109.4890,
        -109.4890, -109.4890, -109.4890, -109.4891], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5749, -54.5751, -54.5752, -54.5752, -54.5753, -54.5753, -54.5754,
        -54.5754, -54.5754, -54.5754], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 4 	 1 	 N2 	 N2 	 0.00015527038037249188

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7446, -37.7855, -37.8007, -37.8093, -37.8151, -37.8191, -37.8220,
        -37.8241, -37.8255, -37.8266, -37.8273, -37.8278, -37.8282, -37.8284,
        -37.8286, -37.8287, -37.8288, -37.8289, -37.8289, -37.8289, -37.8290,
        -37.8290, -37.8290, -37.8290, -37.8290], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.5783e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.5783e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8287, -37.8288, -37.8289, -37.8289, -37.8289, -37.8290, -37.8290,
        -37.8290, -37.8290, -37.8290], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 4 	 6 	 C 	 C 	 3.091878079923298e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4126, -920.3921, -920.3878, -920.3856, -920.3843, -920.3833,
        -920.3827, -920.3822, -920.3819, -920.3816, -920.3815, -920.3814,
        -920.3813, -920.3812, -920.3812, -920.3812, -920.3811, -920.3811,
        -920.3811, -920.3811, -920.3811, -920.3811, -920.3811, -920.3811,
        -920.3811], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.6118e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.2236e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0975, -460.1213, -460.1284, -460.1322, -460.1348, -460.1366,
        -460.1379, -460.1388, -460.1394, -460.1399, -460.1402, -460.1404,
        -460.1406, -460.1407, -460.1408, -460.1408, -460.1409, -460.1409,
        -460.1409, -460.1409, -460.1409, -460.1409, -460.1410, -460.1410,
        -460.1410], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.3544e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.2289e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.3812, -920.3811, -920.3811, -920.3811, -920.3811, -920.3811,
        -920.3811, -920.3811, -920.3811, -920.3811], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1408, -460.1409, -460.1409, -460.1409, -460.1409, -460.1409,
        -460.1409, -460.1410, -460.1410, -460.1410], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 4 	 5 	 Cl2 	 Cl2 	 5.017572400297532e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0771, -460.1084, -460.1195, -460.1258, -460.1300, -460.1331,
        -460.1353, -460.1369, -460.1380, -460.1388, -460.1394, -460.1398,
        -460.1401, -460.1403, -460.1404, -460.1405, -460.1406, -460.1407,
        -460.1407, -460.1407, -460.1407, -460.1408, -460.1408, -460.1408,
        -460.1408], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.7183e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.7183e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1405, -460.1406, -460.1407, -460.1407, -460.1407, -460.1407,
        -460.1408, -460.1408, -460.1408, -460.1408], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 4 	 7 	 Cl 	 Cl 	 1.2226967666549372e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9444, -74.9882, -75.0096, -75.0224, -75.0311, -75.0374, -75.0419,
        -75.0451, -75.0475, -75.0491, -75.0503, -75.0511, -75.0517, -75.0521,
        -75.0524, -75.0526, -75.0528, -75.0529, -75.0529, -75.0530, -75.0530,
        -75.0530, -75.0531, -75.0531, -75.0531], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.2187e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.2187e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0526, -75.0528, -75.0529, -75.0529, -75.0530, -75.0530, -75.0530,
        -75.0531, -75.0531, -75.0531], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 4 	 12 	 O 	 O 	 4.739052616302648e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4116, -54.4837, -54.5148, -54.5329, -54.5453, -54.5540, -54.5602,
        -54.5647, -54.5678, -54.5700, -54.5716, -54.5727, -54.5735, -54.5740,
        -54.5744, -54.5747, -54.5748, -54.5750, -54.5751, -54.5751, -54.5752,
        -54.5752, -54.5752, -54.5752, -54.5753], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4388e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.4388e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5747, -54.5748, -54.5750, -54.5751, -54.5751, -54.5752, -54.5752,
        -54.5752, -54.5752, -54.5753], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 4 	 11 	 N 	 N 	 4.558169359516215e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-0.9797, -1.0946, -1.1242, -1.1393, -1.1488, -1.1553, -1.1598, -1.1629,
        -1.1650, -1.1666, -1.1676, -1.1684, -1.1689, -1.1693, -1.1695, -1.1697,
        -1.1698, -1.1699, -1.1700, -1.1700, -1.1700, -1.1701, -1.1701, -1.1701,
        -1.1701], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7590e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.5180e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2982, -0.4532, -0.4726, -0.4818, -0.4875, -0.4913, -0.4939, -0.4956,
        -0.4969, -0.4978, -0.4984, -0.4988, -0.4991, -0.4993, -0.4994, -0.4995,
        -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.1123e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.5180e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1697, -1.1698, -1.1699, -1.1700, -1.1700, -1.1700, -1.1701, -1.1701,
        -1.1701, -1.1701], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4995, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 4 	 0 	 H2 	 H2 	 3.280751647006936e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2224, -107.2621, -107.2275, -107.2220, -107.2175, -107.2150,
        -107.2141, -107.2143, -107.2149, -107.2155, -107.2159, -107.2164,
        -107.2167, -107.2170, -107.2174, -107.2177, -107.2179, -107.2182,
        -107.2184, -107.2186, -107.2187, -107.2189, -107.2190, -107.2191,
        -107.2191], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.2493e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0010, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6655, -99.6892, -99.6997, -99.7059, -99.7102, -99.7133, -99.7156,
        -99.7172, -99.7183, -99.7192, -99.7198, -99.7202, -99.7205, -99.7207,
        -99.7208, -99.7209, -99.7210, -99.7210, -99.7211, -99.7211, -99.7211,
        -99.7211, -99.7211, -99.7211, -99.7211], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7590e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4599, -7.4664, -7.4700, -7.4721, -7.4734, -7.4743, -7.4752, -7.4761,
        -7.4765, -7.4764, -7.4761, -7.4760, -7.4760, -7.4760, -7.4760, -7.4760,
        -7.4760, -7.4761, -7.4761, -7.4761, -7.4761, -7.4761, -7.4761, -7.4761,
        -7.4761], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.1316e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2177, -107.2179, -107.2182, -107.2184, -107.2186, -107.2187,
        -107.2189, -107.2190, -107.2191, -107.2191], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7209, -99.7210, -99.7210, -99.7211, -99.7211, -99.7211, -99.7211,
        -99.7211, -99.7211, -99.7211], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4760, -7.4760, -7.4761, -7.4761, -7.4761, -7.4761, -7.4761, -7.4761,
        -7.4761, -7.4761], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 4 	 2 	 FLi 	 LiF 	 0.009408634463373278

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e04)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e04/2022-10-25_04:04:39.930803_1.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e04/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 4 || ,[' rho : 3.109130', ' ae : 74.917063', ' E : 3.500104'] ,|| total loss 54.769877 || CHKPT: _1.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-0.9926, -1.0997, -1.1273, -1.1414, -1.1503, -1.1563, -1.1605, -1.1634,
        -1.1654, -1.1668, -1.1678, -1.1685, -1.1690, -1.1693, -1.1696, -1.1697,
        -1.1699, -1.1699, -1.1700, -1.1700, -1.1701, -1.1701, -1.1701, -1.1701,
        -1.1701], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7631e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.5263e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3147, -0.4577, -0.4751, -0.4835, -0.4886, -0.4921, -0.4944, -0.4960,
        -0.4972, -0.4979, -0.4985, -0.4989, -0.4991, -0.4993, -0.4995, -0.4996,
        -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8265e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.5263e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1697, -1.1699, -1.1699, -1.1700, -1.1700, -1.1701, -1.1701, -1.1701,
        -1.1701, -1.1701], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 5 	 0 	 H2 	 H2 	 3.266564444646364e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2207, -0.4301, -0.4597, -0.4736, -0.4820, -0.4875, -0.4913, -0.4938,
        -0.4956, -0.4969, -0.4977, -0.4984, -0.4988, -0.4991, -0.4993, -0.4994,
        -0.4995, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.6935e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.6935e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4994, -0.4995, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 5 	 9 	 H 	 H 	 1.5415047607984303e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6649, -99.6871, -99.6984, -99.7052, -99.7099, -99.7133, -99.7158,
        -99.7176, -99.7189, -99.7198, -99.7205, -99.7210, -99.7213, -99.7215,
        -99.7217, -99.7218, -99.7219, -99.7219, -99.7220, -99.7220, -99.7220,
        -99.7220, -99.7220, -99.7221, -99.7221], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5209e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.5209e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7218, -99.7219, -99.7219, -99.7220, -99.7220, -99.7220, -99.7220,
        -99.7220, -99.7221, -99.7221], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 5 	 8 	 F 	 F 	 3.2816069219359633e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9444, -74.9859, -75.0082, -75.0217, -75.0311, -75.0378, -75.0426,
        -75.0461, -75.0486, -75.0504, -75.0517, -75.0526, -75.0532, -75.0537,
        -75.0540, -75.0542, -75.0544, -75.0545, -75.0545, -75.0546, -75.0546,
        -75.0547, -75.0547, -75.0547, -75.0547], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7525e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.7525e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0542, -75.0544, -75.0545, -75.0545, -75.0546, -75.0546, -75.0547,
        -75.0547, -75.0547, -75.0547], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 5 	 12 	 O 	 O 	 3.716171555708217e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0893, -460.1195, -460.1299, -460.1357, -460.1396, -460.1424,
        -460.1444, -460.1458, -460.1468, -460.1476, -460.1481, -460.1485,
        -460.1487, -460.1489, -460.1490, -460.1491, -460.1492, -460.1492,
        -460.1493, -460.1493, -460.1493, -460.1493, -460.1493, -460.1493,
        -460.1493], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7784e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.7784e-09, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1491, -460.1492, -460.1492, -460.1493, -460.1493, -460.1493,
        -460.1493, -460.1493, -460.1493, -460.1493], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 5 	 7 	 Cl 	 Cl 	 4.1206439776732975e-07

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4610, -7.4684, -7.4714, -7.4731, -7.4742, -7.4750, -7.4760, -7.4766,
        -7.4766, -7.4764, -7.4762, -7.4761, -7.4761, -7.4761, -7.4762, -7.4762,
        -7.4762, -7.4762, -7.4763, -7.4763, -7.4763, -7.4763, -7.4763, -7.4763,
        -7.4763], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.4110e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.4110e-09, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4762, -7.4762, -7.4762, -7.4763, -7.4763, -7.4763, -7.4763, -7.4763,
        -7.4763, -7.4763], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 5 	 10 	 Li 	 Li 	 7.325509659994259e-07

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4295, -54.5006, -54.5274, -54.5426, -54.5527, -54.5599, -54.5649,
        -54.5685, -54.5710, -54.5728, -54.5740, -54.5749, -54.5755, -54.5760,
        -54.5763, -54.5765, -54.5766, -54.5767, -54.5768, -54.5769, -54.5769,
        -54.5769, -54.5770, -54.5770, -54.5770], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1015e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.1015e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5765, -54.5766, -54.5767, -54.5768, -54.5769, -54.5769, -54.5769,
        -54.5770, -54.5770, -54.5770], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 5 	 11 	 N 	 N 	 3.502889488047035e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.5613, -109.8985, -109.7459, -109.6645, -109.6122, -109.5764,
        -109.5515, -109.5341, -109.5219, -109.5134, -109.5074, -109.5032,
        -109.5003, -109.4982, -109.4968, -109.4958, -109.4950, -109.4945,
        -109.4942, -109.4940, -109.4938, -109.4937, -109.4936, -109.4935,
        -109.4935], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.3966e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4037, -54.4705, -54.5054, -54.5265, -54.5410, -54.5515, -54.5590,
        -54.5643, -54.5681, -54.5708, -54.5727, -54.5741, -54.5750, -54.5757,
        -54.5761, -54.5765, -54.5767, -54.5769, -54.5770, -54.5770, -54.5771,
        -54.5771, -54.5772, -54.5772, -54.5772], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0875e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4958, -109.4950, -109.4945, -109.4942, -109.4940, -109.4938,
        -109.4937, -109.4936, -109.4935, -109.4935], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5765, -54.5767, -54.5769, -54.5770, -54.5770, -54.5771, -54.5771,
        -54.5772, -54.5772, -54.5772], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 5 	 1 	 N2 	 N2 	 0.00014433407246645838

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.6592, -188.8027, -188.6178, -188.5106, -188.4445, -188.3995,
        -188.3682, -188.3462, -188.3306, -188.3196, -188.3118, -188.3063,
        -188.3024, -188.2996, -188.2976, -188.2962, -188.2952, -188.2945,
        -188.2940, -188.2936, -188.2933, -188.2931, -188.2930, -188.2929,
        -188.2928], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.9268e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7525, -37.7920, -37.8057, -37.8133, -37.8183, -37.8219, -37.8244,
        -37.8262, -37.8274, -37.8283, -37.8290, -37.8294, -37.8297, -37.8299,
        -37.8301, -37.8302, -37.8303, -37.8303, -37.8304, -37.8304, -37.8304,
        -37.8304, -37.8304, -37.8304, -37.8304], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.3472e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9656, -75.0104, -75.0267, -75.0357, -75.0417, -75.0459, -75.0489,
        -75.0511, -75.0526, -75.0537, -75.0544, -75.0550, -75.0554, -75.0556,
        -75.0558, -75.0559, -75.0560, -75.0561, -75.0561, -75.0562, -75.0562,
        -75.0562, -75.0562, -75.0562, -75.0562], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3348e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.2962, -188.2952, -188.2945, -188.2940, -188.2936, -188.2933,
        -188.2931, -188.2930, -188.2929, -188.2928], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8302, -37.8303, -37.8303, -37.8304, -37.8304, -37.8304, -37.8304,
        -37.8304, -37.8304, -37.8304], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0559, -75.0560, -75.0561, -75.0561, -75.0562, -75.0562, -75.0562,
        -75.0562, -75.0562, -75.0562], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 5 	 4 	 CO2 	 CO2 	 0.01732436747470288

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-93.8754, -93.4718, -93.3706, -93.3227, -93.2901, -93.2681, -93.2523,
        -93.2411, -93.2329, -93.2270, -93.2226, -93.2194, -93.2170, -93.2153,
        -93.2140, -93.2130, -93.2122, -93.2117, -93.2113, -93.2109, -93.2107,
        -93.2105, -93.2104, -93.2103, -93.2102], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.3617e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7371, -37.7766, -37.7946, -37.8053, -37.8125, -37.8177, -37.8214,
        -37.8240, -37.8259, -37.8272, -37.8282, -37.8288, -37.8293, -37.8296,
        -37.8299, -37.8300, -37.8302, -37.8302, -37.8303, -37.8303, -37.8304,
        -37.8304, -37.8304, -37.8304, -37.8304], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.4789e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2682, -0.4447, -0.4678, -0.4788, -0.4855, -0.4899, -0.4929, -0.4950,
        -0.4964, -0.4974, -0.4982, -0.4986, -0.4990, -0.4992, -0.4994, -0.4995,
        -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.5073e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4245, -54.4964, -54.5246, -54.5407, -54.5515, -54.5591, -54.5645,
        -54.5683, -54.5710, -54.5729, -54.5743, -54.5752, -54.5759, -54.5764,
        -54.5767, -54.5769, -54.5771, -54.5772, -54.5773, -54.5773, -54.5774,
        -54.5774, -54.5774, -54.5774, -54.5774], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0247e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2130, -93.2122, -93.2117, -93.2113, -93.2109, -93.2107, -93.2105,
        -93.2104, -93.2103, -93.2102], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8300, -37.8302, -37.8302, -37.8303, -37.8303, -37.8304, -37.8304,
        -37.8304, -37.8304, -37.8304], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4995, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5769, -54.5771, -54.5772, -54.5773, -54.5773, -54.5774, -54.5774,
        -54.5774, -54.5774, -54.5774], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 5 	 3 	 CHN 	 CNH 	 0.009034497872995824

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4638, -920.4291, -920.4209, -920.4167, -920.4139, -920.4120,
        -920.4107, -920.4097, -920.4090, -920.4086, -920.4082, -920.4080,
        -920.4078, -920.4077, -920.4076, -920.4075, -920.4075, -920.4075,
        -920.4074, -920.4074, -920.4074, -920.4074, -920.4074, -920.4074,
        -920.4074], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.6576e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.3153e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1040, -460.1307, -460.1390, -460.1436, -460.1466, -460.1488,
        -460.1503, -460.1514, -460.1522, -460.1528, -460.1532, -460.1534,
        -460.1536, -460.1538, -460.1539, -460.1539, -460.1540, -460.1540,
        -460.1540, -460.1540, -460.1541, -460.1541, -460.1541, -460.1541,
        -460.1541], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.8457e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.3191e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4075, -920.4075, -920.4075, -920.4074, -920.4074, -920.4074,
        -920.4074, -920.4074, -920.4074, -920.4074], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1539, -460.1540, -460.1540, -460.1540, -460.1540, -460.1541,
        -460.1541, -460.1541, -460.1541, -460.1541], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 5 	 5 	 Cl2 	 Cl2 	 5.204186256282727e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2772, -107.2822, -107.2460, -107.2354, -107.2285, -107.2246,
        -107.2227, -107.2220, -107.2216, -107.2215, -107.2215, -107.2215,
        -107.2217, -107.2218, -107.2220, -107.2223, -107.2225, -107.2226,
        -107.2228, -107.2230, -107.2231, -107.2232, -107.2233, -107.2234,
        -107.2234], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.2976e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6751, -99.6993, -99.7080, -99.7129, -99.7163, -99.7186, -99.7203,
        -99.7215, -99.7224, -99.7230, -99.7235, -99.7238, -99.7240, -99.7241,
        -99.7242, -99.7243, -99.7244, -99.7244, -99.7244, -99.7244, -99.7245,
        -99.7245, -99.7245, -99.7245, -99.7245], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.5819e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4605, -7.4676, -7.4709, -7.4728, -7.4739, -7.4748, -7.4757, -7.4765,
        -7.4767, -7.4765, -7.4762, -7.4761, -7.4761, -7.4761, -7.4762, -7.4762,
        -7.4762, -7.4762, -7.4763, -7.4763, -7.4763, -7.4763, -7.4763, -7.4763,
        -7.4763], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.3938e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2223, -107.2225, -107.2226, -107.2228, -107.2230, -107.2231,
        -107.2232, -107.2233, -107.2234, -107.2234], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7243, -99.7244, -99.7244, -99.7244, -99.7244, -99.7245, -99.7245,
        -99.7245, -99.7245, -99.7245], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4762, -7.4762, -7.4762, -7.4763, -7.4763, -7.4763, -7.4763, -7.4763,
        -7.4763, -7.4763], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 5 	 2 	 FLi 	 LiF 	 0.009334907813757048

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7372, -37.7768, -37.7948, -37.8053, -37.8125, -37.8176, -37.8213,
        -37.8239, -37.8258, -37.8271, -37.8280, -37.8287, -37.8292, -37.8295,
        -37.8297, -37.8299, -37.8300, -37.8301, -37.8301, -37.8302, -37.8302,
        -37.8302, -37.8302, -37.8302, -37.8302], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.7225e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.7225e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8299, -37.8300, -37.8301, -37.8301, -37.8302, -37.8302, -37.8302,
        -37.8302, -37.8302, -37.8302], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 5 	 6 	 C 	 C 	 2.4664026949155323e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e05)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e05/2022-10-25_04:04:39.930803_2.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e05/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 5 || ,[' rho : 3.103949', ' ae : 74.397486', ' E : 2.975983'] ,|| total loss 54.408378 || CHKPT: _2.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4634, -7.4705, -7.4729, -7.4741, -7.4750, -7.4759, -7.4766, -7.4766,
        -7.4764, -7.4762, -7.4761, -7.4761, -7.4761, -7.4761, -7.4762, -7.4762,
        -7.4762, -7.4762, -7.4762, -7.4762, -7.4762, -7.4762, -7.4762, -7.4763,
        -7.4763], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.5470e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.5470e-09, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4762, -7.4762, -7.4762, -7.4762, -7.4762, -7.4762, -7.4762, -7.4762,
        -7.4763, -7.4763], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 6 	 10 	 Li 	 Li 	 7.650893233483462e-07

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9464, -74.9883, -75.0103, -75.0238, -75.0330, -75.0396, -75.0444,
        -75.0478, -75.0503, -75.0520, -75.0533, -75.0542, -75.0548, -75.0552,
        -75.0555, -75.0558, -75.0559, -75.0560, -75.0561, -75.0562, -75.0562,
        -75.0562, -75.0562, -75.0562, -75.0563], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3548e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.3548e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0558, -75.0559, -75.0560, -75.0561, -75.0562, -75.0562, -75.0562,
        -75.0562, -75.0562, -75.0563], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 6 	 12 	 O 	 O 	 2.8584624185147253e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-94.1381, -93.5807, -93.4296, -93.3669, -93.3203, -93.2900, -93.2681,
        -93.2525, -93.2412, -93.2331, -93.2271, -93.2228, -93.2196, -93.2173,
        -93.2155, -93.2142, -93.2133, -93.2126, -93.2120, -93.2116, -93.2113,
        -93.2111, -93.2109, -93.2108, -93.2107], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.3486e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7405, -37.7812, -37.7980, -37.8077, -37.8143, -37.8189, -37.8222,
        -37.8246, -37.8263, -37.8275, -37.8283, -37.8289, -37.8293, -37.8296,
        -37.8298, -37.8300, -37.8301, -37.8301, -37.8302, -37.8302, -37.8302,
        -37.8303, -37.8303, -37.8303, -37.8303], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.6357e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2633, -0.4432, -0.4670, -0.4783, -0.4851, -0.4896, -0.4927, -0.4949,
        -0.4964, -0.4974, -0.4981, -0.4986, -0.4990, -0.4992, -0.4994, -0.4995,
        -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.6388e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4021, -54.4641, -54.5004, -54.5228, -54.5383, -54.5496, -54.5576,
        -54.5634, -54.5675, -54.5705, -54.5725, -54.5740, -54.5750, -54.5757,
        -54.5762, -54.5766, -54.5768, -54.5770, -54.5771, -54.5772, -54.5773,
        -54.5773, -54.5773, -54.5774, -54.5774], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0636e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2142, -93.2133, -93.2126, -93.2120, -93.2116, -93.2113, -93.2111,
        -93.2109, -93.2108, -93.2107], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8300, -37.8301, -37.8301, -37.8302, -37.8302, -37.8302, -37.8303,
        -37.8303, -37.8303, -37.8303], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4995, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5766, -54.5768, -54.5770, -54.5771, -54.5772, -54.5773, -54.5773,
        -54.5773, -54.5774, -54.5774], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 6 	 3 	 CHN 	 CNH 	 0.008965715859986026

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6734, -99.6977, -99.7069, -99.7123, -99.7159, -99.7184, -99.7203,
        -99.7216, -99.7226, -99.7232, -99.7237, -99.7241, -99.7243, -99.7245,
        -99.7246, -99.7247, -99.7247, -99.7248, -99.7248, -99.7248, -99.7248,
        -99.7248, -99.7248, -99.7248, -99.7248], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.8723e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.8723e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7247, -99.7247, -99.7248, -99.7248, -99.7248, -99.7248, -99.7248,
        -99.7248, -99.7248, -99.7248], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 6 	 8 	 F 	 F 	 1.9164997517104323e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4189, -54.4911, -54.5207, -54.5379, -54.5495, -54.5576, -54.5635,
        -54.5676, -54.5705, -54.5726, -54.5740, -54.5751, -54.5758, -54.5763,
        -54.5766, -54.5769, -54.5770, -54.5772, -54.5773, -54.5773, -54.5774,
        -54.5774, -54.5774, -54.5774, -54.5774], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0292e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.0292e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5769, -54.5770, -54.5772, -54.5773, -54.5773, -54.5774, -54.5774,
        -54.5774, -54.5774, -54.5774], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 6 	 11 	 N 	 N 	 3.245116369064199e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7374, -37.7770, -37.7949, -37.8055, -37.8127, -37.8178, -37.8214,
        -37.8241, -37.8259, -37.8273, -37.8282, -37.8288, -37.8293, -37.8296,
        -37.8299, -37.8300, -37.8301, -37.8302, -37.8303, -37.8303, -37.8303,
        -37.8304, -37.8304, -37.8304, -37.8304], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.4969e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.4969e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8300, -37.8301, -37.8302, -37.8303, -37.8303, -37.8303, -37.8304,
        -37.8304, -37.8304, -37.8304], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 6 	 6 	 C 	 C 	 2.393098511318877e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2697, -0.4451, -0.4680, -0.4789, -0.4856, -0.4900, -0.4930, -0.4950,
        -0.4965, -0.4975, -0.4982, -0.4986, -0.4990, -0.4992, -0.4994, -0.4995,
        -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.5066e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.5066e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4995, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 6 	 9 	 H 	 H 	 1.2875149689506634e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4436, -920.4236, -920.4194, -920.4172, -920.4158, -920.4149,
        -920.4143, -920.4138, -920.4135, -920.4133, -920.4131, -920.4130,
        -920.4129, -920.4129, -920.4128, -920.4128, -920.4128, -920.4128,
        -920.4128, -920.4128, -920.4128, -920.4128, -920.4128, -920.4128,
        -920.4127], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.6443e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.2886e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0960, -460.1265, -460.1369, -460.1428, -460.1468, -460.1497,
        -460.1517, -460.1532, -460.1542, -460.1550, -460.1555, -460.1559,
        -460.1561, -460.1563, -460.1565, -460.1565, -460.1566, -460.1567,
        -460.1567, -460.1567, -460.1567, -460.1567, -460.1567, -460.1568,
        -460.1568], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.9951e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.2966e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4128, -920.4128, -920.4128, -920.4128, -920.4128, -920.4128,
        -920.4128, -920.4128, -920.4128, -920.4127], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1565, -460.1566, -460.1567, -460.1567, -460.1567, -460.1567,
        -460.1567, -460.1567, -460.1568, -460.1568], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 6 	 5 	 Cl2 	 Cl2 	 5.180622135734425e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.7607, -109.8604, -109.7313, -109.6557, -109.6066, -109.5730,
        -109.5497, -109.5334, -109.5220, -109.5141, -109.5085, -109.5046,
        -109.5019, -109.5000, -109.4987, -109.4978, -109.4971, -109.4967,
        -109.4964, -109.4961, -109.4960, -109.4959, -109.4958, -109.4957,
        -109.4957], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.3878e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4378, -54.5070, -54.5322, -54.5463, -54.5557, -54.5622, -54.5669,
        -54.5701, -54.5725, -54.5741, -54.5752, -54.5760, -54.5766, -54.5770,
        -54.5773, -54.5775, -54.5776, -54.5777, -54.5778, -54.5778, -54.5779,
        -54.5779, -54.5779, -54.5779, -54.5779], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.3793e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4978, -109.4971, -109.4967, -109.4964, -109.4961, -109.4960,
        -109.4959, -109.4958, -109.4957, -109.4957], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5775, -54.5776, -54.5777, -54.5778, -54.5778, -54.5779, -54.5779,
        -54.5779, -54.5779, -54.5779], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 6 	 1 	 N2 	 N2 	 0.00013566019257270774

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1023, -460.1309, -460.1403, -460.1455, -460.1490, -460.1514,
        -460.1532, -460.1545, -460.1554, -460.1560, -460.1565, -460.1568,
        -460.1570, -460.1572, -460.1573, -460.1574, -460.1574, -460.1575,
        -460.1575, -460.1575, -460.1575, -460.1575, -460.1575, -460.1575,
        -460.1576], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.5461e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.5461e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1574, -460.1574, -460.1575, -460.1575, -460.1575, -460.1575,
        -460.1575, -460.1575, -460.1575, -460.1576], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 6 	 7 	 Cl 	 Cl 	 2.129031535972479e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.7413, -188.8364, -188.6411, -188.5276, -188.4575, -188.4098,
        -188.3766, -188.3532, -188.3367, -188.3251, -188.3168, -188.3110,
        -188.3068, -188.3038, -188.3017, -188.3002, -188.2992, -188.2984,
        -188.2979, -188.2975, -188.2972, -188.2970, -188.2968, -188.2967,
        -188.2967], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.9109e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7461, -37.7869, -37.8022, -37.8108, -37.8166, -37.8207, -37.8236,
        -37.8257, -37.8272, -37.8282, -37.8290, -37.8295, -37.8298, -37.8301,
        -37.8303, -37.8304, -37.8305, -37.8305, -37.8306, -37.8306, -37.8306,
        -37.8307, -37.8307, -37.8307, -37.8307], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.0276e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9463, -74.9832, -75.0063, -75.0209, -75.0311, -75.0384, -75.0437,
        -75.0476, -75.0504, -75.0524, -75.0538, -75.0548, -75.0555, -75.0560,
        -75.0563, -75.0566, -75.0567, -75.0569, -75.0569, -75.0570, -75.0571,
        -75.0571, -75.0571, -75.0571, -75.0571], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1628e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3002, -188.2992, -188.2984, -188.2979, -188.2975, -188.2972,
        -188.2970, -188.2968, -188.2967, -188.2967], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8304, -37.8305, -37.8305, -37.8306, -37.8306, -37.8306, -37.8307,
        -37.8307, -37.8307, -37.8307], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0566, -75.0567, -75.0569, -75.0569, -75.0570, -75.0571, -75.0571,
        -75.0571, -75.0571, -75.0571], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 6 	 4 	 CO2 	 CO2 	 0.01709201334525873

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-0.9960, -1.1011, -1.1282, -1.1420, -1.1508, -1.1567, -1.1608, -1.1636,
        -1.1656, -1.1670, -1.1680, -1.1687, -1.1692, -1.1695, -1.1697, -1.1699,
        -1.1700, -1.1701, -1.1702, -1.1702, -1.1702, -1.1702, -1.1703, -1.1703,
        -1.1703], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7884e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.5768e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2973, -0.4529, -0.4724, -0.4818, -0.4875, -0.4913, -0.4939, -0.4956,
        -0.4969, -0.4978, -0.4984, -0.4988, -0.4991, -0.4993, -0.4994, -0.4995,
        -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.0346e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.5768e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1699, -1.1700, -1.1701, -1.1702, -1.1702, -1.1702, -1.1702, -1.1703,
        -1.1703, -1.1703], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4995, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 6 	 0 	 H2 	 H2 	 3.044340233083406e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.3084, -107.2908, -107.2547, -107.2418, -107.2337, -107.2290,
        -107.2265, -107.2251, -107.2243, -107.2238, -107.2235, -107.2233,
        -107.2234, -107.2235, -107.2236, -107.2238, -107.2239, -107.2241,
        -107.2242, -107.2244, -107.2245, -107.2246, -107.2246, -107.2247,
        -107.2248], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.3145e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6673, -99.6872, -99.6991, -99.7064, -99.7116, -99.7154, -99.7181,
        -99.7201, -99.7216, -99.7226, -99.7233, -99.7239, -99.7242, -99.7245,
        -99.7247, -99.7248, -99.7249, -99.7249, -99.7250, -99.7250, -99.7250,
        -99.7251, -99.7251, -99.7251, -99.7251], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.5290e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4601, -7.4665, -7.4701, -7.4722, -7.4735, -7.4744, -7.4753, -7.4762,
        -7.4766, -7.4764, -7.4762, -7.4761, -7.4760, -7.4760, -7.4761, -7.4761,
        -7.4761, -7.4761, -7.4762, -7.4762, -7.4762, -7.4762, -7.4762, -7.4762,
        -7.4762], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.7745e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2238, -107.2239, -107.2241, -107.2242, -107.2244, -107.2245,
        -107.2246, -107.2246, -107.2247, -107.2248], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7248, -99.7249, -99.7249, -99.7250, -99.7250, -99.7250, -99.7251,
        -99.7251, -99.7251, -99.7251], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4761, -7.4761, -7.4761, -7.4762, -7.4762, -7.4762, -7.4762, -7.4762,
        -7.4762, -7.4762], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 6 	 2 	 FLi 	 LiF 	 0.009256328125252206

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e06)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e06/2022-10-25_04:04:39.930803_0.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e06/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 6 || ,[' rho : 3.101505', ' ae : 73.989752', ' E : 2.953341'] ,|| total loss 54.126847 || CHKPT: _0.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4632, -7.4703, -7.4727, -7.4739, -7.4748, -7.4757, -7.4764, -7.4765,
        -7.4762, -7.4760, -7.4760, -7.4760, -7.4760, -7.4760, -7.4760, -7.4761,
        -7.4761, -7.4761, -7.4761, -7.4761, -7.4761, -7.4761, -7.4761, -7.4761,
        -7.4761], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.0340e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(4.0340e-09, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4761, -7.4761, -7.4761, -7.4761, -7.4761, -7.4761, -7.4761, -7.4761,
        -7.4761, -7.4761], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 7 	 10 	 Li 	 Li 	 8.708118836896567e-07

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2414, -107.2705, -107.2356, -107.2289, -107.2239, -107.2211,
        -107.2199, -107.2200, -107.2204, -107.2208, -107.2212, -107.2215,
        -107.2218, -107.2222, -107.2225, -107.2227, -107.2230, -107.2233,
        -107.2235, -107.2237, -107.2238, -107.2239, -107.2240, -107.2241,
        -107.2242], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.3119e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6703, -99.6942, -99.7043, -99.7102, -99.7143, -99.7172, -99.7194,
        -99.7209, -99.7220, -99.7227, -99.7233, -99.7237, -99.7240, -99.7242,
        -99.7243, -99.7244, -99.7245, -99.7245, -99.7245, -99.7246, -99.7246,
        -99.7246, -99.7246, -99.7246, -99.7246], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.3952e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4607, -7.4680, -7.4711, -7.4728, -7.4739, -7.4748, -7.4757, -7.4764,
        -7.4764, -7.4762, -7.4760, -7.4759, -7.4759, -7.4759, -7.4759, -7.4760,
        -7.4760, -7.4760, -7.4760, -7.4760, -7.4760, -7.4761, -7.4761, -7.4761,
        -7.4761], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.3494e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2227, -107.2230, -107.2233, -107.2235, -107.2237, -107.2238,
        -107.2239, -107.2240, -107.2241, -107.2242], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7244, -99.7245, -99.7245, -99.7245, -99.7246, -99.7246, -99.7246,
        -99.7246, -99.7246, -99.7246], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4760, -7.4760, -7.4760, -7.4760, -7.4760, -7.4760, -7.4761, -7.4761,
        -7.4761, -7.4761], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 7 	 2 	 FLi 	 LiF 	 0.00925300516711299

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.5366, -109.8943, -109.7431, -109.6628, -109.6112, -109.5759,
        -109.5513, -109.5342, -109.5221, -109.5137, -109.5078, -109.5036,
        -109.5007, -109.4987, -109.4973, -109.4963, -109.4956, -109.4951,
        -109.4948, -109.4945, -109.4944, -109.4943, -109.4942, -109.4941,
        -109.4941], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.3791e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4030, -54.4680, -54.5033, -54.5248, -54.5397, -54.5504, -54.5581,
        -54.5636, -54.5676, -54.5703, -54.5723, -54.5737, -54.5746, -54.5753,
        -54.5758, -54.5761, -54.5764, -54.5765, -54.5766, -54.5767, -54.5768,
        -54.5768, -54.5768, -54.5769, -54.5769], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1463e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4963, -109.4956, -109.4951, -109.4948, -109.4945, -109.4944,
        -109.4943, -109.4942, -109.4941, -109.4941], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5761, -54.5764, -54.5765, -54.5766, -54.5767, -54.5768, -54.5768,
        -54.5768, -54.5769, -54.5769], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 7 	 1 	 N2 	 N2 	 0.00013046253199200118

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.3333, -188.6781, -188.5383, -188.4575, -188.4079, -188.3742,
        -188.3508, -188.3343, -188.3226, -188.3144, -188.3085, -188.3044,
        -188.3014, -188.2993, -188.2978, -188.2967, -188.2960, -188.2954,
        -188.2951, -188.2948, -188.2946, -188.2944, -188.2943, -188.2943,
        -188.2942], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.9014e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7507, -37.7904, -37.8044, -37.8121, -37.8173, -37.8209, -37.8235,
        -37.8254, -37.8266, -37.8276, -37.8282, -37.8287, -37.8290, -37.8292,
        -37.8294, -37.8295, -37.8295, -37.8296, -37.8296, -37.8297, -37.8297,
        -37.8297, -37.8297, -37.8297, -37.8297], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.4172e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9482, -74.9919, -75.0131, -75.0257, -75.0343, -75.0404, -75.0448,
        -75.0480, -75.0503, -75.0519, -75.0531, -75.0539, -75.0545, -75.0549,
        -75.0552, -75.0554, -75.0555, -75.0556, -75.0557, -75.0557, -75.0558,
        -75.0558, -75.0558, -75.0558, -75.0558], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4499e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.2967, -188.2960, -188.2954, -188.2951, -188.2948, -188.2946,
        -188.2944, -188.2943, -188.2943, -188.2942], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8295, -37.8295, -37.8296, -37.8296, -37.8297, -37.8297, -37.8297,
        -37.8297, -37.8297, -37.8297], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0554, -75.0555, -75.0556, -75.0557, -75.0557, -75.0558, -75.0558,
        -75.0558, -75.0558, -75.0558], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 7 	 4 	 CO2 	 CO2 	 0.016964500739325115

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0596, -1.1261, -1.1433, -1.1521, -1.1576, -1.1614, -1.1640, -1.1658,
        -1.1671, -1.1680, -1.1686, -1.1690, -1.1693, -1.1696, -1.1697, -1.1698,
        -1.1699, -1.1699, -1.1700, -1.1700, -1.1700, -1.1700, -1.1700, -1.1700,
        -1.1700], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7559e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.5119e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2836, -0.4491, -0.4702, -0.4803, -0.4865, -0.4906, -0.4934, -0.4953,
        -0.4966, -0.4976, -0.4982, -0.4987, -0.4990, -0.4992, -0.4994, -0.4995,
        -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.4154e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.5119e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1698, -1.1699, -1.1699, -1.1700, -1.1700, -1.1700, -1.1700, -1.1700,
        -1.1700, -1.1700], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4995, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 7 	 0 	 H2 	 H2 	 3.3277090921466725e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1086, -460.1321, -460.1392, -460.1430, -460.1455, -460.1473,
        -460.1486, -460.1495, -460.1501, -460.1505, -460.1509, -460.1511,
        -460.1512, -460.1513, -460.1514, -460.1515, -460.1515, -460.1515,
        -460.1516, -460.1516, -460.1516, -460.1516, -460.1516, -460.1516,
        -460.1516], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3402e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.3402e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1515, -460.1515, -460.1515, -460.1516, -460.1516, -460.1516,
        -460.1516, -460.1516, -460.1516, -460.1516], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 7 	 7 	 Cl 	 Cl 	 3.0195208174477984e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7353, -37.7740, -37.7923, -37.8032, -37.8106, -37.8159, -37.8197,
        -37.8224, -37.8243, -37.8257, -37.8267, -37.8274, -37.8279, -37.8282,
        -37.8284, -37.8286, -37.8287, -37.8288, -37.8289, -37.8289, -37.8289,
        -37.8290, -37.8290, -37.8290, -37.8290], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.6926e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.6926e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8286, -37.8287, -37.8288, -37.8289, -37.8289, -37.8289, -37.8290,
        -37.8290, -37.8290, -37.8290], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 7 	 6 	 C 	 C 	 3.1036737678878566e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4303, -920.4103, -920.4060, -920.4038, -920.4025, -920.4015,
        -920.4009, -920.4004, -920.4001, -920.3999, -920.3997, -920.3996,
        -920.3995, -920.3995, -920.3995, -920.3994, -920.3994, -920.3994,
        -920.3994, -920.3994, -920.3994, -920.3994, -920.3994, -920.3994,
        -920.3994], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.6259e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.2518e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0955, -460.1238, -460.1330, -460.1381, -460.1415, -460.1440,
        -460.1457, -460.1469, -460.1478, -460.1484, -460.1489, -460.1492,
        -460.1494, -460.1496, -460.1497, -460.1498, -460.1498, -460.1499,
        -460.1499, -460.1499, -460.1499, -460.1499, -460.1499, -460.1499,
        -460.1499], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.7944e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.2521e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.3994, -920.3994, -920.3994, -920.3994, -920.3994, -920.3994,
        -920.3994, -920.3994, -920.3994, -920.3994], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1498, -460.1498, -460.1499, -460.1499, -460.1499, -460.1499,
        -460.1499, -460.1499, -460.1499, -460.1499], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 7 	 5 	 Cl2 	 Cl2 	 5.726811344604248e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4111, -54.4825, -54.5140, -54.5324, -54.5450, -54.5539, -54.5602,
        -54.5647, -54.5679, -54.5702, -54.5718, -54.5729, -54.5737, -54.5743,
        -54.5746, -54.5749, -54.5751, -54.5752, -54.5753, -54.5754, -54.5754,
        -54.5755, -54.5755, -54.5755, -54.5755], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3854e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.3854e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5749, -54.5751, -54.5752, -54.5753, -54.5754, -54.5754, -54.5755,
        -54.5755, -54.5755, -54.5755], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 7 	 11 	 N 	 N 	 4.380522355077259e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9438, -74.9804, -75.0035, -75.0181, -75.0282, -75.0356, -75.0409,
        -75.0448, -75.0475, -75.0495, -75.0509, -75.0519, -75.0526, -75.0531,
        -75.0535, -75.0537, -75.0539, -75.0540, -75.0541, -75.0542, -75.0542,
        -75.0543, -75.0543, -75.0543, -75.0543], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8728e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.8728e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0537, -75.0539, -75.0540, -75.0541, -75.0542, -75.0542, -75.0543,
        -75.0543, -75.0543, -75.0543], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 7 	 12 	 O 	 O 	 3.9586047885955546e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2166, -0.4288, -0.4590, -0.4731, -0.4816, -0.4872, -0.4911, -0.4937,
        -0.4955, -0.4968, -0.4977, -0.4983, -0.4987, -0.4990, -0.4992, -0.4994,
        -0.4995, -0.4996, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.0613e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(4.0613e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4994, -0.4995, -0.4996, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997,
        -0.4997, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 7 	 9 	 H 	 H 	 2.1298523965868025e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-94.1089, -93.5671, -93.4207, -93.3598, -93.3146, -93.2853, -93.2641,
        -93.2490, -93.2382, -93.2303, -93.2246, -93.2204, -93.2174, -93.2152,
        -93.2135, -93.2123, -93.2114, -93.2107, -93.2102, -93.2098, -93.2095,
        -93.2093, -93.2091, -93.2090, -93.2089], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.2543e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7482, -37.7882, -37.8024, -37.8104, -37.8157, -37.8194, -37.8221,
        -37.8239, -37.8253, -37.8262, -37.8269, -37.8273, -37.8277, -37.8279,
        -37.8281, -37.8282, -37.8283, -37.8283, -37.8283, -37.8284, -37.8284,
        -37.8284, -37.8284, -37.8284, -37.8284], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0528e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2639, -0.4434, -0.4670, -0.4783, -0.4851, -0.4896, -0.4927, -0.4948,
        -0.4963, -0.4973, -0.4981, -0.4986, -0.4989, -0.4991, -0.4993, -0.4994,
        -0.4995, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.9590e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4055, -54.4746, -54.5080, -54.5280, -54.5417, -54.5514, -54.5584,
        -54.5634, -54.5669, -54.5694, -54.5712, -54.5725, -54.5733, -54.5739,
        -54.5744, -54.5747, -54.5749, -54.5750, -54.5751, -54.5752, -54.5753,
        -54.5753, -54.5753, -54.5753, -54.5754], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4269e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2123, -93.2114, -93.2107, -93.2102, -93.2098, -93.2095, -93.2093,
        -93.2091, -93.2090, -93.2089], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8282, -37.8283, -37.8283, -37.8283, -37.8284, -37.8284, -37.8284,
        -37.8284, -37.8284, -37.8284], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4994, -0.4995, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5747, -54.5749, -54.5750, -54.5751, -54.5752, -54.5753, -54.5753,
        -54.5753, -54.5753, -54.5754], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 7 	 3 	 CHN 	 CNH 	 0.00877104218123009

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6666, -99.6895, -99.7002, -99.7066, -99.7111, -99.7143, -99.7166,
        -99.7183, -99.7195, -99.7204, -99.7210, -99.7214, -99.7217, -99.7219,
        -99.7221, -99.7222, -99.7223, -99.7223, -99.7224, -99.7224, -99.7224,
        -99.7224, -99.7224, -99.7224, -99.7224], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4212e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.4212e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7222, -99.7223, -99.7223, -99.7224, -99.7224, -99.7224, -99.7224,
        -99.7224, -99.7224, -99.7224], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 7 	 8 	 F 	 F 	 3.068850373901358e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e07)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e07/2022-10-25_04:04:39.930803_1.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e07/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 7 || ,[' rho : 3.086558', ' ae : 73.669839', ' E : 3.134313'] ,|| total loss 53.891165 || CHKPT: _1.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6747, -99.6984, -99.7067, -99.7114, -99.7146, -99.7169, -99.7185,
        -99.7197, -99.7205, -99.7211, -99.7215, -99.7218, -99.7220, -99.7221,
        -99.7222, -99.7223, -99.7224, -99.7224, -99.7224, -99.7224, -99.7225,
        -99.7225, -99.7225, -99.7225, -99.7225], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4057e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.4057e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7223, -99.7224, -99.7224, -99.7224, -99.7224, -99.7225, -99.7225,
        -99.7225, -99.7225, -99.7225], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 8 	 8 	 F 	 F 	 3.0543123605433914e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4247, -54.4960, -54.5237, -54.5395, -54.5500, -54.5574, -54.5627,
        -54.5664, -54.5691, -54.5710, -54.5723, -54.5732, -54.5738, -54.5743,
        -54.5746, -54.5748, -54.5750, -54.5751, -54.5752, -54.5752, -54.5753,
        -54.5753, -54.5753, -54.5753, -54.5753], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4116e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.4116e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5748, -54.5750, -54.5751, -54.5752, -54.5752, -54.5753, -54.5753,
        -54.5753, -54.5753, -54.5753], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 8 	 11 	 N 	 N 	 4.5032720582899046e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9447, -74.9850, -75.0073, -75.0210, -75.0305, -75.0373, -75.0422,
        -75.0457, -75.0483, -75.0501, -75.0514, -75.0523, -75.0530, -75.0534,
        -75.0538, -75.0540, -75.0541, -75.0543, -75.0543, -75.0544, -75.0544,
        -75.0545, -75.0545, -75.0545, -75.0545], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8103e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.8103e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0540, -75.0541, -75.0543, -75.0543, -75.0544, -75.0544, -75.0545,
        -75.0545, -75.0545, -75.0545], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 8 	 12 	 O 	 O 	 3.8382505865428254e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4615, -7.4689, -7.4715, -7.4728, -7.4737, -7.4747, -7.4755, -7.4757,
        -7.4755, -7.4753, -7.4752, -7.4751, -7.4752, -7.4752, -7.4752, -7.4753,
        -7.4753, -7.4753, -7.4753, -7.4753, -7.4753, -7.4753, -7.4753, -7.4753,
        -7.4753], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.0414e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.0414e-09, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4753, -7.4753, -7.4753, -7.4753, -7.4753, -7.4753, -7.4753, -7.4753,
        -7.4753, -7.4753], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 8 	 10 	 Li 	 Li 	 1.7427277357623315e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4504, -920.4208, -920.4139, -920.4104, -920.4081, -920.4065,
        -920.4054, -920.4046, -920.4040, -920.4036, -920.4033, -920.4031,
        -920.4030, -920.4029, -920.4028, -920.4028, -920.4027, -920.4027,
        -920.4027, -920.4027, -920.4027, -920.4027, -920.4027, -920.4027,
        -920.4027], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.6114e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.2228e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0891, -460.1200, -460.1309, -460.1370, -460.1412, -460.1441,
        -460.1463, -460.1478, -460.1489, -460.1497, -460.1502, -460.1506,
        -460.1509, -460.1511, -460.1512, -460.1513, -460.1514, -460.1515,
        -460.1515, -460.1515, -460.1515, -460.1515, -460.1516, -460.1516,
        -460.1516], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2952e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.2241e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4028, -920.4027, -920.4027, -920.4027, -920.4027, -920.4027,
        -920.4027, -920.4027, -920.4027, -920.4027], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1513, -460.1514, -460.1515, -460.1515, -460.1515, -460.1515,
        -460.1515, -460.1516, -460.1516, -460.1516], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 8 	 5 	 Cl2 	 Cl2 	 5.87291892623219e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2391, -0.4359, -0.4629, -0.4756, -0.4833, -0.4884, -0.4919, -0.4942,
        -0.4959, -0.4971, -0.4979, -0.4984, -0.4988, -0.4991, -0.4993, -0.4994,
        -0.4995, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.4608e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.4608e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4994, -0.4995, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 8 	 9 	 H 	 H 	 2.010063964439037e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.9446, -188.9137, -188.6911, -188.5610, -188.4803, -188.4254,
        -188.3872, -188.3603, -188.3413, -188.3279, -188.3184, -188.3116,
        -188.3068, -188.3034, -188.3010, -188.2993, -188.2981, -188.2972,
        -188.2966, -188.2961, -188.2958, -188.2956, -188.2954, -188.2953,
        -188.2952], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.8823e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7384, -37.7785, -37.7957, -37.8057, -37.8125, -37.8173, -37.8207,
        -37.8231, -37.8249, -37.8261, -37.8270, -37.8276, -37.8280, -37.8283,
        -37.8286, -37.8287, -37.8288, -37.8289, -37.8289, -37.8290, -37.8290,
        -37.8290, -37.8290, -37.8290, -37.8291], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.5546e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9453, -74.9831, -75.0059, -75.0202, -75.0301, -75.0373, -75.0425,
        -75.0462, -75.0489, -75.0509, -75.0522, -75.0532, -75.0539, -75.0544,
        -75.0547, -75.0550, -75.0551, -75.0552, -75.0553, -75.0554, -75.0554,
        -75.0555, -75.0555, -75.0555, -75.0555], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5472e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.2993, -188.2981, -188.2972, -188.2966, -188.2961, -188.2958,
        -188.2956, -188.2954, -188.2953, -188.2952], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8287, -37.8288, -37.8289, -37.8289, -37.8290, -37.8290, -37.8290,
        -37.8290, -37.8290, -37.8291], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0550, -75.0551, -75.0552, -75.0553, -75.0554, -75.0554, -75.0555,
        -75.0555, -75.0555, -75.0555], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 8 	 4 	 CO2 	 CO2 	 0.016661939925085457

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0869, -460.1189, -460.1306, -460.1373, -460.1418, -460.1451,
        -460.1474, -460.1491, -460.1503, -460.1512, -460.1518, -460.1523,
        -460.1526, -460.1528, -460.1529, -460.1530, -460.1531, -460.1532,
        -460.1532, -460.1532, -460.1533, -460.1533, -460.1533, -460.1533,
        -460.1533], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.8735e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.8735e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1530, -460.1531, -460.1532, -460.1532, -460.1532, -460.1533,
        -460.1533, -460.1533, -460.1533, -460.1533], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 8 	 7 	 Cl 	 Cl 	 6.519943838486171e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.1991, -107.2573, -107.2241, -107.2215, -107.2186, -107.2172,
        -107.2170, -107.2176, -107.2186, -107.2195, -107.2202, -107.2208,
        -107.2213, -107.2217, -107.2221, -107.2225, -107.2228, -107.2231,
        -107.2233, -107.2236, -107.2237, -107.2239, -107.2240, -107.2241,
        -107.2242], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.3316e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6764, -99.7000, -99.7083, -99.7131, -99.7162, -99.7185, -99.7201,
        -99.7213, -99.7221, -99.7227, -99.7231, -99.7234, -99.7236, -99.7237,
        -99.7238, -99.7239, -99.7240, -99.7240, -99.7240, -99.7240, -99.7241,
        -99.7241, -99.7241, -99.7241, -99.7241], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0410e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4611, -7.4685, -7.4712, -7.4727, -7.4736, -7.4745, -7.4754, -7.4757,
        -7.4755, -7.4753, -7.4752, -7.4751, -7.4752, -7.4752, -7.4752, -7.4753,
        -7.4753, -7.4753, -7.4753, -7.4753, -7.4753, -7.4753, -7.4753, -7.4753,
        -7.4753], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.0077e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2225, -107.2228, -107.2231, -107.2233, -107.2236, -107.2237,
        -107.2239, -107.2240, -107.2241, -107.2242], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7239, -99.7240, -99.7240, -99.7240, -99.7240, -99.7241, -99.7241,
        -99.7241, -99.7241, -99.7241], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4753, -7.4753, -7.4753, -7.4753, -7.4753, -7.4753, -7.4753, -7.4753,
        -7.4753, -7.4753], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 8 	 2 	 FLi 	 LiF 	 0.009140760019391405

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7402, -37.7808, -37.7973, -37.8068, -37.8132, -37.8177, -37.8209,
        -37.8232, -37.8249, -37.8260, -37.8268, -37.8274, -37.8278, -37.8281,
        -37.8283, -37.8285, -37.8286, -37.8286, -37.8287, -37.8287, -37.8287,
        -37.8287, -37.8288, -37.8288, -37.8288], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.9939e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.9939e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8285, -37.8286, -37.8286, -37.8287, -37.8287, -37.8287, -37.8287,
        -37.8288, -37.8288, -37.8288], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 8 	 6 	 C 	 C 	 3.2179224701731354e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0504, -1.1223, -1.1409, -1.1504, -1.1564, -1.1604, -1.1632, -1.1652,
        -1.1666, -1.1675, -1.1682, -1.1687, -1.1690, -1.1692, -1.1694, -1.1695,
        -1.1696, -1.1696, -1.1697, -1.1697, -1.1697, -1.1697, -1.1697, -1.1697,
        -1.1698], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7250e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.4500e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3142, -0.4575, -0.4750, -0.4834, -0.4886, -0.4920, -0.4943, -0.4960,
        -0.4971, -0.4979, -0.4984, -0.4988, -0.4991, -0.4993, -0.4994, -0.4995,
        -0.4996, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.0538e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.4500e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1695, -1.1696, -1.1696, -1.1697, -1.1697, -1.1697, -1.1697, -1.1697,
        -1.1697, -1.1698], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4995, -0.4996, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 8 	 0 	 H2 	 H2 	 3.757328853680912e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.9271, -109.3927, -109.4965, -109.5015, -109.4987, -109.4961,
        -109.4945, -109.4936, -109.4932, -109.4930, -109.4930, -109.4930,
        -109.4930, -109.4931, -109.4931, -109.4931, -109.4932, -109.4932,
        -109.4932, -109.4932, -109.4932, -109.4932, -109.4932, -109.4932,
        -109.4932], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.3572e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4040, -54.4708, -54.5052, -54.5260, -54.5403, -54.5506, -54.5580,
        -54.5632, -54.5670, -54.5696, -54.5715, -54.5728, -54.5737, -54.5744,
        -54.5748, -54.5751, -54.5754, -54.5755, -54.5756, -54.5757, -54.5758,
        -54.5758, -54.5758, -54.5758, -54.5759], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3319e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4931, -109.4932, -109.4932, -109.4932, -109.4932, -109.4932,
        -109.4932, -109.4932, -109.4932, -109.4932], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5751, -54.5754, -54.5755, -54.5756, -54.5757, -54.5758, -54.5758,
        -54.5758, -54.5758, -54.5759], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 8 	 1 	 N2 	 N2 	 0.00011837824982359638

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-94.1378, -93.5794, -93.4276, -93.3654, -93.3188, -93.2887, -93.2670,
        -93.2515, -93.2404, -93.2324, -93.2266, -93.2224, -93.2193, -93.2170,
        -93.2153, -93.2141, -93.2131, -93.2125, -93.2119, -93.2116, -93.2113,
        -93.2111, -93.2109, -93.2108, -93.2107], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.2131e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7550, -37.7930, -37.8058, -37.8129, -37.8175, -37.8208, -37.8231,
        -37.8247, -37.8259, -37.8267, -37.8273, -37.8277, -37.8280, -37.8282,
        -37.8283, -37.8284, -37.8285, -37.8285, -37.8286, -37.8286, -37.8286,
        -37.8286, -37.8286, -37.8286, -37.8286], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0156e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3327, -0.4624, -0.4778, -0.4852, -0.4898, -0.4928, -0.4949, -0.4964,
        -0.4974, -0.4981, -0.4986, -0.4989, -0.4992, -0.4993, -0.4994, -0.4995,
        -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8017e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4159, -54.4876, -54.5178, -54.5353, -54.5471, -54.5555, -54.5615,
        -54.5657, -54.5687, -54.5708, -54.5723, -54.5734, -54.5741, -54.5746,
        -54.5750, -54.5753, -54.5754, -54.5756, -54.5756, -54.5757, -54.5758,
        -54.5758, -54.5758, -54.5758, -54.5758], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3223e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2141, -93.2131, -93.2125, -93.2119, -93.2116, -93.2113, -93.2111,
        -93.2109, -93.2108, -93.2107], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8284, -37.8285, -37.8285, -37.8286, -37.8286, -37.8286, -37.8286,
        -37.8286, -37.8286, -37.8286], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4995, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5753, -54.5754, -54.5756, -54.5756, -54.5757, -54.5758, -54.5758,
        -54.5758, -54.5758, -54.5758], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 8 	 3 	 CHN 	 CNH 	 0.008672733373661319

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e08)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e08/2022-10-25_04:04:39.930803_2.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e08/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 8 || ,[' rho : 3.078198', ' ae : 73.125669', ' E : 3.213589'] ,|| total loss 53.509728 || CHKPT: _2.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4635, -7.4701, -7.4722, -7.4733, -7.4742, -7.4751, -7.4755, -7.4754,
        -7.4751, -7.4750, -7.4749, -7.4750, -7.4750, -7.4750, -7.4750, -7.4751,
        -7.4751, -7.4751, -7.4751, -7.4751, -7.4751, -7.4751, -7.4751, -7.4751,
        -7.4751], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.1911e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.1911e-09, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4751, -7.4751, -7.4751, -7.4751, -7.4751, -7.4751, -7.4751, -7.4751,
        -7.4751, -7.4751], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 9 	 10 	 Li 	 Li 	 1.997157614000739e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4024, -54.4669, -54.5021, -54.5236, -54.5385, -54.5492, -54.5569,
        -54.5624, -54.5663, -54.5690, -54.5710, -54.5724, -54.5733, -54.5740,
        -54.5745, -54.5748, -54.5751, -54.5752, -54.5753, -54.5754, -54.5755,
        -54.5755, -54.5756, -54.5756, -54.5756], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3903e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.3903e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5748, -54.5751, -54.5752, -54.5753, -54.5754, -54.5755, -54.5755,
        -54.5756, -54.5756, -54.5756], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 9 	 11 	 N 	 N 	 4.34724162679111e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3183, -0.4586, -0.4756, -0.4838, -0.4888, -0.4922, -0.4945, -0.4960,
        -0.4972, -0.4979, -0.4985, -0.4988, -0.4991, -0.4993, -0.4994, -0.4995,
        -0.4996, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.0574e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.0574e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4995, -0.4996, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 9 	 9 	 H 	 H 	 2.1809795512218325e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0619, -1.1268, -1.1436, -1.1522, -1.1576, -1.1613, -1.1638, -1.1656,
        -1.1668, -1.1677, -1.1683, -1.1687, -1.1690, -1.1692, -1.1694, -1.1695,
        -1.1695, -1.1696, -1.1696, -1.1697, -1.1697, -1.1697, -1.1697, -1.1697,
        -1.1697], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7174e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.4349e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2503, -0.4393, -0.4648, -0.4768, -0.4841, -0.4889, -0.4922, -0.4945,
        -0.4961, -0.4972, -0.4979, -0.4985, -0.4988, -0.4991, -0.4993, -0.4994,
        -0.4995, -0.4996, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.3310e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.4349e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1695, -1.1695, -1.1696, -1.1696, -1.1697, -1.1697, -1.1697, -1.1697,
        -1.1697, -1.1697], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4994, -0.4995, -0.4996, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997,
        -0.4997, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 9 	 0 	 H2 	 H2 	 3.767885209766051e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0851, -460.1171, -460.1287, -460.1353, -460.1398, -460.1430,
        -460.1454, -460.1471, -460.1483, -460.1491, -460.1497, -460.1502,
        -460.1505, -460.1507, -460.1508, -460.1510, -460.1510, -460.1511,
        -460.1511, -460.1511, -460.1512, -460.1512, -460.1512, -460.1512,
        -460.1512], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0343e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.0343e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1510, -460.1510, -460.1511, -460.1511, -460.1511, -460.1512,
        -460.1512, -460.1512, -460.1512, -460.1512], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 9 	 7 	 Cl 	 Cl 	 2.3782713069084857e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2564, -107.2739, -107.2388, -107.2309, -107.2252, -107.2221,
        -107.2206, -107.2203, -107.2205, -107.2207, -107.2210, -107.2212,
        -107.2215, -107.2218, -107.2221, -107.2224, -107.2226, -107.2229,
        -107.2231, -107.2233, -107.2234, -107.2235, -107.2236, -107.2237,
        -107.2238], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.3320e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6677, -99.6903, -99.7011, -99.7075, -99.7120, -99.7152, -99.7175,
        -99.7192, -99.7205, -99.7213, -99.7219, -99.7224, -99.7227, -99.7229,
        -99.7230, -99.7232, -99.7232, -99.7233, -99.7233, -99.7233, -99.7234,
        -99.7234, -99.7234, -99.7234, -99.7234], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1987e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4609, -7.4683, -7.4710, -7.4724, -7.4734, -7.4743, -7.4751, -7.4754,
        -7.4752, -7.4750, -7.4749, -7.4749, -7.4749, -7.4749, -7.4749, -7.4750,
        -7.4750, -7.4750, -7.4750, -7.4750, -7.4750, -7.4750, -7.4751, -7.4751,
        -7.4751], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.7418e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2224, -107.2226, -107.2229, -107.2231, -107.2233, -107.2234,
        -107.2235, -107.2236, -107.2237, -107.2238], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7232, -99.7232, -99.7233, -99.7233, -99.7233, -99.7234, -99.7234,
        -99.7234, -99.7234, -99.7234], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4750, -7.4750, -7.4750, -7.4750, -7.4750, -7.4750, -7.4750, -7.4751,
        -7.4751, -7.4751], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 9 	 2 	 FLi 	 LiF 	 0.00908587754250682

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.5959, -109.9015, -109.7481, -109.6658, -109.6129, -109.5767,
        -109.5514, -109.5338, -109.5215, -109.5128, -109.5067, -109.5025,
        -109.4995, -109.4975, -109.4960, -109.4950, -109.4943, -109.4938,
        -109.4934, -109.4932, -109.4930, -109.4929, -109.4928, -109.4927,
        -109.4927], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.3512e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4055, -54.4741, -54.5076, -54.5276, -54.5414, -54.5512, -54.5583,
        -54.5633, -54.5669, -54.5694, -54.5712, -54.5724, -54.5733, -54.5739,
        -54.5744, -54.5747, -54.5749, -54.5750, -54.5751, -54.5752, -54.5753,
        -54.5753, -54.5753, -54.5753, -54.5754], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4282e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4950, -109.4943, -109.4938, -109.4934, -109.4932, -109.4930,
        -109.4929, -109.4928, -109.4927, -109.4927], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5747, -54.5749, -54.5750, -54.5751, -54.5752, -54.5753, -54.5753,
        -54.5753, -54.5753, -54.5754], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 9 	 1 	 N2 	 N2 	 0.00011262382698016989

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7347, -37.7729, -37.7913, -37.8022, -37.8097, -37.8150, -37.8188,
        -37.8216, -37.8235, -37.8249, -37.8259, -37.8266, -37.8271, -37.8274,
        -37.8277, -37.8278, -37.8279, -37.8280, -37.8281, -37.8281, -37.8282,
        -37.8282, -37.8282, -37.8282, -37.8282], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1021e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.1021e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8278, -37.8279, -37.8280, -37.8281, -37.8281, -37.8282, -37.8282,
        -37.8282, -37.8282, -37.8282], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 9 	 6 	 C 	 C 	 3.5352977415057754e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.8506, -188.8762, -188.6665, -188.5441, -188.4683, -188.4168,
        -188.3808, -188.3556, -188.3377, -188.3251, -188.3162, -188.3099,
        -188.3054, -188.3022, -188.2999, -188.2983, -188.2971, -188.2963,
        -188.2957, -188.2953, -188.2950, -188.2948, -188.2946, -188.2945,
        -188.2944], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.8664e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7345, -37.7725, -37.7910, -37.8020, -37.8095, -37.8149, -37.8188,
        -37.8215, -37.8235, -37.8249, -37.8259, -37.8266, -37.8271, -37.8274,
        -37.8277, -37.8278, -37.8279, -37.8280, -37.8281, -37.8281, -37.8282,
        -37.8282, -37.8282, -37.8282, -37.8282], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1027e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9626, -75.0073, -75.0240, -75.0333, -75.0395, -75.0439, -75.0470,
        -75.0492, -75.0508, -75.0519, -75.0527, -75.0533, -75.0537, -75.0540,
        -75.0542, -75.0543, -75.0544, -75.0545, -75.0545, -75.0546, -75.0546,
        -75.0546, -75.0546, -75.0546, -75.0546], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7494e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.2983, -188.2971, -188.2963, -188.2957, -188.2953, -188.2950,
        -188.2948, -188.2946, -188.2945, -188.2944], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8278, -37.8279, -37.8280, -37.8281, -37.8281, -37.8282, -37.8282,
        -37.8282, -37.8282, -37.8282], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0543, -75.0544, -75.0545, -75.0545, -75.0546, -75.0546, -75.0546,
        -75.0546, -75.0546, -75.0546], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 9 	 4 	 CO2 	 CO2 	 0.016433567194607552

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4569, -920.4216, -920.4131, -920.4087, -920.4058, -920.4038,
        -920.4024, -920.4014, -920.4007, -920.4002, -920.3998, -920.3996,
        -920.3994, -920.3993, -920.3992, -920.3991, -920.3991, -920.3990,
        -920.3990, -920.3990, -920.3990, -920.3990, -920.3990, -920.3990,
        -920.3990], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.5826e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.1653e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0841, -460.1160, -460.1274, -460.1340, -460.1384, -460.1416,
        -460.1439, -460.1456, -460.1468, -460.1476, -460.1482, -460.1486,
        -460.1489, -460.1492, -460.1493, -460.1494, -460.1495, -460.1495,
        -460.1496, -460.1496, -460.1496, -460.1496, -460.1496, -460.1496,
        -460.1497], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.7307e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.1655e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.3991, -920.3991, -920.3990, -920.3990, -920.3990, -920.3990,
        -920.3990, -920.3990, -920.3990, -920.3990], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1494, -460.1495, -460.1495, -460.1496, -460.1496, -460.1496,
        -460.1496, -460.1496, -460.1496, -460.1497], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 9 	 5 	 Cl2 	 Cl2 	 6.188658224134003e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-93.8594, -93.4631, -93.3645, -93.3180, -93.2863, -93.2651, -93.2500,
        -93.2392, -93.2314, -93.2258, -93.2216, -93.2186, -93.2164, -93.2148,
        -93.2136, -93.2127, -93.2120, -93.2115, -93.2111, -93.2108, -93.2106,
        -93.2104, -93.2103, -93.2102, -93.2102], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.1595e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7420, -37.7826, -37.7983, -37.8073, -37.8133, -37.8175, -37.8206,
        -37.8227, -37.8243, -37.8253, -37.8261, -37.8266, -37.8270, -37.8273,
        -37.8275, -37.8276, -37.8277, -37.8278, -37.8278, -37.8278, -37.8279,
        -37.8279, -37.8279, -37.8279, -37.8279], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1487e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2439, -0.4374, -0.4637, -0.4761, -0.4836, -0.4886, -0.4920, -0.4943,
        -0.4959, -0.4971, -0.4979, -0.4984, -0.4988, -0.4991, -0.4993, -0.4994,
        -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.5925e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4170, -54.4887, -54.5183, -54.5354, -54.5470, -54.5552, -54.5610,
        -54.5651, -54.5680, -54.5701, -54.5716, -54.5726, -54.5733, -54.5738,
        -54.5742, -54.5744, -54.5746, -54.5747, -54.5748, -54.5749, -54.5749,
        -54.5749, -54.5749, -54.5750, -54.5750], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4907e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2127, -93.2120, -93.2115, -93.2111, -93.2108, -93.2106, -93.2104,
        -93.2103, -93.2102, -93.2102], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8276, -37.8277, -37.8278, -37.8278, -37.8278, -37.8279, -37.8279,
        -37.8279, -37.8279, -37.8279], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4997, -0.4997,
        -0.4997, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5744, -54.5746, -54.5747, -54.5748, -54.5749, -54.5749, -54.5749,
        -54.5749, -54.5750, -54.5750], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 9 	 3 	 CHN 	 CNH 	 0.00857813567741449

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6770, -99.7000, -99.7079, -99.7123, -99.7153, -99.7174, -99.7189,
        -99.7200, -99.7207, -99.7213, -99.7217, -99.7219, -99.7221, -99.7222,
        -99.7223, -99.7224, -99.7225, -99.7225, -99.7225, -99.7225, -99.7225,
        -99.7225, -99.7225, -99.7226, -99.7226], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3839e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.3839e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7224, -99.7225, -99.7225, -99.7225, -99.7225, -99.7225, -99.7225,
        -99.7225, -99.7226, -99.7226], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 9 	 8 	 F 	 F 	 3.009619505384292e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9441, -74.9816, -75.0043, -75.0185, -75.0284, -75.0356, -75.0408,
        -75.0446, -75.0473, -75.0492, -75.0506, -75.0515, -75.0522, -75.0527,
        -75.0531, -75.0533, -75.0535, -75.0536, -75.0537, -75.0537, -75.0538,
        -75.0538, -75.0538, -75.0538, -75.0538], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.0022e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.0022e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0533, -75.0535, -75.0536, -75.0537, -75.0537, -75.0538, -75.0538,
        -75.0538, -75.0538, -75.0538], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 9 	 12 	 O 	 O 	 4.243458291246112e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e09)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e09/2022-10-25_04:04:39.930803_0.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e09/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 9 || ,[' rho : 3.068332', ' ae : 72.722776', ' E : 3.319640'] ,|| total loss 53.223158 || CHKPT: _0.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.4001, -188.7021, -188.5536, -188.4674, -188.4146, -188.3786,
        -188.3535, -188.3359, -188.3235, -188.3147, -188.3084, -188.3040,
        -188.3009, -188.2986, -188.2970, -188.2959, -188.2951, -188.2945,
        -188.2941, -188.2938, -188.2936, -188.2934, -188.2933, -188.2932,
        -188.2932], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.8587e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7337, -37.7715, -37.7901, -37.8012, -37.8087, -37.8142, -37.8181,
        -37.8208, -37.8228, -37.8242, -37.8252, -37.8259, -37.8264, -37.8268,
        -37.8270, -37.8272, -37.8273, -37.8274, -37.8275, -37.8275, -37.8275,
        -37.8276, -37.8276, -37.8276, -37.8276], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2143e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9589, -75.0040, -75.0214, -75.0312, -75.0378, -75.0424, -75.0457,
        -75.0481, -75.0498, -75.0510, -75.0519, -75.0525, -75.0529, -75.0532,
        -75.0534, -75.0535, -75.0536, -75.0537, -75.0537, -75.0538, -75.0538,
        -75.0538, -75.0538, -75.0538, -75.0539], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.9665e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.2959, -188.2951, -188.2945, -188.2941, -188.2938, -188.2936,
        -188.2934, -188.2933, -188.2932, -188.2932], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8272, -37.8273, -37.8274, -37.8275, -37.8275, -37.8275, -37.8276,
        -37.8276, -37.8276, -37.8276], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0535, -75.0536, -75.0537, -75.0537, -75.0538, -75.0538, -75.0538,
        -75.0538, -75.0538, -75.0539], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 10 	 4 	 CO2 	 CO2 	 0.016328934734395936

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7358, -37.7753, -37.7929, -37.8032, -37.8102, -37.8152, -37.8187,
        -37.8213, -37.8231, -37.8244, -37.8253, -37.8259, -37.8264, -37.8267,
        -37.8269, -37.8271, -37.8272, -37.8273, -37.8273, -37.8273, -37.8274,
        -37.8274, -37.8274, -37.8274, -37.8274], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2435e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.2435e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8271, -37.8272, -37.8273, -37.8273, -37.8273, -37.8274, -37.8274,
        -37.8274, -37.8274, -37.8274], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 10 	 6 	 C 	 C 	 4.004262426790897e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0052, -1.1042, -1.1298, -1.1428, -1.1511, -1.1567, -1.1605, -1.1632,
        -1.1651, -1.1664, -1.1674, -1.1680, -1.1684, -1.1688, -1.1690, -1.1691,
        -1.1692, -1.1693, -1.1694, -1.1694, -1.1694, -1.1695, -1.1695, -1.1695,
        -1.1695], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6898e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3796e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2190, -0.4295, -0.4594, -0.4733, -0.4818, -0.4873, -0.4911, -0.4937,
        -0.4955, -0.4968, -0.4976, -0.4982, -0.4987, -0.4990, -0.4992, -0.4993,
        -0.4994, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.3482e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3796e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1691, -1.1692, -1.1693, -1.1694, -1.1694, -1.1694, -1.1695, -1.1695,
        -1.1695, -1.1695], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4993, -0.4994, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 10 	 0 	 H2 	 H2 	 4.037608074418202e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4612, -7.4684, -7.4709, -7.4722, -7.4731, -7.4740, -7.4747, -7.4748,
        -7.4746, -7.4744, -7.4743, -7.4743, -7.4743, -7.4744, -7.4744, -7.4744,
        -7.4744, -7.4745, -7.4745, -7.4745, -7.4745, -7.4745, -7.4745, -7.4745,
        -7.4745], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3648e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.3648e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4744, -7.4744, -7.4745, -7.4745, -7.4745, -7.4745, -7.4745, -7.4745,
        -7.4745, -7.4745], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 10 	 10 	 Li 	 Li 	 2.968076603886779e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9468, -74.9903, -75.0111, -75.0235, -75.0320, -75.0381, -75.0425,
        -75.0456, -75.0479, -75.0495, -75.0506, -75.0514, -75.0520, -75.0524,
        -75.0527, -75.0529, -75.0530, -75.0531, -75.0532, -75.0533, -75.0533,
        -75.0533, -75.0533, -75.0533, -75.0533], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.1329e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.1329e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0529, -75.0530, -75.0531, -75.0532, -75.0533, -75.0533, -75.0533,
        -75.0533, -75.0533, -75.0533], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 10 	 12 	 O 	 O 	 4.556997989420095e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.9113, -109.4535, -109.5249, -109.5188, -109.5099, -109.5033,
        -109.4989, -109.4961, -109.4942, -109.4931, -109.4923, -109.4918,
        -109.4915, -109.4913, -109.4912, -109.4911, -109.4911, -109.4910,
        -109.4910, -109.4910, -109.4910, -109.4909, -109.4909, -109.4909,
        -109.4909], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.3380e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4079, -54.4780, -54.5102, -54.5293, -54.5423, -54.5515, -54.5581,
        -54.5628, -54.5662, -54.5685, -54.5702, -54.5714, -54.5722, -54.5728,
        -54.5732, -54.5735, -54.5737, -54.5738, -54.5739, -54.5740, -54.5740,
        -54.5740, -54.5741, -54.5741, -54.5741], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6868e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4911, -109.4911, -109.4910, -109.4910, -109.4910, -109.4910,
        -109.4909, -109.4909, -109.4909, -109.4909], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5735, -54.5737, -54.5738, -54.5739, -54.5740, -54.5740, -54.5740,
        -54.5741, -54.5741, -54.5741], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 10 	 1 	 N2 	 N2 	 0.00010561941474159036

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2432, -107.2691, -107.2343, -107.2275, -107.2225, -107.2198,
        -107.2186, -107.2185, -107.2188, -107.2192, -107.2196, -107.2199,
        -107.2202, -107.2205, -107.2209, -107.2212, -107.2215, -107.2217,
        -107.2219, -107.2221, -107.2223, -107.2224, -107.2225, -107.2226,
        -107.2227], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.3462e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6659, -99.6876, -99.6986, -99.7053, -99.7100, -99.7134, -99.7159,
        -99.7177, -99.7190, -99.7199, -99.7206, -99.7210, -99.7213, -99.7216,
        -99.7217, -99.7218, -99.7219, -99.7220, -99.7220, -99.7221, -99.7221,
        -99.7221, -99.7221, -99.7221, -99.7221], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5083e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4591, -7.4665, -7.4695, -7.4712, -7.4723, -7.4732, -7.4741, -7.4747,
        -7.4747, -7.4744, -7.4742, -7.4742, -7.4742, -7.4742, -7.4743, -7.4743,
        -7.4743, -7.4743, -7.4743, -7.4744, -7.4744, -7.4744, -7.4744, -7.4744,
        -7.4744], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4587e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2212, -107.2215, -107.2217, -107.2219, -107.2221, -107.2223,
        -107.2224, -107.2225, -107.2226, -107.2227], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7218, -99.7219, -99.7220, -99.7220, -99.7221, -99.7221, -99.7221,
        -99.7221, -99.7221, -99.7221], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4743, -7.4743, -7.4743, -7.4743, -7.4744, -7.4744, -7.4744, -7.4744,
        -7.4744, -7.4744], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 10 	 2 	 FLi 	 LiF 	 0.009006798416610638

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4443, -920.4149, -920.4081, -920.4045, -920.4021, -920.4006,
        -920.3994, -920.3986, -920.3981, -920.3977, -920.3974, -920.3972,
        -920.3971, -920.3970, -920.3969, -920.3968, -920.3968, -920.3968,
        -920.3968, -920.3968, -920.3968, -920.3967, -920.3967, -920.3967,
        -920.3967], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.6270e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.2539e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0870, -460.1177, -460.1283, -460.1343, -460.1383, -460.1412,
        -460.1433, -460.1448, -460.1458, -460.1466, -460.1471, -460.1475,
        -460.1478, -460.1480, -460.1481, -460.1482, -460.1483, -460.1483,
        -460.1484, -460.1484, -460.1484, -460.1484, -460.1484, -460.1484,
        -460.1484], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.5721e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.2540e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.3968, -920.3968, -920.3968, -920.3968, -920.3968, -920.3968,
        -920.3967, -920.3967, -920.3967, -920.3967], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1482, -460.1483, -460.1483, -460.1484, -460.1484, -460.1484,
        -460.1484, -460.1484, -460.1484, -460.1484], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 10 	 5 	 Cl2 	 Cl2 	 6.732981218623178e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-93.8370, -93.4526, -93.3583, -93.3131, -93.2828, -93.2624, -93.2478,
        -93.2375, -93.2300, -93.2246, -93.2207, -93.2178, -93.2157, -93.2141,
        -93.2130, -93.2121, -93.2115, -93.2110, -93.2106, -93.2104, -93.2102,
        -93.2100, -93.2099, -93.2098, -93.2097], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.1115e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7350, -37.7740, -37.7918, -37.8023, -37.8094, -37.8145, -37.8182,
        -37.8208, -37.8226, -37.8239, -37.8249, -37.8255, -37.8260, -37.8263,
        -37.8265, -37.8267, -37.8268, -37.8269, -37.8270, -37.8270, -37.8270,
        -37.8270, -37.8271, -37.8271, -37.8271], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3113e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2277, -0.4323, -0.4609, -0.4743, -0.4824, -0.4878, -0.4914, -0.4939,
        -0.4956, -0.4969, -0.4977, -0.4983, -0.4987, -0.4990, -0.4992, -0.4993,
        -0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.1853e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4029, -54.4694, -54.5037, -54.5244, -54.5387, -54.5490, -54.5563,
        -54.5616, -54.5653, -54.5679, -54.5698, -54.5711, -54.5720, -54.5727,
        -54.5731, -54.5734, -54.5737, -54.5738, -54.5739, -54.5740, -54.5741,
        -54.5741, -54.5741, -54.5741, -54.5742], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6815e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2121, -93.2115, -93.2110, -93.2106, -93.2104, -93.2102, -93.2100,
        -93.2099, -93.2098, -93.2097], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8267, -37.8268, -37.8269, -37.8270, -37.8270, -37.8270, -37.8270,
        -37.8271, -37.8271, -37.8271], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4993, -0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5734, -54.5737, -54.5738, -54.5739, -54.5740, -54.5741, -54.5741,
        -54.5741, -54.5741, -54.5742], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 10 	 3 	 CHN 	 CNH 	 0.008466046485168546

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2484, -0.4387, -0.4644, -0.4766, -0.4839, -0.4888, -0.4921, -0.4944,
        -0.4960, -0.4971, -0.4979, -0.4984, -0.4988, -0.4990, -0.4992, -0.4994,
        -0.4994, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.7019e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.7019e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4994, -0.4994, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 10 	 9 	 H 	 H 	 3.099086041753159e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0857, -460.1168, -460.1276, -460.1338, -460.1379, -460.1409,
        -460.1430, -460.1446, -460.1457, -460.1465, -460.1470, -460.1474,
        -460.1477, -460.1479, -460.1480, -460.1481, -460.1482, -460.1483,
        -460.1483, -460.1483, -460.1483, -460.1483, -460.1484, -460.1484,
        -460.1484], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.2760e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.2760e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1481, -460.1482, -460.1483, -460.1483, -460.1483, -460.1483,
        -460.1483, -460.1484, -460.1484, -460.1484], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 10 	 7 	 Cl 	 Cl 	 2.995975805771321e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6700, -99.6937, -99.7033, -99.7088, -99.7126, -99.7154, -99.7173,
        -99.7187, -99.7198, -99.7205, -99.7210, -99.7213, -99.7216, -99.7218,
        -99.7219, -99.7220, -99.7220, -99.7221, -99.7221, -99.7221, -99.7222,
        -99.7222, -99.7222, -99.7222, -99.7222], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4813e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.4813e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7220, -99.7220, -99.7221, -99.7221, -99.7221, -99.7222, -99.7222,
        -99.7222, -99.7222, -99.7222], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 10 	 8 	 F 	 F 	 3.210229488531051e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4023, -54.4680, -54.5026, -54.5235, -54.5381, -54.5484, -54.5559,
        -54.5612, -54.5650, -54.5677, -54.5696, -54.5709, -54.5719, -54.5725,
        -54.5730, -54.5733, -54.5735, -54.5737, -54.5738, -54.5739, -54.5739,
        -54.5740, -54.5740, -54.5740, -54.5740], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7108e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.7108e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5733, -54.5735, -54.5737, -54.5738, -54.5739, -54.5739, -54.5740,
        -54.5740, -54.5740, -54.5740], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 10 	 11 	 N 	 N 	 5.391219706969258e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e10)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e10/2022-10-25_04:04:39.930803_1.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e10/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 10 || ,[' rho : 3.061687', ' ae : 72.422718', ' E : 3.534064'] ,|| total loss 53.010646 || CHKPT: _1.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0981, -460.1251, -460.1335, -460.1382, -460.1414, -460.1436,
        -460.1451, -460.1463, -460.1471, -460.1476, -460.1480, -460.1483,
        -460.1485, -460.1487, -460.1488, -460.1488, -460.1489, -460.1489,
        -460.1489, -460.1490, -460.1490, -460.1490, -460.1490, -460.1490,
        -460.1490], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.7596e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.7596e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1488, -460.1489, -460.1489, -460.1489, -460.1490, -460.1490,
        -460.1490, -460.1490, -460.1490, -460.1490], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 11 	 7 	 Cl 	 Cl 	 2.2558811202599552e-07

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4586, -7.4657, -7.4690, -7.4708, -7.4720, -7.4729, -7.4738, -7.4746,
        -7.4747, -7.4744, -7.4742, -7.4741, -7.4741, -7.4742, -7.4742, -7.4742,
        -7.4742, -7.4743, -7.4743, -7.4743, -7.4743, -7.4743, -7.4743, -7.4743,
        -7.4743], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5079e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.5079e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4742, -7.4742, -7.4743, -7.4743, -7.4743, -7.4743, -7.4743, -7.4743,
        -7.4743, -7.4743], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 11 	 10 	 Li 	 Li 	 3.2723282573361504e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2853, -0.4495, -0.4704, -0.4804, -0.4865, -0.4906, -0.4933, -0.4953,
        -0.4966, -0.4975, -0.4982, -0.4986, -0.4989, -0.4991, -0.4993, -0.4994,
        -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.9425e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.9425e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 11 	 9 	 H 	 H 	 3.0676218785360736e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.9465, -188.9135, -188.6913, -188.5613, -188.4807, -188.4258,
        -188.3875, -188.3606, -188.3416, -188.3282, -188.3187, -188.3119,
        -188.3072, -188.3038, -188.3014, -188.2996, -188.2984, -188.2975,
        -188.2969, -188.2965, -188.2962, -188.2959, -188.2958, -188.2956,
        -188.2956], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.8396e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7372, -37.7770, -37.7941, -37.8040, -37.8107, -37.8155, -37.8189,
        -37.8213, -37.8231, -37.8243, -37.8252, -37.8258, -37.8262, -37.8265,
        -37.8267, -37.8269, -37.8270, -37.8271, -37.8271, -37.8271, -37.8272,
        -37.8272, -37.8272, -37.8272, -37.8272], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2806e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9493, -74.9935, -75.0137, -75.0256, -75.0337, -75.0395, -75.0437,
        -75.0467, -75.0488, -75.0504, -75.0515, -75.0522, -75.0528, -75.0531,
        -75.0534, -75.0536, -75.0537, -75.0538, -75.0539, -75.0539, -75.0540,
        -75.0540, -75.0540, -75.0540, -75.0540], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.9331e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.2996, -188.2984, -188.2975, -188.2969, -188.2965, -188.2962,
        -188.2959, -188.2958, -188.2956, -188.2956], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8269, -37.8270, -37.8271, -37.8271, -37.8271, -37.8272, -37.8272,
        -37.8272, -37.8272, -37.8272], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0536, -75.0537, -75.0538, -75.0539, -75.0539, -75.0540, -75.0540,
        -75.0540, -75.0540, -75.0540], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 11 	 4 	 CO2 	 CO2 	 0.016024791136241206

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.5204, -109.8887, -109.7388, -109.6592, -109.6081, -109.5732,
        -109.5488, -109.5318, -109.5199, -109.5115, -109.5057, -109.5016,
        -109.4987, -109.4967, -109.4953, -109.4943, -109.4936, -109.4931,
        -109.4928, -109.4926, -109.4924, -109.4923, -109.4922, -109.4921,
        -109.4921], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.3314e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4341, -54.5030, -54.5282, -54.5424, -54.5519, -54.5585, -54.5632,
        -54.5665, -54.5688, -54.5704, -54.5716, -54.5724, -54.5730, -54.5734,
        -54.5737, -54.5739, -54.5740, -54.5741, -54.5742, -54.5742, -54.5742,
        -54.5743, -54.5743, -54.5743, -54.5743], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6171e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4943, -109.4936, -109.4931, -109.4928, -109.4926, -109.4924,
        -109.4923, -109.4922, -109.4921, -109.4921], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5739, -54.5740, -54.5741, -54.5742, -54.5742, -54.5742, -54.5743,
        -54.5743, -54.5743, -54.5743], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 11 	 1 	 N2 	 N2 	 9.805494960385443e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7419, -37.7822, -37.7978, -37.8066, -37.8126, -37.8168, -37.8198,
        -37.8219, -37.8234, -37.8245, -37.8252, -37.8258, -37.8261, -37.8264,
        -37.8266, -37.8267, -37.8268, -37.8269, -37.8269, -37.8269, -37.8270,
        -37.8270, -37.8270, -37.8270, -37.8270], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3175e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.3175e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8267, -37.8268, -37.8269, -37.8269, -37.8269, -37.8270, -37.8270,
        -37.8270, -37.8270, -37.8270], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 11 	 6 	 C 	 C 	 4.264058054720083e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4531, -920.4207, -920.4130, -920.4090, -920.4064, -920.4045,
        -920.4033, -920.4024, -920.4017, -920.4013, -920.4009, -920.4007,
        -920.4006, -920.4004, -920.4004, -920.4003, -920.4003, -920.4002,
        -920.4002, -920.4002, -920.4002, -920.4002, -920.4002, -920.4002,
        -920.4002], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.6331e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.2662e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1003, -460.1268, -460.1351, -460.1397, -460.1427, -460.1448,
        -460.1464, -460.1475, -460.1482, -460.1488, -460.1492, -460.1495,
        -460.1497, -460.1498, -460.1499, -460.1500, -460.1500, -460.1500,
        -460.1501, -460.1501, -460.1501, -460.1501, -460.1501, -460.1501,
        -460.1501], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.4861e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.2667e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4003, -920.4003, -920.4002, -920.4002, -920.4002, -920.4002,
        -920.4002, -920.4002, -920.4002, -920.4002], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1500, -460.1500, -460.1500, -460.1501, -460.1501, -460.1501,
        -460.1501, -460.1501, -460.1501, -460.1501], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 11 	 5 	 Cl2 	 Cl2 	 6.9160875531961015e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2492, -107.2717, -107.2367, -107.2295, -107.2243, -107.2215,
        -107.2202, -107.2200, -107.2203, -107.2206, -107.2209, -107.2212,
        -107.2215, -107.2218, -107.2222, -107.2225, -107.2228, -107.2230,
        -107.2232, -107.2234, -107.2236, -107.2237, -107.2238, -107.2239,
        -107.2240], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.3761e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6666, -99.6876, -99.6988, -99.7056, -99.7104, -99.7139, -99.7164,
        -99.7183, -99.7196, -99.7205, -99.7212, -99.7217, -99.7220, -99.7223,
        -99.7224, -99.7226, -99.7226, -99.7227, -99.7227, -99.7228, -99.7228,
        -99.7228, -99.7228, -99.7228, -99.7228], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3348e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4595, -7.4670, -7.4698, -7.4713, -7.4723, -7.4732, -7.4741, -7.4745,
        -7.4743, -7.4741, -7.4740, -7.4739, -7.4740, -7.4740, -7.4740, -7.4741,
        -7.4741, -7.4741, -7.4741, -7.4741, -7.4741, -7.4741, -7.4741, -7.4741,
        -7.4742], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6459e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2225, -107.2228, -107.2230, -107.2232, -107.2234, -107.2236,
        -107.2237, -107.2238, -107.2239, -107.2240], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7226, -99.7226, -99.7227, -99.7227, -99.7228, -99.7228, -99.7228,
        -99.7228, -99.7228, -99.7228], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4741, -7.4741, -7.4741, -7.4741, -7.4741, -7.4741, -7.4741, -7.4741,
        -7.4741, -7.4742], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 11 	 2 	 FLi 	 LiF 	 0.008931935108525517

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9616, -75.0061, -75.0228, -75.0322, -75.0385, -75.0429, -75.0461,
        -75.0483, -75.0500, -75.0511, -75.0519, -75.0525, -75.0529, -75.0532,
        -75.0533, -75.0535, -75.0536, -75.0537, -75.0537, -75.0537, -75.0538,
        -75.0538, -75.0538, -75.0538, -75.0538], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.9791e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.9791e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0535, -75.0536, -75.0537, -75.0537, -75.0537, -75.0538, -75.0538,
        -75.0538, -75.0538, -75.0538], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 11 	 12 	 O 	 O 	 4.264185053115742e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-94.0759, -93.5534, -93.4128, -93.3543, -93.3109, -93.2829, -93.2627,
        -93.2484, -93.2381, -93.2308, -93.2254, -93.2215, -93.2187, -93.2166,
        -93.2151, -93.2139, -93.2131, -93.2125, -93.2120, -93.2117, -93.2114,
        -93.2113, -93.2111, -93.2110, -93.2109], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.0758e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7556, -37.7927, -37.8050, -37.8118, -37.8163, -37.8194, -37.8216,
        -37.8232, -37.8243, -37.8251, -37.8256, -37.8260, -37.8263, -37.8265,
        -37.8266, -37.8267, -37.8268, -37.8268, -37.8269, -37.8269, -37.8269,
        -37.8269, -37.8269, -37.8269, -37.8269], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3228e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3379, -0.4637, -0.4785, -0.4856, -0.4900, -0.4930, -0.4950, -0.4964,
        -0.4974, -0.4981, -0.4985, -0.4989, -0.4991, -0.4993, -0.4994, -0.4995,
        -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.1390e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4119, -54.4828, -54.5137, -54.5319, -54.5442, -54.5530, -54.5592,
        -54.5636, -54.5668, -54.5690, -54.5705, -54.5716, -54.5724, -54.5730,
        -54.5733, -54.5736, -54.5738, -54.5739, -54.5740, -54.5741, -54.5741,
        -54.5742, -54.5742, -54.5742, -54.5742], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6555e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2139, -93.2131, -93.2125, -93.2120, -93.2117, -93.2114, -93.2113,
        -93.2111, -93.2110, -93.2109], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8267, -37.8268, -37.8268, -37.8269, -37.8269, -37.8269, -37.8269,
        -37.8269, -37.8269, -37.8269], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5736, -54.5738, -54.5739, -54.5740, -54.5741, -54.5741, -54.5742,
        -54.5742, -54.5742, -54.5742], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 11 	 3 	 CHN 	 CNH 	 0.008351353155636121

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0424, -1.1188, -1.1386, -1.1487, -1.1551, -1.1594, -1.1624, -1.1645,
        -1.1659, -1.1669, -1.1676, -1.1681, -1.1685, -1.1687, -1.1689, -1.1690,
        -1.1691, -1.1692, -1.1692, -1.1692, -1.1693, -1.1693, -1.1693, -1.1693,
        -1.1693], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6785e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3571e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2918, -0.4513, -0.4715, -0.4811, -0.4870, -0.4909, -0.4935, -0.4954,
        -0.4967, -0.4976, -0.4982, -0.4986, -0.4989, -0.4991, -0.4993, -0.4994,
        -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.8884e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3571e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1690, -1.1691, -1.1692, -1.1692, -1.1692, -1.1693, -1.1693, -1.1693,
        -1.1693, -1.1693], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 11 	 0 	 H2 	 H2 	 4.328144438356767e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4037, -54.4705, -54.5046, -54.5251, -54.5392, -54.5493, -54.5566,
        -54.5618, -54.5654, -54.5680, -54.5699, -54.5712, -54.5721, -54.5727,
        -54.5732, -54.5735, -54.5737, -54.5739, -54.5740, -54.5740, -54.5741,
        -54.5741, -54.5742, -54.5742, -54.5742], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6731e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.6731e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5735, -54.5737, -54.5739, -54.5740, -54.5740, -54.5741, -54.5741,
        -54.5742, -54.5742, -54.5742], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 11 	 11 	 N 	 N 	 5.277794074247269e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6671, -99.6881, -99.6993, -99.7061, -99.7109, -99.7144, -99.7169,
        -99.7188, -99.7201, -99.7210, -99.7217, -99.7222, -99.7225, -99.7228,
        -99.7229, -99.7230, -99.7231, -99.7232, -99.7232, -99.7232, -99.7233,
        -99.7233, -99.7233, -99.7233, -99.7233], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2218e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.2218e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7230, -99.7231, -99.7232, -99.7232, -99.7232, -99.7233, -99.7233,
        -99.7233, -99.7233, -99.7233], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 11 	 8 	 F 	 F 	 2.6286512291775538e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e11)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e11/2022-10-25_04:04:39.930803_2.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e11/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 11 || ,[' rho : 3.057660', ' ae : 71.881584', ' E : 3.476674'] ,|| total loss 52.636372 || CHKPT: _2.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6691, -99.6919, -99.7023, -99.7084, -99.7127, -99.7158, -99.7180,
        -99.7197, -99.7208, -99.7216, -99.7222, -99.7226, -99.7229, -99.7231,
        -99.7233, -99.7234, -99.7234, -99.7235, -99.7235, -99.7235, -99.7236,
        -99.7236, -99.7236, -99.7236, -99.7236], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1517e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.1517e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7234, -99.7234, -99.7235, -99.7235, -99.7235, -99.7236, -99.7236,
        -99.7236, -99.7236, -99.7236], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 12 	 8 	 F 	 F 	 2.4840941067338777e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4597, -7.4671, -7.4699, -7.4714, -7.4724, -7.4733, -7.4742, -7.4746,
        -7.4744, -7.4741, -7.4740, -7.4740, -7.4740, -7.4740, -7.4741, -7.4741,
        -7.4741, -7.4741, -7.4742, -7.4742, -7.4742, -7.4742, -7.4742, -7.4742,
        -7.4742], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6152e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.6152e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4741, -7.4741, -7.4741, -7.4742, -7.4742, -7.4742, -7.4742, -7.4742,
        -7.4742, -7.4742], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 12 	 10 	 Li 	 Li 	 3.5114198143776412e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.9391, -109.3039, -109.4537, -109.4743, -109.4801, -109.4832,
        -109.4855, -109.4874, -109.4889, -109.4901, -109.4911, -109.4918,
        -109.4923, -109.4927, -109.4930, -109.4932, -109.4934, -109.4935,
        -109.4936, -109.4936, -109.4937, -109.4937, -109.4937, -109.4937,
        -109.4937], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.3268e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4238, -54.4946, -54.5225, -54.5385, -54.5492, -54.5567, -54.5621,
        -54.5659, -54.5685, -54.5704, -54.5718, -54.5727, -54.5734, -54.5738,
        -54.5741, -54.5744, -54.5745, -54.5746, -54.5747, -54.5748, -54.5748,
        -54.5748, -54.5749, -54.5749, -54.5749], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5046e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4932, -109.4934, -109.4935, -109.4936, -109.4936, -109.4937,
        -109.4937, -109.4937, -109.4937, -109.4937], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5744, -54.5745, -54.5746, -54.5747, -54.5748, -54.5748, -54.5748,
        -54.5749, -54.5749, -54.5749], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 12 	 1 	 N2 	 N2 	 9.409129251695158e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2429, -0.4370, -0.4635, -0.4760, -0.4835, -0.4885, -0.4919, -0.4943,
        -0.4959, -0.4970, -0.4978, -0.4984, -0.4988, -0.4990, -0.4992, -0.4993,
        -0.4994, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.8326e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.8326e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4993, -0.4994, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 12 	 9 	 H 	 H 	 3.115325842091531e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2598, -107.2771, -107.2418, -107.2339, -107.2284, -107.2253,
        -107.2238, -107.2234, -107.2236, -107.2238, -107.2241, -107.2243,
        -107.2246, -107.2249, -107.2252, -107.2255, -107.2258, -107.2260,
        -107.2263, -107.2265, -107.2266, -107.2267, -107.2269, -107.2269,
        -107.2270], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.4122e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6688, -99.6897, -99.7010, -99.7078, -99.7126, -99.7161, -99.7186,
        -99.7205, -99.7218, -99.7228, -99.7234, -99.7239, -99.7243, -99.7245,
        -99.7247, -99.7248, -99.7249, -99.7249, -99.7250, -99.7250, -99.7250,
        -99.7250, -99.7250, -99.7250, -99.7250], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.5850e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4600, -7.4674, -7.4702, -7.4716, -7.4726, -7.4735, -7.4744, -7.4747,
        -7.4745, -7.4742, -7.4741, -7.4741, -7.4741, -7.4742, -7.4742, -7.4742,
        -7.4742, -7.4743, -7.4743, -7.4743, -7.4743, -7.4743, -7.4743, -7.4743,
        -7.4743], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5158e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2255, -107.2258, -107.2260, -107.2263, -107.2265, -107.2266,
        -107.2267, -107.2269, -107.2269, -107.2270], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7248, -99.7249, -99.7249, -99.7250, -99.7250, -99.7250, -99.7250,
        -99.7250, -99.7250, -99.7250], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4742, -7.4742, -7.4743, -7.4743, -7.4743, -7.4743, -7.4743, -7.4743,
        -7.4743, -7.4743], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 12 	 2 	 FLi 	 LiF 	 0.008873050437093655

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-93.8645, -93.4660, -93.3670, -93.3206, -93.2889, -93.2678, -93.2528,
        -93.2421, -93.2344, -93.2288, -93.2248, -93.2219, -93.2197, -93.2181,
        -93.2169, -93.2161, -93.2154, -93.2150, -93.2146, -93.2143, -93.2141,
        -93.2140, -93.2139, -93.2138, -93.2137], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.0449e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7411, -37.7814, -37.7974, -37.8066, -37.8127, -37.8171, -37.8202,
        -37.8224, -37.8240, -37.8251, -37.8259, -37.8265, -37.8269, -37.8271,
        -37.8273, -37.8275, -37.8276, -37.8276, -37.8277, -37.8277, -37.8277,
        -37.8278, -37.8278, -37.8278, -37.8278], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1724e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3114, -0.4567, -0.4745, -0.4831, -0.4883, -0.4918, -0.4942, -0.4958,
        -0.4970, -0.4978, -0.4984, -0.4988, -0.4990, -0.4992, -0.4993, -0.4994,
        -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.4423e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4216, -54.4927, -54.5213, -54.5377, -54.5488, -54.5566, -54.5621,
        -54.5661, -54.5688, -54.5708, -54.5722, -54.5732, -54.5738, -54.5743,
        -54.5747, -54.5749, -54.5751, -54.5752, -54.5753, -54.5753, -54.5754,
        -54.5754, -54.5754, -54.5754, -54.5754], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3959e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2161, -93.2154, -93.2150, -93.2146, -93.2143, -93.2141, -93.2140,
        -93.2139, -93.2138, -93.2137], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8275, -37.8276, -37.8276, -37.8277, -37.8277, -37.8277, -37.8278,
        -37.8278, -37.8278, -37.8278], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4994, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5749, -54.5751, -54.5752, -54.5753, -54.5753, -54.5754, -54.5754,
        -54.5754, -54.5754, -54.5754], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 12 	 3 	 CHN 	 CNH 	 0.008291056139565548

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0151, -1.1081, -1.1321, -1.1444, -1.1522, -1.1574, -1.1611, -1.1636,
        -1.1654, -1.1666, -1.1675, -1.1681, -1.1685, -1.1688, -1.1690, -1.1692,
        -1.1693, -1.1693, -1.1694, -1.1694, -1.1695, -1.1695, -1.1695, -1.1695,
        -1.1695], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7048e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.4095e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2126, -0.4275, -0.4582, -0.4726, -0.4813, -0.4870, -0.4909, -0.4935,
        -0.4954, -0.4967, -0.4976, -0.4982, -0.4986, -0.4989, -0.4992, -0.4993,
        -0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.5681e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.4096e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1692, -1.1693, -1.1693, -1.1694, -1.1694, -1.1695, -1.1695, -1.1695,
        -1.1695, -1.1695], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4993, -0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 12 	 0 	 H2 	 H2 	 3.980419625239339e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7390, -37.7790, -37.7957, -37.8053, -37.8119, -37.8165, -37.8198,
        -37.8222, -37.8239, -37.8251, -37.8259, -37.8265, -37.8269, -37.8272,
        -37.8274, -37.8276, -37.8277, -37.8277, -37.8278, -37.8278, -37.8278,
        -37.8279, -37.8279, -37.8279, -37.8279], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1542e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.1542e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8276, -37.8277, -37.8277, -37.8278, -37.8278, -37.8278, -37.8279,
        -37.8279, -37.8279, -37.8279], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 12 	 6 	 C 	 C 	 3.7207649165462126e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4308, -54.5007, -54.5270, -54.5420, -54.5519, -54.5589, -54.5639,
        -54.5674, -54.5698, -54.5716, -54.5728, -54.5737, -54.5743, -54.5747,
        -54.5750, -54.5752, -54.5754, -54.5755, -54.5755, -54.5756, -54.5756,
        -54.5756, -54.5757, -54.5757, -54.5757], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3386e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.3386e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5752, -54.5754, -54.5755, -54.5755, -54.5756, -54.5756, -54.5756,
        -54.5757, -54.5757, -54.5757], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 12 	 11 	 N 	 N 	 4.276250573321333e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9508, -74.9943, -75.0148, -75.0270, -75.0353, -75.0413, -75.0456,
        -75.0487, -75.0509, -75.0525, -75.0536, -75.0544, -75.0549, -75.0553,
        -75.0556, -75.0558, -75.0559, -75.0560, -75.0561, -75.0561, -75.0562,
        -75.0562, -75.0562, -75.0562, -75.0562], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3510e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.3510e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0558, -75.0559, -75.0560, -75.0561, -75.0561, -75.0562, -75.0562,
        -75.0562, -75.0562, -75.0562], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 12 	 12 	 O 	 O 	 2.8647996551605423e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0956, -460.1270, -460.1381, -460.1445, -460.1488, -460.1518,
        -460.1541, -460.1557, -460.1568, -460.1576, -460.1582, -460.1586,
        -460.1589, -460.1591, -460.1593, -460.1594, -460.1594, -460.1595,
        -460.1595, -460.1595, -460.1596, -460.1596, -460.1596, -460.1596,
        -460.1596], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4031e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.4031e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1594, -460.1594, -460.1595, -460.1595, -460.1595, -460.1596,
        -460.1596, -460.1596, -460.1596, -460.1596], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 12 	 7 	 Cl 	 Cl 	 3.131538033942068e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.3330, -188.6821, -188.5447, -188.4648, -188.4159, -188.3826,
        -188.3593, -188.3430, -188.3315, -188.3234, -188.3176, -188.3135,
        -188.3106, -188.3085, -188.3070, -188.3060, -188.3052, -188.3047,
        -188.3043, -188.3040, -188.3038, -188.3037, -188.3036, -188.3035,
        -188.3034], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.8239e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7385, -37.7781, -37.7952, -37.8051, -37.8118, -37.8165, -37.8200,
        -37.8224, -37.8241, -37.8253, -37.8262, -37.8268, -37.8273, -37.8276,
        -37.8278, -37.8279, -37.8280, -37.8281, -37.8282, -37.8282, -37.8282,
        -37.8282, -37.8282, -37.8283, -37.8283], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0900e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9479, -74.9871, -75.0091, -75.0228, -75.0323, -75.0391, -75.0441,
        -75.0476, -75.0502, -75.0520, -75.0534, -75.0543, -75.0549, -75.0554,
        -75.0557, -75.0559, -75.0561, -75.0562, -75.0563, -75.0564, -75.0564,
        -75.0564, -75.0564, -75.0565, -75.0565], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3085e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3060, -188.3052, -188.3047, -188.3043, -188.3040, -188.3038,
        -188.3037, -188.3036, -188.3035, -188.3034], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8279, -37.8280, -37.8281, -37.8282, -37.8282, -37.8282, -37.8282,
        -37.8282, -37.8283, -37.8283], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0559, -75.0561, -75.0562, -75.0563, -75.0564, -75.0564, -75.0564,
        -75.0564, -75.0565, -75.0565], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 12 	 4 	 CO2 	 CO2 	 0.015792446520090438

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4479, -920.4275, -920.4230, -920.4207, -920.4192, -920.4182,
        -920.4175, -920.4170, -920.4167, -920.4165, -920.4163, -920.4162,
        -920.4161, -920.4160, -920.4160, -920.4160, -920.4159, -920.4159,
        -920.4159, -920.4159, -920.4159, -920.4159, -920.4159, -920.4159,
        -920.4159], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.6085e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.2171e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1071, -460.1340, -460.1425, -460.1472, -460.1504, -460.1526,
        -460.1541, -460.1553, -460.1561, -460.1566, -460.1570, -460.1573,
        -460.1575, -460.1577, -460.1578, -460.1578, -460.1579, -460.1579,
        -460.1579, -460.1580, -460.1580, -460.1580, -460.1580, -460.1580,
        -460.1580], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0467e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.2275e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4160, -920.4159, -920.4159, -920.4159, -920.4159, -920.4159,
        -920.4159, -920.4159, -920.4159, -920.4159], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1578, -460.1579, -460.1579, -460.1579, -460.1580, -460.1580,
        -460.1580, -460.1580, -460.1580, -460.1580], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 12 	 5 	 Cl2 	 Cl2 	 6.8062343348426415e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e12)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e12/2022-10-25_04:04:39.930803_0.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e12/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 12 || ,[' rho : 3.055771', ' ae : 71.500132', ' E : 3.408049'] ,|| total loss 52.373709 || CHKPT: _0.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6773, -99.7007, -99.7093, -99.7142, -99.7175, -99.7199, -99.7216,
        -99.7228, -99.7237, -99.7243, -99.7247, -99.7250, -99.7253, -99.7254,
        -99.7255, -99.7256, -99.7257, -99.7257, -99.7257, -99.7257, -99.7257,
        -99.7258, -99.7258, -99.7258, -99.7258], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.1665e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.1665e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7256, -99.7257, -99.7257, -99.7257, -99.7257, -99.7257, -99.7258,
        -99.7258, -99.7258, -99.7258], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 13 	 8 	 F 	 F 	 1.547618933174789e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.5284, -188.7556, -188.5915, -188.4959, -188.4371, -188.3971,
        -188.3692, -188.3496, -188.3358, -188.3260, -188.3190, -188.3141,
        -188.3106, -188.3081, -188.3064, -188.3051, -188.3042, -188.3036,
        -188.3031, -188.3028, -188.3026, -188.3024, -188.3023, -188.3022,
        -188.3021], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.8199e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7338, -37.7701, -37.7890, -37.8004, -37.8082, -37.8138, -37.8179,
        -37.8208, -37.8228, -37.8243, -37.8253, -37.8261, -37.8266, -37.8269,
        -37.8272, -37.8274, -37.8275, -37.8276, -37.8276, -37.8277, -37.8277,
        -37.8277, -37.8278, -37.8278, -37.8278], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1824e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9644, -75.0086, -75.0252, -75.0345, -75.0407, -75.0450, -75.0482,
        -75.0504, -75.0520, -75.0531, -75.0539, -75.0545, -75.0549, -75.0551,
        -75.0553, -75.0555, -75.0556, -75.0556, -75.0557, -75.0557, -75.0557,
        -75.0558, -75.0558, -75.0558, -75.0558], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4456e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3051, -188.3042, -188.3036, -188.3031, -188.3028, -188.3026,
        -188.3024, -188.3023, -188.3022, -188.3021], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8274, -37.8275, -37.8276, -37.8276, -37.8277, -37.8277, -37.8277,
        -37.8278, -37.8278, -37.8278], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0555, -75.0556, -75.0556, -75.0557, -75.0557, -75.0557, -75.0558,
        -75.0558, -75.0558, -75.0558], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 13 	 4 	 CO2 	 CO2 	 0.015729214275410384

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1038, -460.1312, -460.1399, -460.1447, -460.1479, -460.1502,
        -460.1518, -460.1530, -460.1538, -460.1544, -460.1548, -460.1551,
        -460.1553, -460.1555, -460.1556, -460.1556, -460.1557, -460.1557,
        -460.1557, -460.1558, -460.1558, -460.1558, -460.1558, -460.1558,
        -460.1558], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(6.3460e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.3460e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1556, -460.1557, -460.1557, -460.1557, -460.1558, -460.1558,
        -460.1558, -460.1558, -460.1558, -460.1558], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 13 	 7 	 Cl 	 Cl 	 1.4174592820660178e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4469, -54.5121, -54.5346, -54.5471, -54.5553, -54.5611, -54.5651,
        -54.5680, -54.5700, -54.5714, -54.5724, -54.5731, -54.5736, -54.5739,
        -54.5742, -54.5743, -54.5745, -54.5745, -54.5746, -54.5746, -54.5747,
        -54.5747, -54.5747, -54.5747, -54.5747], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5249e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.5249e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5743, -54.5745, -54.5745, -54.5746, -54.5746, -54.5747, -54.5747,
        -54.5747, -54.5747, -54.5747], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 13 	 11 	 N 	 N 	 4.912699573225406e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4442, -920.4201, -920.4146, -920.4118, -920.4100, -920.4087,
        -920.4078, -920.4072, -920.4068, -920.4065, -920.4063, -920.4061,
        -920.4060, -920.4059, -920.4059, -920.4059, -920.4058, -920.4058,
        -920.4058, -920.4058, -920.4058, -920.4058, -920.4058, -920.4058,
        -920.4058], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.6164e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.2328e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1068, -460.1317, -460.1393, -460.1434, -460.1462, -460.1481,
        -460.1495, -460.1505, -460.1512, -460.1517, -460.1520, -460.1523,
        -460.1524, -460.1526, -460.1526, -460.1527, -460.1528, -460.1528,
        -460.1528, -460.1528, -460.1528, -460.1528, -460.1528, -460.1528,
        -460.1528], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.4400e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.2353e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4059, -920.4058, -920.4058, -920.4058, -920.4058, -920.4058,
        -920.4058, -920.4058, -920.4058, -920.4058], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1527, -460.1528, -460.1528, -460.1528, -460.1528, -460.1528,
        -460.1528, -460.1528, -460.1528, -460.1528], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 13 	 5 	 Cl2 	 Cl2 	 7.219441897096397e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.5617, -109.8972, -109.7451, -109.6638, -109.6116, -109.5759,
        -109.5511, -109.5337, -109.5215, -109.5129, -109.5070, -109.5028,
        -109.4999, -109.4978, -109.4964, -109.4954, -109.4947, -109.4942,
        -109.4938, -109.4936, -109.4934, -109.4933, -109.4932, -109.4931,
        -109.4931], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.3160e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4101, -54.4802, -54.5118, -54.5304, -54.5431, -54.5521, -54.5586,
        -54.5631, -54.5664, -54.5687, -54.5703, -54.5714, -54.5722, -54.5728,
        -54.5732, -54.5735, -54.5737, -54.5738, -54.5739, -54.5740, -54.5740,
        -54.5740, -54.5741, -54.5741, -54.5741], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6862e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4954, -109.4947, -109.4942, -109.4938, -109.4936, -109.4934,
        -109.4933, -109.4932, -109.4931, -109.4931], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5735, -54.5737, -54.5738, -54.5739, -54.5740, -54.5740, -54.5740,
        -54.5741, -54.5741, -54.5741], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 13 	 1 	 N2 	 N2 	 8.450149734465351e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-94.0058, -93.5248, -93.3977, -93.3432, -93.3036, -93.2779, -93.2594,
        -93.2464, -93.2370, -93.2302, -93.2254, -93.2218, -93.2192, -93.2174,
        -93.2160, -93.2150, -93.2142, -93.2136, -93.2132, -93.2129, -93.2127,
        -93.2125, -93.2124, -93.2123, -93.2122], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.9976e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7376, -37.7775, -37.7942, -37.8039, -37.8104, -37.8150, -37.8184,
        -37.8207, -37.8224, -37.8236, -37.8245, -37.8251, -37.8255, -37.8258,
        -37.8260, -37.8261, -37.8262, -37.8263, -37.8263, -37.8264, -37.8264,
        -37.8264, -37.8264, -37.8264, -37.8264], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4308e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2618, -0.4427, -0.4666, -0.4780, -0.4849, -0.4894, -0.4925, -0.4947,
        -0.4962, -0.4972, -0.4979, -0.4984, -0.4988, -0.4990, -0.4992, -0.4993,
        -0.4994, -0.4995, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.7096e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4056, -54.4737, -54.5068, -54.5267, -54.5403, -54.5500, -54.5570,
        -54.5619, -54.5654, -54.5679, -54.5697, -54.5709, -54.5718, -54.5724,
        -54.5728, -54.5731, -54.5733, -54.5735, -54.5736, -54.5737, -54.5737,
        -54.5738, -54.5738, -54.5738, -54.5738], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7529e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2150, -93.2142, -93.2136, -93.2132, -93.2129, -93.2127, -93.2125,
        -93.2124, -93.2123, -93.2122], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8261, -37.8262, -37.8263, -37.8263, -37.8264, -37.8264, -37.8264,
        -37.8264, -37.8264, -37.8264], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4993, -0.4994, -0.4995, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5731, -54.5733, -54.5735, -54.5736, -54.5737, -54.5737, -54.5738,
        -54.5738, -54.5738, -54.5738], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 13 	 3 	 CHN 	 CNH 	 0.008155833031598298

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7332, -37.7707, -37.7891, -37.8000, -37.8075, -37.8129, -37.8167,
        -37.8195, -37.8215, -37.8229, -37.8239, -37.8245, -37.8250, -37.8254,
        -37.8256, -37.8258, -37.8259, -37.8260, -37.8261, -37.8261, -37.8261,
        -37.8262, -37.8262, -37.8262, -37.8262], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4890e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.4890e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8258, -37.8259, -37.8260, -37.8261, -37.8261, -37.8261, -37.8262,
        -37.8262, -37.8262, -37.8262], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 13 	 6 	 C 	 C 	 4.795506157310007e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3165, -0.4580, -0.4752, -0.4835, -0.4886, -0.4920, -0.4943, -0.4959,
        -0.4970, -0.4978, -0.4983, -0.4987, -0.4990, -0.4992, -0.4993, -0.4994,
        -0.4995, -0.4995, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.7791e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.7791e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 13 	 9 	 H 	 H 	 4.042879752000394e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9475, -74.9906, -75.0111, -75.0234, -75.0318, -75.0378, -75.0421,
        -75.0453, -75.0475, -75.0491, -75.0502, -75.0510, -75.0516, -75.0520,
        -75.0522, -75.0524, -75.0526, -75.0527, -75.0527, -75.0528, -75.0528,
        -75.0529, -75.0529, -75.0529, -75.0529], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.2724e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.2724e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0524, -75.0526, -75.0527, -75.0527, -75.0528, -75.0528, -75.0529,
        -75.0529, -75.0529, -75.0529], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 13 	 12 	 O 	 O 	 4.861533484698766e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2794, -107.2827, -107.2463, -107.2359, -107.2291, -107.2252,
        -107.2231, -107.2222, -107.2219, -107.2217, -107.2217, -107.2218,
        -107.2220, -107.2222, -107.2224, -107.2227, -107.2229, -107.2232,
        -107.2234, -107.2235, -107.2237, -107.2238, -107.2239, -107.2240,
        -107.2241], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.4003e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6658, -99.6857, -99.6971, -99.7041, -99.7091, -99.7127, -99.7153,
        -99.7172, -99.7186, -99.7196, -99.7203, -99.7208, -99.7211, -99.7214,
        -99.7215, -99.7217, -99.7217, -99.7218, -99.7219, -99.7219, -99.7219,
        -99.7219, -99.7219, -99.7219, -99.7219], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5532e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4599, -7.4672, -7.4698, -7.4711, -7.4720, -7.4730, -7.4737, -7.4739,
        -7.4736, -7.4734, -7.4733, -7.4733, -7.4733, -7.4734, -7.4734, -7.4734,
        -7.4735, -7.4735, -7.4735, -7.4735, -7.4735, -7.4735, -7.4735, -7.4735,
        -7.4735], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.2115e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2227, -107.2229, -107.2232, -107.2234, -107.2235, -107.2237,
        -107.2238, -107.2239, -107.2240, -107.2241], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7217, -99.7217, -99.7218, -99.7219, -99.7219, -99.7219, -99.7219,
        -99.7219, -99.7219, -99.7219], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4734, -7.4735, -7.4735, -7.4735, -7.4735, -7.4735, -7.4735, -7.4735,
        -7.4735, -7.4735], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 13 	 2 	 FLi 	 LiF 	 0.008787964989499134

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4596, -7.4670, -7.4696, -7.4710, -7.4719, -7.4729, -7.4737, -7.4739,
        -7.4736, -7.4734, -7.4733, -7.4733, -7.4733, -7.4734, -7.4734, -7.4734,
        -7.4734, -7.4735, -7.4735, -7.4735, -7.4735, -7.4735, -7.4735, -7.4735,
        -7.4735], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.2358e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.2358e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4734, -7.4734, -7.4735, -7.4735, -7.4735, -7.4735, -7.4735, -7.4735,
        -7.4735, -7.4735], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 13 	 10 	 Li 	 Li 	 4.870621296793928e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-0.9891, -1.0976, -1.1256, -1.1399, -1.1490, -1.1551, -1.1593, -1.1623,
        -1.1644, -1.1658, -1.1668, -1.1675, -1.1680, -1.1684, -1.1686, -1.1688,
        -1.1689, -1.1690, -1.1690, -1.1691, -1.1691, -1.1691, -1.1691, -1.1691,
        -1.1692], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6655e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3310e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2397, -0.4360, -0.4629, -0.4756, -0.4832, -0.4883, -0.4917, -0.4941,
        -0.4958, -0.4969, -0.4977, -0.4983, -0.4987, -0.4989, -0.4991, -0.4993,
        -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.4339e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3310e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1688, -1.1689, -1.1690, -1.1690, -1.1691, -1.1691, -1.1691, -1.1691,
        -1.1691, -1.1692], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4993, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 13 	 0 	 H2 	 H2 	 4.373995898491118e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e13)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e13/2022-10-25_04:04:39.930803_1.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e13/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 13 || ,[' rho : 3.046054', ' ae : 71.197846', ' E : 3.550526'] ,|| total loss 52.156127 || CHKPT: _1.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4460, -920.4132, -920.4054, -920.4012, -920.3985, -920.3966,
        -920.3953, -920.3944, -920.3937, -920.3933, -920.3929, -920.3927,
        -920.3925, -920.3924, -920.3923, -920.3923, -920.3922, -920.3922,
        -920.3922, -920.3922, -920.3922, -920.3922, -920.3922, -920.3922,
        -920.3922], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.5923e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.1847e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0862, -460.1163, -460.1266, -460.1324, -460.1363, -460.1390,
        -460.1410, -460.1425, -460.1435, -460.1442, -460.1447, -460.1451,
        -460.1454, -460.1455, -460.1457, -460.1458, -460.1458, -460.1459,
        -460.1459, -460.1459, -460.1459, -460.1459, -460.1459, -460.1460,
        -460.1460], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.9574e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.1851e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.3923, -920.3922, -920.3922, -920.3922, -920.3922, -920.3922,
        -920.3922, -920.3922, -920.3922, -920.3922], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1458, -460.1458, -460.1459, -460.1459, -460.1459, -460.1459,
        -460.1459, -460.1459, -460.1460, -460.1460], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 14 	 5 	 Cl2 	 Cl2 	 7.6220790422672205e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.7490, -109.8542, -109.7255, -109.6503, -109.6013, -109.5679,
        -109.5446, -109.5284, -109.5171, -109.5092, -109.5037, -109.4998,
        -109.4971, -109.4952, -109.4939, -109.4930, -109.4923, -109.4919,
        -109.4916, -109.4913, -109.4912, -109.4911, -109.4910, -109.4909,
        -109.4909], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.3075e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4036, -54.4706, -54.5042, -54.5245, -54.5384, -54.5483, -54.5554,
        -54.5605, -54.5641, -54.5667, -54.5685, -54.5698, -54.5707, -54.5713,
        -54.5717, -54.5720, -54.5723, -54.5724, -54.5725, -54.5726, -54.5726,
        -54.5727, -54.5727, -54.5727, -54.5727], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.0012e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4930, -109.4923, -109.4919, -109.4916, -109.4913, -109.4912,
        -109.4911, -109.4910, -109.4909, -109.4909], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5720, -54.5723, -54.5724, -54.5725, -54.5726, -54.5726, -54.5727,
        -54.5727, -54.5727, -54.5727], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 14 	 1 	 N2 	 N2 	 8.018265402601955e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4266, -54.4965, -54.5232, -54.5384, -54.5485, -54.5556, -54.5607,
        -54.5642, -54.5668, -54.5685, -54.5698, -54.5707, -54.5713, -54.5717,
        -54.5720, -54.5722, -54.5724, -54.5725, -54.5726, -54.5726, -54.5727,
        -54.5727, -54.5727, -54.5727, -54.5727], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.9803e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.9803e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5722, -54.5724, -54.5725, -54.5726, -54.5726, -54.5727, -54.5727,
        -54.5727, -54.5727, -54.5727], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 14 	 11 	 N 	 N 	 6.362664394318625e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4613, -7.4681, -7.4703, -7.4715, -7.4724, -7.4734, -7.4738, -7.4737,
        -7.4734, -7.4732, -7.4732, -7.4732, -7.4733, -7.4733, -7.4733, -7.4734,
        -7.4734, -7.4734, -7.4734, -7.4734, -7.4734, -7.4734, -7.4734, -7.4734,
        -7.4734], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.2911e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.2911e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4734, -7.4734, -7.4734, -7.4734, -7.4734, -7.4734, -7.4734, -7.4734,
        -7.4734, -7.4734], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 14 	 10 	 Li 	 Li 	 4.996756619140451e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3263, -0.4606, -0.4767, -0.4845, -0.4892, -0.4924, -0.4946, -0.4961,
        -0.4971, -0.4979, -0.4984, -0.4987, -0.4990, -0.4992, -0.4993, -0.4994,
        -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.7481e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.7481e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4996, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 14 	 9 	 H 	 H 	 4.371086912081996e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9447, -74.9834, -75.0054, -75.0191, -75.0285, -75.0354, -75.0404,
        -75.0440, -75.0465, -75.0484, -75.0497, -75.0506, -75.0513, -75.0517,
        -75.0521, -75.0523, -75.0525, -75.0526, -75.0527, -75.0527, -75.0527,
        -75.0528, -75.0528, -75.0528, -75.0528], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.3078e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.3078e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0523, -75.0525, -75.0526, -75.0527, -75.0527, -75.0527, -75.0528,
        -75.0528, -75.0528, -75.0528], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 14 	 12 	 O 	 O 	 4.9137833128086214e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.9313, -188.9074, -188.6883, -188.5598, -188.4801, -188.4259,
        -188.3881, -188.3615, -188.3427, -188.3294, -188.3200, -188.3134,
        -188.3087, -188.3053, -188.3029, -188.3012, -188.3000, -188.2991,
        -188.2985, -188.2981, -188.2978, -188.2975, -188.2974, -188.2973,
        -188.2972], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.8011e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7569, -37.7931, -37.8049, -37.8114, -37.8157, -37.8187, -37.8208,
        -37.8223, -37.8233, -37.8241, -37.8246, -37.8249, -37.8252, -37.8254,
        -37.8255, -37.8256, -37.8257, -37.8257, -37.8257, -37.8258, -37.8258,
        -37.8258, -37.8258, -37.8258, -37.8258], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5498e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9595, -75.0040, -75.0210, -75.0307, -75.0372, -75.0417, -75.0450,
        -75.0474, -75.0490, -75.0502, -75.0511, -75.0516, -75.0521, -75.0523,
        -75.0526, -75.0527, -75.0528, -75.0529, -75.0529, -75.0530, -75.0530,
        -75.0530, -75.0530, -75.0530, -75.0530], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.2127e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3012, -188.3000, -188.2991, -188.2985, -188.2981, -188.2978,
        -188.2975, -188.2974, -188.2973, -188.2972], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8256, -37.8257, -37.8257, -37.8257, -37.8258, -37.8258, -37.8258,
        -37.8258, -37.8258, -37.8258], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0527, -75.0528, -75.0529, -75.0529, -75.0530, -75.0530, -75.0530,
        -75.0530, -75.0530, -75.0530], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 14 	 4 	 CO2 	 CO2 	 0.015417327139816459

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6757, -99.6986, -99.7068, -99.7115, -99.7146, -99.7168, -99.7184,
        -99.7196, -99.7204, -99.7209, -99.7213, -99.7216, -99.7218, -99.7220,
        -99.7221, -99.7221, -99.7222, -99.7222, -99.7222, -99.7223, -99.7223,
        -99.7223, -99.7223, -99.7223, -99.7223], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4485e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.4485e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7221, -99.7222, -99.7222, -99.7222, -99.7223, -99.7223, -99.7223,
        -99.7223, -99.7223, -99.7223], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 14 	 8 	 F 	 F 	 3.148559901927625e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7462, -37.7856, -37.7998, -37.8077, -37.8130, -37.8167, -37.8194,
        -37.8212, -37.8226, -37.8235, -37.8242, -37.8247, -37.8250, -37.8252,
        -37.8254, -37.8255, -37.8256, -37.8256, -37.8257, -37.8257, -37.8257,
        -37.8257, -37.8257, -37.8257, -37.8257], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5669e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.5669e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8255, -37.8256, -37.8256, -37.8257, -37.8257, -37.8257, -37.8257,
        -37.8257, -37.8257, -37.8257], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 14 	 6 	 C 	 C 	 5.0911226654890536e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2311, -107.2674, -107.2323, -107.2271, -107.2230, -107.2209,
        -107.2203, -107.2203, -107.2206, -107.2211, -107.2216, -107.2220,
        -107.2224, -107.2228, -107.2232, -107.2236, -107.2239, -107.2242,
        -107.2244, -107.2246, -107.2248, -107.2250, -107.2251, -107.2252,
        -107.2253], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.4211e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6710, -99.6942, -99.7038, -99.7093, -99.7131, -99.7159, -99.7179,
        -99.7193, -99.7203, -99.7210, -99.7215, -99.7219, -99.7221, -99.7223,
        -99.7224, -99.7225, -99.7226, -99.7226, -99.7226, -99.7227, -99.7227,
        -99.7227, -99.7227, -99.7227, -99.7227], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3524e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4572, -7.4637, -7.4672, -7.4693, -7.4706, -7.4716, -7.4726, -7.4734,
        -7.4738, -7.4735, -7.4733, -7.4732, -7.4732, -7.4732, -7.4732, -7.4733,
        -7.4733, -7.4733, -7.4734, -7.4734, -7.4734, -7.4734, -7.4734, -7.4734,
        -7.4734], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.3394e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2236, -107.2239, -107.2242, -107.2244, -107.2246, -107.2248,
        -107.2250, -107.2251, -107.2252, -107.2253], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7225, -99.7226, -99.7226, -99.7226, -99.7227, -99.7227, -99.7227,
        -99.7227, -99.7227, -99.7227], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4733, -7.4733, -7.4733, -7.4734, -7.4734, -7.4734, -7.4734, -7.4734,
        -7.4734, -7.4734], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 14 	 2 	 FLi 	 LiF 	 0.008738717926408507

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-94.1307, -93.5751, -93.4235, -93.3628, -93.3166, -93.2873, -93.2661,
        -93.2511, -93.2404, -93.2327, -93.2272, -93.2232, -93.2203, -93.2181,
        -93.2166, -93.2155, -93.2146, -93.2140, -93.2135, -93.2132, -93.2130,
        -93.2128, -93.2126, -93.2125, -93.2125], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.9556e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7374, -37.7771, -37.7938, -37.8034, -37.8099, -37.8145, -37.8178,
        -37.8202, -37.8219, -37.8231, -37.8239, -37.8245, -37.8249, -37.8252,
        -37.8254, -37.8256, -37.8257, -37.8257, -37.8258, -37.8258, -37.8258,
        -37.8259, -37.8259, -37.8259, -37.8259], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5463e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2131, -0.4276, -0.4582, -0.4726, -0.4812, -0.4869, -0.4908, -0.4935,
        -0.4953, -0.4966, -0.4975, -0.4981, -0.4986, -0.4989, -0.4991, -0.4992,
        -0.4993, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.1315e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4164, -54.4872, -54.5167, -54.5338, -54.5454, -54.5535, -54.5593,
        -54.5634, -54.5664, -54.5684, -54.5699, -54.5709, -54.5716, -54.5721,
        -54.5725, -54.5727, -54.5729, -54.5730, -54.5731, -54.5732, -54.5732,
        -54.5732, -54.5733, -54.5733, -54.5733], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8593e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2155, -93.2146, -93.2140, -93.2135, -93.2132, -93.2130, -93.2128,
        -93.2126, -93.2125, -93.2125], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8256, -37.8257, -37.8257, -37.8258, -37.8258, -37.8258, -37.8259,
        -37.8259, -37.8259, -37.8259], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4992, -0.4993, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5727, -54.5729, -54.5730, -54.5731, -54.5732, -54.5732, -54.5732,
        -54.5733, -54.5733, -54.5733], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 14 	 3 	 CHN 	 CNH 	 0.008036495637792771

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0177, -1.1089, -1.1325, -1.1445, -1.1521, -1.1573, -1.1609, -1.1634,
        -1.1651, -1.1663, -1.1672, -1.1678, -1.1682, -1.1685, -1.1687, -1.1688,
        -1.1689, -1.1690, -1.1690, -1.1691, -1.1691, -1.1691, -1.1691, -1.1691,
        -1.1691], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6701e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3403e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2985, -0.4531, -0.4725, -0.4817, -0.4874, -0.4911, -0.4937, -0.4955,
        -0.4967, -0.4976, -0.4982, -0.4986, -0.4989, -0.4991, -0.4992, -0.4994,
        -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.1852e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3403e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1688, -1.1689, -1.1690, -1.1690, -1.1691, -1.1691, -1.1691, -1.1691,
        -1.1691, -1.1691], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4996, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 14 	 0 	 H2 	 H2 	 4.420302835007857e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0836, -460.1157, -460.1273, -460.1339, -460.1384, -460.1417,
        -460.1440, -460.1457, -460.1469, -460.1478, -460.1484, -460.1489,
        -460.1492, -460.1494, -460.1495, -460.1497, -460.1497, -460.1498,
        -460.1498, -460.1498, -460.1499, -460.1499, -460.1499, -460.1499,
        -460.1499], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.5887e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.5887e-09, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1497, -460.1497, -460.1498, -460.1498, -460.1498, -460.1499,
        -460.1499, -460.1499, -460.1499, -460.1499], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 14 	 7 	 Cl 	 Cl 	 8.335518278498786e-07

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e14)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e14/2022-10-25_04:04:39.930803_2.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e14/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 14 || ,[' rho : 3.039672', ' ae : 70.695230', ' E : 3.760592'] ,|| total loss 51.805804 || CHKPT: _2.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9544, -74.9990, -75.0176, -75.0284, -75.0356, -75.0408, -75.0445,
        -75.0471, -75.0490, -75.0504, -75.0513, -75.0520, -75.0525, -75.0528,
        -75.0530, -75.0532, -75.0533, -75.0534, -75.0534, -75.0535, -75.0535,
        -75.0535, -75.0535, -75.0536, -75.0536], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.0569e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.0569e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0532, -75.0533, -75.0534, -75.0534, -75.0535, -75.0535, -75.0535,
        -75.0535, -75.0536, -75.0536], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 15 	 12 	 O 	 O 	 4.415735822334196e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.6865, -188.8139, -188.6285, -188.5200, -188.4532, -188.4077,
        -188.3759, -188.3536, -188.3379, -188.3268, -188.3189, -188.3133,
        -188.3093, -188.3065, -188.3045, -188.3031, -188.3020, -188.3013,
        -188.3008, -188.3004, -188.3002, -188.3000, -188.2998, -188.2997,
        -188.2997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7935e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7364, -37.7757, -37.7928, -37.8027, -37.8094, -37.8142, -37.8176,
        -37.8200, -37.8218, -37.8230, -37.8239, -37.8245, -37.8249, -37.8252,
        -37.8254, -37.8256, -37.8257, -37.8258, -37.8258, -37.8258, -37.8259,
        -37.8259, -37.8259, -37.8259, -37.8259], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5405e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9512, -74.9953, -75.0149, -75.0264, -75.0342, -75.0398, -75.0438,
        -75.0467, -75.0487, -75.0502, -75.0512, -75.0520, -75.0525, -75.0528,
        -75.0531, -75.0533, -75.0534, -75.0535, -75.0535, -75.0536, -75.0536,
        -75.0536, -75.0537, -75.0537, -75.0537], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.0291e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3031, -188.3020, -188.3013, -188.3008, -188.3004, -188.3002,
        -188.3000, -188.2998, -188.2997, -188.2997], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8256, -37.8257, -37.8258, -37.8258, -37.8258, -37.8259, -37.8259,
        -37.8259, -37.8259, -37.8259], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0533, -75.0534, -75.0535, -75.0535, -75.0536, -75.0536, -75.0536,
        -75.0537, -75.0537, -75.0537], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 15 	 4 	 CO2 	 CO2 	 0.015291562861293045

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7387, -37.7786, -37.7948, -37.8041, -37.8104, -37.8149, -37.8181,
        -37.8203, -37.8219, -37.8231, -37.8239, -37.8245, -37.8249, -37.8251,
        -37.8253, -37.8255, -37.8256, -37.8256, -37.8257, -37.8257, -37.8258,
        -37.8258, -37.8258, -37.8258, -37.8258], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5629e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.5629e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8255, -37.8256, -37.8256, -37.8257, -37.8257, -37.8258, -37.8258,
        -37.8258, -37.8258, -37.8258], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 15 	 6 	 C 	 C 	 5.0601058472564876e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-94.1271, -93.5737, -93.4228, -93.3623, -93.3164, -93.2872, -93.2661,
        -93.2512, -93.2406, -93.2330, -93.2275, -93.2235, -93.2206, -93.2185,
        -93.2169, -93.2158, -93.2150, -93.2144, -93.2139, -93.2136, -93.2133,
        -93.2132, -93.2130, -93.2129, -93.2129], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.9351e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7527, -37.7903, -37.8030, -37.8100, -37.8147, -37.8179, -37.8202,
        -37.8218, -37.8230, -37.8238, -37.8244, -37.8248, -37.8251, -37.8253,
        -37.8254, -37.8255, -37.8256, -37.8256, -37.8257, -37.8257, -37.8257,
        -37.8257, -37.8257, -37.8257, -37.8257], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5656e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3070, -0.4555, -0.4738, -0.4826, -0.4879, -0.4915, -0.4940, -0.4957,
        -0.4968, -0.4977, -0.4982, -0.4986, -0.4989, -0.4991, -0.4993, -0.4994,
        -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.0960e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4294, -54.4988, -54.5250, -54.5398, -54.5496, -54.5566, -54.5615,
        -54.5650, -54.5674, -54.5691, -54.5704, -54.5712, -54.5718, -54.5722,
        -54.5725, -54.5728, -54.5729, -54.5730, -54.5731, -54.5731, -54.5732,
        -54.5732, -54.5732, -54.5732, -54.5732], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8617e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2158, -93.2150, -93.2144, -93.2139, -93.2136, -93.2133, -93.2132,
        -93.2130, -93.2129, -93.2129], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8255, -37.8256, -37.8256, -37.8257, -37.8257, -37.8257, -37.8257,
        -37.8257, -37.8257, -37.8257], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4996, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5728, -54.5729, -54.5730, -54.5731, -54.5731, -54.5732, -54.5732,
        -54.5732, -54.5732, -54.5732], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 15 	 3 	 CHN 	 CNH 	 0.007985363663687838

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0936, -460.1226, -460.1322, -460.1376, -460.1412, -460.1437,
        -460.1455, -460.1468, -460.1478, -460.1484, -460.1489, -460.1493,
        -460.1495, -460.1497, -460.1498, -460.1498, -460.1499, -460.1499,
        -460.1500, -460.1500, -460.1500, -460.1500, -460.1500, -460.1500,
        -460.1500], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.1579e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(4.1579e-09, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1498, -460.1499, -460.1499, -460.1500, -460.1500, -460.1500,
        -460.1500, -460.1500, -460.1500, -460.1500], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 15 	 7 	 Cl 	 Cl 	 9.601512144107307e-07

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.4531, -109.8707, -109.7270, -109.6512, -109.6026, -109.5693,
        -109.5462, -109.5300, -109.5186, -109.5107, -109.5051, -109.5012,
        -109.4985, -109.4966, -109.4952, -109.4943, -109.4936, -109.4932,
        -109.4928, -109.4926, -109.4925, -109.4924, -109.4923, -109.4922,
        -109.4922], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.2999e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4362, -54.5039, -54.5284, -54.5422, -54.5513, -54.5577, -54.5622,
        -54.5654, -54.5676, -54.5692, -54.5703, -54.5711, -54.5716, -54.5720,
        -54.5723, -54.5725, -54.5726, -54.5727, -54.5728, -54.5728, -54.5729,
        -54.5729, -54.5729, -54.5729, -54.5729], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.9258e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4943, -109.4936, -109.4932, -109.4928, -109.4926, -109.4925,
        -109.4924, -109.4923, -109.4922, -109.4922], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5725, -54.5726, -54.5727, -54.5728, -54.5728, -54.5729, -54.5729,
        -54.5729, -54.5729, -54.5729], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 15 	 1 	 N2 	 N2 	 7.254480744674043e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2896, -107.2867, -107.2501, -107.2390, -107.2319, -107.2279,
        -107.2255, -107.2244, -107.2239, -107.2236, -107.2235, -107.2235,
        -107.2237, -107.2239, -107.2241, -107.2244, -107.2246, -107.2248,
        -107.2250, -107.2252, -107.2253, -107.2254, -107.2255, -107.2256,
        -107.2257], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.4440e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6774, -99.7000, -99.7079, -99.7123, -99.7153, -99.7175, -99.7190,
        -99.7201, -99.7208, -99.7214, -99.7218, -99.7220, -99.7222, -99.7224,
        -99.7225, -99.7225, -99.7226, -99.7226, -99.7226, -99.7227, -99.7227,
        -99.7227, -99.7227, -99.7227, -99.7227], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3535e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4598, -7.4670, -7.4695, -7.4708, -7.4717, -7.4727, -7.4734, -7.4734,
        -7.4731, -7.4729, -7.4729, -7.4729, -7.4729, -7.4730, -7.4730, -7.4730,
        -7.4730, -7.4731, -7.4731, -7.4731, -7.4731, -7.4731, -7.4731, -7.4731,
        -7.4731], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.6433e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2244, -107.2246, -107.2248, -107.2250, -107.2252, -107.2253,
        -107.2254, -107.2255, -107.2256, -107.2257], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7225, -99.7226, -99.7226, -99.7226, -99.7227, -99.7227, -99.7227,
        -99.7227, -99.7227, -99.7227], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4730, -7.4730, -7.4731, -7.4731, -7.4731, -7.4731, -7.4731, -7.4731,
        -7.4731, -7.4731], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 15 	 2 	 FLi 	 LiF 	 0.008669297080170101

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4569, -7.4635, -7.4670, -7.4690, -7.4704, -7.4713, -7.4723, -7.4731,
        -7.4734, -7.4732, -7.4729, -7.4728, -7.4728, -7.4729, -7.4729, -7.4729,
        -7.4730, -7.4730, -7.4730, -7.4730, -7.4730, -7.4730, -7.4730, -7.4730,
        -7.4730], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.7041e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.7041e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4729, -7.4730, -7.4730, -7.4730, -7.4730, -7.4730, -7.4730, -7.4730,
        -7.4730, -7.4730], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 15 	 10 	 Li 	 Li 	 5.879860342289582e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4038, -54.4705, -54.5040, -54.5243, -54.5382, -54.5481, -54.5552,
        -54.5603, -54.5639, -54.5665, -54.5683, -54.5696, -54.5705, -54.5711,
        -54.5715, -54.5719, -54.5721, -54.5722, -54.5723, -54.5724, -54.5725,
        -54.5725, -54.5725, -54.5725, -54.5725], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.0479e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.0479e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5719, -54.5721, -54.5722, -54.5723, -54.5724, -54.5725, -54.5725,
        -54.5725, -54.5725, -54.5725], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 15 	 11 	 N 	 N 	 6.497092337557205e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2992, -0.4533, -0.4725, -0.4818, -0.4874, -0.4911, -0.4937, -0.4955,
        -0.4967, -0.4976, -0.4982, -0.4986, -0.4989, -0.4991, -0.4992, -0.4993,
        -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.4101e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.4101e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4993, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 15 	 9 	 H 	 H 	 4.9887992855801135e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4317, -920.4101, -920.4052, -920.4027, -920.4011, -920.4000,
        -920.3993, -920.3987, -920.3984, -920.3981, -920.3979, -920.3978,
        -920.3977, -920.3976, -920.3976, -920.3976, -920.3975, -920.3975,
        -920.3975, -920.3975, -920.3975, -920.3975, -920.3975, -920.3975,
        -920.3975], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.6375e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.2749e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0986, -460.1251, -460.1334, -460.1380, -460.1411, -460.1432,
        -460.1448, -460.1459, -460.1466, -460.1472, -460.1476, -460.1478,
        -460.1480, -460.1482, -460.1483, -460.1483, -460.1484, -460.1484,
        -460.1484, -460.1485, -460.1485, -460.1485, -460.1485, -460.1485,
        -460.1485], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.6747e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.2750e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.3976, -920.3975, -920.3975, -920.3975, -920.3975, -920.3975,
        -920.3975, -920.3975, -920.3975, -920.3975], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1483, -460.1484, -460.1484, -460.1484, -460.1485, -460.1485,
        -460.1485, -460.1485, -460.1485, -460.1485], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 15 	 5 	 Cl2 	 Cl2 	 8.371774346333351e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6690, -99.6915, -99.7017, -99.7077, -99.7119, -99.7150, -99.7172,
        -99.7187, -99.7199, -99.7207, -99.7213, -99.7217, -99.7219, -99.7221,
        -99.7223, -99.7224, -99.7225, -99.7225, -99.7225, -99.7226, -99.7226,
        -99.7226, -99.7226, -99.7226, -99.7226], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3785e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.3785e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7224, -99.7225, -99.7225, -99.7225, -99.7226, -99.7226, -99.7226,
        -99.7226, -99.7226, -99.7226], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 15 	 8 	 F 	 F 	 2.9796625507021597e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0134, -1.1071, -1.1313, -1.1437, -1.1515, -1.1569, -1.1605, -1.1631,
        -1.1649, -1.1661, -1.1670, -1.1676, -1.1681, -1.1684, -1.1686, -1.1687,
        -1.1688, -1.1689, -1.1689, -1.1690, -1.1690, -1.1690, -1.1690, -1.1690,
        -1.1690], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6676e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3353e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2854, -0.4495, -0.4704, -0.4804, -0.4865, -0.4905, -0.4933, -0.4952,
        -0.4965, -0.4974, -0.4981, -0.4985, -0.4988, -0.4990, -0.4992, -0.4993,
        -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.6743e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3353e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1687, -1.1688, -1.1689, -1.1689, -1.1690, -1.1690, -1.1690, -1.1690,
        -1.1690, -1.1690], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4993, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 15 	 0 	 H2 	 H2 	 4.492289903409237e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e15)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e15/2022-10-25_04:04:39.930803_0.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e15/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 15 || ,[' rho : 3.038592', ' ae : 70.414212', ' E : 3.711891'] ,|| total loss 51.612782 || CHKPT: _0.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6674, -99.6875, -99.6987, -99.7056, -99.7104, -99.7140, -99.7165,
        -99.7184, -99.7197, -99.7207, -99.7214, -99.7219, -99.7222, -99.7225,
        -99.7226, -99.7228, -99.7228, -99.7229, -99.7229, -99.7230, -99.7230,
        -99.7230, -99.7230, -99.7230, -99.7230], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2872e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.2872e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7228, -99.7228, -99.7229, -99.7229, -99.7230, -99.7230, -99.7230,
        -99.7230, -99.7230, -99.7230], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 16 	 8 	 F 	 F 	 2.76990394449316e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4130, -54.4834, -54.5138, -54.5316, -54.5437, -54.5522, -54.5583,
        -54.5626, -54.5657, -54.5679, -54.5694, -54.5705, -54.5712, -54.5718,
        -54.5721, -54.5724, -54.5726, -54.5727, -54.5728, -54.5729, -54.5729,
        -54.5729, -54.5730, -54.5730, -54.5730], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.9321e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.9321e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5724, -54.5726, -54.5727, -54.5728, -54.5729, -54.5729, -54.5729,
        -54.5730, -54.5730, -54.5730], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 16 	 11 	 N 	 N 	 6.164409489729893e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-94.0759, -93.5535, -93.4126, -93.3548, -93.3116, -93.2840, -93.2641,
        -93.2501, -93.2400, -93.2328, -93.2277, -93.2239, -93.2212, -93.2192,
        -93.2178, -93.2167, -93.2159, -93.2154, -93.2149, -93.2146, -93.2144,
        -93.2142, -93.2141, -93.2140, -93.2139], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.8963e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7464, -37.7856, -37.7997, -37.8077, -37.8129, -37.8166, -37.8193,
        -37.8211, -37.8225, -37.8234, -37.8241, -37.8245, -37.8249, -37.8251,
        -37.8253, -37.8254, -37.8255, -37.8255, -37.8255, -37.8256, -37.8256,
        -37.8256, -37.8256, -37.8256, -37.8256], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5919e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3199, -0.4589, -0.4757, -0.4838, -0.4888, -0.4921, -0.4944, -0.4959,
        -0.4970, -0.4978, -0.4983, -0.4987, -0.4990, -0.4991, -0.4993, -0.4994,
        -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.9853e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4083, -54.4773, -54.5094, -54.5284, -54.5414, -54.5506, -54.5573,
        -54.5620, -54.5653, -54.5677, -54.5693, -54.5705, -54.5713, -54.5719,
        -54.5723, -54.5726, -54.5728, -54.5729, -54.5730, -54.5731, -54.5731,
        -54.5732, -54.5732, -54.5732, -54.5732], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8790e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2167, -93.2159, -93.2154, -93.2149, -93.2146, -93.2144, -93.2142,
        -93.2141, -93.2140, -93.2139], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8254, -37.8255, -37.8255, -37.8255, -37.8256, -37.8256, -37.8256,
        -37.8256, -37.8256, -37.8256], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5726, -54.5728, -54.5729, -54.5730, -54.5731, -54.5731, -54.5732,
        -54.5732, -54.5732, -54.5732], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 16 	 3 	 CHN 	 CNH 	 0.007883244116894134

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7347, -37.7731, -37.7908, -37.8012, -37.8082, -37.8133, -37.8169,
        -37.8195, -37.8213, -37.8226, -37.8236, -37.8242, -37.8247, -37.8250,
        -37.8252, -37.8254, -37.8255, -37.8256, -37.8256, -37.8257, -37.8257,
        -37.8257, -37.8257, -37.8257, -37.8257], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5800e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.5800e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8254, -37.8255, -37.8256, -37.8256, -37.8257, -37.8257, -37.8257,
        -37.8257, -37.8257, -37.8257], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 16 	 6 	 C 	 C 	 5.1008439484416555e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2910, -107.2891, -107.2524, -107.2413, -107.2343, -107.2302,
        -107.2279, -107.2267, -107.2262, -107.2260, -107.2259, -107.2259,
        -107.2261, -107.2263, -107.2266, -107.2268, -107.2271, -107.2273,
        -107.2275, -107.2277, -107.2278, -107.2279, -107.2280, -107.2281,
        -107.2282], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.4756e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6726, -99.6955, -99.7051, -99.7108, -99.7147, -99.7174, -99.7194,
        -99.7209, -99.7219, -99.7226, -99.7232, -99.7235, -99.7238, -99.7240,
        -99.7241, -99.7242, -99.7243, -99.7243, -99.7243, -99.7244, -99.7244,
        -99.7244, -99.7244, -99.7244, -99.7244], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.7979e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4571, -7.4636, -7.4671, -7.4692, -7.4705, -7.4715, -7.4724, -7.4733,
        -7.4736, -7.4733, -7.4731, -7.4730, -7.4730, -7.4730, -7.4730, -7.4731,
        -7.4731, -7.4731, -7.4732, -7.4732, -7.4732, -7.4732, -7.4732, -7.4732,
        -7.4732], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.5434e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2268, -107.2271, -107.2273, -107.2275, -107.2277, -107.2278,
        -107.2279, -107.2280, -107.2281, -107.2282], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7242, -99.7243, -99.7243, -99.7243, -99.7244, -99.7244, -99.7244,
        -99.7244, -99.7244, -99.7244], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4731, -7.4731, -7.4731, -7.4732, -7.4732, -7.4732, -7.4732, -7.4732,
        -7.4732, -7.4732], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 16 	 2 	 FLi 	 LiF 	 0.008606826652169542

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1051, -460.1312, -460.1393, -460.1438, -460.1468, -460.1489,
        -460.1503, -460.1514, -460.1522, -460.1527, -460.1531, -460.1533,
        -460.1535, -460.1537, -460.1538, -460.1538, -460.1539, -460.1539,
        -460.1539, -460.1539, -460.1540, -460.1540, -460.1540, -460.1540,
        -460.1540], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.7162e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.7162e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1538, -460.1539, -460.1539, -460.1539, -460.1539, -460.1540,
        -460.1540, -460.1540, -460.1540, -460.1540], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 16 	 7 	 Cl 	 Cl 	 8.322654554627355e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2124, -0.4273, -0.4581, -0.4725, -0.4812, -0.4869, -0.4908, -0.4934,
        -0.4953, -0.4966, -0.4975, -0.4981, -0.4985, -0.4989, -0.4991, -0.4992,
        -0.4993, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.2884e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.2884e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4992, -0.4993, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 16 	 9 	 H 	 H 	 4.829750005989064e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9687, -75.0114, -75.0267, -75.0352, -75.0409, -75.0449, -75.0478,
        -75.0498, -75.0512, -75.0522, -75.0530, -75.0535, -75.0538, -75.0541,
        -75.0543, -75.0544, -75.0545, -75.0545, -75.0546, -75.0546, -75.0546,
        -75.0546, -75.0546, -75.0547, -75.0547], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7329e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.7329e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0544, -75.0545, -75.0545, -75.0546, -75.0546, -75.0546, -75.0546,
        -75.0546, -75.0547, -75.0547], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 16 	 12 	 O 	 O 	 3.737527100743509e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-0.9970, -1.1007, -1.1275, -1.1413, -1.1499, -1.1558, -1.1599, -1.1627,
        -1.1647, -1.1661, -1.1671, -1.1677, -1.1682, -1.1685, -1.1688, -1.1689,
        -1.1691, -1.1691, -1.1692, -1.1692, -1.1693, -1.1693, -1.1693, -1.1693,
        -1.1693], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6991e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3981e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3043, -0.4547, -0.4733, -0.4823, -0.4878, -0.4914, -0.4939, -0.4956,
        -0.4968, -0.4976, -0.4982, -0.4986, -0.4989, -0.4991, -0.4992, -0.4993,
        -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.1913e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3981e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1689, -1.1691, -1.1691, -1.1692, -1.1692, -1.1693, -1.1693, -1.1693,
        -1.1693, -1.1693], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4993, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 16 	 0 	 H2 	 H2 	 4.040698077749359e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4421, -920.4215, -920.4169, -920.4145, -920.4130, -920.4120,
        -920.4113, -920.4108, -920.4105, -920.4102, -920.4100, -920.4099,
        -920.4098, -920.4098, -920.4097, -920.4097, -920.4097, -920.4097,
        -920.4097, -920.4097, -920.4097, -920.4097, -920.4097, -920.4097,
        -920.4096], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.6099e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.2197e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0879, -460.1201, -460.1318, -460.1384, -460.1430, -460.1463,
        -460.1487, -460.1504, -460.1516, -460.1525, -460.1531, -460.1536,
        -460.1539, -460.1541, -460.1542, -460.1543, -460.1544, -460.1545,
        -460.1545, -460.1545, -460.1546, -460.1546, -460.1546, -460.1546,
        -460.1546], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.4897e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.2242e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4097, -920.4097, -920.4097, -920.4097, -920.4097, -920.4097,
        -920.4097, -920.4097, -920.4097, -920.4096], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1543, -460.1544, -460.1545, -460.1545, -460.1545, -460.1546,
        -460.1546, -460.1546, -460.1546, -460.1546], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 16 	 5 	 Cl2 	 Cl2 	 8.239451890270809e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4613, -7.4681, -7.4703, -7.4715, -7.4724, -7.4733, -7.4738, -7.4736,
        -7.4733, -7.4732, -7.4732, -7.4732, -7.4732, -7.4733, -7.4733, -7.4733,
        -7.4733, -7.4734, -7.4734, -7.4734, -7.4734, -7.4734, -7.4734, -7.4734,
        -7.4734], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.3389e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.3389e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4733, -7.4733, -7.4734, -7.4734, -7.4734, -7.4734, -7.4734, -7.4734,
        -7.4734, -7.4734], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 16 	 10 	 Li 	 Li 	 5.099832524443417e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.3723, -188.6973, -188.5555, -188.4728, -188.4220, -188.3875,
        -188.3634, -188.3465, -188.3346, -188.3261, -188.3201, -188.3159,
        -188.3129, -188.3107, -188.3092, -188.3081, -188.3073, -188.3068,
        -188.3064, -188.3061, -188.3059, -188.3057, -188.3056, -188.3056,
        -188.3055], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7768e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7339, -37.7708, -37.7892, -37.8002, -37.8077, -37.8131, -37.8169,
        -37.8197, -37.8217, -37.8231, -37.8241, -37.8248, -37.8253, -37.8256,
        -37.8259, -37.8260, -37.8262, -37.8262, -37.8263, -37.8263, -37.8264,
        -37.8264, -37.8264, -37.8264, -37.8264], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4407e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9646, -75.0084, -75.0248, -75.0340, -75.0401, -75.0445, -75.0476,
        -75.0498, -75.0514, -75.0525, -75.0533, -75.0539, -75.0543, -75.0546,
        -75.0548, -75.0549, -75.0550, -75.0551, -75.0551, -75.0551, -75.0552,
        -75.0552, -75.0552, -75.0552, -75.0552], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5912e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3081, -188.3073, -188.3068, -188.3064, -188.3061, -188.3059,
        -188.3057, -188.3056, -188.3056, -188.3055], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8260, -37.8262, -37.8262, -37.8263, -37.8263, -37.8264, -37.8264,
        -37.8264, -37.8264, -37.8264], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0549, -75.0550, -75.0551, -75.0551, -75.0551, -75.0552, -75.0552,
        -75.0552, -75.0552, -75.0552], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 16 	 4 	 CO2 	 CO2 	 0.015025436789948516

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.8731, -109.6273, -109.6126, -109.5771, -109.5516, -109.5340,
        -109.5219, -109.5137, -109.5080, -109.5041, -109.5014, -109.4996,
        -109.4983, -109.4974, -109.4968, -109.4964, -109.4961, -109.4959,
        -109.4958, -109.4957, -109.4956, -109.4955, -109.4955, -109.4955,
        -109.4955], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.2963e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4188, -54.4893, -54.5185, -54.5353, -54.5467, -54.5547, -54.5604,
        -54.5645, -54.5674, -54.5694, -54.5708, -54.5718, -54.5725, -54.5730,
        -54.5734, -54.5736, -54.5738, -54.5739, -54.5740, -54.5740, -54.5741,
        -54.5741, -54.5741, -54.5741, -54.5742], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6624e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4964, -109.4961, -109.4959, -109.4958, -109.4957, -109.4956,
        -109.4955, -109.4955, -109.4955, -109.4955], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5736, -54.5738, -54.5739, -54.5740, -54.5740, -54.5741, -54.5741,
        -54.5741, -54.5741, -54.5742], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 16 	 1 	 N2 	 N2 	 6.625951787628383e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e16)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e16/2022-10-25_04:04:39.930803_1.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e16/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 16 || ,[' rho : 3.035163', ' ae : 69.928804', ' E : 3.615940'] ,|| total loss 51.277615 || CHKPT: _1.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2906, -0.4509, -0.4712, -0.4809, -0.4868, -0.4908, -0.4934, -0.4953,
        -0.4966, -0.4975, -0.4981, -0.4985, -0.4989, -0.4991, -0.4992, -0.4993,
        -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.4625e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.4625e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4993, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 17 	 9 	 H 	 H 	 4.712733727625044e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4616, -7.4682, -7.4703, -7.4715, -7.4724, -7.4733, -7.4736, -7.4734,
        -7.4732, -7.4730, -7.4730, -7.4731, -7.4731, -7.4731, -7.4732, -7.4732,
        -7.4732, -7.4732, -7.4732, -7.4732, -7.4732, -7.4733, -7.4733, -7.4733,
        -7.4733], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.4691e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.4691e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4732, -7.4732, -7.4732, -7.4732, -7.4732, -7.4732, -7.4733, -7.4733,
        -7.4733, -7.4733], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 17 	 10 	 Li 	 Li 	 5.385943610905307e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4234, -54.4936, -54.5215, -54.5374, -54.5481, -54.5557, -54.5610,
        -54.5648, -54.5675, -54.5694, -54.5708, -54.5717, -54.5724, -54.5728,
        -54.5731, -54.5734, -54.5735, -54.5736, -54.5737, -54.5738, -54.5738,
        -54.5738, -54.5739, -54.5739, -54.5739], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7168e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.7168e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5734, -54.5735, -54.5736, -54.5737, -54.5738, -54.5738, -54.5738,
        -54.5739, -54.5739, -54.5739], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 17 	 11 	 N 	 N 	 5.492503933914282e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-94.1486, -93.5836, -93.4287, -93.3676, -93.3207, -93.2912, -93.2697,
        -93.2547, -93.2439, -93.2362, -93.2307, -93.2267, -93.2238, -93.2217,
        -93.2201, -93.2190, -93.2182, -93.2176, -93.2172, -93.2168, -93.2166,
        -93.2164, -93.2163, -93.2162, -93.2161], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.8679e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7370, -37.7762, -37.7931, -37.8029, -37.8096, -37.8144, -37.8178,
        -37.8202, -37.8219, -37.8232, -37.8240, -37.8246, -37.8251, -37.8254,
        -37.8256, -37.8257, -37.8258, -37.8259, -37.8260, -37.8260, -37.8260,
        -37.8260, -37.8261, -37.8261, -37.8261], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5085e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2903, -0.4508, -0.4712, -0.4809, -0.4868, -0.4907, -0.4934, -0.4953,
        -0.4966, -0.4975, -0.4981, -0.4985, -0.4988, -0.4991, -0.4992, -0.4993,
        -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.5117e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4093, -54.4781, -54.5101, -54.5291, -54.5421, -54.5514, -54.5579,
        -54.5626, -54.5660, -54.5683, -54.5700, -54.5712, -54.5720, -54.5726,
        -54.5730, -54.5733, -54.5735, -54.5736, -54.5737, -54.5738, -54.5738,
        -54.5738, -54.5739, -54.5739, -54.5739], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7294e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2190, -93.2182, -93.2176, -93.2172, -93.2168, -93.2166, -93.2164,
        -93.2163, -93.2162, -93.2161], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8257, -37.8258, -37.8259, -37.8260, -37.8260, -37.8260, -37.8260,
        -37.8261, -37.8261, -37.8261], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4993, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5733, -54.5735, -54.5736, -54.5737, -54.5738, -54.5738, -54.5738,
        -54.5739, -54.5739, -54.5739], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 17 	 3 	 CHN 	 CNH 	 0.007790307923339767

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.9057, -188.9013, -188.6874, -188.5618, -188.4839, -188.4309,
        -188.3940, -188.3680, -188.3496, -188.3367, -188.3275, -188.3210,
        -188.3163, -188.3131, -188.3107, -188.3091, -188.3079, -188.3070,
        -188.3064, -188.3060, -188.3057, -188.3055, -188.3053, -188.3052,
        -188.3051], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7712e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7442, -37.7838, -37.7986, -37.8069, -37.8125, -37.8164, -37.8192,
        -37.8212, -37.8226, -37.8236, -37.8244, -37.8248, -37.8252, -37.8254,
        -37.8256, -37.8257, -37.8258, -37.8259, -37.8259, -37.8260, -37.8260,
        -37.8260, -37.8260, -37.8260, -37.8260], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5136e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9616, -75.0057, -75.0228, -75.0324, -75.0389, -75.0435, -75.0468,
        -75.0491, -75.0508, -75.0520, -75.0528, -75.0534, -75.0538, -75.0541,
        -75.0543, -75.0545, -75.0546, -75.0546, -75.0547, -75.0547, -75.0547,
        -75.0548, -75.0548, -75.0548, -75.0548], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7038e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3091, -188.3079, -188.3070, -188.3064, -188.3060, -188.3057,
        -188.3055, -188.3053, -188.3052, -188.3051], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8257, -37.8258, -37.8259, -37.8259, -37.8260, -37.8260, -37.8260,
        -37.8260, -37.8260, -37.8260], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0545, -75.0546, -75.0546, -75.0547, -75.0547, -75.0547, -75.0548,
        -75.0548, -75.0548, -75.0548], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 17 	 4 	 CO2 	 CO2 	 0.014916752176548753

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9576, -75.0020, -75.0200, -75.0303, -75.0373, -75.0422, -75.0458,
        -75.0483, -75.0502, -75.0514, -75.0524, -75.0530, -75.0535, -75.0538,
        -75.0540, -75.0542, -75.0543, -75.0543, -75.0544, -75.0544, -75.0545,
        -75.0545, -75.0545, -75.0545, -75.0545], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7856e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.7856e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0542, -75.0543, -75.0543, -75.0544, -75.0544, -75.0545, -75.0545,
        -75.0545, -75.0545, -75.0545], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 17 	 12 	 O 	 O 	 3.830780420264634e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2473, -107.2751, -107.2392, -107.2329, -107.2283, -107.2259,
        -107.2250, -107.2246, -107.2247, -107.2250, -107.2254, -107.2258,
        -107.2261, -107.2265, -107.2269, -107.2273, -107.2276, -107.2279,
        -107.2282, -107.2284, -107.2286, -107.2287, -107.2289, -107.2290,
        -107.2290], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.4977e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6731, -99.6960, -99.7055, -99.7112, -99.7150, -99.7178, -99.7198,
        -99.7212, -99.7222, -99.7229, -99.7235, -99.7238, -99.7241, -99.7243,
        -99.7244, -99.7245, -99.7245, -99.7246, -99.7246, -99.7246, -99.7246,
        -99.7247, -99.7247, -99.7247, -99.7247], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.2286e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4596, -7.4668, -7.4694, -7.4707, -7.4716, -7.4726, -7.4733, -7.4733,
        -7.4730, -7.4728, -7.4728, -7.4728, -7.4728, -7.4729, -7.4729, -7.4729,
        -7.4730, -7.4730, -7.4730, -7.4730, -7.4730, -7.4730, -7.4730, -7.4730,
        -7.4730], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.7306e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2273, -107.2276, -107.2279, -107.2282, -107.2284, -107.2286,
        -107.2287, -107.2289, -107.2290, -107.2290], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7245, -99.7245, -99.7246, -99.7246, -99.7246, -99.7246, -99.7247,
        -99.7247, -99.7247, -99.7247], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4729, -7.4730, -7.4730, -7.4730, -7.4730, -7.4730, -7.4730, -7.4730,
        -7.4730, -7.4730], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 17 	 2 	 FLi 	 LiF 	 0.008542006081201592

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6699, -99.6909, -99.7017, -99.7082, -99.7128, -99.7161, -99.7186,
        -99.7203, -99.7216, -99.7225, -99.7231, -99.7235, -99.7239, -99.7241,
        -99.7242, -99.7244, -99.7244, -99.7245, -99.7245, -99.7246, -99.7246,
        -99.7246, -99.7246, -99.7246, -99.7246], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.4119e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.4119e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7244, -99.7244, -99.7245, -99.7245, -99.7246, -99.7246, -99.7246,
        -99.7246, -99.7246, -99.7246], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 17 	 8 	 F 	 F 	 2.0211129165580887e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.7464, -109.8618, -109.7311, -109.6551, -109.6058, -109.5721,
        -109.5486, -109.5323, -109.5209, -109.5129, -109.5073, -109.5034,
        -109.5007, -109.4988, -109.4975, -109.4965, -109.4959, -109.4954,
        -109.4951, -109.4949, -109.4947, -109.4946, -109.4945, -109.4945,
        -109.4945], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.2905e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4023, -54.4634, -54.4987, -54.5205, -54.5356, -54.5464, -54.5543,
        -54.5599, -54.5638, -54.5667, -54.5686, -54.5701, -54.5710, -54.5717,
        -54.5722, -54.5726, -54.5728, -54.5730, -54.5731, -54.5732, -54.5732,
        -54.5733, -54.5733, -54.5733, -54.5733], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8728e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4965, -109.4959, -109.4954, -109.4951, -109.4949, -109.4947,
        -109.4946, -109.4945, -109.4945, -109.4945], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5726, -54.5728, -54.5730, -54.5731, -54.5732, -54.5732, -54.5733,
        -54.5733, -54.5733, -54.5733], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 17 	 1 	 N2 	 N2 	 6.101876729388059e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4477, -920.4236, -920.4180, -920.4151, -920.4132, -920.4119,
        -920.4110, -920.4104, -920.4100, -920.4096, -920.4094, -920.4093,
        -920.4092, -920.4091, -920.4090, -920.4090, -920.4090, -920.4090,
        -920.4089, -920.4089, -920.4089, -920.4089, -920.4089, -920.4089,
        -920.4089], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.6580e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.3160e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0961, -460.1257, -460.1356, -460.1411, -460.1449, -460.1475,
        -460.1494, -460.1508, -460.1518, -460.1525, -460.1529, -460.1533,
        -460.1535, -460.1537, -460.1538, -460.1539, -460.1540, -460.1540,
        -460.1540, -460.1541, -460.1541, -460.1541, -460.1541, -460.1541,
        -460.1541], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.8671e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.3198e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4090, -920.4090, -920.4090, -920.4089, -920.4089, -920.4089,
        -920.4089, -920.4089, -920.4089, -920.4089], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1539, -460.1540, -460.1540, -460.1540, -460.1541, -460.1541,
        -460.1541, -460.1541, -460.1541, -460.1541], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 17 	 5 	 Cl2 	 Cl2 	 8.923862241800056e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7550, -37.7916, -37.8038, -37.8105, -37.8149, -37.8180, -37.8202,
        -37.8218, -37.8229, -37.8237, -37.8242, -37.8246, -37.8249, -37.8251,
        -37.8252, -37.8253, -37.8253, -37.8254, -37.8254, -37.8254, -37.8255,
        -37.8255, -37.8255, -37.8255, -37.8255], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6161e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.6161e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8253, -37.8253, -37.8254, -37.8254, -37.8254, -37.8255, -37.8255,
        -37.8255, -37.8255, -37.8255], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 17 	 6 	 C 	 C 	 5.2668988082498814e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0279, -1.1128, -1.1349, -1.1461, -1.1532, -1.1581, -1.1614, -1.1637,
        -1.1653, -1.1665, -1.1673, -1.1678, -1.1682, -1.1685, -1.1687, -1.1688,
        -1.1689, -1.1690, -1.1690, -1.1691, -1.1691, -1.1691, -1.1691, -1.1691,
        -1.1691], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6932e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3865e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3333, -0.4624, -0.4777, -0.4851, -0.4897, -0.4927, -0.4948, -0.4962,
        -0.4972, -0.4979, -0.4984, -0.4987, -0.4990, -0.4992, -0.4993, -0.4994,
        -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.9334e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3865e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1688, -1.1689, -1.1690, -1.1690, -1.1691, -1.1691, -1.1691, -1.1691,
        -1.1691, -1.1691], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 17 	 0 	 H2 	 H2 	 4.287864169102647e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0936, -460.1244, -460.1350, -460.1410, -460.1451, -460.1480,
        -460.1501, -460.1516, -460.1527, -460.1535, -460.1540, -460.1544,
        -460.1547, -460.1548, -460.1550, -460.1551, -460.1551, -460.1552,
        -460.1552, -460.1552, -460.1553, -460.1553, -460.1553, -460.1553,
        -460.1553], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.5122e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.5122e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1551, -460.1551, -460.1552, -460.1552, -460.1552, -460.1553,
        -460.1553, -460.1553, -460.1553, -460.1553], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 17 	 7 	 Cl 	 Cl 	 1.2382590571687793e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e17)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e17/2022-10-25_04:04:39.930803_2.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e17/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 17 || ,[' rho : 3.033455', ' ae : 69.622306', ' E : 3.592571'] ,|| total loss 51.066611 || CHKPT: _2.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.3287, -188.6803, -188.5446, -188.4653, -188.4168, -188.3837,
        -188.3607, -188.3445, -188.3331, -188.3250, -188.3193, -188.3152,
        -188.3123, -188.3103, -188.3088, -188.3077, -188.3070, -188.3065,
        -188.3061, -188.3058, -188.3056, -188.3055, -188.3054, -188.3053,
        -188.3053], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7610e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7389, -37.7785, -37.7946, -37.8039, -37.8101, -37.8146, -37.8177,
        -37.8200, -37.8216, -37.8227, -37.8235, -37.8241, -37.8245, -37.8248,
        -37.8250, -37.8251, -37.8252, -37.8253, -37.8253, -37.8254, -37.8254,
        -37.8254, -37.8254, -37.8254, -37.8254], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6392e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9500, -74.9925, -75.0128, -75.0250, -75.0334, -75.0393, -75.0437,
        -75.0468, -75.0490, -75.0506, -75.0517, -75.0525, -75.0531, -75.0535,
        -75.0538, -75.0540, -75.0541, -75.0542, -75.0543, -75.0543, -75.0544,
        -75.0544, -75.0544, -75.0544, -75.0544], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8241e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3077, -188.3070, -188.3065, -188.3061, -188.3058, -188.3056,
        -188.3055, -188.3054, -188.3053, -188.3053], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8251, -37.8252, -37.8253, -37.8253, -37.8254, -37.8254, -37.8254,
        -37.8254, -37.8254, -37.8254], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0540, -75.0541, -75.0542, -75.0543, -75.0543, -75.0544, -75.0544,
        -75.0544, -75.0544, -75.0544], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 18 	 4 	 CO2 	 CO2 	 0.014749530058806554

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3342, -0.4626, -0.4778, -0.4852, -0.4897, -0.4927, -0.4948, -0.4962,
        -0.4972, -0.4979, -0.4984, -0.4987, -0.4990, -0.4991, -0.4993, -0.4993,
        -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.0063e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.0063e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4993, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 18 	 9 	 H 	 H 	 5.430710424217061e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4577, -7.4651, -7.4680, -7.4696, -7.4707, -7.4716, -7.4725, -7.4729,
        -7.4727, -7.4725, -7.4723, -7.4723, -7.4724, -7.4724, -7.4724, -7.4725,
        -7.4725, -7.4725, -7.4725, -7.4725, -7.4726, -7.4726, -7.4726, -7.4726,
        -7.4726], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.2358e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.2358e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4725, -7.4725, -7.4725, -7.4725, -7.4725, -7.4726, -7.4726, -7.4726,
        -7.4726, -7.4726], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 18 	 10 	 Li 	 Li 	 7.052032074027407e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7533, -37.7902, -37.8026, -37.8094, -37.8140, -37.8171, -37.8194,
        -37.8210, -37.8221, -37.8229, -37.8234, -37.8238, -37.8241, -37.8243,
        -37.8244, -37.8245, -37.8246, -37.8246, -37.8247, -37.8247, -37.8247,
        -37.8247, -37.8247, -37.8247, -37.8247], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7833e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.7833e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8245, -37.8246, -37.8246, -37.8247, -37.8247, -37.8247, -37.8247,
        -37.8247, -37.8247, -37.8247], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 18 	 6 	 C 	 C 	 5.813713166324012e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4477, -920.4211, -920.4147, -920.4114, -920.4093, -920.4078,
        -920.4068, -920.4060, -920.4055, -920.4052, -920.4049, -920.4047,
        -920.4046, -920.4045, -920.4045, -920.4044, -920.4044, -920.4044,
        -920.4044, -920.4043, -920.4043, -920.4043, -920.4043, -920.4043,
        -920.4043], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.6888e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.3776e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1010, -460.1278, -460.1363, -460.1410, -460.1441, -460.1463,
        -460.1479, -460.1490, -460.1498, -460.1504, -460.1508, -460.1510,
        -460.1512, -460.1514, -460.1515, -460.1515, -460.1516, -460.1516,
        -460.1517, -460.1517, -460.1517, -460.1517, -460.1517, -460.1517,
        -460.1517], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4113e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.3791e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4044, -920.4044, -920.4044, -920.4044, -920.4043, -920.4043,
        -920.4043, -920.4043, -920.4043, -920.4043], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1515, -460.1516, -460.1516, -460.1517, -460.1517, -460.1517,
        -460.1517, -460.1517, -460.1517, -460.1517], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 18 	 5 	 Cl2 	 Cl2 	 9.542212249862786e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-0.9916, -1.0983, -1.1258, -1.1400, -1.1489, -1.1550, -1.1592, -1.1621,
        -1.1641, -1.1655, -1.1665, -1.1672, -1.1677, -1.1681, -1.1683, -1.1685,
        -1.1686, -1.1687, -1.1687, -1.1688, -1.1688, -1.1688, -1.1688, -1.1688,
        -1.1689], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6715e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3431e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3381, -0.4636, -0.4784, -0.4855, -0.4899, -0.4929, -0.4949, -0.4963,
        -0.4973, -0.4979, -0.4984, -0.4987, -0.4990, -0.4991, -0.4992, -0.4993,
        -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.1145e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3431e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1685, -1.1686, -1.1687, -1.1687, -1.1688, -1.1688, -1.1688, -1.1688,
        -1.1688, -1.1689], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4993, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 18 	 0 	 H2 	 H2 	 4.714326752845266e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9469, -74.9874, -75.0085, -75.0214, -75.0303, -75.0367, -75.0414,
        -75.0448, -75.0472, -75.0489, -75.0501, -75.0510, -75.0516, -75.0520,
        -75.0523, -75.0525, -75.0527, -75.0528, -75.0529, -75.0529, -75.0529,
        -75.0530, -75.0530, -75.0530, -75.0530], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.2427e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.2427e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0525, -75.0527, -75.0528, -75.0529, -75.0529, -75.0529, -75.0530,
        -75.0530, -75.0530, -75.0530], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 18 	 12 	 O 	 O 	 4.784829924807909e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2517, -107.2753, -107.2394, -107.2326, -107.2278, -107.2252,
        -107.2242, -107.2237, -107.2237, -107.2238, -107.2242, -107.2245,
        -107.2249, -107.2253, -107.2256, -107.2260, -107.2263, -107.2266,
        -107.2269, -107.2271, -107.2273, -107.2274, -107.2276, -107.2277,
        -107.2278], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.5178e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6696, -99.6914, -99.7018, -99.7080, -99.7123, -99.7154, -99.7177,
        -99.7193, -99.7205, -99.7213, -99.7219, -99.7223, -99.7226, -99.7228,
        -99.7230, -99.7231, -99.7232, -99.7232, -99.7232, -99.7233, -99.7233,
        -99.7233, -99.7233, -99.7233, -99.7233], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2136e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4562, -7.4628, -7.4663, -7.4683, -7.4696, -7.4706, -7.4716, -7.4724,
        -7.4726, -7.4723, -7.4721, -7.4720, -7.4720, -7.4721, -7.4721, -7.4721,
        -7.4722, -7.4722, -7.4722, -7.4722, -7.4722, -7.4723, -7.4723, -7.4723,
        -7.4723], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.6112e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2260, -107.2263, -107.2266, -107.2269, -107.2271, -107.2273,
        -107.2274, -107.2276, -107.2277, -107.2278], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7231, -99.7232, -99.7232, -99.7232, -99.7233, -99.7233, -99.7233,
        -99.7233, -99.7233, -99.7233], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4721, -7.4722, -7.4722, -7.4722, -7.4722, -7.4722, -7.4723, -7.4723,
        -7.4723, -7.4723], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 18 	 2 	 FLi 	 LiF 	 0.008468374011963

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4146, -54.4848, -54.5146, -54.5319, -54.5437, -54.5520, -54.5579,
        -54.5621, -54.5650, -54.5671, -54.5686, -54.5697, -54.5704, -54.5709,
        -54.5713, -54.5715, -54.5717, -54.5718, -54.5719, -54.5720, -54.5720,
        -54.5721, -54.5721, -54.5721, -54.5721], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.1400e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.1400e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5715, -54.5717, -54.5718, -54.5719, -54.5720, -54.5720, -54.5721,
        -54.5721, -54.5721, -54.5721], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 18 	 11 	 N 	 N 	 6.847774750376139e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.5691, -109.8974, -109.7454, -109.6641, -109.6117, -109.5760,
        -109.5510, -109.5336, -109.5214, -109.5129, -109.5069, -109.5027,
        -109.4998, -109.4977, -109.4963, -109.4953, -109.4945, -109.4941,
        -109.4937, -109.4935, -109.4933, -109.4932, -109.4931, -109.4930,
        -109.4930], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.2817e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4081, -54.4768, -54.5087, -54.5276, -54.5406, -54.5498, -54.5563,
        -54.5610, -54.5643, -54.5667, -54.5683, -54.5695, -54.5703, -54.5709,
        -54.5713, -54.5716, -54.5718, -54.5719, -54.5720, -54.5721, -54.5721,
        -54.5722, -54.5722, -54.5722, -54.5722], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.1203e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4953, -109.4945, -109.4941, -109.4937, -109.4935, -109.4933,
        -109.4932, -109.4931, -109.4930, -109.4930], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5716, -54.5718, -54.5719, -54.5720, -54.5721, -54.5721, -54.5722,
        -54.5722, -54.5722, -54.5722], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 18 	 1 	 N2 	 N2 	 5.5340958151485205e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0890, -460.1204, -460.1315, -460.1377, -460.1420, -460.1451,
        -460.1473, -460.1488, -460.1500, -460.1508, -460.1514, -460.1518,
        -460.1521, -460.1523, -460.1524, -460.1525, -460.1526, -460.1526,
        -460.1527, -460.1527, -460.1527, -460.1527, -460.1527, -460.1527,
        -460.1527], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.2926e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.2926e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1525, -460.1526, -460.1526, -460.1527, -460.1527, -460.1527,
        -460.1527, -460.1527, -460.1527, -460.1527], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 18 	 7 	 Cl 	 Cl 	 5.2062538821443546e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6766, -99.6993, -99.7077, -99.7126, -99.7158, -99.7181, -99.7198,
        -99.7210, -99.7218, -99.7224, -99.7228, -99.7231, -99.7233, -99.7235,
        -99.7236, -99.7237, -99.7237, -99.7238, -99.7238, -99.7238, -99.7238,
        -99.7238, -99.7238, -99.7238, -99.7238], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0924e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.0924e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7237, -99.7237, -99.7238, -99.7238, -99.7238, -99.7238, -99.7238,
        -99.7238, -99.7238, -99.7238], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 18 	 8 	 F 	 F 	 2.3686886561362626e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-93.8479, -93.4566, -93.3609, -93.3159, -93.2854, -93.2652, -93.2508,
        -93.2407, -93.2334, -93.2282, -93.2245, -93.2217, -93.2198, -93.2183,
        -93.2173, -93.2165, -93.2160, -93.2155, -93.2152, -93.2150, -93.2148,
        -93.2147, -93.2146, -93.2146, -93.2145], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.8023e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7370, -37.7763, -37.7928, -37.8023, -37.8087, -37.8133, -37.8165,
        -37.8189, -37.8205, -37.8217, -37.8225, -37.8231, -37.8235, -37.8238,
        -37.8240, -37.8242, -37.8243, -37.8243, -37.8244, -37.8244, -37.8244,
        -37.8245, -37.8245, -37.8245, -37.8245], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8499e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2427, -0.4369, -0.4633, -0.4758, -0.4834, -0.4884, -0.4918, -0.4941,
        -0.4957, -0.4969, -0.4977, -0.4982, -0.4986, -0.4989, -0.4991, -0.4992,
        -0.4993, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.0089e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4200, -54.4901, -54.5185, -54.5349, -54.5459, -54.5536, -54.5591,
        -54.5630, -54.5658, -54.5678, -54.5691, -54.5701, -54.5708, -54.5713,
        -54.5716, -54.5718, -54.5720, -54.5721, -54.5722, -54.5723, -54.5723,
        -54.5723, -54.5723, -54.5724, -54.5724], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.0704e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2165, -93.2160, -93.2155, -93.2152, -93.2150, -93.2148, -93.2147,
        -93.2146, -93.2146, -93.2145], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8242, -37.8243, -37.8243, -37.8244, -37.8244, -37.8244, -37.8245,
        -37.8245, -37.8245, -37.8245], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4992, -0.4993, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5718, -54.5720, -54.5721, -54.5722, -54.5723, -54.5723, -54.5723,
        -54.5723, -54.5724, -54.5724], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 18 	 3 	 CHN 	 CNH 	 0.007661439061465364

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e18)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e18/2022-10-25_04:04:39.930803_0.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e18/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 18 || ,[' rho : 3.025384', ' ae : 69.236944', ' E : 3.827247'] ,|| total loss 50.794514 || CHKPT: _0.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6778, -99.7004, -99.7085, -99.7131, -99.7163, -99.7185, -99.7201,
        -99.7212, -99.7220, -99.7226, -99.7230, -99.7233, -99.7235, -99.7236,
        -99.7237, -99.7238, -99.7238, -99.7239, -99.7239, -99.7239, -99.7239,
        -99.7239, -99.7239, -99.7239, -99.7239], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0703e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.0703e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7238, -99.7238, -99.7239, -99.7239, -99.7239, -99.7239, -99.7239,
        -99.7239, -99.7239, -99.7239], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 19 	 8 	 F 	 F 	 2.3218795675300397e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4580, -7.4653, -7.4681, -7.4696, -7.4706, -7.4715, -7.4724, -7.4726,
        -7.4723, -7.4721, -7.4720, -7.4720, -7.4720, -7.4721, -7.4721, -7.4722,
        -7.4722, -7.4722, -7.4722, -7.4722, -7.4722, -7.4722, -7.4722, -7.4723,
        -7.4723], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.6172e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.6172e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4722, -7.4722, -7.4722, -7.4722, -7.4722, -7.4722, -7.4722, -7.4722,
        -7.4723, -7.4723], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 19 	 10 	 Li 	 Li 	 7.889439946973556e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-0.9799, -1.0937, -1.1230, -1.1381, -1.1476, -1.1541, -1.1585, -1.1616,
        -1.1638, -1.1653, -1.1664, -1.1671, -1.1677, -1.1680, -1.1683, -1.1685,
        -1.1686, -1.1687, -1.1687, -1.1688, -1.1688, -1.1688, -1.1688, -1.1688,
        -1.1689], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6767e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3533e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3047, -0.4548, -0.4734, -0.4823, -0.4877, -0.4914, -0.4938, -0.4955,
        -0.4967, -0.4976, -0.4982, -0.4986, -0.4988, -0.4990, -0.4992, -0.4993,
        -0.4993, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.6908e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3534e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1685, -1.1686, -1.1687, -1.1687, -1.1688, -1.1688, -1.1688, -1.1688,
        -1.1688, -1.1689], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4993, -0.4993, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 19 	 0 	 H2 	 H2 	 4.692779524330839e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1079, -460.1325, -460.1400, -460.1441, -460.1468, -460.1487,
        -460.1501, -460.1510, -460.1517, -460.1522, -460.1525, -460.1528,
        -460.1530, -460.1531, -460.1532, -460.1532, -460.1533, -460.1533,
        -460.1533, -460.1533, -460.1533, -460.1533, -460.1533, -460.1533,
        -460.1533], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.9820e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.9820e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1532, -460.1533, -460.1533, -460.1533, -460.1533, -460.1533,
        -460.1533, -460.1533, -460.1533, -460.1533], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 19 	 7 	 Cl 	 Cl 	 6.678760016229048e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2647, -0.4435, -0.4670, -0.4782, -0.4850, -0.4895, -0.4925, -0.4946,
        -0.4961, -0.4971, -0.4978, -0.4983, -0.4987, -0.4989, -0.4991, -0.4992,
        -0.4993, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.5217e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(4.5217e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4992, -0.4993, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 19 	 9 	 H 	 H 	 6.184347333626025e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.9286, -188.9091, -188.6925, -188.5651, -188.4861, -188.4323,
        -188.3948, -188.3684, -188.3498, -188.3366, -188.3273, -188.3207,
        -188.3160, -188.3127, -188.3103, -188.3086, -188.3074, -188.3066,
        -188.3060, -188.3055, -188.3052, -188.3050, -188.3048, -188.3047,
        -188.3047], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7478e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7332, -37.7707, -37.7886, -37.7992, -37.8065, -37.8117, -37.8154,
        -37.8181, -37.8200, -37.8213, -37.8223, -37.8229, -37.8234, -37.8237,
        -37.8240, -37.8241, -37.8243, -37.8243, -37.8244, -37.8244, -37.8245,
        -37.8245, -37.8245, -37.8245, -37.8245], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8508e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9591, -75.0031, -75.0205, -75.0304, -75.0371, -75.0418, -75.0452,
        -75.0476, -75.0494, -75.0506, -75.0515, -75.0521, -75.0525, -75.0528,
        -75.0530, -75.0532, -75.0533, -75.0534, -75.0534, -75.0535, -75.0535,
        -75.0535, -75.0535, -75.0535, -75.0535], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.0642e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3086, -188.3074, -188.3066, -188.3060, -188.3055, -188.3052,
        -188.3050, -188.3048, -188.3047, -188.3047], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8241, -37.8243, -37.8243, -37.8244, -37.8244, -37.8245, -37.8245,
        -37.8245, -37.8245, -37.8245], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0532, -75.0533, -75.0534, -75.0534, -75.0535, -75.0535, -75.0535,
        -75.0535, -75.0535, -75.0535], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 19 	 4 	 CO2 	 CO2 	 0.01449962180279087

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-94.0994, -93.5624, -93.4163, -93.3580, -93.3135, -93.2855, -93.2652,
        -93.2510, -93.2408, -93.2335, -93.2283, -93.2245, -93.2218, -93.2198,
        -93.2184, -93.2173, -93.2166, -93.2160, -93.2156, -93.2153, -93.2151,
        -93.2149, -93.2148, -93.2147, -93.2146], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.7936e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7376, -37.7770, -37.7932, -37.8026, -37.8089, -37.8133, -37.8165,
        -37.8188, -37.8204, -37.8216, -37.8224, -37.8230, -37.8234, -37.8236,
        -37.8238, -37.8240, -37.8241, -37.8242, -37.8242, -37.8242, -37.8243,
        -37.8243, -37.8243, -37.8243, -37.8243], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8931e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2220, -0.4304, -0.4597, -0.4735, -0.4818, -0.4873, -0.4910, -0.4936,
        -0.4954, -0.4966, -0.4975, -0.4981, -0.4985, -0.4988, -0.4990, -0.4992,
        -0.4993, -0.4993, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.6726e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4211, -54.4911, -54.5192, -54.5353, -54.5461, -54.5537, -54.5591,
        -54.5630, -54.5657, -54.5676, -54.5689, -54.5699, -54.5706, -54.5710,
        -54.5714, -54.5716, -54.5718, -54.5719, -54.5719, -54.5720, -54.5720,
        -54.5721, -54.5721, -54.5721, -54.5721], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.1308e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2173, -93.2166, -93.2160, -93.2156, -93.2153, -93.2151, -93.2149,
        -93.2148, -93.2147, -93.2146], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8240, -37.8241, -37.8242, -37.8242, -37.8242, -37.8243, -37.8243,
        -37.8243, -37.8243, -37.8243], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4992, -0.4993, -0.4993, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5716, -54.5718, -54.5719, -54.5719, -54.5720, -54.5720, -54.5721,
        -54.5721, -54.5721, -54.5721], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 19 	 3 	 CHN 	 CNH 	 0.007608098860991799

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2617, -107.2791, -107.2427, -107.2350, -107.2296, -107.2267,
        -107.2253, -107.2246, -107.2244, -107.2244, -107.2246, -107.2249,
        -107.2253, -107.2256, -107.2260, -107.2263, -107.2267, -107.2270,
        -107.2272, -107.2274, -107.2276, -107.2277, -107.2279, -107.2280,
        -107.2281], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.5270e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6687, -99.6893, -99.7001, -99.7067, -99.7113, -99.7146, -99.7171,
        -99.7188, -99.7201, -99.7210, -99.7217, -99.7221, -99.7224, -99.7227,
        -99.7228, -99.7229, -99.7230, -99.7231, -99.7231, -99.7231, -99.7231,
        -99.7232, -99.7232, -99.7232, -99.7232], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2489e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4562, -7.4632, -7.4665, -7.4684, -7.4697, -7.4706, -7.4716, -7.4723,
        -7.4724, -7.4721, -7.4719, -7.4718, -7.4719, -7.4719, -7.4719, -7.4720,
        -7.4720, -7.4720, -7.4720, -7.4721, -7.4721, -7.4721, -7.4721, -7.4721,
        -7.4721], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.8353e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2263, -107.2267, -107.2270, -107.2272, -107.2274, -107.2276,
        -107.2277, -107.2279, -107.2280, -107.2281], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7229, -99.7230, -99.7231, -99.7231, -99.7231, -99.7231, -99.7232,
        -99.7232, -99.7232, -99.7232], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4720, -7.4720, -7.4720, -7.4720, -7.4721, -7.4721, -7.4721, -7.4721,
        -7.4721, -7.4721], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 19 	 2 	 FLi 	 LiF 	 0.00841323682882038

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9456, -74.9829, -75.0047, -75.0184, -75.0279, -75.0349, -75.0399,
        -75.0435, -75.0461, -75.0480, -75.0493, -75.0503, -75.0510, -75.0514,
        -75.0518, -75.0520, -75.0521, -75.0523, -75.0523, -75.0524, -75.0524,
        -75.0525, -75.0525, -75.0525, -75.0525], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.4050e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.4050e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0520, -75.0521, -75.0523, -75.0523, -75.0524, -75.0524, -75.0525,
        -75.0525, -75.0525, -75.0525], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 19 	 12 	 O 	 O 	 5.122029803962507e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4224, -54.4921, -54.5197, -54.5355, -54.5460, -54.5535, -54.5587,
        -54.5625, -54.5651, -54.5670, -54.5683, -54.5692, -54.5699, -54.5703,
        -54.5707, -54.5709, -54.5710, -54.5712, -54.5712, -54.5713, -54.5713,
        -54.5714, -54.5714, -54.5714, -54.5714], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.3076e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.3076e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5709, -54.5710, -54.5712, -54.5712, -54.5713, -54.5713, -54.5714,
        -54.5714, -54.5714, -54.5714], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 19 	 11 	 N 	 N 	 7.419940019101025e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7320, -37.7689, -37.7871, -37.7979, -37.8053, -37.8106, -37.8144,
        -37.8171, -37.8190, -37.8204, -37.8214, -37.8221, -37.8226, -37.8229,
        -37.8232, -37.8233, -37.8234, -37.8235, -37.8236, -37.8236, -37.8237,
        -37.8237, -37.8237, -37.8237, -37.8237], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.0404e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.0404e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8233, -37.8234, -37.8235, -37.8236, -37.8236, -37.8237, -37.8237,
        -37.8237, -37.8237, -37.8237], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 19 	 6 	 C 	 C 	 6.597531406953227e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.8805, -109.5725, -109.5836, -109.5569, -109.5364, -109.5223,
        -109.5126, -109.5061, -109.5016, -109.4986, -109.4965, -109.4951,
        -109.4942, -109.4935, -109.4930, -109.4927, -109.4925, -109.4924,
        -109.4923, -109.4922, -109.4921, -109.4921, -109.4921, -109.4921,
        -109.4920], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.2749e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4206, -54.4905, -54.5186, -54.5347, -54.5455, -54.5531, -54.5585,
        -54.5623, -54.5650, -54.5669, -54.5683, -54.5692, -54.5699, -54.5704,
        -54.5707, -54.5709, -54.5711, -54.5712, -54.5713, -54.5713, -54.5714,
        -54.5714, -54.5714, -54.5714, -54.5714], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.2964e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4927, -109.4925, -109.4924, -109.4923, -109.4922, -109.4921,
        -109.4921, -109.4921, -109.4921, -109.4920], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5709, -54.5711, -54.5712, -54.5713, -54.5713, -54.5714, -54.5714,
        -54.5714, -54.5714, -54.5714], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 19 	 1 	 N2 	 N2 	 5.158181957441958e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4387, -920.4144, -920.4087, -920.4057, -920.4038, -920.4025,
        -920.4016, -920.4009, -920.4005, -920.4001, -920.3999, -920.3998,
        -920.3997, -920.3996, -920.3995, -920.3995, -920.3995, -920.3995,
        -920.3994, -920.3994, -920.3994, -920.3994, -920.3994, -920.3994,
        -920.3994], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.6931e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.3862e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1065, -460.1298, -460.1368, -460.1406, -460.1431, -460.1449,
        -460.1461, -460.1470, -460.1476, -460.1481, -460.1484, -460.1486,
        -460.1488, -460.1489, -460.1489, -460.1490, -460.1490, -460.1491,
        -460.1491, -460.1491, -460.1491, -460.1491, -460.1491, -460.1491,
        -460.1491], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2561e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.3863e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.3995, -920.3995, -920.3995, -920.3994, -920.3994, -920.3994,
        -920.3994, -920.3994, -920.3994, -920.3994], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1490, -460.1490, -460.1491, -460.1491, -460.1491, -460.1491,
        -460.1491, -460.1491, -460.1491, -460.1491], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 19 	 5 	 Cl2 	 Cl2 	 1.0319378386222804e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e19)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e19/2022-10-25_04:04:39.930803_1.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e19/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 19 || ,[' rho : 3.023028', ' ae : 68.855250', ' E : 3.959143'] ,|| total loss 50.531707 || CHKPT: _1.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0913, -460.1209, -460.1308, -460.1363, -460.1401, -460.1427,
        -460.1446, -460.1460, -460.1470, -460.1477, -460.1482, -460.1485,
        -460.1488, -460.1489, -460.1491, -460.1491, -460.1492, -460.1492,
        -460.1493, -460.1493, -460.1493, -460.1493, -460.1493, -460.1493,
        -460.1493], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7914e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.7914e-09, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1491, -460.1492, -460.1492, -460.1493, -460.1493, -460.1493,
        -460.1493, -460.1493, -460.1493, -460.1493], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 20 	 7 	 Cl 	 Cl 	 4.154203433063781e-07

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.4259, -109.8623, -109.7218, -109.6477, -109.6002, -109.5678,
        -109.5452, -109.5293, -109.5183, -109.5105, -109.5051, -109.5013,
        -109.4986, -109.4967, -109.4954, -109.4945, -109.4939, -109.4934,
        -109.4931, -109.4929, -109.4927, -109.4926, -109.4925, -109.4925,
        -109.4924], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.2744e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4438, -54.5086, -54.5312, -54.5438, -54.5520, -54.5578, -54.5619,
        -54.5647, -54.5668, -54.5682, -54.5692, -54.5699, -54.5704, -54.5708,
        -54.5710, -54.5712, -54.5713, -54.5714, -54.5714, -54.5715, -54.5715,
        -54.5715, -54.5715, -54.5716, -54.5716], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.2509e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4945, -109.4939, -109.4934, -109.4931, -109.4929, -109.4927,
        -109.4926, -109.4925, -109.4925, -109.4924], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5712, -54.5713, -54.5714, -54.5714, -54.5715, -54.5715, -54.5715,
        -54.5715, -54.5716, -54.5716], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 20 	 1 	 N2 	 N2 	 5.0143678060761094e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6681, -99.6874, -99.6985, -99.7054, -99.7103, -99.7139, -99.7165,
        -99.7184, -99.7198, -99.7207, -99.7214, -99.7219, -99.7223, -99.7225,
        -99.7227, -99.7228, -99.7229, -99.7229, -99.7230, -99.7230, -99.7230,
        -99.7231, -99.7231, -99.7231, -99.7231], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2748e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.2748e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7228, -99.7229, -99.7229, -99.7230, -99.7230, -99.7230, -99.7231,
        -99.7231, -99.7231, -99.7231], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 20 	 8 	 F 	 F 	 2.7420328161038025e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2155, -107.2646, -107.2296, -107.2263, -107.2235, -107.2221,
        -107.2221, -107.2224, -107.2228, -107.2233, -107.2239, -107.2244,
        -107.2249, -107.2255, -107.2260, -107.2264, -107.2268, -107.2272,
        -107.2275, -107.2278, -107.2280, -107.2281, -107.2283, -107.2284,
        -107.2285], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.5403e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6736, -99.6964, -99.7054, -99.7107, -99.7143, -99.7169, -99.7187,
        -99.7200, -99.7210, -99.7217, -99.7221, -99.7225, -99.7227, -99.7229,
        -99.7230, -99.7231, -99.7231, -99.7232, -99.7232, -99.7232, -99.7232,
        -99.7233, -99.7233, -99.7233, -99.7233], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2202e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4581, -7.4654, -7.4681, -7.4695, -7.4704, -7.4714, -7.4722, -7.4723,
        -7.4720, -7.4718, -7.4717, -7.4717, -7.4718, -7.4718, -7.4719, -7.4719,
        -7.4719, -7.4719, -7.4719, -7.4720, -7.4720, -7.4720, -7.4720, -7.4720,
        -7.4720], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.9689e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2264, -107.2268, -107.2272, -107.2275, -107.2278, -107.2280,
        -107.2281, -107.2283, -107.2284, -107.2285], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7231, -99.7231, -99.7232, -99.7232, -99.7232, -99.7232, -99.7233,
        -99.7233, -99.7233, -99.7233], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4719, -7.4719, -7.4719, -7.4719, -7.4720, -7.4720, -7.4720, -7.4720,
        -7.4720, -7.4720], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 20 	 2 	 FLi 	 LiF 	 0.008373434363668466

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7412, -37.7807, -37.7957, -37.8043, -37.8100, -37.8141, -37.8170,
        -37.8190, -37.8205, -37.8215, -37.8223, -37.8228, -37.8231, -37.8234,
        -37.8236, -37.8237, -37.8238, -37.8238, -37.8239, -37.8239, -37.8239,
        -37.8239, -37.8240, -37.8240, -37.8240], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.9669e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.9669e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8237, -37.8238, -37.8238, -37.8239, -37.8239, -37.8239, -37.8239,
        -37.8240, -37.8240, -37.8240], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 20 	 6 	 C 	 C 	 6.392440562644471e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0411, -1.1179, -1.1379, -1.1481, -1.1545, -1.1589, -1.1619, -1.1640,
        -1.1655, -1.1665, -1.1672, -1.1677, -1.1681, -1.1683, -1.1685, -1.1686,
        -1.1687, -1.1688, -1.1688, -1.1688, -1.1689, -1.1689, -1.1689, -1.1689,
        -1.1689], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6901e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3801e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3346, -0.4627, -0.4778, -0.4852, -0.4897, -0.4927, -0.4947, -0.4962,
        -0.4972, -0.4979, -0.4983, -0.4987, -0.4989, -0.4991, -0.4992, -0.4993,
        -0.4993, -0.4994, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.4414e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3801e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1686, -1.1687, -1.1688, -1.1688, -1.1688, -1.1689, -1.1689, -1.1689,
        -1.1689, -1.1689], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4993, -0.4993, -0.4994, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 20 	 0 	 H2 	 H2 	 4.496346808105374e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4438, -920.4198, -920.4142, -920.4113, -920.4094, -920.4081,
        -920.4072, -920.4065, -920.4061, -920.4058, -920.4056, -920.4054,
        -920.4053, -920.4052, -920.4052, -920.4052, -920.4051, -920.4051,
        -920.4051, -920.4051, -920.4051, -920.4051, -920.4051, -920.4051,
        -920.4051], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.6785e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.3570e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1007, -460.1277, -460.1363, -460.1411, -460.1442, -460.1465,
        -460.1481, -460.1492, -460.1500, -460.1506, -460.1510, -460.1513,
        -460.1515, -460.1516, -460.1517, -460.1518, -460.1518, -460.1519,
        -460.1519, -460.1519, -460.1519, -460.1519, -460.1519, -460.1519,
        -460.1519], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5994e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.3586e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4052, -920.4051, -920.4051, -920.4051, -920.4051, -920.4051,
        -920.4051, -920.4051, -920.4051, -920.4051], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1518, -460.1518, -460.1519, -460.1519, -460.1519, -460.1519,
        -460.1519, -460.1519, -460.1519, -460.1519], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 20 	 5 	 Cl2 	 Cl2 	 1.0397925745192876e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3044, -0.4547, -0.4733, -0.4822, -0.4877, -0.4913, -0.4938, -0.4955,
        -0.4967, -0.4975, -0.4981, -0.4985, -0.4988, -0.4990, -0.4992, -0.4993,
        -0.4993, -0.4994, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.9087e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.9087e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4993, -0.4993, -0.4994, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 20 	 9 	 H 	 H 	 6.635683298982956e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-93.8102, -93.4404, -93.3527, -93.3101, -93.2820, -93.2631, -93.2498,
        -93.2403, -93.2336, -93.2288, -93.2253, -93.2228, -93.2210, -93.2197,
        -93.2187, -93.2180, -93.2175, -93.2171, -93.2169, -93.2167, -93.2165,
        -93.2164, -93.2163, -93.2162, -93.2162], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.7530e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7449, -37.7839, -37.7982, -37.8062, -37.8115, -37.8153, -37.8180,
        -37.8199, -37.8212, -37.8222, -37.8228, -37.8233, -37.8236, -37.8239,
        -37.8240, -37.8242, -37.8242, -37.8243, -37.8243, -37.8244, -37.8244,
        -37.8244, -37.8244, -37.8244, -37.8244], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8591e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2295, -0.4327, -0.4610, -0.4743, -0.4824, -0.4877, -0.4913, -0.4938,
        -0.4955, -0.4967, -0.4975, -0.4981, -0.4985, -0.4988, -0.4990, -0.4992,
        -0.4993, -0.4993, -0.4994, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.5688e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4136, -54.4832, -54.5135, -54.5312, -54.5432, -54.5517, -54.5578,
        -54.5621, -54.5652, -54.5673, -54.5688, -54.5699, -54.5707, -54.5712,
        -54.5716, -54.5718, -54.5720, -54.5721, -54.5722, -54.5723, -54.5723,
        -54.5724, -54.5724, -54.5724, -54.5724], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.0673e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2180, -93.2175, -93.2171, -93.2169, -93.2167, -93.2165, -93.2164,
        -93.2163, -93.2162, -93.2162], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8242, -37.8242, -37.8243, -37.8243, -37.8244, -37.8244, -37.8244,
        -37.8244, -37.8244, -37.8244], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4992, -0.4993, -0.4993, -0.4994, -0.4994, -0.4994, -0.4994, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5718, -54.5720, -54.5721, -54.5722, -54.5723, -54.5723, -54.5724,
        -54.5724, -54.5724, -54.5724], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 20 	 3 	 CHN 	 CNH 	 0.00751508317031669

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4561, -7.4625, -7.4661, -7.4681, -7.4695, -7.4704, -7.4714, -7.4723,
        -7.4725, -7.4722, -7.4720, -7.4719, -7.4719, -7.4719, -7.4720, -7.4720,
        -7.4720, -7.4721, -7.4721, -7.4721, -7.4721, -7.4721, -7.4721, -7.4721,
        -7.4721], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.7703e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.7703e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4720, -7.4720, -7.4721, -7.4721, -7.4721, -7.4721, -7.4721, -7.4721,
        -7.4721, -7.4721], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 20 	 10 	 Li 	 Li 	 8.206277104692725e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4201, -54.4900, -54.5185, -54.5349, -54.5459, -54.5537, -54.5592,
        -54.5631, -54.5659, -54.5679, -54.5692, -54.5702, -54.5709, -54.5714,
        -54.5717, -54.5719, -54.5721, -54.5722, -54.5723, -54.5724, -54.5724,
        -54.5724, -54.5724, -54.5725, -54.5725], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.0444e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.0444e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5719, -54.5721, -54.5722, -54.5723, -54.5724, -54.5724, -54.5724,
        -54.5724, -54.5725, -54.5725], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 20 	 11 	 N 	 N 	 6.552257343365446e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9627, -75.0063, -75.0229, -75.0323, -75.0386, -75.0431, -75.0463,
        -75.0486, -75.0502, -75.0514, -75.0522, -75.0528, -75.0532, -75.0534,
        -75.0536, -75.0538, -75.0539, -75.0540, -75.0540, -75.0540, -75.0541,
        -75.0541, -75.0541, -75.0541, -75.0541], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8929e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.8929e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0538, -75.0539, -75.0540, -75.0540, -75.0540, -75.0541, -75.0541,
        -75.0541, -75.0541, -75.0541], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 20 	 12 	 O 	 O 	 4.075236350311374e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.6823, -188.8159, -188.6334, -188.5262, -188.4601, -188.4151,
        -188.3838, -188.3617, -188.3461, -188.3351, -188.3273, -188.3218,
        -188.3179, -188.3151, -188.3131, -188.3117, -188.3107, -188.3100,
        -188.3094, -188.3091, -188.3088, -188.3086, -188.3085, -188.3084,
        -188.3083], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7366e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7513, -37.7888, -37.8016, -37.8088, -37.8135, -37.8168, -37.8191,
        -37.8208, -37.8220, -37.8228, -37.8234, -37.8238, -37.8241, -37.8243,
        -37.8244, -37.8245, -37.8246, -37.8247, -37.8247, -37.8247, -37.8247,
        -37.8247, -37.8247, -37.8248, -37.8248], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7794e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9518, -74.9946, -75.0144, -75.0261, -75.0342, -75.0399, -75.0441,
        -75.0471, -75.0492, -75.0507, -75.0518, -75.0526, -75.0531, -75.0535,
        -75.0538, -75.0540, -75.0541, -75.0542, -75.0542, -75.0543, -75.0543,
        -75.0543, -75.0544, -75.0544, -75.0544], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8301e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3117, -188.3107, -188.3100, -188.3094, -188.3091, -188.3088,
        -188.3086, -188.3085, -188.3084, -188.3083], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8245, -37.8246, -37.8247, -37.8247, -37.8247, -37.8247, -37.8247,
        -37.8247, -37.8248, -37.8248], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0540, -75.0541, -75.0542, -75.0542, -75.0543, -75.0543, -75.0543,
        -75.0544, -75.0544, -75.0544], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 20 	 4 	 CO2 	 CO2 	 0.014301837399209219

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e20)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e20/2022-10-25_04:04:39.930803_2.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/06/MODEL_MGGA_e20/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 20 || ,[' rho : 3.018054', ' ae : 68.457399', ' E : 3.838142'] ,|| total loss 50.254632 || CHKPT: _2.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
Max checkpoint number reached -- aborting training process.
