{
    "pretrain_loc": "/gpfs/home/awills/dpyscfl/models/pretrained/scan",
    "type": "MGGA",
    "datapath": "/gpfs/scratch/awills/swxcd/data/test_subset_ps2/07",
    "reftraj": "/gpfs/scratch/awills/swxcd/aegis/test_subset_ps2/06/subat_ref.traj",
    "n_hidden": 16,
    "hyb_par": 0.0,
    "E_weight": 0.01,
    "rho_weight": 20,
    "ae_weight": 1,
    "modelpath": "",
    "optimpath": "",
    "logpath": ".",
    "testrun": false,
    "lr": 0.0001,
    "l2": 1e-06,
    "hnorm": false,
    "print_stdout": false,
    "print_names": false,
    "nonsc_weight": 0.01,
    "start_converged": false,
    "scf_steps": 25,
    "polynomial": false,
    "free": false,
    "freec": false,
    "meta_x": null,
    "rho_alt": false,
    "radical_factor": 1.0,
    "forcedensloss": false,
    "forceEloss": false,
    "freezeappend": 0,
    "loadfa": 0,
    "outputlayergrad": false,
    "checkgrad": false,
    "testmol": "",
    "torchtype": "float",
    "testall": false,
    "targetdir": "/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07",
    "valtraj": "",
    "valbasis": "6-311++G(3df,2pd)",
    "valpol": true,
    "valgridlevel": 5,
    "valmaxcycle": 100,
    "noxcdiffpop": false,
    "testpop": false,
    "passthrough": true,
    "chkptmax": 20
}
READING REFERENCE TRAJECTORY.
READING DATASET
LOADING DATASET INTO PYTORCH
PARSING NON-ATOMIC NON-REACTION MOLECULES
{'  0HH': [0], '  1NN': [1], '  2LiF': [2], '  3CNH': [3], '  4COO': [4], '  5ClCl': [5]}
PARSING NEUTRAL, PURE NON-REACTION ATOMS. CHARGE FLAG NOT SET.
{'C': [6], 'Cl': [7], 'F': [8], 'H': [9], 'Li': [10], 'N': [11], 'O': [12]}
PARSING SUPPLEMENTAL NEUTRAL, PURE ATOMS (FROM FRAC DATASET)
{}
PARSING SUPPLEMENTAL CHARGED, PURE ATOMS
{}
PARSING SUPPLEMENTAL FRACTIONAL ATOMS
{}
CONCATENATING SUPPLEMENTAL/FRACTIONAL ATOMS
{}
PARSING REACTIONS
{}
MOLECULES TO TRAIN ON
{'  0HH': [0, 9, 9], '  1NN': [1, 11, 11], '  2LiF': [2, 10, 8], '  3CNH': [3, 6, 11, 9], '  4COO': [4, 6, 12, 12], '  5ClCl': [5, 7, 7], 'C': [6], 'Cl': [7], 'F': [8], 'H': [9], 'Li': [10], 'N': [11], 'O': [12]}
A_COUNT
{0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 3, 7: 2, 8: 2, 9: 3, 10: 2, 11: 3, 12: 2}
GENERATING SCF OBJECT

 ======= Starting training ====== 


FIRST PASS: EVALUATION ON TRAINING DATA
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.3182, -107.3000, -107.2641, -107.2507, -107.2425, -107.2377,
        -107.2352, -107.2338, -107.2329, -107.2324, -107.2321, -107.2320,
        -107.2319, -107.2320, -107.2321, -107.2323, -107.2324, -107.2325,
        -107.2327, -107.2328, -107.2329, -107.2330, -107.2330, -107.2331,
        -107.2331], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.3965e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6860, -99.7103, -99.7186, -99.7233, -99.7265, -99.7287, -99.7303,
        -99.7314, -99.7322, -99.7328, -99.7332, -99.7335, -99.7337, -99.7339,
        -99.7340, -99.7340, -99.7341, -99.7341, -99.7341, -99.7341, -99.7342,
        -99.7342, -99.7342, -99.7342, -99.7342], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2855e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4659, -7.4730, -7.4753, -7.4764, -7.4773, -7.4782, -7.4788, -7.4789,
        -7.4787, -7.4785, -7.4784, -7.4784, -7.4784, -7.4784, -7.4785, -7.4785,
        -7.4785, -7.4785, -7.4785, -7.4785, -7.4785, -7.4785, -7.4785, -7.4785,
        -7.4785], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.3766e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2323, -107.2324, -107.2325, -107.2327, -107.2328, -107.2329,
        -107.2330, -107.2330, -107.2331, -107.2331], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7340, -99.7341, -99.7341, -99.7341, -99.7341, -99.7342, -99.7342,
        -99.7342, -99.7342, -99.7342], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4785, -7.4785, -7.4785, -7.4785, -7.4785, -7.4785, -7.4785, -7.4785,
        -7.4785, -7.4785], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 0 	 2 	 FLi 	 LiF 	 0.009544336232220906

PASSTHROUGH -- FLi DONE.
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-93.8836, -93.4809, -93.3799, -93.3315, -93.2986, -93.2763, -93.2603,
        -93.2487, -93.2403, -93.2341, -93.2295, -93.2261, -93.2236, -93.2217,
        -93.2203, -93.2193, -93.2184, -93.2178, -93.2174, -93.2170, -93.2167,
        -93.2165, -93.2164, -93.2162, -93.2161], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.6276e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7537, -37.7944, -37.8091, -37.8173, -37.8228, -37.8266, -37.8293,
        -37.8313, -37.8326, -37.8336, -37.8343, -37.8348, -37.8351, -37.8353,
        -37.8355, -37.8356, -37.8357, -37.8358, -37.8358, -37.8358, -37.8358,
        -37.8359, -37.8359, -37.8359, -37.8359], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6013e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3167, -0.4583, -0.4756, -0.4839, -0.4890, -0.4923, -0.4947, -0.4963,
        -0.4974, -0.4982, -0.4987, -0.4991, -0.4993, -0.4995, -0.4997, -0.4998,
        -0.4998, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999, -0.5000,
        -0.5000], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1348e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4128, -54.4834, -54.5169, -54.5369, -54.5506, -54.5604, -54.5674,
        -54.5724, -54.5759, -54.5784, -54.5802, -54.5814, -54.5823, -54.5829,
        -54.5833, -54.5836, -54.5839, -54.5840, -54.5841, -54.5842, -54.5842,
        -54.5843, -54.5843, -54.5843, -54.5843], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.0015e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2193, -93.2184, -93.2178, -93.2174, -93.2170, -93.2167, -93.2165,
        -93.2164, -93.2162, -93.2161], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8356, -37.8357, -37.8358, -37.8358, -37.8358, -37.8358, -37.8359,
        -37.8359, -37.8359, -37.8359], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4998, -0.4998, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999,
        -0.5000, -0.5000], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5836, -54.5839, -54.5840, -54.5841, -54.5842, -54.5842, -54.5843,
        -54.5843, -54.5843, -54.5843], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 0 	 3 	 CHN 	 CNH 	 0.009647065578207964

PASSTHROUGH -- CHN DONE.
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6759, -99.6986, -99.7101, -99.7170, -99.7218, -99.7253, -99.7278,
        -99.7297, -99.7310, -99.7319, -99.7326, -99.7331, -99.7334, -99.7336,
        -99.7338, -99.7339, -99.7340, -99.7341, -99.7341, -99.7341, -99.7341,
        -99.7342, -99.7342, -99.7342, -99.7342], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.4191e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.4191e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7339, -99.7340, -99.7341, -99.7341, -99.7341, -99.7341, -99.7342,
        -99.7342, -99.7342, -99.7342], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 0 	 8 	 F 	 F 	 1.6956121398312272e-08

PASSTHROUGH -- F DONE.
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.9248, -188.9160, -188.6959, -188.5680, -188.4887, -188.4348,
        -188.3973, -188.3709, -188.3523, -188.3391, -188.3297, -188.3231,
        -188.3184, -188.3151, -188.3127, -188.3110, -188.3098, -188.3089,
        -188.3083, -188.3079, -188.3076, -188.3073, -188.3072, -188.3071,
        -188.3070], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.0036e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7417, -37.7815, -37.7998, -37.8105, -37.8178, -37.8230, -37.8268,
        -37.8294, -37.8313, -37.8327, -37.8336, -37.8343, -37.8348, -37.8351,
        -37.8353, -37.8355, -37.8356, -37.8357, -37.8358, -37.8358, -37.8358,
        -37.8358, -37.8359, -37.8359, -37.8359], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6494e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9521, -74.9923, -75.0153, -75.0296, -75.0394, -75.0464, -75.0515,
        -75.0552, -75.0578, -75.0597, -75.0610, -75.0620, -75.0627, -75.0631,
        -75.0635, -75.0637, -75.0639, -75.0640, -75.0641, -75.0641, -75.0642,
        -75.0642, -75.0642, -75.0642, -75.0642], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2453e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3110, -188.3098, -188.3089, -188.3083, -188.3079, -188.3076,
        -188.3073, -188.3072, -188.3071, -188.3070], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8355, -37.8356, -37.8357, -37.8358, -37.8358, -37.8358, -37.8358,
        -37.8359, -37.8359, -37.8359], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0637, -75.0639, -75.0640, -75.0641, -75.0641, -75.0642, -75.0642,
        -75.0642, -75.0642, -75.0642], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 0 	 4 	 CO2 	 CO2 	 0.018259017262845168

PASSTHROUGH -- CO2 DONE.
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.5244, -109.9009, -109.7508, -109.6713, -109.6204, -109.5855,
        -109.5612, -109.5443, -109.5324, -109.5241, -109.5182, -109.5141,
        -109.5113, -109.5093, -109.5079, -109.5069, -109.5062, -109.5057,
        -109.5054, -109.5052, -109.5050, -109.5049, -109.5048, -109.5047,
        -109.5047], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.4637e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4079, -54.4723, -54.5084, -54.5305, -54.5459, -54.5570, -54.5649,
        -54.5706, -54.5747, -54.5775, -54.5796, -54.5810, -54.5820, -54.5827,
        -54.5832, -54.5835, -54.5838, -54.5839, -54.5841, -54.5842, -54.5842,
        -54.5843, -54.5843, -54.5843, -54.5843], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.0687e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.5069, -109.5062, -109.5057, -109.5054, -109.5052, -109.5050,
        -109.5049, -109.5048, -109.5047, -109.5047], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5835, -54.5838, -54.5839, -54.5841, -54.5842, -54.5842, -54.5843,
        -54.5843, -54.5843, -54.5843], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 0 	 1 	 N2 	 N2 	 0.00018161375663054715

PASSTHROUGH -- N2 DONE.
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1226, -460.1533, -460.1640, -460.1700, -460.1741, -460.1770,
        -460.1791, -460.1806, -460.1816, -460.1824, -460.1829, -460.1833,
        -460.1836, -460.1838, -460.1839, -460.1840, -460.1841, -460.1841,
        -460.1842, -460.1842, -460.1842, -460.1842, -460.1842, -460.1842,
        -460.1842], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(0.0001, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.3888e-06, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1840, -460.1841, -460.1841, -460.1842, -460.1842, -460.1842,
        -460.1842, -460.1842, -460.1842, -460.1842], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 0 	 7 	 Cl 	 Cl 	 0.00030682129465345895

PASSTHROUGH -- Cl DONE.
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0366, -1.1177, -1.1387, -1.1493, -1.1561, -1.1606, -1.1638, -1.1660,
        -1.1675, -1.1686, -1.1694, -1.1699, -1.1703, -1.1705, -1.1707, -1.1708,
        -1.1709, -1.1710, -1.1710, -1.1711, -1.1711, -1.1711, -1.1711, -1.1711,
        -1.1711], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.9530e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.9059e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2519, -0.4400, -0.4653, -0.4772, -0.4845, -0.4893, -0.4925, -0.4948,
        -0.4963, -0.4974, -0.4982, -0.4987, -0.4991, -0.4994, -0.4995, -0.4997,
        -0.4998, -0.4998, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999,
        -0.5000], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.1981e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.9059e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1708, -1.1709, -1.1710, -1.1710, -1.1711, -1.1711, -1.1711, -1.1711,
        -1.1711, -1.1711], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4997, -0.4998, -0.4998, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999,
        -0.4999, -0.5000], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 0 	 0 	 H2 	 H2 	 2.2891372559187e-06

PASSTHROUGH -- H2 DONE.
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4669, -7.4736, -7.4757, -7.4767, -7.4776, -7.4784, -7.4789, -7.4789,
        -7.4786, -7.4785, -7.4784, -7.4784, -7.4784, -7.4784, -7.4785, -7.4785,
        -7.4785, -7.4785, -7.4785, -7.4785, -7.4785, -7.4785, -7.4785, -7.4785,
        -7.4785], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.3895e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.3895e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4785, -7.4785, -7.4785, -7.4785, -7.4785, -7.4785, -7.4785, -7.4785,
        -7.4785, -7.4785], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 0 	 10 	 Li 	 Li 	 5.5493993005583504e-08

PASSTHROUGH -- Li DONE.
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9692, -75.0153, -75.0326, -75.0422, -75.0486, -75.0532, -75.0564,
        -75.0587, -75.0603, -75.0615, -75.0623, -75.0629, -75.0633, -75.0636,
        -75.0638, -75.0639, -75.0640, -75.0641, -75.0641, -75.0642, -75.0642,
        -75.0642, -75.0642, -75.0642, -75.0642], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1232e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.1232e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0639, -75.0640, -75.0641, -75.0641, -75.0642, -75.0642, -75.0642,
        -75.0642, -75.0642, -75.0642], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 0 	 12 	 O 	 O 	 2.2073704653510047e-06

PASSTHROUGH -- O DONE.
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7394, -37.7765, -37.7960, -37.8077, -37.8157, -37.8215, -37.8257,
        -37.8287, -37.8308, -37.8323, -37.8334, -37.8341, -37.8346, -37.8350,
        -37.8353, -37.8355, -37.8356, -37.8357, -37.8357, -37.8358, -37.8358,
        -37.8358, -37.8359, -37.8359, -37.8359], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6717e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.6717e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8355, -37.8356, -37.8357, -37.8357, -37.8358, -37.8358, -37.8358,
        -37.8359, -37.8359, -37.8359], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 0 	 6 	 C 	 C 	 5.020798280960494e-06

PASSTHROUGH -- C DONE.
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4326, -54.5048, -54.5326, -54.5484, -54.5590, -54.5664, -54.5717,
        -54.5754, -54.5781, -54.5799, -54.5813, -54.5822, -54.5828, -54.5833,
        -54.5836, -54.5838, -54.5840, -54.5841, -54.5842, -54.5842, -54.5843,
        -54.5843, -54.5843, -54.5843, -54.5843], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8955e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.8955e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5838, -54.5840, -54.5841, -54.5842, -54.5842, -54.5843, -54.5843,
        -54.5843, -54.5843, -54.5843], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 0 	 11 	 N 	 N 	 5.587119025112046e-06

PASSTHROUGH -- N DONE.
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3297, -0.4618, -0.4775, -0.4851, -0.4898, -0.4929, -0.4951, -0.4965,
        -0.4976, -0.4983, -0.4988, -0.4991, -0.4994, -0.4996, -0.4997, -0.4998,
        -0.4998, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999, -0.5000,
        -0.5000], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.7178e-09, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.7178e-11, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4998, -0.4998, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999,
        -0.5000, -0.5000], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 0 	 9 	 H 	 H 	 5.522492786580693e-10

PASSTHROUGH -- H DONE.
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.5150, -920.4850, -920.4783, -920.4748, -920.4726, -920.4710,
        -920.4700, -920.4692, -920.4687, -920.4683, -920.4680, -920.4678,
        -920.4677, -920.4676, -920.4675, -920.4675, -920.4674, -920.4674,
        -920.4674, -920.4674, -920.4674, -920.4673, -920.4673, -920.4673,
        -920.4673], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.9388e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.8776e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1171, -460.1493, -460.1611, -460.1679, -460.1725, -460.1758,
        -460.1782, -460.1800, -460.1812, -460.1821, -460.1827, -460.1832,
        -460.1835, -460.1837, -460.1839, -460.1840, -460.1841, -460.1841,
        -460.1842, -460.1842, -460.1842, -460.1842, -460.1842, -460.1842,
        -460.1842], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(0.0001, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.0164e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4675, -920.4674, -920.4674, -920.4674, -920.4674, -920.4674,
        -920.4673, -920.4673, -920.4673, -920.4673], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1840, -460.1841, -460.1841, -460.1842, -460.1842, -460.1842,
        -460.1842, -460.1842, -460.1842, -460.1842], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 0 	 5 	 Cl2 	 Cl2 	 4.399137763896246e-06

PASSTHROUGH -- Cl2 DONE.
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e00)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e00/2022-11-03_10:00:47.012831_0.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e00/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 0 || ,[' rho : 3.172067', ' ae : 76.418313', ' E : 4.731359'] ,|| total loss 55.868983 || CHKPT: _0.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
NEXT EPOCH BEGINNING - PASSTHROUGH COMPLETE.
SETTING NETWORK TO TRAINING MODE.
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.4572, -109.8817, -109.7383, -109.6628, -109.6144, -109.5814,
        -109.5583, -109.5422, -109.5310, -109.5231, -109.5175, -109.5137,
        -109.5109, -109.5090, -109.5077, -109.5068, -109.5061, -109.5057,
        -109.5053, -109.5051, -109.5050, -109.5049, -109.5048, -109.5047,
        -109.5047], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.4637e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4334, -54.5055, -54.5330, -54.5487, -54.5592, -54.5666, -54.5718,
        -54.5755, -54.5781, -54.5800, -54.5813, -54.5822, -54.5828, -54.5833,
        -54.5836, -54.5838, -54.5840, -54.5841, -54.5842, -54.5842, -54.5843,
        -54.5843, -54.5843, -54.5843, -54.5843], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8927e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.5068, -109.5061, -109.5057, -109.5053, -109.5051, -109.5050,
        -109.5049, -109.5048, -109.5047, -109.5047], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5838, -54.5840, -54.5841, -54.5842, -54.5842, -54.5843, -54.5843,
        -54.5843, -54.5843, -54.5843], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 1 	 1 	 N2 	 N2 	 0.00018225201751005213

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.9221, -188.9145, -188.6947, -188.5670, -188.4878, -188.4340,
        -188.3965, -188.3702, -188.3516, -188.3384, -188.3291, -188.3225,
        -188.3178, -188.3145, -188.3121, -188.3104, -188.3092, -188.3083,
        -188.3077, -188.3073, -188.3070, -188.3067, -188.3066, -188.3065,
        -188.3064], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.0007e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7463, -37.7876, -37.8042, -37.8136, -37.8200, -37.8245, -37.8278,
        -37.8301, -37.8317, -37.8328, -37.8337, -37.8342, -37.8346, -37.8349,
        -37.8351, -37.8353, -37.8354, -37.8354, -37.8355, -37.8355, -37.8355,
        -37.8355, -37.8356, -37.8356, -37.8356], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8395e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9668, -75.0131, -75.0309, -75.0409, -75.0476, -75.0523, -75.0556,
        -75.0580, -75.0598, -75.0610, -75.0618, -75.0624, -75.0628, -75.0631,
        -75.0634, -75.0635, -75.0636, -75.0637, -75.0637, -75.0638, -75.0638,
        -75.0638, -75.0638, -75.0638, -75.0638], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4167e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3104, -188.3092, -188.3083, -188.3077, -188.3073, -188.3070,
        -188.3067, -188.3066, -188.3065, -188.3064], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8353, -37.8354, -37.8354, -37.8355, -37.8355, -37.8355, -37.8355,
        -37.8356, -37.8356, -37.8356], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0635, -75.0636, -75.0637, -75.0637, -75.0638, -75.0638, -75.0638,
        -75.0638, -75.0638, -75.0638], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 1 	 4 	 CO2 	 CO2 	 0.018198115158680868

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7459, -37.7871, -37.8037, -37.8132, -37.8196, -37.8242, -37.8274,
        -37.8297, -37.8313, -37.8325, -37.8333, -37.8339, -37.8343, -37.8346,
        -37.8348, -37.8349, -37.8350, -37.8351, -37.8351, -37.8352, -37.8352,
        -37.8352, -37.8352, -37.8352, -37.8352], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.0881e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.0881e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8349, -37.8350, -37.8351, -37.8351, -37.8352, -37.8352, -37.8352,
        -37.8352, -37.8352, -37.8352], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 1 	 6 	 C 	 C 	 6.4943652937079055e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3157, -0.4581, -0.4754, -0.4837, -0.4889, -0.4923, -0.4946, -0.4962,
        -0.4973, -0.4981, -0.4987, -0.4991, -0.4993, -0.4995, -0.4996, -0.4997,
        -0.4998, -0.4998, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999,
        -0.4999], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1965e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.1965e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4997, -0.4998, -0.4998, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999,
        -0.4999, -0.4999], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 1 	 9 	 H 	 H 	 1.2472199842296488e-09

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2501, -107.2786, -107.2443, -107.2373, -107.2321, -107.2292,
        -107.2281, -107.2281, -107.2285, -107.2289, -107.2292, -107.2295,
        -107.2298, -107.2301, -107.2303, -107.2306, -107.2308, -107.2310,
        -107.2312, -107.2314, -107.2315, -107.2316, -107.2317, -107.2318,
        -107.2319], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.4066e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6771, -99.7014, -99.7119, -99.7181, -99.7224, -99.7255, -99.7277,
        -99.7293, -99.7304, -99.7313, -99.7318, -99.7322, -99.7325, -99.7327,
        -99.7329, -99.7330, -99.7330, -99.7331, -99.7331, -99.7332, -99.7332,
        -99.7332, -99.7332, -99.7332, -99.7332], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.3111e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4618, -7.4683, -7.4719, -7.4739, -7.4752, -7.4762, -7.4770, -7.4779,
        -7.4783, -7.4782, -7.4780, -7.4779, -7.4778, -7.4778, -7.4778, -7.4779,
        -7.4779, -7.4779, -7.4779, -7.4779, -7.4779, -7.4779, -7.4779, -7.4780,
        -7.4780], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.4097e-09, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2306, -107.2308, -107.2310, -107.2312, -107.2314, -107.2315,
        -107.2316, -107.2317, -107.2318, -107.2319], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7330, -99.7330, -99.7331, -99.7331, -99.7332, -99.7332, -99.7332,
        -99.7332, -99.7332, -99.7332], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4779, -7.4779, -7.4779, -7.4779, -7.4779, -7.4779, -7.4779, -7.4779,
        -7.4780, -7.4780], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 1 	 2 	 FLi 	 LiF 	 0.009517960082611052

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1214, -460.1523, -460.1632, -460.1694, -460.1735, -460.1765,
        -460.1786, -460.1802, -460.1813, -460.1821, -460.1826, -460.1830,
        -460.1833, -460.1835, -460.1836, -460.1837, -460.1838, -460.1839,
        -460.1839, -460.1839, -460.1839, -460.1839, -460.1840, -460.1840,
        -460.1840], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(0.0001, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.3673e-06, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1837, -460.1838, -460.1839, -460.1839, -460.1839, -460.1839,
        -460.1839, -460.1840, -460.1840, -460.1840], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 1 	 7 	 Cl 	 Cl 	 0.0003021313329849112

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9574, -75.0035, -75.0236, -75.0352, -75.0430, -75.0486, -75.0526,
        -75.0554, -75.0575, -75.0589, -75.0600, -75.0607, -75.0612, -75.0616,
        -75.0618, -75.0620, -75.0621, -75.0622, -75.0623, -75.0623, -75.0623,
        -75.0624, -75.0624, -75.0624, -75.0624], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.8004e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.8004e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0620, -75.0621, -75.0622, -75.0623, -75.0623, -75.0623, -75.0624,
        -75.0624, -75.0624, -75.0624], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 1 	 12 	 O 	 O 	 5.662538766699019e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-94.0824, -93.5615, -93.4225, -93.3623, -93.3186, -93.2896, -93.2687,
        -93.2538, -93.2429, -93.2350, -93.2292, -93.2249, -93.2217, -93.2194,
        -93.2176, -93.2163, -93.2154, -93.2146, -93.2141, -93.2136, -93.2133,
        -93.2131, -93.2129, -93.2127, -93.2126], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.5843e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7571, -37.7964, -37.8098, -37.8172, -37.8221, -37.8256, -37.8280,
        -37.8297, -37.8309, -37.8318, -37.8324, -37.8328, -37.8331, -37.8334,
        -37.8335, -37.8336, -37.8337, -37.8337, -37.8338, -37.8338, -37.8338,
        -37.8338, -37.8338, -37.8338, -37.8338], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.2564e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3100, -0.4565, -0.4745, -0.4832, -0.4885, -0.4920, -0.4944, -0.4961,
        -0.4972, -0.4980, -0.4986, -0.4990, -0.4993, -0.4995, -0.4996, -0.4997,
        -0.4998, -0.4998, -0.4998, -0.4999, -0.4999, -0.4999, -0.4999, -0.4999,
        -0.4999], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3475e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4054, -54.4679, -54.5045, -54.5270, -54.5427, -54.5540, -54.5621,
        -54.5679, -54.5721, -54.5750, -54.5771, -54.5786, -54.5796, -54.5803,
        -54.5808, -54.5812, -54.5814, -54.5816, -54.5817, -54.5818, -54.5819,
        -54.5819, -54.5819, -54.5820, -54.5820], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.2112e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2163, -93.2154, -93.2146, -93.2141, -93.2136, -93.2133, -93.2131,
        -93.2129, -93.2127, -93.2126], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8336, -37.8337, -37.8337, -37.8338, -37.8338, -37.8338, -37.8338,
        -37.8338, -37.8338, -37.8338], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4997, -0.4998, -0.4998, -0.4998, -0.4999, -0.4999, -0.4999, -0.4999,
        -0.4999, -0.4999], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5812, -54.5814, -54.5816, -54.5817, -54.5818, -54.5819, -54.5819,
        -54.5819, -54.5820, -54.5820], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 1 	 3 	 CHN 	 CNH 	 0.009556214932410304

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6786, -99.7034, -99.7125, -99.7177, -99.7213, -99.7238, -99.7256,
        -99.7269, -99.7279, -99.7285, -99.7290, -99.7293, -99.7296, -99.7297,
        -99.7298, -99.7299, -99.7300, -99.7300, -99.7300, -99.7301, -99.7301,
        -99.7301, -99.7301, -99.7301, -99.7301], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6115e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.6115e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7299, -99.7300, -99.7300, -99.7300, -99.7301, -99.7301, -99.7301,
        -99.7301, -99.7301, -99.7301], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 1 	 8 	 F 	 F 	 3.3877109000961966e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0542, -1.1242, -1.1423, -1.1516, -1.1574, -1.1613, -1.1641, -1.1660,
        -1.1673, -1.1682, -1.1689, -1.1693, -1.1697, -1.1699, -1.1700, -1.1702,
        -1.1702, -1.1703, -1.1703, -1.1703, -1.1704, -1.1704, -1.1704, -1.1704,
        -1.1704], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.8441e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.6883e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2462, -0.4382, -0.4642, -0.4765, -0.4840, -0.4889, -0.4923, -0.4946,
        -0.4962, -0.4973, -0.4981, -0.4986, -0.4990, -0.4993, -0.4995, -0.4996,
        -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4999, -0.4999, -0.4999,
        -0.4999], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.5367e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.6883e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1702, -1.1702, -1.1703, -1.1703, -1.1703, -1.1704, -1.1704, -1.1704,
        -1.1704, -1.1704], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4996, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4999, -0.4999,
        -0.4999, -0.4999], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 1 	 0 	 H2 	 H2 	 3.177648398474841e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4037, -54.4655, -54.5023, -54.5249, -54.5407, -54.5521, -54.5603,
        -54.5662, -54.5704, -54.5733, -54.5754, -54.5769, -54.5779, -54.5787,
        -54.5792, -54.5795, -54.5798, -54.5800, -54.5801, -54.5802, -54.5802,
        -54.5803, -54.5803, -54.5803, -54.5804], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(6.1349e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.1349e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5795, -54.5798, -54.5800, -54.5801, -54.5802, -54.5802, -54.5803,
        -54.5803, -54.5803, -54.5804], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 1 	 11 	 N 	 N 	 1.837846793675785e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4613, -7.4684, -7.4717, -7.4735, -7.4747, -7.4756, -7.4765, -7.4772,
        -7.4775, -7.4772, -7.4770, -7.4769, -7.4769, -7.4769, -7.4769, -7.4770,
        -7.4770, -7.4770, -7.4770, -7.4770, -7.4770, -7.4771, -7.4771, -7.4771,
        -7.4771], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1028e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.1028e-09, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4770, -7.4770, -7.4770, -7.4770, -7.4770, -7.4770, -7.4771, -7.4771,
        -7.4771, -7.4771], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 1 	 10 	 Li 	 Li 	 2.3195924824369825e-07

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4648, -920.4423, -920.4375, -920.4350, -920.4335, -920.4324,
        -920.4317, -920.4312, -920.4308, -920.4305, -920.4303, -920.4302,
        -920.4301, -920.4301, -920.4300, -920.4300, -920.4300, -920.4299,
        -920.4299, -920.4299, -920.4299, -920.4299, -920.4299, -920.4299,
        -920.4299], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.8282e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.6564e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1080, -460.1374, -460.1471, -460.1526, -460.1563, -460.1589,
        -460.1607, -460.1621, -460.1630, -460.1637, -460.1642, -460.1646,
        -460.1648, -460.1650, -460.1651, -460.1652, -460.1652, -460.1653,
        -460.1653, -460.1653, -460.1653, -460.1653, -460.1653, -460.1653,
        -460.1654], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.1713e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.6881e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4300, -920.4300, -920.4299, -920.4299, -920.4299, -920.4299,
        -920.4299, -920.4299, -920.4299, -920.4299], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1652, -460.1652, -460.1653, -460.1653, -460.1653, -460.1653,
        -460.1653, -460.1653, -460.1653, -460.1654], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 1 	 5 	 Cl2 	 Cl2 	 5.095029075858148e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e01)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e01/2022-11-03_10:00:47.012831_1.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e01/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 1 || ,[' rho : 3.165021', ' ae : 76.257764', ' E : 3.862482'] ,|| total loss 55.750512 || CHKPT: _1.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1152, -460.1412, -460.1492, -460.1537, -460.1566, -460.1587,
        -460.1601, -460.1612, -460.1619, -460.1625, -460.1628, -460.1631,
        -460.1633, -460.1634, -460.1635, -460.1636, -460.1636, -460.1637,
        -460.1637, -460.1637, -460.1637, -460.1637, -460.1637, -460.1637,
        -460.1637], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.6080e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.6080e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1636, -460.1636, -460.1637, -460.1637, -460.1637, -460.1637,
        -460.1637, -460.1637, -460.1637, -460.1637], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 2 	 7 	 Cl 	 Cl 	 5.776760635633596e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4088, -54.4798, -54.5128, -54.5324, -54.5459, -54.5554, -54.5623,
        -54.5671, -54.5706, -54.5730, -54.5748, -54.5760, -54.5768, -54.5774,
        -54.5779, -54.5782, -54.5784, -54.5785, -54.5786, -54.5787, -54.5787,
        -54.5788, -54.5788, -54.5788, -54.5788], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.1743e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.1743e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5782, -54.5784, -54.5785, -54.5786, -54.5787, -54.5787, -54.5788,
        -54.5788, -54.5788, -54.5788], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 2 	 11 	 N 	 N 	 2.5309986210559402e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2152, -107.2625, -107.2286, -107.2241, -107.2201, -107.2178,
        -107.2171, -107.2175, -107.2182, -107.2189, -107.2195, -107.2199,
        -107.2203, -107.2206, -107.2210, -107.2213, -107.2215, -107.2218,
        -107.2220, -107.2222, -107.2223, -107.2224, -107.2225, -107.2226,
        -107.2227], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.3067e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6682, -99.6916, -99.7026, -99.7091, -99.7136, -99.7169, -99.7192,
        -99.7210, -99.7222, -99.7231, -99.7237, -99.7241, -99.7244, -99.7246,
        -99.7248, -99.7249, -99.7250, -99.7250, -99.7251, -99.7251, -99.7251,
        -99.7251, -99.7251, -99.7251, -99.7252], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.3535e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4632, -7.4705, -7.4730, -7.4743, -7.4752, -7.4761, -7.4769, -7.4771,
        -7.4769, -7.4767, -7.4766, -7.4766, -7.4766, -7.4766, -7.4766, -7.4767,
        -7.4767, -7.4767, -7.4767, -7.4767, -7.4767, -7.4767, -7.4767, -7.4767,
        -7.4767], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.9463e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2213, -107.2215, -107.2218, -107.2220, -107.2222, -107.2223,
        -107.2224, -107.2225, -107.2226, -107.2227], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7249, -99.7250, -99.7250, -99.7251, -99.7251, -99.7251, -99.7251,
        -99.7251, -99.7251, -99.7252], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4767, -7.4767, -7.4767, -7.4767, -7.4767, -7.4767, -7.4767, -7.4767,
        -7.4767, -7.4767], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 2 	 2 	 FLi 	 LiF 	 0.009507344799039311

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9471, -74.9910, -75.0127, -75.0256, -75.0344, -75.0407, -75.0452,
        -75.0485, -75.0508, -75.0525, -75.0537, -75.0545, -75.0551, -75.0555,
        -75.0558, -75.0560, -75.0562, -75.0563, -75.0564, -75.0564, -75.0564,
        -75.0565, -75.0565, -75.0565, -75.0565], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2908e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.2908e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0560, -75.0562, -75.0563, -75.0564, -75.0564, -75.0564, -75.0565,
        -75.0565, -75.0565, -75.0565], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 2 	 12 	 O 	 O 	 2.7275364050354033e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-94.0981, -93.5639, -93.4205, -93.3593, -93.3145, -93.2849, -93.2636,
        -93.2484, -93.2373, -93.2293, -93.2234, -93.2190, -93.2158, -93.2135,
        -93.2117, -93.2104, -93.2094, -93.2087, -93.2081, -93.2077, -93.2074,
        -93.2071, -93.2070, -93.2068, -93.2067], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.5314e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7428, -37.7840, -37.8002, -37.8095, -37.8157, -37.8201, -37.8232,
        -37.8254, -37.8270, -37.8281, -37.8289, -37.8295, -37.8299, -37.8301,
        -37.8303, -37.8305, -37.8306, -37.8306, -37.8307, -37.8307, -37.8307,
        -37.8307, -37.8308, -37.8308, -37.8308], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(6.9176e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2801, -0.4481, -0.4698, -0.4801, -0.4863, -0.4905, -0.4933, -0.4953,
        -0.4967, -0.4976, -0.4983, -0.4988, -0.4991, -0.4993, -0.4995, -0.4996,
        -0.4997, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4998, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.0992e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4299, -54.5012, -54.5281, -54.5433, -54.5535, -54.5606, -54.5657,
        -54.5693, -54.5718, -54.5736, -54.5749, -54.5757, -54.5764, -54.5768,
        -54.5771, -54.5773, -54.5775, -54.5776, -54.5776, -54.5777, -54.5777,
        -54.5777, -54.5778, -54.5778, -54.5778], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.6292e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2104, -93.2094, -93.2087, -93.2081, -93.2077, -93.2074, -93.2071,
        -93.2070, -93.2068, -93.2067], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8305, -37.8306, -37.8306, -37.8307, -37.8307, -37.8307, -37.8307,
        -37.8308, -37.8308, -37.8308], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4996, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4998,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5773, -54.5775, -54.5776, -54.5776, -54.5777, -54.5777, -54.5777,
        -54.5778, -54.5778, -54.5778], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 2 	 3 	 CHN 	 CNH 	 0.009422667978557824

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6665, -99.6896, -99.7007, -99.7073, -99.7119, -99.7152, -99.7176,
        -99.7193, -99.7206, -99.7215, -99.7221, -99.7225, -99.7229, -99.7231,
        -99.7232, -99.7233, -99.7234, -99.7235, -99.7235, -99.7235, -99.7236,
        -99.7236, -99.7236, -99.7236, -99.7236], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1554e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.1554e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7233, -99.7234, -99.7235, -99.7235, -99.7235, -99.7236, -99.7236,
        -99.7236, -99.7236, -99.7236], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 2 	 8 	 F 	 F 	 2.4876249915327603e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.4844, -188.7332, -188.5709, -188.4774, -188.4198, -188.3807,
        -188.3534, -188.3343, -188.3207, -188.3112, -188.3044, -188.2996,
        -188.2961, -188.2937, -188.2920, -188.2907, -188.2898, -188.2892,
        -188.2888, -188.2884, -188.2882, -188.2880, -188.2879, -188.2878,
        -188.2878], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.9746e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7586, -37.7962, -37.8086, -37.8153, -37.8198, -37.8229, -37.8252,
        -37.8267, -37.8278, -37.8286, -37.8291, -37.8295, -37.8298, -37.8300,
        -37.8301, -37.8302, -37.8303, -37.8303, -37.8304, -37.8304, -37.8304,
        -37.8304, -37.8304, -37.8304, -37.8304], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.3346e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9602, -75.0061, -75.0235, -75.0332, -75.0397, -75.0443, -75.0475,
        -75.0499, -75.0515, -75.0527, -75.0536, -75.0541, -75.0546, -75.0548,
        -75.0550, -75.0552, -75.0553, -75.0554, -75.0554, -75.0554, -75.0555,
        -75.0555, -75.0555, -75.0555, -75.0555], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5145e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.2907, -188.2898, -188.2892, -188.2888, -188.2884, -188.2882,
        -188.2880, -188.2879, -188.2878, -188.2878], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8302, -37.8303, -37.8303, -37.8304, -37.8304, -37.8304, -37.8304,
        -37.8304, -37.8304, -37.8304], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0552, -75.0553, -75.0554, -75.0554, -75.0554, -75.0555, -75.0555,
        -75.0555, -75.0555, -75.0555], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 2 	 4 	 CO2 	 CO2 	 0.017789837400497263

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4641, -7.4710, -7.4732, -7.4744, -7.4752, -7.4761, -7.4767, -7.4768,
        -7.4765, -7.4763, -7.4763, -7.4763, -7.4763, -7.4763, -7.4763, -7.4763,
        -7.4764, -7.4764, -7.4764, -7.4764, -7.4764, -7.4764, -7.4764, -7.4764,
        -7.4764], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.9388e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.9388e-09, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4763, -7.4764, -7.4764, -7.4764, -7.4764, -7.4764, -7.4764, -7.4764,
        -7.4764, -7.4764], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 2 	 10 	 Li 	 Li 	 6.334755118138942e-07

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2827, -0.4489, -0.4702, -0.4803, -0.4865, -0.4906, -0.4934, -0.4953,
        -0.4967, -0.4976, -0.4983, -0.4987, -0.4991, -0.4993, -0.4994, -0.4996,
        -0.4996, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.1574e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.1574e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 2 	 9 	 H 	 H 	 1.0350729814579223e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7439, -37.7850, -37.8006, -37.8094, -37.8154, -37.8195, -37.8225,
        -37.8246, -37.8261, -37.8272, -37.8279, -37.8285, -37.8288, -37.8291,
        -37.8293, -37.8294, -37.8295, -37.8296, -37.8296, -37.8296, -37.8297,
        -37.8297, -37.8297, -37.8297, -37.8297], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.4782e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.4782e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8294, -37.8295, -37.8296, -37.8296, -37.8296, -37.8297, -37.8297,
        -37.8297, -37.8297, -37.8297], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 2 	 6 	 C 	 C 	 2.7306002531383468e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.4631, -109.8725, -109.7272, -109.6505, -109.6014, -109.5678,
        -109.5444, -109.5280, -109.5166, -109.5085, -109.5029, -109.4990,
        -109.4962, -109.4943, -109.4929, -109.4920, -109.4913, -109.4909,
        -109.4905, -109.4903, -109.4901, -109.4900, -109.4900, -109.4899,
        -109.4899], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.4196e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4006, -54.4655, -54.5013, -54.5231, -54.5383, -54.5492, -54.5570,
        -54.5626, -54.5666, -54.5694, -54.5714, -54.5728, -54.5738, -54.5745,
        -54.5750, -54.5753, -54.5756, -54.5758, -54.5759, -54.5760, -54.5760,
        -54.5761, -54.5761, -54.5761, -54.5761], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2890e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4920, -109.4913, -109.4909, -109.4905, -109.4903, -109.4901,
        -109.4900, -109.4900, -109.4899, -109.4899], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5753, -54.5756, -54.5758, -54.5759, -54.5760, -54.5760, -54.5761,
        -54.5761, -54.5761, -54.5761], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 2 	 1 	 N2 	 N2 	 0.00016186489335917172

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0186, -1.1098, -1.1334, -1.1454, -1.1530, -1.1581, -1.1617, -1.1642,
        -1.1659, -1.1671, -1.1680, -1.1686, -1.1690, -1.1693, -1.1695, -1.1696,
        -1.1697, -1.1698, -1.1698, -1.1699, -1.1699, -1.1699, -1.1699, -1.1699,
        -1.1699], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7540e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.5080e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2488, -0.4389, -0.4646, -0.4767, -0.4841, -0.4889, -0.4923, -0.4945,
        -0.4961, -0.4972, -0.4980, -0.4985, -0.4989, -0.4992, -0.4994, -0.4995,
        -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.9002e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.5080e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1696, -1.1697, -1.1698, -1.1698, -1.1699, -1.1699, -1.1699, -1.1699,
        -1.1699, -1.1699], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4995, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 2 	 0 	 H2 	 H2 	 3.6612515433697753e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4379, -920.4082, -920.4014, -920.3979, -920.3957, -920.3941,
        -920.3931, -920.3923, -920.3918, -920.3914, -920.3911, -920.3909,
        -920.3908, -920.3907, -920.3906, -920.3906, -920.3905, -920.3905,
        -920.3905, -920.3905, -920.3905, -920.3904, -920.3904, -920.3904,
        -920.3904], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.6786e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.3572e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0861, -460.1161, -460.1263, -460.1321, -460.1359, -460.1387,
        -460.1407, -460.1421, -460.1431, -460.1439, -460.1444, -460.1447,
        -460.1450, -460.1452, -460.1453, -460.1454, -460.1454, -460.1455,
        -460.1455, -460.1455, -460.1456, -460.1456, -460.1456, -460.1456,
        -460.1456], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(6.7856e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.3579e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.3906, -920.3905, -920.3905, -920.3905, -920.3905, -920.3905,
        -920.3904, -920.3904, -920.3904, -920.3904], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1454, -460.1454, -460.1455, -460.1455, -460.1455, -460.1456,
        -460.1456, -460.1456, -460.1456, -460.1456], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 2 	 5 	 Cl2 	 Cl2 	 5.258097035971717e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e02)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e02/2022-11-03_10:00:47.012831_2.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e02/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 2 || ,[' rho : 3.134855', ' ae : 75.502230', ' E : 3.146465'] ,|| total loss 55.199082 || CHKPT: _2.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4086, -54.4805, -54.5125, -54.5314, -54.5442, -54.5533, -54.5598,
        -54.5645, -54.5678, -54.5701, -54.5717, -54.5729, -54.5737, -54.5742,
        -54.5746, -54.5749, -54.5751, -54.5753, -54.5754, -54.5754, -54.5755,
        -54.5755, -54.5755, -54.5755, -54.5756], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3820e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.3820e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5749, -54.5751, -54.5753, -54.5754, -54.5754, -54.5755, -54.5755,
        -54.5755, -54.5755, -54.5756], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 3 	 11 	 N 	 N 	 4.36406180375658e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2910, -107.2812, -107.2452, -107.2331, -107.2254, -107.2210,
        -107.2188, -107.2176, -107.2169, -107.2166, -107.2164, -107.2163,
        -107.2163, -107.2164, -107.2165, -107.2167, -107.2169, -107.2170,
        -107.2172, -107.2173, -107.2174, -107.2175, -107.2176, -107.2176,
        -107.2177], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.2511e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6628, -99.6850, -99.6964, -99.7033, -99.7081, -99.7116, -99.7141,
        -99.7159, -99.7173, -99.7182, -99.7189, -99.7194, -99.7197, -99.7199,
        -99.7201, -99.7202, -99.7203, -99.7204, -99.7204, -99.7204, -99.7204,
        -99.7205, -99.7205, -99.7205, -99.7205], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.9479e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4636, -7.4705, -7.4728, -7.4739, -7.4748, -7.4757, -7.4763, -7.4763,
        -7.4761, -7.4759, -7.4758, -7.4758, -7.4758, -7.4759, -7.4759, -7.4759,
        -7.4759, -7.4759, -7.4760, -7.4760, -7.4760, -7.4760, -7.4760, -7.4760,
        -7.4760], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.6545e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2167, -107.2169, -107.2170, -107.2172, -107.2173, -107.2174,
        -107.2175, -107.2176, -107.2176, -107.2177], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7202, -99.7203, -99.7204, -99.7204, -99.7204, -99.7204, -99.7205,
        -99.7205, -99.7205, -99.7205], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4759, -7.4759, -7.4759, -7.4760, -7.4760, -7.4760, -7.4760, -7.4760,
        -7.4760, -7.4760], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 3 	 2 	 FLi 	 LiF 	 0.009466950320382216

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2156, -0.4285, -0.4588, -0.4730, -0.4816, -0.4872, -0.4911, -0.4937,
        -0.4955, -0.4968, -0.4977, -0.4983, -0.4988, -0.4991, -0.4993, -0.4994,
        -0.4995, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.7587e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.7587e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4994, -0.4995, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4998,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 3 	 9 	 H 	 H 	 1.4044128612485998e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4307, -920.4029, -920.3967, -920.3935, -920.3915, -920.3901,
        -920.3891, -920.3884, -920.3879, -920.3875, -920.3873, -920.3871,
        -920.3870, -920.3869, -920.3868, -920.3868, -920.3868, -920.3867,
        -920.3867, -920.3867, -920.3867, -920.3867, -920.3867, -920.3867,
        -920.3867], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.6546e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.3091e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0951, -460.1211, -460.1292, -460.1336, -460.1366, -460.1386,
        -460.1401, -460.1412, -460.1419, -460.1424, -460.1428, -460.1431,
        -460.1433, -460.1434, -460.1435, -460.1436, -460.1436, -460.1436,
        -460.1437, -460.1437, -460.1437, -460.1437, -460.1437, -460.1437,
        -460.1437], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.0240e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.3112e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.3868, -920.3868, -920.3867, -920.3867, -920.3867, -920.3867,
        -920.3867, -920.3867, -920.3867, -920.3867], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1436, -460.1436, -460.1436, -460.1437, -460.1437, -460.1437,
        -460.1437, -460.1437, -460.1437, -460.1437], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 3 	 5 	 Cl2 	 Cl2 	 5.2863843719213026e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6694, -99.6939, -99.7029, -99.7081, -99.7116, -99.7141, -99.7159,
        -99.7171, -99.7181, -99.7187, -99.7192, -99.7195, -99.7197, -99.7199,
        -99.7200, -99.7201, -99.7201, -99.7202, -99.7202, -99.7202, -99.7202,
        -99.7202, -99.7202, -99.7203, -99.7203], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.0029e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.0029e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7201, -99.7201, -99.7202, -99.7202, -99.7202, -99.7202, -99.7202,
        -99.7202, -99.7203, -99.7203], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 3 	 8 	 F 	 F 	 4.355431047319836e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0980, -460.1227, -460.1302, -460.1343, -460.1370, -460.1389,
        -460.1403, -460.1412, -460.1419, -460.1424, -460.1428, -460.1430,
        -460.1432, -460.1433, -460.1434, -460.1434, -460.1435, -460.1435,
        -460.1435, -460.1435, -460.1435, -460.1436, -460.1436, -460.1436,
        -460.1436], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.1507e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.1507e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1434, -460.1435, -460.1435, -460.1435, -460.1435, -460.1435,
        -460.1436, -460.1436, -460.1436, -460.1436], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 3 	 7 	 Cl 	 Cl 	 4.603446388904901e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0118, -1.1072, -1.1317, -1.1443, -1.1522, -1.1576, -1.1613, -1.1639,
        -1.1657, -1.1669, -1.1678, -1.1684, -1.1689, -1.1692, -1.1694, -1.1695,
        -1.1696, -1.1697, -1.1698, -1.1698, -1.1698, -1.1698, -1.1699, -1.1699,
        -1.1699], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7415e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.4830e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2524, -0.4400, -0.4652, -0.4771, -0.4843, -0.4891, -0.4924, -0.4946,
        -0.4962, -0.4973, -0.4980, -0.4985, -0.4989, -0.4992, -0.4994, -0.4995,
        -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.8936e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.4830e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1695, -1.1696, -1.1697, -1.1698, -1.1698, -1.1698, -1.1698, -1.1699,
        -1.1699, -1.1699], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4995, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4998,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 3 	 0 	 H2 	 H2 	 3.737602950439391e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7394, -37.7804, -37.7971, -37.8067, -37.8132, -37.8178, -37.8211,
        -37.8234, -37.8251, -37.8262, -37.8271, -37.8277, -37.8281, -37.8284,
        -37.8286, -37.8287, -37.8288, -37.8289, -37.8289, -37.8290, -37.8290,
        -37.8290, -37.8290, -37.8290, -37.8290], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.5925e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.5925e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8287, -37.8288, -37.8289, -37.8289, -37.8290, -37.8290, -37.8290,
        -37.8290, -37.8290, -37.8290], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 3 	 6 	 C 	 C 	 3.0860322110253366e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.6661, -109.8964, -109.7457, -109.6632, -109.6100, -109.5736,
        -109.5482, -109.5305, -109.5181, -109.5095, -109.5034, -109.4992,
        -109.4962, -109.4941, -109.4927, -109.4916, -109.4909, -109.4904,
        -109.4901, -109.4898, -109.4897, -109.4895, -109.4895, -109.4894,
        -109.4894], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.4108e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4364, -54.5056, -54.5305, -54.5444, -54.5537, -54.5602, -54.5648,
        -54.5680, -54.5703, -54.5719, -54.5730, -54.5738, -54.5744, -54.5748,
        -54.5750, -54.5752, -54.5754, -54.5755, -54.5755, -54.5756, -54.5756,
        -54.5756, -54.5756, -54.5757, -54.5757], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3402e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4916, -109.4909, -109.4904, -109.4901, -109.4898, -109.4897,
        -109.4895, -109.4895, -109.4894, -109.4894], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5752, -54.5754, -54.5755, -54.5755, -54.5756, -54.5756, -54.5756,
        -54.5756, -54.5757, -54.5757], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 3 	 1 	 N2 	 N2 	 0.0001569921593359923

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9422, -74.9804, -75.0035, -75.0180, -75.0281, -75.0353, -75.0406,
        -75.0444, -75.0471, -75.0491, -75.0505, -75.0514, -75.0521, -75.0526,
        -75.0530, -75.0532, -75.0534, -75.0535, -75.0536, -75.0537, -75.0537,
        -75.0537, -75.0537, -75.0538, -75.0538], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.0232e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.0232e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0532, -75.0534, -75.0535, -75.0536, -75.0537, -75.0537, -75.0537,
        -75.0537, -75.0538, -75.0538], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 3 	 12 	 O 	 O 	 4.286928644372014e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.7785, -188.8449, -188.6424, -188.5249, -188.4522, -188.4028,
        -188.3684, -188.3442, -188.3271, -188.3150, -188.3064, -188.3003,
        -188.2960, -188.2930, -188.2908, -188.2892, -188.2881, -188.2873,
        -188.2867, -188.2863, -188.2861, -188.2858, -188.2857, -188.2856,
        -188.2855], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.9590e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7480, -37.7884, -37.8029, -37.8110, -37.8164, -37.8202, -37.8228,
        -37.8248, -37.8261, -37.8271, -37.8277, -37.8282, -37.8285, -37.8288,
        -37.8289, -37.8291, -37.8291, -37.8292, -37.8292, -37.8293, -37.8293,
        -37.8293, -37.8293, -37.8293, -37.8293], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.0482e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9650, -75.0095, -75.0254, -75.0341, -75.0399, -75.0440, -75.0469,
        -75.0490, -75.0505, -75.0515, -75.0523, -75.0528, -75.0532, -75.0534,
        -75.0536, -75.0537, -75.0538, -75.0539, -75.0539, -75.0540, -75.0540,
        -75.0540, -75.0540, -75.0540, -75.0540], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.9134e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.2892, -188.2881, -188.2873, -188.2867, -188.2863, -188.2861,
        -188.2858, -188.2857, -188.2856, -188.2855], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8291, -37.8291, -37.8292, -37.8292, -37.8293, -37.8293, -37.8293,
        -37.8293, -37.8293, -37.8293], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0537, -75.0538, -75.0539, -75.0539, -75.0540, -75.0540, -75.0540,
        -75.0540, -75.0540, -75.0540], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 3 	 4 	 CO2 	 CO2 	 0.01754892844003353

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4639, -7.4707, -7.4729, -7.4740, -7.4749, -7.4758, -7.4763, -7.4763,
        -7.4760, -7.4759, -7.4758, -7.4758, -7.4758, -7.4759, -7.4759, -7.4759,
        -7.4759, -7.4760, -7.4760, -7.4760, -7.4760, -7.4760, -7.4760, -7.4760,
        -7.4760], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.6421e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(4.6421e-09, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4759, -7.4759, -7.4760, -7.4760, -7.4760, -7.4760, -7.4760, -7.4760,
        -7.4760, -7.4760], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 3 	 10 	 Li 	 Li 	 1.0045892906387497e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-93.9483, -93.5007, -93.3848, -93.3322, -93.2952, -93.2705, -93.2527,
        -93.2400, -93.2308, -93.2240, -93.2191, -93.2155, -93.2128, -93.2108,
        -93.2093, -93.2082, -93.2074, -93.2067, -93.2063, -93.2059, -93.2056,
        -93.2054, -93.2053, -93.2051, -93.2050], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.4480e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7357, -37.7753, -37.7934, -37.8040, -37.8113, -37.8165, -37.8202,
        -37.8228, -37.8247, -37.8261, -37.8270, -37.8277, -37.8282, -37.8285,
        -37.8287, -37.8289, -37.8290, -37.8291, -37.8291, -37.8292, -37.8292,
        -37.8292, -37.8292, -37.8292, -37.8292], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.2617e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2248, -0.4315, -0.4605, -0.4741, -0.4823, -0.4877, -0.4914, -0.4940,
        -0.4957, -0.4969, -0.4978, -0.4984, -0.4988, -0.4991, -0.4993, -0.4994,
        -0.4995, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.5022e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4247, -54.4965, -54.5242, -54.5400, -54.5506, -54.5580, -54.5633,
        -54.5670, -54.5697, -54.5715, -54.5728, -54.5738, -54.5744, -54.5749,
        -54.5752, -54.5754, -54.5756, -54.5757, -54.5758, -54.5758, -54.5758,
        -54.5759, -54.5759, -54.5759, -54.5759], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2976e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2082, -93.2074, -93.2067, -93.2063, -93.2059, -93.2056, -93.2054,
        -93.2053, -93.2051, -93.2050], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8289, -37.8290, -37.8291, -37.8291, -37.8292, -37.8292, -37.8292,
        -37.8292, -37.8292, -37.8292], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4994, -0.4995, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4998,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5754, -54.5756, -54.5757, -54.5758, -54.5758, -54.5758, -54.5759,
        -54.5759, -54.5759, -54.5759], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 3 	 3 	 CHN 	 CNH 	 0.009258259465509167

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e03)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e03/2022-11-03_10:00:47.012831_0.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e03/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 3 || ,[' rho : 3.114304', ' ae : 75.045321', ' E : 3.421424'] ,|| total loss 54.863420 || CHKPT: _0.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0894, -460.1187, -460.1285, -460.1340, -460.1377, -460.1403,
        -460.1422, -460.1436, -460.1445, -460.1452, -460.1457, -460.1460,
        -460.1463, -460.1464, -460.1466, -460.1466, -460.1467, -460.1467,
        -460.1468, -460.1468, -460.1468, -460.1468, -460.1468, -460.1468,
        -460.1468], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7724e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.7724e-09, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1466, -460.1467, -460.1467, -460.1468, -460.1468, -460.1468,
        -460.1468, -460.1468, -460.1468, -460.1468], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 4 	 7 	 Cl 	 Cl 	 3.209494940962487e-07

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9450, -74.9886, -75.0102, -75.0230, -75.0318, -75.0381, -75.0426,
        -75.0459, -75.0482, -75.0499, -75.0511, -75.0519, -75.0525, -75.0529,
        -75.0532, -75.0534, -75.0536, -75.0537, -75.0538, -75.0538, -75.0538,
        -75.0539, -75.0539, -75.0539, -75.0539], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.9720e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.9720e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0534, -75.0536, -75.0537, -75.0538, -75.0538, -75.0538, -75.0539,
        -75.0539, -75.0539, -75.0539], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 4 	 12 	 O 	 O 	 4.202634976897685e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0045, -1.1043, -1.1299, -1.1431, -1.1514, -1.1570, -1.1608, -1.1636,
        -1.1654, -1.1668, -1.1677, -1.1683, -1.1688, -1.1691, -1.1693, -1.1695,
        -1.1696, -1.1697, -1.1697, -1.1698, -1.1698, -1.1698, -1.1698, -1.1698,
        -1.1698], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7410e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.4819e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3168, -0.4582, -0.4754, -0.4837, -0.4888, -0.4922, -0.4945, -0.4961,
        -0.4972, -0.4980, -0.4985, -0.4989, -0.4992, -0.4993, -0.4995, -0.4996,
        -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7346e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.4819e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1695, -1.1696, -1.1697, -1.1697, -1.1698, -1.1698, -1.1698, -1.1698,
        -1.1698, -1.1698], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 4 	 0 	 H2 	 H2 	 3.82499343700586e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-93.8358, -93.4526, -93.3580, -93.3123, -93.2816, -93.2607, -93.2458,
        -93.2350, -93.2273, -93.2216, -93.2174, -93.2143, -93.2120, -93.2103,
        -93.2090, -93.2080, -93.2073, -93.2067, -93.2063, -93.2060, -93.2058,
        -93.2056, -93.2054, -93.2053, -93.2052], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.4277e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7364, -37.7764, -37.7942, -37.8046, -37.8117, -37.8167, -37.8203,
        -37.8229, -37.8247, -37.8260, -37.8270, -37.8276, -37.8281, -37.8284,
        -37.8286, -37.8288, -37.8289, -37.8290, -37.8290, -37.8291, -37.8291,
        -37.8291, -37.8291, -37.8291, -37.8291], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.4479e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2652, -0.4438, -0.4673, -0.4785, -0.4852, -0.4897, -0.4928, -0.4949,
        -0.4964, -0.4974, -0.4981, -0.4986, -0.4990, -0.4992, -0.4994, -0.4995,
        -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4998, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.6302e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4413, -54.5090, -54.5329, -54.5462, -54.5550, -54.5612, -54.5655,
        -54.5686, -54.5707, -54.5722, -54.5733, -54.5741, -54.5746, -54.5750,
        -54.5752, -54.5754, -54.5755, -54.5756, -54.5757, -54.5757, -54.5758,
        -54.5758, -54.5758, -54.5758, -54.5758], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3081e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2080, -93.2073, -93.2067, -93.2063, -93.2060, -93.2058, -93.2056,
        -93.2054, -93.2053, -93.2052], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8288, -37.8289, -37.8290, -37.8290, -37.8291, -37.8291, -37.8291,
        -37.8291, -37.8291, -37.8291], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4995, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4998,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5754, -54.5755, -54.5756, -54.5757, -54.5757, -54.5758, -54.5758,
        -54.5758, -54.5758, -54.5758], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 4 	 3 	 CHN 	 CNH 	 0.009220552635199546

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7486, -37.7887, -37.8030, -37.8110, -37.8163, -37.8201, -37.8227,
        -37.8246, -37.8259, -37.8269, -37.8275, -37.8280, -37.8283, -37.8286,
        -37.8287, -37.8288, -37.8289, -37.8290, -37.8290, -37.8290, -37.8291,
        -37.8291, -37.8291, -37.8291, -37.8291], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.4254e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.4254e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8288, -37.8289, -37.8290, -37.8290, -37.8290, -37.8291, -37.8291,
        -37.8291, -37.8291, -37.8291], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 4 	 6 	 C 	 C 	 3.048195879112047e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.6464, -188.7940, -188.6098, -188.5030, -188.4372, -188.3925,
        -188.3613, -188.3394, -188.3239, -188.3129, -188.3052, -188.2997,
        -188.2958, -188.2930, -188.2910, -188.2896, -188.2886, -188.2879,
        -188.2874, -188.2870, -188.2867, -188.2865, -188.2864, -188.2863,
        -188.2862], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.9485e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7365, -37.7766, -37.7943, -37.8047, -37.8117, -37.8167, -37.8203,
        -37.8229, -37.8247, -37.8260, -37.8269, -37.8276, -37.8280, -37.8283,
        -37.8286, -37.8287, -37.8288, -37.8289, -37.8290, -37.8290, -37.8290,
        -37.8290, -37.8291, -37.8291, -37.8291], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.5293e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9427, -74.9817, -75.0047, -75.0189, -75.0288, -75.0359, -75.0410,
        -75.0447, -75.0474, -75.0493, -75.0507, -75.0516, -75.0523, -75.0528,
        -75.0531, -75.0534, -75.0535, -75.0537, -75.0537, -75.0538, -75.0538,
        -75.0539, -75.0539, -75.0539, -75.0539], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.9790e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.2896, -188.2886, -188.2879, -188.2874, -188.2870, -188.2867,
        -188.2865, -188.2864, -188.2863, -188.2862], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8287, -37.8288, -37.8289, -37.8290, -37.8290, -37.8290, -37.8290,
        -37.8291, -37.8291, -37.8291], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0534, -75.0535, -75.0537, -75.0537, -75.0538, -75.0538, -75.0539,
        -75.0539, -75.0539, -75.0539], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 4 	 4 	 CO2 	 CO2 	 0.017398351421711276

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4279, -920.4049, -920.3999, -920.3974, -920.3957, -920.3946,
        -920.3939, -920.3933, -920.3929, -920.3927, -920.3925, -920.3923,
        -920.3922, -920.3922, -920.3921, -920.3921, -920.3921, -920.3920,
        -920.3920, -920.3920, -920.3920, -920.3920, -920.3920, -920.3920,
        -920.3920], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.6452e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.2903e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0864, -460.1165, -460.1268, -460.1326, -460.1366, -460.1393,
        -460.1414, -460.1428, -460.1438, -460.1446, -460.1451, -460.1454,
        -460.1457, -460.1459, -460.1460, -460.1461, -460.1462, -460.1462,
        -460.1462, -460.1463, -460.1463, -460.1463, -460.1463, -460.1463,
        -460.1463], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.4801e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.2907e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.3921, -920.3921, -920.3920, -920.3920, -920.3920, -920.3920,
        -920.3920, -920.3920, -920.3920, -920.3920], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1461, -460.1462, -460.1462, -460.1462, -460.1463, -460.1463,
        -460.1463, -460.1463, -460.1463, -460.1463], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 4 	 5 	 Cl2 	 Cl2 	 5.4913307572982e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2744, -0.4465, -0.4688, -0.4794, -0.4859, -0.4902, -0.4931, -0.4951,
        -0.4965, -0.4975, -0.4982, -0.4987, -0.4990, -0.4992, -0.4994, -0.4995,
        -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.5119e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.5119e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4995, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 4 	 9 	 H 	 H 	 1.5030362463851245e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4595, -7.4662, -7.4697, -7.4717, -7.4730, -7.4739, -7.4748, -7.4757,
        -7.4760, -7.4759, -7.4756, -7.4755, -7.4755, -7.4755, -7.4755, -7.4756,
        -7.4756, -7.4756, -7.4756, -7.4756, -7.4756, -7.4756, -7.4757, -7.4757,
        -7.4757], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(6.2623e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.2623e-09, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4756, -7.4756, -7.4756, -7.4756, -7.4756, -7.4756, -7.4756, -7.4757,
        -7.4757, -7.4757], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 4 	 10 	 Li 	 Li 	 1.3503384443874042e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6627, -99.6830, -99.6949, -99.7022, -99.7073, -99.7111, -99.7138,
        -99.7158, -99.7173, -99.7183, -99.7190, -99.7196, -99.7199, -99.7202,
        -99.7204, -99.7205, -99.7206, -99.7206, -99.7207, -99.7207, -99.7207,
        -99.7208, -99.7208, -99.7208, -99.7208], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8675e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.8675e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7205, -99.7206, -99.7206, -99.7207, -99.7207, -99.7207, -99.7208,
        -99.7208, -99.7208, -99.7208], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 4 	 8 	 F 	 F 	 4.0288708012885886e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4437, -54.5104, -54.5337, -54.5465, -54.5550, -54.5610, -54.5652,
        -54.5681, -54.5702, -54.5717, -54.5727, -54.5734, -54.5739, -54.5743,
        -54.5745, -54.5747, -54.5748, -54.5749, -54.5750, -54.5750, -54.5750,
        -54.5751, -54.5751, -54.5751, -54.5751], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4470e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.4470e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5747, -54.5748, -54.5749, -54.5750, -54.5750, -54.5750, -54.5751,
        -54.5751, -54.5751, -54.5751], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 4 	 11 	 N 	 N 	 4.6543752171099715e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.8248, -109.7552, -109.6742, -109.6158, -109.5768, -109.5500,
        -109.5315, -109.5186, -109.5097, -109.5035, -109.4992, -109.4962,
        -109.4941, -109.4926, -109.4916, -109.4909, -109.4904, -109.4901,
        -109.4898, -109.4897, -109.4895, -109.4894, -109.4894, -109.4893,
        -109.4893], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.3969e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4012, -54.4676, -54.5026, -54.5239, -54.5386, -54.5491, -54.5567,
        -54.5621, -54.5660, -54.5687, -54.5706, -54.5720, -54.5729, -54.5736,
        -54.5741, -54.5744, -54.5746, -54.5748, -54.5749, -54.5750, -54.5750,
        -54.5751, -54.5751, -54.5751, -54.5751], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4818e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4909, -109.4904, -109.4901, -109.4898, -109.4897, -109.4895,
        -109.4894, -109.4894, -109.4893, -109.4893], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5744, -54.5746, -54.5748, -54.5749, -54.5750, -54.5750, -54.5751,
        -54.5751, -54.5751, -54.5751], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 4 	 1 	 N2 	 N2 	 0.0001447314103559952

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2784, -107.2791, -107.2430, -107.2320, -107.2249, -107.2208,
        -107.2189, -107.2180, -107.2175, -107.2173, -107.2172, -107.2172,
        -107.2173, -107.2174, -107.2176, -107.2178, -107.2180, -107.2182,
        -107.2183, -107.2185, -107.2186, -107.2187, -107.2188, -107.2188,
        -107.2189], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.2839e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6671, -99.6914, -99.7013, -99.7071, -99.7110, -99.7139, -99.7159,
        -99.7174, -99.7185, -99.7192, -99.7197, -99.7201, -99.7204, -99.7206,
        -99.7207, -99.7208, -99.7209, -99.7209, -99.7209, -99.7210, -99.7210,
        -99.7210, -99.7210, -99.7210, -99.7210], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7944e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4612, -7.4686, -7.4714, -7.4728, -7.4738, -7.4747, -7.4755, -7.4760,
        -7.4758, -7.4756, -7.4754, -7.4754, -7.4754, -7.4754, -7.4755, -7.4755,
        -7.4755, -7.4755, -7.4755, -7.4755, -7.4756, -7.4756, -7.4756, -7.4756,
        -7.4756], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(6.7144e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2178, -107.2180, -107.2182, -107.2183, -107.2185, -107.2186,
        -107.2187, -107.2188, -107.2188, -107.2189], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7208, -99.7209, -99.7209, -99.7209, -99.7210, -99.7210, -99.7210,
        -99.7210, -99.7210, -99.7210], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4755, -7.4755, -7.4755, -7.4755, -7.4755, -7.4756, -7.4756, -7.4756,
        -7.4756, -7.4756], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 4 	 2 	 FLi 	 LiF 	 0.009363095765939577

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e04)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e04/2022-11-03_10:00:47.012831_1.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e04/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 4 || ,[' rho : 3.112715', ' ae : 74.727273', ' E : 3.383141'] ,|| total loss 54.644094 || CHKPT: _1.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9455, -74.9894, -75.0107, -75.0233, -75.0319, -75.0381, -75.0425,
        -75.0457, -75.0480, -75.0496, -75.0508, -75.0516, -75.0521, -75.0526,
        -75.0528, -75.0530, -75.0532, -75.0533, -75.0533, -75.0534, -75.0534,
        -75.0535, -75.0535, -75.0535, -75.0535], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.0913e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.0913e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0530, -75.0532, -75.0533, -75.0533, -75.0534, -75.0534, -75.0535,
        -75.0535, -75.0535, -75.0535], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 5 	 12 	 O 	 O 	 4.465010768961717e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4355, -920.4090, -920.4031, -920.4000, -920.3981, -920.3968,
        -920.3958, -920.3952, -920.3947, -920.3944, -920.3941, -920.3940,
        -920.3938, -920.3937, -920.3937, -920.3936, -920.3936, -920.3936,
        -920.3936, -920.3936, -920.3936, -920.3936, -920.3936, -920.3936,
        -920.3936], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.6617e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.3234e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0804, -460.1124, -460.1242, -460.1309, -460.1354, -460.1387,
        -460.1411, -460.1428, -460.1440, -460.1449, -460.1456, -460.1460,
        -460.1463, -460.1465, -460.1467, -460.1468, -460.1469, -460.1469,
        -460.1470, -460.1470, -460.1470, -460.1470, -460.1470, -460.1470,
        -460.1470], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3981e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.3235e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.3936, -920.3936, -920.3936, -920.3936, -920.3936, -920.3936,
        -920.3936, -920.3936, -920.3936, -920.3936], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1468, -460.1469, -460.1469, -460.1470, -460.1470, -460.1470,
        -460.1470, -460.1470, -460.1470, -460.1470], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 5 	 5 	 Cl2 	 Cl2 	 5.727069752205164e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-94.0003, -93.5222, -93.3966, -93.3410, -93.3014, -93.2751, -93.2562,
        -93.2426, -93.2329, -93.2258, -93.2206, -93.2168, -93.2140, -93.2119,
        -93.2104, -93.2092, -93.2083, -93.2077, -93.2072, -93.2068, -93.2066,
        -93.2063, -93.2062, -93.2061, -93.2060], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.3837e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7328, -37.7689, -37.7884, -37.8002, -37.8084, -37.8142, -37.8184,
        -37.8214, -37.8236, -37.8251, -37.8262, -37.8269, -37.8275, -37.8279,
        -37.8281, -37.8283, -37.8284, -37.8285, -37.8286, -37.8286, -37.8287,
        -37.8287, -37.8287, -37.8287, -37.8287], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0156e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3334, -0.4626, -0.4779, -0.4853, -0.4899, -0.4929, -0.4950, -0.4964,
        -0.4974, -0.4981, -0.4986, -0.4990, -0.4992, -0.4994, -0.4995, -0.4996,
        -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5868e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4225, -54.4944, -54.5226, -54.5387, -54.5495, -54.5571, -54.5625,
        -54.5664, -54.5691, -54.5710, -54.5723, -54.5733, -54.5739, -54.5744,
        -54.5747, -54.5749, -54.5751, -54.5752, -54.5753, -54.5754, -54.5754,
        -54.5754, -54.5754, -54.5755, -54.5755], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3870e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2092, -93.2083, -93.2077, -93.2072, -93.2068, -93.2066, -93.2063,
        -93.2062, -93.2061, -93.2060], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8283, -37.8284, -37.8285, -37.8286, -37.8286, -37.8287, -37.8287,
        -37.8287, -37.8287, -37.8287], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5749, -54.5751, -54.5752, -54.5753, -54.5754, -54.5754, -54.5754,
        -54.5754, -54.5755, -54.5755], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 5 	 3 	 CHN 	 CNH 	 0.009081888519873372

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6749, -99.6985, -99.7066, -99.7111, -99.7142, -99.7164, -99.7179,
        -99.7190, -99.7198, -99.7204, -99.7208, -99.7211, -99.7213, -99.7214,
        -99.7215, -99.7216, -99.7216, -99.7216, -99.7217, -99.7217, -99.7217,
        -99.7217, -99.7217, -99.7217, -99.7217], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5972e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.5972e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7216, -99.7216, -99.7216, -99.7217, -99.7217, -99.7217, -99.7217,
        -99.7217, -99.7217, -99.7217], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 5 	 8 	 F 	 F 	 3.474881732957189e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4225, -54.4944, -54.5226, -54.5387, -54.5496, -54.5572, -54.5626,
        -54.5665, -54.5692, -54.5711, -54.5724, -54.5734, -54.5741, -54.5745,
        -54.5749, -54.5751, -54.5752, -54.5754, -54.5754, -54.5755, -54.5755,
        -54.5756, -54.5756, -54.5756, -54.5756], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3599e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.3599e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5751, -54.5752, -54.5754, -54.5754, -54.5755, -54.5755, -54.5756,
        -54.5756, -54.5756, -54.5756], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 5 	 11 	 N 	 N 	 4.3302705198478666e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.8908, -109.5650, -109.5797, -109.5544, -109.5346, -109.5207,
        -109.5113, -109.5048, -109.5004, -109.4974, -109.4954, -109.4940,
        -109.4931, -109.4924, -109.4919, -109.4916, -109.4914, -109.4913,
        -109.4912, -109.4911, -109.4910, -109.4910, -109.4910, -109.4910,
        -109.4909], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.3934e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4382, -54.5068, -54.5314, -54.5451, -54.5542, -54.5606, -54.5651,
        -54.5682, -54.5705, -54.5721, -54.5732, -54.5740, -54.5745, -54.5749,
        -54.5752, -54.5753, -54.5755, -54.5756, -54.5756, -54.5757, -54.5757,
        -54.5757, -54.5757, -54.5758, -54.5758], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3180e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4916, -109.4914, -109.4913, -109.4912, -109.4911, -109.4910,
        -109.4910, -109.4910, -109.4910, -109.4909], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5753, -54.5755, -54.5756, -54.5756, -54.5757, -54.5757, -54.5757,
        -54.5757, -54.5758, -54.5758], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 5 	 1 	 N2 	 N2 	 0.00014145487210458568

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4620, -7.4694, -7.4719, -7.4732, -7.4741, -7.4751, -7.4759, -7.4761,
        -7.4759, -7.4757, -7.4756, -7.4755, -7.4756, -7.4756, -7.4756, -7.4756,
        -7.4756, -7.4757, -7.4757, -7.4757, -7.4757, -7.4757, -7.4757, -7.4757,
        -7.4757], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.9988e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.9988e-09, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4756, -7.4756, -7.4757, -7.4757, -7.4757, -7.4757, -7.4757, -7.4757,
        -7.4757, -7.4757], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 5 	 10 	 Li 	 Li 	 1.2988741495167893e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0269, -1.1131, -1.1353, -1.1467, -1.1538, -1.1587, -1.1620, -1.1644,
        -1.1660, -1.1672, -1.1680, -1.1685, -1.1689, -1.1692, -1.1694, -1.1695,
        -1.1696, -1.1697, -1.1697, -1.1698, -1.1698, -1.1698, -1.1698, -1.1698,
        -1.1698], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7428e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.4856e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2932, -0.4518, -0.4718, -0.4813, -0.4872, -0.4911, -0.4937, -0.4955,
        -0.4968, -0.4977, -0.4983, -0.4988, -0.4991, -0.4993, -0.4994, -0.4995,
        -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997, -0.4998,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.1687e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.4856e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1695, -1.1696, -1.1697, -1.1697, -1.1698, -1.1698, -1.1698, -1.1698,
        -1.1698, -1.1698], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4995, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4998, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 5 	 0 	 H2 	 H2 	 3.7818628407519586e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0988, -460.1261, -460.1347, -460.1395, -460.1427, -460.1449,
        -460.1465, -460.1477, -460.1485, -460.1491, -460.1495, -460.1498,
        -460.1500, -460.1501, -460.1502, -460.1503, -460.1504, -460.1504,
        -460.1504, -460.1504, -460.1504, -460.1505, -460.1505, -460.1505,
        -460.1505], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(6.2045e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.2045e-09, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1503, -460.1504, -460.1504, -460.1504, -460.1504, -460.1504,
        -460.1505, -460.1505, -460.1505, -460.1505], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 5 	 7 	 Cl 	 Cl 	 1.4202778846569666e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2336, -107.2664, -107.2319, -107.2257, -107.2209, -107.2183,
        -107.2172, -107.2173, -107.2178, -107.2183, -107.2187, -107.2190,
        -107.2194, -107.2197, -107.2200, -107.2202, -107.2205, -107.2207,
        -107.2210, -107.2211, -107.2213, -107.2214, -107.2215, -107.2216,
        -107.2217], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.3117e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6675, -99.6910, -99.7015, -99.7077, -99.7121, -99.7152, -99.7174,
        -99.7190, -99.7202, -99.7210, -99.7216, -99.7220, -99.7223, -99.7225,
        -99.7227, -99.7228, -99.7229, -99.7229, -99.7229, -99.7230, -99.7230,
        -99.7230, -99.7230, -99.7230, -99.7230], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2844e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4606, -7.4680, -7.4710, -7.4726, -7.4737, -7.4746, -7.4755, -7.4761,
        -7.4761, -7.4759, -7.4757, -7.4756, -7.4756, -7.4756, -7.4757, -7.4757,
        -7.4757, -7.4757, -7.4757, -7.4758, -7.4758, -7.4758, -7.4758, -7.4758,
        -7.4758], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.6144e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2202, -107.2205, -107.2207, -107.2210, -107.2211, -107.2213,
        -107.2214, -107.2215, -107.2216, -107.2217], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7228, -99.7229, -99.7229, -99.7229, -99.7230, -99.7230, -99.7230,
        -99.7230, -99.7230, -99.7230], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4757, -7.4757, -7.4757, -7.4757, -7.4758, -7.4758, -7.4758, -7.4758,
        -7.4758, -7.4758], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 5 	 2 	 FLi 	 LiF 	 0.00931511092555131

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.7639, -188.8417, -188.6425, -188.5267, -188.4551, -188.4064,
        -188.3725, -188.3487, -188.3318, -188.3199, -188.3115, -188.3055,
        -188.3013, -188.2983, -188.2961, -188.2946, -188.2935, -188.2927,
        -188.2921, -188.2917, -188.2915, -188.2913, -188.2911, -188.2910,
        -188.2909], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.9289e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7414, -37.7822, -37.7985, -37.8078, -37.8141, -37.8185, -37.8217,
        -37.8240, -37.8256, -37.8267, -37.8275, -37.8281, -37.8285, -37.8287,
        -37.8289, -37.8291, -37.8292, -37.8292, -37.8293, -37.8293, -37.8293,
        -37.8293, -37.8294, -37.8294, -37.8294], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.0063e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9441, -74.9807, -75.0039, -75.0186, -75.0288, -75.0362, -75.0415,
        -75.0454, -75.0482, -75.0502, -75.0516, -75.0526, -75.0533, -75.0538,
        -75.0542, -75.0545, -75.0546, -75.0547, -75.0548, -75.0549, -75.0549,
        -75.0550, -75.0550, -75.0550, -75.0550], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6784e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.2946, -188.2935, -188.2927, -188.2921, -188.2917, -188.2915,
        -188.2913, -188.2911, -188.2910, -188.2909], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8291, -37.8292, -37.8292, -37.8293, -37.8293, -37.8293, -37.8293,
        -37.8294, -37.8294, -37.8294], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0545, -75.0546, -75.0547, -75.0548, -75.0549, -75.0549, -75.0550,
        -75.0550, -75.0550, -75.0550], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 5 	 4 	 CO2 	 CO2 	 0.017118140134070776

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7405, -37.7813, -37.7978, -37.8073, -37.8137, -37.8182, -37.8214,
        -37.8237, -37.8254, -37.8265, -37.8274, -37.8279, -37.8283, -37.8286,
        -37.8288, -37.8290, -37.8291, -37.8291, -37.8292, -37.8292, -37.8292,
        -37.8292, -37.8293, -37.8293, -37.8293], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.1727e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.1727e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8290, -37.8291, -37.8291, -37.8292, -37.8292, -37.8292, -37.8292,
        -37.8293, -37.8293, -37.8293], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 5 	 6 	 C 	 C 	 2.9502935451242316e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3023, -0.4543, -0.4732, -0.4823, -0.4878, -0.4915, -0.4940, -0.4957,
        -0.4970, -0.4978, -0.4984, -0.4988, -0.4991, -0.4993, -0.4994, -0.4995,
        -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4998], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.0299e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.0299e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4995, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997, -0.4998], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 5 	 9 	 H 	 H 	 1.4988420580605586e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e05)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e05/2022-11-03_10:00:47.012831_2.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e05/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 5 || ,[' rho : 3.108072', ' ae : 74.235635', ' E : 3.251937'] ,|| total loss 54.302604 || CHKPT: _2.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.5314, -109.8914, -109.7406, -109.6604, -109.6090, -109.5738,
        -109.5493, -109.5321, -109.5201, -109.5117, -109.5058, -109.5017,
        -109.4988, -109.4968, -109.4954, -109.4944, -109.4937, -109.4932,
        -109.4928, -109.4926, -109.4924, -109.4923, -109.4922, -109.4922,
        -109.4921], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.3881e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4008, -54.4621, -54.4986, -54.5211, -54.5368, -54.5481, -54.5562,
        -54.5620, -54.5662, -54.5691, -54.5712, -54.5727, -54.5737, -54.5744,
        -54.5749, -54.5753, -54.5756, -54.5757, -54.5758, -54.5759, -54.5760,
        -54.5760, -54.5761, -54.5761, -54.5761], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2952e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4944, -109.4937, -109.4932, -109.4928, -109.4926, -109.4924,
        -109.4923, -109.4922, -109.4922, -109.4921], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5753, -54.5756, -54.5757, -54.5758, -54.5759, -54.5760, -54.5760,
        -54.5761, -54.5761, -54.5761], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 6 	 1 	 N2 	 N2 	 0.0001346994851692992

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0371, -1.1170, -1.1377, -1.1483, -1.1549, -1.1594, -1.1625, -1.1647,
        -1.1662, -1.1673, -1.1681, -1.1686, -1.1689, -1.1692, -1.1694, -1.1695,
        -1.1696, -1.1696, -1.1697, -1.1697, -1.1697, -1.1698, -1.1698, -1.1698,
        -1.1698], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7373e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.4745e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2796, -0.4480, -0.4696, -0.4799, -0.4862, -0.4904, -0.4933, -0.4952,
        -0.4966, -0.4975, -0.4982, -0.4987, -0.4990, -0.4992, -0.4994, -0.4995,
        -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.4432e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.4745e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1695, -1.1696, -1.1696, -1.1697, -1.1697, -1.1697, -1.1698, -1.1698,
        -1.1698, -1.1698], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4995, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 6 	 0 	 H2 	 H2 	 3.840143434955576e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.8932, -188.8918, -188.6752, -188.5489, -188.4706, -188.4174,
        -188.3803, -188.3542, -188.3358, -188.3228, -188.3136, -188.3070,
        -188.3024, -188.2991, -188.2967, -188.2951, -188.2939, -188.2930,
        -188.2924, -188.2920, -188.2917, -188.2915, -188.2913, -188.2912,
        -188.2911], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.9213e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7586, -37.7956, -37.8077, -37.8143, -37.8187, -37.8217, -37.8239,
        -37.8254, -37.8265, -37.8273, -37.8278, -37.8282, -37.8284, -37.8286,
        -37.8288, -37.8289, -37.8289, -37.8290, -37.8290, -37.8290, -37.8290,
        -37.8290, -37.8291, -37.8291, -37.8291], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.4270e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9459, -74.9887, -75.0103, -75.0234, -75.0323, -75.0387, -75.0433,
        -75.0467, -75.0490, -75.0507, -75.0519, -75.0528, -75.0534, -75.0538,
        -75.0541, -75.0543, -75.0545, -75.0546, -75.0547, -75.0547, -75.0548,
        -75.0548, -75.0548, -75.0548, -75.0548], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7177e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.2951, -188.2939, -188.2930, -188.2924, -188.2920, -188.2917,
        -188.2915, -188.2913, -188.2912, -188.2911], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8289, -37.8289, -37.8290, -37.8290, -37.8290, -37.8290, -37.8290,
        -37.8291, -37.8291, -37.8291], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0543, -75.0545, -75.0546, -75.0547, -75.0547, -75.0548, -75.0548,
        -75.0548, -75.0548, -75.0548], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 6 	 4 	 CO2 	 CO2 	 0.017007984976684487

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2337, -107.2662, -107.2318, -107.2256, -107.2209, -107.2183,
        -107.2172, -107.2173, -107.2178, -107.2183, -107.2187, -107.2190,
        -107.2193, -107.2197, -107.2200, -107.2202, -107.2205, -107.2208,
        -107.2210, -107.2211, -107.2213, -107.2214, -107.2215, -107.2216,
        -107.2217], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.3222e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6758, -99.6994, -99.7076, -99.7122, -99.7153, -99.7175, -99.7190,
        -99.7202, -99.7210, -99.7215, -99.7219, -99.7222, -99.7224, -99.7225,
        -99.7226, -99.7227, -99.7228, -99.7228, -99.7228, -99.7228, -99.7228,
        -99.7228, -99.7229, -99.7229, -99.7229], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3123e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4614, -7.4688, -7.4715, -7.4729, -7.4738, -7.4747, -7.4756, -7.4759,
        -7.4757, -7.4754, -7.4753, -7.4753, -7.4753, -7.4753, -7.4754, -7.4754,
        -7.4754, -7.4754, -7.4754, -7.4755, -7.4755, -7.4755, -7.4755, -7.4755,
        -7.4755], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.2328e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2202, -107.2205, -107.2208, -107.2210, -107.2211, -107.2213,
        -107.2214, -107.2215, -107.2216, -107.2217], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7227, -99.7228, -99.7228, -99.7228, -99.7228, -99.7228, -99.7228,
        -99.7229, -99.7229, -99.7229], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4754, -7.4754, -7.4754, -7.4754, -7.4755, -7.4755, -7.4755, -7.4755,
        -7.4755, -7.4755], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 6 	 2 	 FLi 	 LiF 	 0.009270365938954873

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2403, -0.4363, -0.4631, -0.4758, -0.4834, -0.4885, -0.4919, -0.4943,
        -0.4959, -0.4971, -0.4979, -0.4984, -0.4988, -0.4991, -0.4993, -0.4994,
        -0.4995, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.3206e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3206e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4994, -0.4995, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 6 	 9 	 H 	 H 	 1.750069993458859e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7543, -37.7926, -37.8055, -37.8127, -37.8174, -37.8207, -37.8230,
        -37.8246, -37.8258, -37.8266, -37.8272, -37.8276, -37.8279, -37.8281,
        -37.8283, -37.8284, -37.8284, -37.8285, -37.8285, -37.8285, -37.8286,
        -37.8286, -37.8286, -37.8286, -37.8286], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0244e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.0244e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8284, -37.8284, -37.8285, -37.8285, -37.8285, -37.8286, -37.8286,
        -37.8286, -37.8286, -37.8286], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 6 	 6 	 C 	 C 	 3.3242248050800784e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4023, -54.4686, -54.5035, -54.5246, -54.5392, -54.5497, -54.5572,
        -54.5626, -54.5664, -54.5691, -54.5710, -54.5723, -54.5733, -54.5739,
        -54.5744, -54.5747, -54.5750, -54.5751, -54.5752, -54.5753, -54.5754,
        -54.5754, -54.5754, -54.5755, -54.5755], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4114e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.4114e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5747, -54.5750, -54.5751, -54.5752, -54.5753, -54.5754, -54.5754,
        -54.5754, -54.5755, -54.5755], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 6 	 11 	 N 	 N 	 4.421634041958064e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6649, -99.6845, -99.6965, -99.7038, -99.7090, -99.7128, -99.7156,
        -99.7176, -99.7191, -99.7201, -99.7209, -99.7214, -99.7218, -99.7220,
        -99.7222, -99.7223, -99.7224, -99.7225, -99.7225, -99.7226, -99.7226,
        -99.7226, -99.7226, -99.7226, -99.7226], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3834e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.3834e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7223, -99.7224, -99.7225, -99.7225, -99.7226, -99.7226, -99.7226,
        -99.7226, -99.7226, -99.7226], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 6 	 8 	 F 	 F 	 2.9734608684952407e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9438, -74.9806, -75.0037, -75.0183, -75.0284, -75.0358, -75.0411,
        -75.0449, -75.0477, -75.0497, -75.0511, -75.0521, -75.0528, -75.0533,
        -75.0536, -75.0539, -75.0540, -75.0542, -75.0543, -75.0543, -75.0544,
        -75.0544, -75.0544, -75.0544, -75.0544], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8371e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.8371e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0539, -75.0540, -75.0542, -75.0543, -75.0543, -75.0544, -75.0544,
        -75.0544, -75.0544, -75.0544], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 6 	 12 	 O 	 O 	 3.882083840443179e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4594, -7.4666, -7.4698, -7.4717, -7.4728, -7.4737, -7.4746, -7.4754,
        -7.4755, -7.4753, -7.4751, -7.4750, -7.4750, -7.4750, -7.4750, -7.4751,
        -7.4751, -7.4751, -7.4751, -7.4751, -7.4751, -7.4752, -7.4752, -7.4752,
        -7.4752], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.0772e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.0772e-09, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4751, -7.4751, -7.4751, -7.4751, -7.4751, -7.4751, -7.4752, -7.4752,
        -7.4752, -7.4752], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 6 	 10 	 Li 	 Li 	 1.9646127542657766e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-94.1264, -93.5741, -93.4244, -93.3625, -93.3163, -93.2863, -93.2647,
        -93.2493, -93.2381, -93.2301, -93.2242, -93.2199, -93.2168, -93.2145,
        -93.2128, -93.2115, -93.2106, -93.2098, -93.2093, -93.2089, -93.2086,
        -93.2084, -93.2082, -93.2081, -93.2080], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.3138e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7370, -37.7769, -37.7944, -37.8046, -37.8116, -37.8165, -37.8200,
        -37.8226, -37.8244, -37.8256, -37.8265, -37.8272, -37.8276, -37.8279,
        -37.8281, -37.8283, -37.8284, -37.8285, -37.8285, -37.8286, -37.8286,
        -37.8286, -37.8286, -37.8286, -37.8286], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0250e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2994, -0.4535, -0.4727, -0.4819, -0.4876, -0.4913, -0.4939, -0.4957,
        -0.4969, -0.4978, -0.4983, -0.4988, -0.4991, -0.4993, -0.4994, -0.4995,
        -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.1696e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4234, -54.4950, -54.5231, -54.5392, -54.5500, -54.5575, -54.5629,
        -54.5667, -54.5694, -54.5713, -54.5727, -54.5736, -54.5743, -54.5748,
        -54.5751, -54.5753, -54.5755, -54.5756, -54.5757, -54.5757, -54.5758,
        -54.5758, -54.5758, -54.5758, -54.5758], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3162e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2115, -93.2106, -93.2098, -93.2093, -93.2089, -93.2086, -93.2084,
        -93.2082, -93.2081, -93.2080], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8283, -37.8284, -37.8285, -37.8285, -37.8286, -37.8286, -37.8286,
        -37.8286, -37.8286, -37.8286], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4995, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5753, -54.5755, -54.5756, -54.5757, -54.5757, -54.5758, -54.5758,
        -54.5758, -54.5758, -54.5758], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 6 	 3 	 CHN 	 CNH 	 0.008918843067286053

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4629, -920.4291, -920.4211, -920.4169, -920.4142, -920.4123,
        -920.4110, -920.4101, -920.4094, -920.4090, -920.4086, -920.4084,
        -920.4082, -920.4081, -920.4080, -920.4080, -920.4079, -920.4079,
        -920.4079, -920.4079, -920.4079, -920.4078, -920.4078, -920.4078,
        -920.4078], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.6964e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.3929e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0933, -460.1237, -460.1342, -460.1401, -460.1441, -460.1469,
        -460.1490, -460.1505, -460.1515, -460.1523, -460.1528, -460.1532,
        -460.1534, -460.1536, -460.1538, -460.1539, -460.1539, -460.1540,
        -460.1540, -460.1540, -460.1540, -460.1540, -460.1541, -460.1541,
        -460.1541], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.8011e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.3967e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4080, -920.4079, -920.4079, -920.4079, -920.4079, -920.4079,
        -920.4078, -920.4078, -920.4078, -920.4078], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1539, -460.1539, -460.1540, -460.1540, -460.1540, -460.1540,
        -460.1540, -460.1541, -460.1541, -460.1541], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 6 	 5 	 Cl2 	 Cl2 	 6.286692407654974e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0927, -460.1234, -460.1340, -460.1400, -460.1441, -460.1470,
        -460.1491, -460.1506, -460.1517, -460.1524, -460.1530, -460.1534,
        -460.1536, -460.1538, -460.1540, -460.1541, -460.1541, -460.1542,
        -460.1542, -460.1542, -460.1542, -460.1542, -460.1543, -460.1543,
        -460.1543], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.0658e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(4.0658e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1541, -460.1541, -460.1542, -460.1542, -460.1542, -460.1542,
        -460.1542, -460.1543, -460.1543, -460.1543], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 6 	 7 	 Cl 	 Cl 	 9.160864231282564e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e06)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e06/2022-11-03_10:00:47.012831_0.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e06/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 6 || ,[' rho : 3.099480', ' ae : 73.901366', ' E : 3.307704'] ,|| total loss 54.064322 || CHKPT: _0.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9540, -74.9997, -75.0187, -75.0295, -75.0368, -75.0420, -75.0457,
        -75.0484, -75.0503, -75.0517, -75.0526, -75.0533, -75.0538, -75.0541,
        -75.0543, -75.0545, -75.0546, -75.0547, -75.0548, -75.0548, -75.0548,
        -75.0548, -75.0549, -75.0549, -75.0549], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6896e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.6896e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0545, -75.0546, -75.0547, -75.0548, -75.0548, -75.0548, -75.0548,
        -75.0549, -75.0549, -75.0549], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 7 	 12 	 O 	 O 	 3.6169493801245674e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4605, -7.4680, -7.4708, -7.4723, -7.4733, -7.4742, -7.4751, -7.4755,
        -7.4754, -7.4751, -7.4750, -7.4750, -7.4750, -7.4750, -7.4750, -7.4750,
        -7.4751, -7.4751, -7.4751, -7.4751, -7.4751, -7.4751, -7.4751, -7.4751,
        -7.4751], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.2417e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.2417e-09, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4750, -7.4751, -7.4751, -7.4751, -7.4751, -7.4751, -7.4751, -7.4751,
        -7.4751, -7.4751], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 7 	 10 	 Li 	 Li 	 2.0038591942347107e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.9436, -109.2872, -109.4454, -109.4686, -109.4758, -109.4798,
        -109.4827, -109.4850, -109.4868, -109.4882, -109.4893, -109.4901,
        -109.4907, -109.4912, -109.4915, -109.4917, -109.4919, -109.4920,
        -109.4921, -109.4922, -109.4922, -109.4922, -109.4923, -109.4923,
        -109.4923], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.3727e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4239, -54.4954, -54.5234, -54.5394, -54.5501, -54.5576, -54.5630,
        -54.5668, -54.5694, -54.5713, -54.5727, -54.5736, -54.5743, -54.5747,
        -54.5750, -54.5753, -54.5754, -54.5755, -54.5756, -54.5757, -54.5757,
        -54.5757, -54.5758, -54.5758, -54.5758], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3250e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4917, -109.4919, -109.4920, -109.4921, -109.4922, -109.4922,
        -109.4922, -109.4923, -109.4923, -109.4923], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5753, -54.5754, -54.5755, -54.5756, -54.5757, -54.5757, -54.5757,
        -54.5758, -54.5758, -54.5758], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 7 	 1 	 N2 	 N2 	 0.0001269114223553815

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6715, -99.6956, -99.7050, -99.7105, -99.7142, -99.7169, -99.7188,
        -99.7201, -99.7211, -99.7218, -99.7223, -99.7227, -99.7229, -99.7231,
        -99.7232, -99.7233, -99.7233, -99.7234, -99.7234, -99.7234, -99.7235,
        -99.7235, -99.7235, -99.7235, -99.7235], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1734e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.1734e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7233, -99.7233, -99.7234, -99.7234, -99.7234, -99.7235, -99.7235,
        -99.7235, -99.7235, -99.7235], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 7 	 8 	 F 	 F 	 2.539457134112037e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-93.8599, -93.4635, -93.3647, -93.3179, -93.2861, -93.2647, -93.2494,
        -93.2385, -93.2306, -93.2248, -93.2206, -93.2175, -93.2152, -93.2135,
        -93.2123, -93.2113, -93.2106, -93.2101, -93.2097, -93.2094, -93.2091,
        -93.2090, -93.2088, -93.2087, -93.2086], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.2777e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7427, -37.7834, -37.7991, -37.8081, -37.8141, -37.8183, -37.8213,
        -37.8235, -37.8250, -37.8261, -37.8268, -37.8274, -37.8278, -37.8280,
        -37.8282, -37.8283, -37.8284, -37.8285, -37.8285, -37.8286, -37.8286,
        -37.8286, -37.8286, -37.8286, -37.8286], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0211e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2670, -0.4443, -0.4676, -0.4786, -0.4853, -0.4898, -0.4928, -0.4949,
        -0.4964, -0.4974, -0.4981, -0.4986, -0.4989, -0.4992, -0.4993, -0.4995,
        -0.4995, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.7974e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4084, -54.4790, -54.5114, -54.5306, -54.5437, -54.5530, -54.5597,
        -54.5645, -54.5678, -54.5702, -54.5719, -54.5731, -54.5739, -54.5745,
        -54.5749, -54.5752, -54.5754, -54.5755, -54.5756, -54.5757, -54.5757,
        -54.5758, -54.5758, -54.5758, -54.5758], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3293e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0007, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2113, -93.2106, -93.2101, -93.2097, -93.2094, -93.2091, -93.2090,
        -93.2088, -93.2087, -93.2086], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8283, -37.8284, -37.8285, -37.8285, -37.8286, -37.8286, -37.8286,
        -37.8286, -37.8286, -37.8286], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4995, -0.4995, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5752, -54.5754, -54.5755, -54.5756, -54.5757, -54.5757, -54.5758,
        -54.5758, -54.5758, -54.5758], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 7 	 3 	 CHN 	 CNH 	 0.008862149203065014

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4248, -54.4962, -54.5239, -54.5398, -54.5504, -54.5578, -54.5631,
        -54.5669, -54.5695, -54.5714, -54.5727, -54.5737, -54.5743, -54.5748,
        -54.5751, -54.5753, -54.5755, -54.5756, -54.5757, -54.5757, -54.5757,
        -54.5758, -54.5758, -54.5758, -54.5758], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3170e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.3170e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5753, -54.5755, -54.5756, -54.5757, -54.5757, -54.5757, -54.5758,
        -54.5758, -54.5758, -54.5758], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 7 	 11 	 N 	 N 	 4.195034978086475e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2636, -0.4433, -0.4670, -0.4783, -0.4851, -0.4896, -0.4927, -0.4948,
        -0.4963, -0.4973, -0.4981, -0.4986, -0.4989, -0.4992, -0.4993, -0.4995,
        -0.4995, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.8763e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.8763e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4995, -0.4995, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 7 	 9 	 H 	 H 	 1.870615385329913e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4525, -920.4238, -920.4173, -920.4138, -920.4116, -920.4101,
        -920.4091, -920.4083, -920.4078, -920.4074, -920.4071, -920.4070,
        -920.4068, -920.4067, -920.4067, -920.4066, -920.4066, -920.4066,
        -920.4065, -920.4065, -920.4065, -920.4065, -920.4065, -920.4065,
        -920.4065], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.6500e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.3000e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1033, -460.1299, -460.1383, -460.1429, -460.1460, -460.1481,
        -460.1497, -460.1508, -460.1516, -460.1521, -460.1525, -460.1528,
        -460.1530, -460.1531, -460.1532, -460.1533, -460.1533, -460.1534,
        -460.1534, -460.1534, -460.1534, -460.1534, -460.1534, -460.1534,
        -460.1534], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.0644e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.3030e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4066, -920.4066, -920.4066, -920.4065, -920.4065, -920.4065,
        -920.4065, -920.4065, -920.4065, -920.4065], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1533, -460.1533, -460.1534, -460.1534, -460.1534, -460.1534,
        -460.1534, -460.1534, -460.1534, -460.1534], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 7 	 5 	 Cl2 	 Cl2 	 6.130025130818978e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.3573, -188.6866, -188.5437, -188.4610, -188.4103, -188.3758,
        -188.3517, -188.3348, -188.3229, -188.3145, -188.3085, -188.3042,
        -188.3012, -188.2991, -188.2975, -188.2964, -188.2957, -188.2951,
        -188.2947, -188.2944, -188.2942, -188.2941, -188.2940, -188.2939,
        -188.2938], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.8996e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7389, -37.7793, -37.7962, -37.8060, -37.8126, -37.8173, -37.8206,
        -37.8230, -37.8247, -37.8259, -37.8267, -37.8273, -37.8278, -37.8281,
        -37.8283, -37.8284, -37.8285, -37.8286, -37.8286, -37.8287, -37.8287,
        -37.8287, -37.8287, -37.8287, -37.8287], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0048e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9491, -74.9935, -75.0141, -75.0262, -75.0345, -75.0404, -75.0446,
        -75.0477, -75.0498, -75.0514, -75.0525, -75.0533, -75.0538, -75.0542,
        -75.0545, -75.0547, -75.0548, -75.0549, -75.0550, -75.0550, -75.0551,
        -75.0551, -75.0551, -75.0551, -75.0551], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6333e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.2964, -188.2957, -188.2951, -188.2947, -188.2944, -188.2942,
        -188.2941, -188.2940, -188.2939, -188.2938], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8284, -37.8285, -37.8286, -37.8286, -37.8287, -37.8287, -37.8287,
        -37.8287, -37.8287, -37.8287], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0547, -75.0548, -75.0549, -75.0550, -75.0550, -75.0551, -75.0551,
        -75.0551, -75.0551, -75.0551], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 7 	 4 	 CO2 	 CO2 	 0.01670619622520475

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7336, -37.7702, -37.7894, -37.8009, -37.8088, -37.8145, -37.8186,
        -37.8215, -37.8236, -37.8251, -37.8261, -37.8269, -37.8274, -37.8278,
        -37.8280, -37.8282, -37.8283, -37.8284, -37.8285, -37.8285, -37.8286,
        -37.8286, -37.8286, -37.8286, -37.8286], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0334e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.0334e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8282, -37.8283, -37.8284, -37.8285, -37.8285, -37.8286, -37.8286,
        -37.8286, -37.8286, -37.8286], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 7 	 6 	 C 	 C 	 3.30374209236514e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0187, -1.1096, -1.1331, -1.1451, -1.1527, -1.1578, -1.1613, -1.1638,
        -1.1655, -1.1668, -1.1676, -1.1682, -1.1686, -1.1689, -1.1691, -1.1692,
        -1.1693, -1.1694, -1.1695, -1.1695, -1.1695, -1.1695, -1.1695, -1.1696,
        -1.1696], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7150e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.4300e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2356, -0.4348, -0.4623, -0.4752, -0.4831, -0.4882, -0.4917, -0.4942,
        -0.4958, -0.4970, -0.4978, -0.4984, -0.4988, -0.4991, -0.4993, -0.4994,
        -0.4995, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.5361e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.4300e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1692, -1.1693, -1.1694, -1.1695, -1.1695, -1.1695, -1.1695, -1.1695,
        -1.1696, -1.1696], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4994, -0.4995, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 7 	 0 	 H2 	 H2 	 4.12862025198201e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0893, -460.1206, -460.1316, -460.1378, -460.1420, -460.1451,
        -460.1473, -460.1488, -460.1500, -460.1508, -460.1513, -460.1517,
        -460.1520, -460.1522, -460.1524, -460.1525, -460.1525, -460.1526,
        -460.1526, -460.1526, -460.1526, -460.1527, -460.1527, -460.1527,
        -460.1527], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.2470e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.2470e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1525, -460.1525, -460.1526, -460.1526, -460.1526, -460.1526,
        -460.1527, -460.1527, -460.1527, -460.1527], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 7 	 7 	 Cl 	 Cl 	 5.103144492026647e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2107, -107.2599, -107.2262, -107.2224, -107.2189, -107.2171,
        -107.2166, -107.2171, -107.2179, -107.2186, -107.2192, -107.2197,
        -107.2202, -107.2205, -107.2209, -107.2212, -107.2215, -107.2218,
        -107.2220, -107.2222, -107.2224, -107.2225, -107.2227, -107.2228,
        -107.2228], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.3537e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6713, -99.6954, -99.7048, -99.7102, -99.7139, -99.7166, -99.7185,
        -99.7199, -99.7209, -99.7216, -99.7221, -99.7224, -99.7227, -99.7228,
        -99.7230, -99.7230, -99.7231, -99.7231, -99.7232, -99.7232, -99.7232,
        -99.7232, -99.7232, -99.7232, -99.7232], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2297e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4621, -7.4692, -7.4716, -7.4728, -7.4737, -7.4747, -7.4753, -7.4754,
        -7.4751, -7.4749, -7.4749, -7.4748, -7.4749, -7.4749, -7.4749, -7.4750,
        -7.4750, -7.4750, -7.4750, -7.4750, -7.4750, -7.4750, -7.4750, -7.4750,
        -7.4750], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.9120e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2212, -107.2215, -107.2218, -107.2220, -107.2222, -107.2224,
        -107.2225, -107.2227, -107.2228, -107.2228], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7230, -99.7231, -99.7231, -99.7232, -99.7232, -99.7232, -99.7232,
        -99.7232, -99.7232, -99.7232], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4750, -7.4750, -7.4750, -7.4750, -7.4750, -7.4750, -7.4750, -7.4750,
        -7.4750, -7.4750], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 7 	 2 	 FLi 	 LiF 	 0.009157708282810583

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e07)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e07/2022-11-03_10:00:47.012831_1.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e07/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 7 || ,[' rho : 3.093435', ' ae : 73.387173', ' E : 3.221153'] ,|| total loss 53.705950 || CHKPT: _1.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2318, -0.4336, -0.4616, -0.4748, -0.4828, -0.4880, -0.4916, -0.4941,
        -0.4958, -0.4970, -0.4978, -0.4984, -0.4988, -0.4991, -0.4993, -0.4994,
        -0.4995, -0.4996, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.6878e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.6878e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4994, -0.4995, -0.4996, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997,
        -0.4997, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 8 	 9 	 H 	 H 	 2.1409074845418017e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2452, -107.2696, -107.2350, -107.2280, -107.2229, -107.2200,
        -107.2188, -107.2187, -107.2190, -107.2194, -107.2197, -107.2200,
        -107.2203, -107.2206, -107.2209, -107.2212, -107.2214, -107.2217,
        -107.2219, -107.2221, -107.2222, -107.2223, -107.2224, -107.2225,
        -107.2226], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.3516e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6736, -99.6975, -99.7062, -99.7112, -99.7146, -99.7170, -99.7187,
        -99.7200, -99.7208, -99.7215, -99.7219, -99.7222, -99.7224, -99.7226,
        -99.7227, -99.7228, -99.7228, -99.7229, -99.7229, -99.7229, -99.7229,
        -99.7229, -99.7229, -99.7229, -99.7229], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2943e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4630, -7.4697, -7.4719, -7.4730, -7.4739, -7.4748, -7.4753, -7.4752,
        -7.4749, -7.4748, -7.4748, -7.4748, -7.4748, -7.4748, -7.4748, -7.4749,
        -7.4749, -7.4749, -7.4749, -7.4749, -7.4749, -7.4749, -7.4749, -7.4749,
        -7.4749], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0493e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2212, -107.2214, -107.2217, -107.2219, -107.2221, -107.2222,
        -107.2223, -107.2224, -107.2225, -107.2226], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7228, -99.7228, -99.7229, -99.7229, -99.7229, -99.7229, -99.7229,
        -99.7229, -99.7229, -99.7229], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4749, -7.4749, -7.4749, -7.4749, -7.4749, -7.4749, -7.4749, -7.4749,
        -7.4749, -7.4749], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 8 	 2 	 FLi 	 LiF 	 0.009143339272688582

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-94.1420, -93.5801, -93.4272, -93.3648, -93.3178, -93.2875, -93.2656,
        -93.2500, -93.2388, -93.2307, -93.2249, -93.2206, -93.2174, -93.2151,
        -93.2134, -93.2122, -93.2112, -93.2105, -93.2100, -93.2096, -93.2093,
        -93.2091, -93.2089, -93.2088, -93.2087], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.2469e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7518, -37.7906, -37.8040, -37.8114, -37.8163, -37.8198, -37.8222,
        -37.8240, -37.8252, -37.8260, -37.8267, -37.8271, -37.8274, -37.8276,
        -37.8277, -37.8279, -37.8279, -37.8280, -37.8280, -37.8280, -37.8281,
        -37.8281, -37.8281, -37.8281, -37.8281], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1114e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2776, -0.4473, -0.4693, -0.4797, -0.4861, -0.4903, -0.4931, -0.4951,
        -0.4965, -0.4975, -0.4982, -0.4986, -0.4989, -0.4992, -0.4993, -0.4995,
        -0.4995, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.7263e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4244, -54.4956, -54.5234, -54.5392, -54.5498, -54.5572, -54.5625,
        -54.5663, -54.5689, -54.5708, -54.5721, -54.5730, -54.5737, -54.5741,
        -54.5744, -54.5747, -54.5748, -54.5749, -54.5750, -54.5751, -54.5751,
        -54.5751, -54.5752, -54.5752, -54.5752], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4439e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2122, -93.2112, -93.2105, -93.2100, -93.2096, -93.2093, -93.2091,
        -93.2089, -93.2088, -93.2087], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8279, -37.8279, -37.8280, -37.8280, -37.8280, -37.8281, -37.8281,
        -37.8281, -37.8281, -37.8281], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4995, -0.4995, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5747, -54.5748, -54.5749, -54.5750, -54.5751, -54.5751, -54.5751,
        -54.5752, -54.5752, -54.5752], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 8 	 3 	 CHN 	 CNH 	 0.008740915045463411

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.5612, -188.7634, -188.5926, -188.4934, -188.4324, -188.3909,
        -188.3620, -188.3416, -188.3273, -188.3171, -188.3099, -188.3048,
        -188.3012, -188.2986, -188.2968, -188.2955, -188.2945, -188.2939,
        -188.2934, -188.2931, -188.2928, -188.2926, -188.2925, -188.2924,
        -188.2924], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.8889e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7326, -37.7682, -37.7876, -37.7994, -37.8075, -37.8134, -37.8176,
        -37.8206, -37.8228, -37.8243, -37.8254, -37.8262, -37.8267, -37.8271,
        -37.8274, -37.8275, -37.8277, -37.8278, -37.8278, -37.8279, -37.8279,
        -37.8279, -37.8279, -37.8280, -37.8280], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1501e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9440, -74.9804, -75.0034, -75.0180, -75.0281, -75.0354, -75.0407,
        -75.0446, -75.0474, -75.0493, -75.0508, -75.0518, -75.0525, -75.0530,
        -75.0533, -75.0536, -75.0537, -75.0539, -75.0539, -75.0540, -75.0540,
        -75.0541, -75.0541, -75.0541, -75.0541], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.9235e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.2955, -188.2945, -188.2939, -188.2934, -188.2931, -188.2928,
        -188.2926, -188.2925, -188.2924, -188.2924], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8275, -37.8277, -37.8278, -37.8278, -37.8279, -37.8279, -37.8279,
        -37.8279, -37.8280, -37.8280], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0536, -75.0537, -75.0539, -75.0539, -75.0540, -75.0540, -75.0541,
        -75.0541, -75.0541, -75.0541], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 8 	 4 	 CO2 	 CO2 	 0.016541000908468082

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4302, -54.5003, -54.5265, -54.5413, -54.5512, -54.5581, -54.5630,
        -54.5665, -54.5689, -54.5707, -54.5719, -54.5727, -54.5733, -54.5738,
        -54.5741, -54.5743, -54.5744, -54.5745, -54.5746, -54.5746, -54.5747,
        -54.5747, -54.5747, -54.5747, -54.5747], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5295e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.5295e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5743, -54.5744, -54.5745, -54.5746, -54.5746, -54.5747, -54.5747,
        -54.5747, -54.5747, -54.5747], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 8 	 11 	 N 	 N 	 4.899282197893397e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0046, -1.1039, -1.1295, -1.1426, -1.1509, -1.1565, -1.1604, -1.1631,
        -1.1650, -1.1663, -1.1672, -1.1679, -1.1683, -1.1687, -1.1689, -1.1690,
        -1.1691, -1.1692, -1.1693, -1.1693, -1.1693, -1.1693, -1.1694, -1.1694,
        -1.1694], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6891e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3783e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2832, -0.4489, -0.4701, -0.4803, -0.4864, -0.4905, -0.4933, -0.4952,
        -0.4966, -0.4975, -0.4982, -0.4986, -0.4990, -0.4992, -0.4993, -0.4994,
        -0.4995, -0.4996, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.7232e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3783e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1690, -1.1691, -1.1692, -1.1693, -1.1693, -1.1693, -1.1693, -1.1694,
        -1.1694, -1.1694], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4994, -0.4995, -0.4996, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997,
        -0.4997, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 8 	 0 	 H2 	 H2 	 4.3901639964982665e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6731, -99.6968, -99.7054, -99.7103, -99.7136, -99.7160, -99.7177,
        -99.7189, -99.7198, -99.7204, -99.7208, -99.7211, -99.7213, -99.7215,
        -99.7216, -99.7216, -99.7217, -99.7217, -99.7218, -99.7218, -99.7218,
        -99.7218, -99.7218, -99.7218, -99.7218], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5717e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.5717e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7216, -99.7217, -99.7217, -99.7218, -99.7218, -99.7218, -99.7218,
        -99.7218, -99.7218, -99.7218], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 8 	 8 	 F 	 F 	 3.4155304508298555e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0947, -460.1226, -460.1316, -460.1366, -460.1399, -460.1423,
        -460.1440, -460.1452, -460.1460, -460.1466, -460.1471, -460.1474,
        -460.1476, -460.1477, -460.1478, -460.1479, -460.1480, -460.1480,
        -460.1480, -460.1480, -460.1481, -460.1481, -460.1481, -460.1481,
        -460.1481], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.1080e-09, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(9.1080e-11, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1479, -460.1480, -460.1480, -460.1480, -460.1480, -460.1481,
        -460.1481, -460.1481, -460.1481, -460.1481], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 8 	 7 	 Cl 	 Cl 	 1.4706072211054758e-09

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9444, -74.9859, -75.0077, -75.0210, -75.0301, -75.0367, -75.0414,
        -75.0448, -75.0473, -75.0491, -75.0503, -75.0512, -75.0518, -75.0522,
        -75.0525, -75.0528, -75.0529, -75.0530, -75.0531, -75.0532, -75.0532,
        -75.0532, -75.0532, -75.0532, -75.0533], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.1671e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.1671e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0528, -75.0529, -75.0530, -75.0531, -75.0532, -75.0532, -75.0532,
        -75.0532, -75.0532, -75.0533], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 8 	 12 	 O 	 O 	 4.6177567453429875e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.7616, -109.8459, -109.7212, -109.6473, -109.5991, -109.5662,
        -109.5434, -109.5274, -109.5163, -109.5085, -109.5031, -109.4993,
        -109.4967, -109.4948, -109.4935, -109.4926, -109.4920, -109.4915,
        -109.4912, -109.4910, -109.4908, -109.4907, -109.4907, -109.4906,
        -109.4906], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.3540e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4265, -54.4972, -54.5242, -54.5395, -54.5498, -54.5570, -54.5621,
        -54.5657, -54.5682, -54.5700, -54.5713, -54.5722, -54.5728, -54.5732,
        -54.5736, -54.5738, -54.5739, -54.5740, -54.5741, -54.5741, -54.5742,
        -54.5742, -54.5742, -54.5742, -54.5743], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6342e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4926, -109.4920, -109.4915, -109.4912, -109.4910, -109.4908,
        -109.4907, -109.4907, -109.4906, -109.4906], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5738, -54.5739, -54.5740, -54.5741, -54.5741, -54.5742, -54.5742,
        -54.5742, -54.5742, -54.5743], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 8 	 1 	 N2 	 N2 	 0.00011193924387989272

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7374, -37.7776, -37.7946, -37.8044, -37.8110, -37.8157, -37.8191,
        -37.8215, -37.8232, -37.8244, -37.8252, -37.8258, -37.8263, -37.8266,
        -37.8268, -37.8269, -37.8270, -37.8271, -37.8271, -37.8272, -37.8272,
        -37.8272, -37.8272, -37.8272, -37.8273], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2735e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.2735e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8269, -37.8270, -37.8271, -37.8271, -37.8272, -37.8272, -37.8272,
        -37.8272, -37.8272, -37.8273], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 8 	 6 	 C 	 C 	 4.108670344519179e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4590, -7.4663, -7.4694, -7.4711, -7.4723, -7.4731, -7.4741, -7.4748,
        -7.4748, -7.4745, -7.4743, -7.4743, -7.4743, -7.4743, -7.4743, -7.4744,
        -7.4744, -7.4744, -7.4744, -7.4745, -7.4745, -7.4745, -7.4745, -7.4745,
        -7.4745], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3847e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.3847e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4744, -7.4744, -7.4744, -7.4744, -7.4745, -7.4745, -7.4745, -7.4745,
        -7.4745, -7.4745], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 8 	 10 	 Li 	 Li 	 3.005901431879545e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4354, -920.4123, -920.4072, -920.4046, -920.4029, -920.4018,
        -920.4010, -920.4004, -920.4000, -920.3997, -920.3995, -920.3994,
        -920.3993, -920.3992, -920.3992, -920.3991, -920.3991, -920.3991,
        -920.3991, -920.3991, -920.3991, -920.3991, -920.3991, -920.3991,
        -920.3991], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.6543e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.3086e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0889, -460.1193, -460.1298, -460.1357, -460.1397, -460.1425,
        -460.1445, -460.1460, -460.1471, -460.1478, -460.1483, -460.1487,
        -460.1490, -460.1492, -460.1493, -460.1494, -460.1495, -460.1495,
        -460.1495, -460.1496, -460.1496, -460.1496, -460.1496, -460.1496,
        -460.1496], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.5429e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.3088e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.3991, -920.3991, -920.3991, -920.3991, -920.3991, -920.3991,
        -920.3991, -920.3991, -920.3991, -920.3991], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1494, -460.1495, -460.1495, -460.1495, -460.1496, -460.1496,
        -460.1496, -460.1496, -460.1496, -460.1496], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 8 	 5 	 Cl2 	 Cl2 	 6.678565367816667e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e08)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e08/2022-11-03_10:00:47.012831_2.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e08/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 8 || ,[' rho : 3.085422', ' ae : 73.087623', ' E : 3.439377'] ,|| total loss 53.492198 || CHKPT: _2.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0923, -460.1217, -460.1316, -460.1371, -460.1408, -460.1434,
        -460.1453, -460.1467, -460.1476, -460.1483, -460.1488, -460.1492,
        -460.1494, -460.1496, -460.1497, -460.1498, -460.1498, -460.1499,
        -460.1499, -460.1499, -460.1499, -460.1499, -460.1500, -460.1500,
        -460.1500], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.8803e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.8803e-09, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1498, -460.1498, -460.1499, -460.1499, -460.1499, -460.1499,
        -460.1499, -460.1500, -460.1500, -460.1500], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 9 	 7 	 Cl 	 Cl 	 8.975329039817151e-07

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6682, -99.6915, -99.7017, -99.7077, -99.7119, -99.7149, -99.7171,
        -99.7186, -99.7197, -99.7205, -99.7211, -99.7215, -99.7218, -99.7220,
        -99.7221, -99.7222, -99.7223, -99.7223, -99.7224, -99.7224, -99.7224,
        -99.7224, -99.7224, -99.7224, -99.7224], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4223e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.4223e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7222, -99.7223, -99.7223, -99.7224, -99.7224, -99.7224, -99.7224,
        -99.7224, -99.7224, -99.7224], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 9 	 8 	 F 	 F 	 3.076080568624252e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7382, -37.7785, -37.7952, -37.8049, -37.8114, -37.8161, -37.8194,
        -37.8218, -37.8234, -37.8246, -37.8255, -37.8261, -37.8265, -37.8268,
        -37.8270, -37.8271, -37.8272, -37.8273, -37.8273, -37.8274, -37.8274,
        -37.8274, -37.8274, -37.8274, -37.8274], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2360e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.2360e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8271, -37.8272, -37.8273, -37.8273, -37.8274, -37.8274, -37.8274,
        -37.8274, -37.8274, -37.8274], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 9 	 6 	 C 	 C 	 3.987985665738052e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.8195, -109.7676, -109.6817, -109.6215, -109.5815, -109.5541,
        -109.5351, -109.5220, -109.5128, -109.5064, -109.5020, -109.4989,
        -109.4968, -109.4953, -109.4942, -109.4935, -109.4930, -109.4926,
        -109.4924, -109.4922, -109.4921, -109.4920, -109.4919, -109.4919,
        -109.4919], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.3513e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4376, -54.5058, -54.5304, -54.5441, -54.5532, -54.5595, -54.5640,
        -54.5672, -54.5695, -54.5710, -54.5721, -54.5729, -54.5735, -54.5739,
        -54.5741, -54.5743, -54.5745, -54.5745, -54.5746, -54.5747, -54.5747,
        -54.5747, -54.5747, -54.5747, -54.5747], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5230e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4935, -109.4930, -109.4926, -109.4924, -109.4922, -109.4921,
        -109.4920, -109.4919, -109.4919, -109.4919], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5743, -54.5745, -54.5745, -54.5746, -54.5747, -54.5747, -54.5747,
        -54.5747, -54.5747, -54.5747], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 9 	 1 	 N2 	 N2 	 0.0001090661926207358

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2847, -107.2834, -107.2474, -107.2364, -107.2294, -107.2254,
        -107.2233, -107.2224, -107.2219, -107.2217, -107.2216, -107.2216,
        -107.2217, -107.2219, -107.2221, -107.2223, -107.2225, -107.2227,
        -107.2229, -107.2230, -107.2232, -107.2233, -107.2234, -107.2234,
        -107.2235], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.3743e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6660, -99.6856, -99.6974, -99.7046, -99.7097, -99.7135, -99.7162,
        -99.7182, -99.7196, -99.7207, -99.7214, -99.7219, -99.7223, -99.7225,
        -99.7227, -99.7228, -99.7229, -99.7230, -99.7230, -99.7231, -99.7231,
        -99.7231, -99.7231, -99.7231, -99.7231], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2653e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4584, -7.4652, -7.4686, -7.4706, -7.4719, -7.4728, -7.4738, -7.4746,
        -7.4749, -7.4747, -7.4745, -7.4744, -7.4743, -7.4744, -7.4744, -7.4744,
        -7.4745, -7.4745, -7.4745, -7.4745, -7.4745, -7.4745, -7.4745, -7.4745,
        -7.4745], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3411e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2223, -107.2225, -107.2227, -107.2229, -107.2230, -107.2232,
        -107.2233, -107.2234, -107.2234, -107.2235], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7228, -99.7229, -99.7230, -99.7230, -99.7231, -99.7231, -99.7231,
        -99.7231, -99.7231, -99.7231], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4744, -7.4745, -7.4745, -7.4745, -7.4745, -7.4745, -7.4745, -7.4745,
        -7.4745, -7.4745], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 9 	 2 	 FLi 	 LiF 	 0.009039779189888983

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2114, -0.4269, -0.4579, -0.4724, -0.4812, -0.4869, -0.4908, -0.4935,
        -0.4954, -0.4967, -0.4976, -0.4982, -0.4987, -0.4990, -0.4992, -0.4993,
        -0.4994, -0.4995, -0.4996, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.4009e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(4.4009e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4993, -0.4994, -0.4995, -0.4996, -0.4996, -0.4996, -0.4997, -0.4997,
        -0.4997, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 9 	 9 	 H 	 H 	 2.5630737958903552e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4586, -7.4656, -7.4690, -7.4709, -7.4721, -7.4730, -7.4740, -7.4748,
        -7.4749, -7.4747, -7.4745, -7.4744, -7.4744, -7.4744, -7.4744, -7.4745,
        -7.4745, -7.4745, -7.4745, -7.4746, -7.4746, -7.4746, -7.4746, -7.4746,
        -7.4746], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3071e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.3071e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4745, -7.4745, -7.4745, -7.4745, -7.4746, -7.4746, -7.4746, -7.4746,
        -7.4746, -7.4746], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 9 	 10 	 Li 	 Li 	 2.833656242256695e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9620, -75.0068, -75.0237, -75.0331, -75.0394, -75.0439, -75.0471,
        -75.0493, -75.0510, -75.0521, -75.0529, -75.0535, -75.0539, -75.0542,
        -75.0544, -75.0545, -75.0546, -75.0547, -75.0547, -75.0548, -75.0548,
        -75.0548, -75.0548, -75.0548, -75.0548], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6940e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.6940e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0545, -75.0546, -75.0547, -75.0547, -75.0548, -75.0548, -75.0548,
        -75.0548, -75.0548, -75.0548], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 9 	 12 	 O 	 O 	 3.642872793311897e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4263, -54.4971, -54.5245, -54.5401, -54.5505, -54.5578, -54.5630,
        -54.5667, -54.5693, -54.5712, -54.5725, -54.5734, -54.5740, -54.5744,
        -54.5748, -54.5750, -54.5751, -54.5752, -54.5753, -54.5754, -54.5754,
        -54.5754, -54.5755, -54.5755, -54.5755], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3822e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.3822e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5750, -54.5751, -54.5752, -54.5753, -54.5754, -54.5754, -54.5754,
        -54.5755, -54.5755, -54.5755], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 9 	 11 	 N 	 N 	 4.409875876599194e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.3779, -188.6961, -188.5512, -188.4672, -188.4157, -188.3806,
        -188.3562, -188.3390, -188.3269, -188.3183, -188.3122, -188.3079,
        -188.3049, -188.3027, -188.3011, -188.3000, -188.2992, -188.2987,
        -188.2982, -188.2980, -188.2977, -188.2976, -188.2975, -188.2974,
        -188.2974], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.8706e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7550, -37.7928, -37.8055, -37.8126, -37.8172, -37.8204, -37.8227,
        -37.8244, -37.8255, -37.8263, -37.8269, -37.8273, -37.8276, -37.8278,
        -37.8279, -37.8280, -37.8281, -37.8281, -37.8282, -37.8282, -37.8282,
        -37.8282, -37.8282, -37.8282, -37.8282], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0813e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9466, -74.9877, -75.0095, -75.0229, -75.0321, -75.0387, -75.0435,
        -75.0469, -75.0494, -75.0512, -75.0524, -75.0533, -75.0539, -75.0544,
        -75.0547, -75.0549, -75.0551, -75.0552, -75.0552, -75.0553, -75.0553,
        -75.0554, -75.0554, -75.0554, -75.0554], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5659e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3000, -188.2992, -188.2987, -188.2982, -188.2980, -188.2977,
        -188.2976, -188.2975, -188.2974, -188.2974], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8280, -37.8281, -37.8281, -37.8282, -37.8282, -37.8282, -37.8282,
        -37.8282, -37.8282, -37.8282], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0549, -75.0551, -75.0552, -75.0552, -75.0553, -75.0553, -75.0554,
        -75.0554, -75.0554, -75.0554], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 9 	 4 	 CO2 	 CO2 	 0.01627718647796289

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-93.9285, -93.4932, -93.3815, -93.3309, -93.2955, -93.2719, -93.2551,
        -93.2432, -93.2345, -93.2283, -93.2237, -93.2204, -93.2179, -93.2161,
        -93.2148, -93.2138, -93.2131, -93.2125, -93.2121, -93.2118, -93.2116,
        -93.2114, -93.2112, -93.2111, -93.2111], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.1703e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7444, -37.7848, -37.7999, -37.8085, -37.8143, -37.8184, -37.8213,
        -37.8233, -37.8248, -37.8258, -37.8265, -37.8270, -37.8274, -37.8277,
        -37.8278, -37.8280, -37.8281, -37.8281, -37.8282, -37.8282, -37.8282,
        -37.8282, -37.8282, -37.8282, -37.8282], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0870e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2213, -0.4303, -0.4598, -0.4736, -0.4820, -0.4875, -0.4912, -0.4938,
        -0.4956, -0.4968, -0.4977, -0.4983, -0.4987, -0.4990, -0.4992, -0.4994,
        -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.0484e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4370, -54.5056, -54.5305, -54.5445, -54.5538, -54.5603, -54.5648,
        -54.5681, -54.5704, -54.5720, -54.5731, -54.5739, -54.5745, -54.5749,
        -54.5751, -54.5753, -54.5755, -54.5756, -54.5756, -54.5757, -54.5757,
        -54.5757, -54.5758, -54.5758, -54.5758], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3186e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2138, -93.2131, -93.2125, -93.2121, -93.2118, -93.2116, -93.2114,
        -93.2112, -93.2111, -93.2111], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8280, -37.8281, -37.8281, -37.8282, -37.8282, -37.8282, -37.8282,
        -37.8282, -37.8282, -37.8282], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4997, -0.4997,
        -0.4997, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5753, -54.5755, -54.5756, -54.5756, -54.5757, -54.5757, -54.5757,
        -54.5758, -54.5758, -54.5758], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 9 	 3 	 CHN 	 CNH 	 0.008598550241090876

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0197, -1.1099, -1.1332, -1.1451, -1.1526, -1.1577, -1.1612, -1.1637,
        -1.1654, -1.1666, -1.1674, -1.1680, -1.1684, -1.1687, -1.1689, -1.1691,
        -1.1692, -1.1692, -1.1693, -1.1693, -1.1693, -1.1694, -1.1694, -1.1694,
        -1.1694], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6976e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3951e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2944, -0.4521, -0.4719, -0.4814, -0.4872, -0.4911, -0.4937, -0.4955,
        -0.4968, -0.4977, -0.4983, -0.4987, -0.4990, -0.4992, -0.4994, -0.4995,
        -0.4995, -0.4996, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.4871e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3951e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1691, -1.1692, -1.1692, -1.1693, -1.1693, -1.1693, -1.1694, -1.1694,
        -1.1694, -1.1694], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997,
        -0.4997, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 9 	 0 	 H2 	 H2 	 4.39218039454718e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4557, -920.4290, -920.4229, -920.4197, -920.4177, -920.4163,
        -920.4153, -920.4146, -920.4141, -920.4137, -920.4135, -920.4133,
        -920.4132, -920.4131, -920.4131, -920.4130, -920.4130, -920.4130,
        -920.4130, -920.4130, -920.4129, -920.4129, -920.4129, -920.4129,
        -920.4129], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.6483e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.2965e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1089, -460.1345, -460.1424, -460.1467, -460.1496, -460.1516,
        -460.1530, -460.1541, -460.1548, -460.1553, -460.1557, -460.1559,
        -460.1561, -460.1562, -460.1563, -460.1564, -460.1564, -460.1564,
        -460.1565, -460.1565, -460.1565, -460.1565, -460.1565, -460.1565,
        -460.1565], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.6010e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.3041e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4130, -920.4130, -920.4130, -920.4130, -920.4130, -920.4129,
        -920.4129, -920.4129, -920.4129, -920.4129], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1564, -460.1564, -460.1564, -460.1565, -460.1565, -460.1565,
        -460.1565, -460.1565, -460.1565, -460.1565], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 9 	 5 	 Cl2 	 Cl2 	 6.737211086976575e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e09)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e09/2022-11-03_10:00:47.012831_0.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e09/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 9 || ,[' rho : 3.076093', ' ae : 72.526533', ' E : 3.357015'] ,|| total loss 53.098104 || CHKPT: _0.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-94.1683, -93.5914, -93.4334, -93.3700, -93.3219, -93.2910, -93.2687,
        -93.2529, -93.2415, -93.2333, -93.2273, -93.2230, -93.2198, -93.2175,
        -93.2158, -93.2146, -93.2136, -93.2129, -93.2124, -93.2120, -93.2118,
        -93.2115, -93.2114, -93.2113, -93.2112], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.1686e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7412, -37.7817, -37.7977, -37.8069, -37.8131, -37.8174, -37.8205,
        -37.8228, -37.8243, -37.8255, -37.8262, -37.8268, -37.8272, -37.8275,
        -37.8277, -37.8278, -37.8279, -37.8279, -37.8280, -37.8280, -37.8281,
        -37.8281, -37.8281, -37.8281, -37.8281], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1166e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2920, -0.4514, -0.4715, -0.4812, -0.4870, -0.4909, -0.4936, -0.4954,
        -0.4967, -0.4976, -0.4982, -0.4987, -0.4990, -0.4992, -0.4994, -0.4995,
        -0.4995, -0.4996, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997, -0.4997,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.5532e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4334, -54.5028, -54.5286, -54.5430, -54.5527, -54.5594, -54.5642,
        -54.5676, -54.5700, -54.5717, -54.5729, -54.5737, -54.5743, -54.5747,
        -54.5750, -54.5752, -54.5753, -54.5754, -54.5755, -54.5755, -54.5756,
        -54.5756, -54.5756, -54.5756, -54.5756], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3493e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2146, -93.2136, -93.2129, -93.2124, -93.2120, -93.2118, -93.2115,
        -93.2114, -93.2113, -93.2112], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8278, -37.8279, -37.8279, -37.8280, -37.8280, -37.8281, -37.8281,
        -37.8281, -37.8281, -37.8281], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4997, -0.4997, -0.4997,
        -0.4997, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5752, -54.5753, -54.5754, -54.5755, -54.5755, -54.5756, -54.5756,
        -54.5756, -54.5756, -54.5756], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 10 	 3 	 CHN 	 CNH 	 0.008560836221036035

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1008, -460.1293, -460.1386, -460.1438, -460.1473, -460.1498,
        -460.1515, -460.1528, -460.1537, -460.1543, -460.1548, -460.1551,
        -460.1553, -460.1555, -460.1556, -460.1557, -460.1557, -460.1558,
        -460.1558, -460.1558, -460.1558, -460.1559, -460.1559, -460.1559,
        -460.1559], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(6.4673e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(6.4673e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1557, -460.1557, -460.1558, -460.1558, -460.1558, -460.1558,
        -460.1559, -460.1559, -460.1559, -460.1559], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 10 	 7 	 Cl 	 Cl 	 1.4462689683213793e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.4744, -109.8780, -109.7321, -109.6551, -109.6056, -109.5718,
        -109.5483, -109.5318, -109.5203, -109.5122, -109.5065, -109.5026,
        -109.4998, -109.4979, -109.4965, -109.4955, -109.4949, -109.4944,
        -109.4941, -109.4938, -109.4937, -109.4936, -109.4935, -109.4934,
        -109.4934], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.3453e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4023, -54.4661, -54.5014, -54.5230, -54.5379, -54.5487, -54.5564,
        -54.5619, -54.5658, -54.5686, -54.5706, -54.5720, -54.5729, -54.5736,
        -54.5741, -54.5744, -54.5747, -54.5748, -54.5750, -54.5750, -54.5751,
        -54.5751, -54.5752, -54.5752, -54.5752], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4697e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4955, -109.4949, -109.4944, -109.4941, -109.4938, -109.4937,
        -109.4936, -109.4935, -109.4934, -109.4934], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5744, -54.5747, -54.5748, -54.5750, -54.5750, -54.5751, -54.5751,
        -54.5752, -54.5752, -54.5752], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 10 	 1 	 N2 	 N2 	 0.00010232282150701296

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7552, -37.7927, -37.8053, -37.8122, -37.8167, -37.8199, -37.8222,
        -37.8238, -37.8249, -37.8257, -37.8263, -37.8267, -37.8269, -37.8271,
        -37.8273, -37.8274, -37.8274, -37.8275, -37.8275, -37.8275, -37.8276,
        -37.8276, -37.8276, -37.8276, -37.8276], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1986e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.1986e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8274, -37.8274, -37.8275, -37.8275, -37.8275, -37.8276, -37.8276,
        -37.8276, -37.8276, -37.8276], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 10 	 6 	 C 	 C 	 3.8966850305867945e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6673, -99.6891, -99.7001, -99.7068, -99.7114, -99.7148, -99.7172,
        -99.7190, -99.7203, -99.7212, -99.7218, -99.7223, -99.7226, -99.7228,
        -99.7230, -99.7231, -99.7232, -99.7233, -99.7233, -99.7233, -99.7233,
        -99.7234, -99.7234, -99.7234, -99.7234], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2045e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.2045e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7231, -99.7232, -99.7233, -99.7233, -99.7233, -99.7233, -99.7234,
        -99.7234, -99.7234, -99.7234], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 10 	 8 	 F 	 F 	 2.5933881624791743e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2507, -107.2719, -107.2372, -107.2299, -107.2247, -107.2218,
        -107.2204, -107.2203, -107.2205, -107.2209, -107.2212, -107.2214,
        -107.2217, -107.2221, -107.2224, -107.2227, -107.2230, -107.2232,
        -107.2234, -107.2236, -107.2238, -107.2239, -107.2240, -107.2241,
        -107.2241], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.3885e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6695, -99.6929, -99.7029, -99.7088, -99.7129, -99.7159, -99.7180,
        -99.7195, -99.7206, -99.7214, -99.7219, -99.7223, -99.7226, -99.7228,
        -99.7229, -99.7230, -99.7231, -99.7231, -99.7232, -99.7232, -99.7232,
        -99.7232, -99.7232, -99.7232, -99.7232], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2287e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4581, -7.4646, -7.4682, -7.4702, -7.4716, -7.4725, -7.4735, -7.4744,
        -7.4747, -7.4745, -7.4743, -7.4742, -7.4742, -7.4742, -7.4742, -7.4742,
        -7.4743, -7.4743, -7.4743, -7.4743, -7.4743, -7.4743, -7.4744, -7.4744,
        -7.4744], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4782e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2227, -107.2230, -107.2232, -107.2234, -107.2236, -107.2238,
        -107.2239, -107.2240, -107.2241, -107.2241], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7230, -99.7231, -99.7231, -99.7232, -99.7232, -99.7232, -99.7232,
        -99.7232, -99.7232, -99.7232], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4742, -7.4743, -7.4743, -7.4743, -7.4743, -7.4743, -7.4743, -7.4744,
        -7.4744, -7.4744], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 10 	 2 	 FLi 	 LiF 	 0.008976735598652308

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0189, -1.1095, -1.1329, -1.1449, -1.1525, -1.1576, -1.1611, -1.1636,
        -1.1653, -1.1665, -1.1674, -1.1680, -1.1684, -1.1687, -1.1689, -1.1690,
        -1.1691, -1.1692, -1.1692, -1.1693, -1.1693, -1.1693, -1.1693, -1.1693,
        -1.1693], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6859e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3717e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3135, -0.4573, -0.4748, -0.4833, -0.4885, -0.4919, -0.4943, -0.4959,
        -0.4970, -0.4978, -0.4984, -0.4988, -0.4990, -0.4992, -0.4994, -0.4995,
        -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996, -0.4997, -0.4997,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.3576e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3717e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1690, -1.1691, -1.1692, -1.1692, -1.1693, -1.1693, -1.1693, -1.1693,
        -1.1693, -1.1693], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996, -0.4997,
        -0.4997, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 10 	 0 	 H2 	 H2 	 4.385014307695582e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4025, -54.4678, -54.5026, -54.5237, -54.5383, -54.5488, -54.5563,
        -54.5617, -54.5655, -54.5682, -54.5701, -54.5714, -54.5724, -54.5730,
        -54.5735, -54.5738, -54.5741, -54.5742, -54.5743, -54.5744, -54.5745,
        -54.5745, -54.5745, -54.5746, -54.5746], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5965e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.5965e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5738, -54.5741, -54.5742, -54.5743, -54.5744, -54.5745, -54.5745,
        -54.5745, -54.5746, -54.5746], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 10 	 11 	 N 	 N 	 5.019462404351302e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4533, -920.4217, -920.4143, -920.4104, -920.4079, -920.4061,
        -920.4049, -920.4040, -920.4034, -920.4030, -920.4026, -920.4024,
        -920.4023, -920.4022, -920.4021, -920.4020, -920.4020, -920.4020,
        -920.4020, -920.4019, -920.4019, -920.4019, -920.4019, -920.4019,
        -920.4019], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.5999e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.1998e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1031, -460.1288, -460.1367, -460.1411, -460.1440, -460.1460,
        -460.1475, -460.1485, -460.1493, -460.1498, -460.1501, -460.1504,
        -460.1506, -460.1507, -460.1508, -460.1509, -460.1509, -460.1509,
        -460.1510, -460.1510, -460.1510, -460.1510, -460.1510, -460.1510,
        -460.1510], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(9.2712e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.2007e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4020, -920.4020, -920.4020, -920.4020, -920.4019, -920.4019,
        -920.4019, -920.4019, -920.4019, -920.4019], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1509, -460.1509, -460.1509, -460.1510, -460.1510, -460.1510,
        -460.1510, -460.1510, -460.1510, -460.1510], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 10 	 5 	 Cl2 	 Cl2 	 6.760788715364604e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2980, -0.4531, -0.4725, -0.4817, -0.4874, -0.4912, -0.4938, -0.4956,
        -0.4968, -0.4977, -0.4983, -0.4987, -0.4990, -0.4992, -0.4993, -0.4994,
        -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996, -0.4997,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.6328e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.6328e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4994, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4997, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 10 	 9 	 H 	 H 	 2.8446139332824216e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9453, -74.9848, -75.0069, -75.0206, -75.0301, -75.0369, -75.0419,
        -75.0455, -75.0481, -75.0499, -75.0512, -75.0521, -75.0528, -75.0532,
        -75.0536, -75.0538, -75.0539, -75.0541, -75.0541, -75.0542, -75.0542,
        -75.0543, -75.0543, -75.0543, -75.0543], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8661e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.8661e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0538, -75.0539, -75.0541, -75.0541, -75.0542, -75.0542, -75.0543,
        -75.0543, -75.0543, -75.0543], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 10 	 12 	 O 	 O 	 3.9577856982898346e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4592, -7.4666, -7.4696, -7.4713, -7.4723, -7.4732, -7.4742, -7.4747,
        -7.4747, -7.4744, -7.4742, -7.4742, -7.4742, -7.4742, -7.4743, -7.4743,
        -7.4743, -7.4743, -7.4744, -7.4744, -7.4744, -7.4744, -7.4744, -7.4744,
        -7.4744], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4427e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.4427e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4743, -7.4743, -7.4743, -7.4744, -7.4744, -7.4744, -7.4744, -7.4744,
        -7.4744, -7.4744], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 10 	 10 	 Li 	 Li 	 3.1326408653010645e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.6987, -188.8182, -188.6300, -188.5202, -188.4525, -188.4064,
        -188.3743, -188.3517, -188.3357, -188.3245, -188.3165, -188.3108,
        -188.3068, -188.3039, -188.3019, -188.3004, -188.2994, -188.2987,
        -188.2981, -188.2978, -188.2975, -188.2973, -188.2972, -188.2971,
        -188.2970], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.8554e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7593, -37.7953, -37.8070, -37.8134, -37.8176, -37.8206, -37.8226,
        -37.8241, -37.8251, -37.8259, -37.8264, -37.8267, -37.8270, -37.8272,
        -37.8273, -37.8274, -37.8275, -37.8275, -37.8275, -37.8275, -37.8276,
        -37.8276, -37.8276, -37.8276, -37.8276], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1975e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9608, -75.0056, -75.0228, -75.0324, -75.0388, -75.0434, -75.0467,
        -75.0490, -75.0506, -75.0518, -75.0527, -75.0532, -75.0537, -75.0539,
        -75.0541, -75.0543, -75.0544, -75.0545, -75.0545, -75.0545, -75.0546,
        -75.0546, -75.0546, -75.0546, -75.0546], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7515e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3004, -188.2994, -188.2987, -188.2981, -188.2978, -188.2975,
        -188.2973, -188.2972, -188.2971, -188.2970], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8274, -37.8275, -37.8275, -37.8275, -37.8275, -37.8276, -37.8276,
        -37.8276, -37.8276, -37.8276], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0543, -75.0544, -75.0545, -75.0545, -75.0545, -75.0546, -75.0546,
        -75.0546, -75.0546, -75.0546], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 10 	 4 	 CO2 	 CO2 	 0.01604586757019121

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e10)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e10/2022-11-03_10:00:47.012831_1.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e10/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 10 || ,[' rho : 3.074246', ' ae : 72.184811', ' E : 3.398886'] ,|| total loss 52.862640 || CHKPT: _1.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1028, -460.1290, -460.1371, -460.1417, -460.1446, -460.1468,
        -460.1483, -460.1493, -460.1501, -460.1506, -460.1510, -460.1513,
        -460.1515, -460.1516, -460.1517, -460.1518, -460.1518, -460.1518,
        -460.1519, -460.1519, -460.1519, -460.1519, -460.1519, -460.1519,
        -460.1519], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5852e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.5852e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1518, -460.1518, -460.1518, -460.1519, -460.1519, -460.1519,
        -460.1519, -460.1519, -460.1519, -460.1519], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 11 	 7 	 Cl 	 Cl 	 3.57992961554582e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0081, -1.1053, -1.1303, -1.1432, -1.1513, -1.1568, -1.1606, -1.1632,
        -1.1651, -1.1663, -1.1673, -1.1679, -1.1683, -1.1686, -1.1689, -1.1690,
        -1.1691, -1.1692, -1.1692, -1.1693, -1.1693, -1.1693, -1.1693, -1.1693,
        -1.1693], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6873e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3746e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2590, -0.4419, -0.4662, -0.4777, -0.4847, -0.4893, -0.4925, -0.4947,
        -0.4962, -0.4972, -0.4980, -0.4985, -0.4988, -0.4991, -0.4993, -0.4994,
        -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4997], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.4206e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3746e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1690, -1.1691, -1.1692, -1.1692, -1.1693, -1.1693, -1.1693, -1.1693,
        -1.1693, -1.1693], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996, -0.4997], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 11 	 0 	 H2 	 H2 	 4.297213993215771e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2147, -0.4281, -0.4586, -0.4728, -0.4814, -0.4871, -0.4909, -0.4936,
        -0.4954, -0.4967, -0.4976, -0.4982, -0.4986, -0.4989, -0.4992, -0.4993,
        -0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.5296e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(4.5296e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4993, -0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 11 	 9 	 H 	 H 	 3.109218421717183e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.4700, -109.8759, -109.7304, -109.6536, -109.6043, -109.5706,
        -109.5471, -109.5307, -109.5192, -109.5112, -109.5055, -109.5016,
        -109.4988, -109.4969, -109.4955, -109.4946, -109.4939, -109.4934,
        -109.4931, -109.4929, -109.4927, -109.4926, -109.4925, -109.4925,
        -109.4924], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.3354e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4379, -54.5058, -54.5302, -54.5439, -54.5529, -54.5593, -54.5637,
        -54.5669, -54.5691, -54.5707, -54.5718, -54.5726, -54.5731, -54.5735,
        -54.5738, -54.5740, -54.5741, -54.5742, -54.5742, -54.5743, -54.5743,
        -54.5743, -54.5744, -54.5744, -54.5744], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5991e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4946, -109.4939, -109.4934, -109.4931, -109.4929, -109.4927,
        -109.4926, -109.4925, -109.4925, -109.4924], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5740, -54.5741, -54.5742, -54.5742, -54.5743, -54.5743, -54.5743,
        -54.5744, -54.5744, -54.5744], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 11 	 1 	 N2 	 N2 	 9.630012874175885e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-94.0724, -93.5519, -93.4120, -93.3536, -93.3104, -93.2825, -93.2623,
        -93.2480, -93.2378, -93.2304, -93.2250, -93.2211, -93.2183, -93.2162,
        -93.2147, -93.2135, -93.2127, -93.2121, -93.2116, -93.2113, -93.2110,
        -93.2108, -93.2107, -93.2106, -93.2105], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.1018e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7362, -37.7757, -37.7931, -37.8032, -37.8101, -37.8150, -37.8185,
        -37.8210, -37.8227, -37.8240, -37.8249, -37.8255, -37.8260, -37.8263,
        -37.8265, -37.8266, -37.8268, -37.8268, -37.8269, -37.8269, -37.8269,
        -37.8270, -37.8270, -37.8270, -37.8270], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3242e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3445, -0.4653, -0.4794, -0.4863, -0.4905, -0.4933, -0.4952, -0.4966,
        -0.4975, -0.4981, -0.4986, -0.4989, -0.4991, -0.4993, -0.4994, -0.4995,
        -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.0133e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4155, -54.4868, -54.5167, -54.5341, -54.5458, -54.5541, -54.5600,
        -54.5642, -54.5672, -54.5693, -54.5708, -54.5718, -54.5726, -54.5731,
        -54.5734, -54.5737, -54.5739, -54.5740, -54.5741, -54.5741, -54.5742,
        -54.5742, -54.5742, -54.5742, -54.5742], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6445e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2135, -93.2127, -93.2121, -93.2116, -93.2113, -93.2110, -93.2108,
        -93.2107, -93.2106, -93.2105], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8266, -37.8268, -37.8268, -37.8269, -37.8269, -37.8269, -37.8270,
        -37.8270, -37.8270, -37.8270], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5737, -54.5739, -54.5740, -54.5741, -54.5741, -54.5742, -54.5742,
        -54.5742, -54.5742, -54.5742], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 11 	 3 	 CHN 	 CNH 	 0.00839933687336453

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9475, -74.9907, -75.0115, -75.0239, -75.0323, -75.0384, -75.0428,
        -75.0459, -75.0482, -75.0498, -75.0509, -75.0517, -75.0523, -75.0527,
        -75.0530, -75.0532, -75.0533, -75.0534, -75.0535, -75.0535, -75.0536,
        -75.0536, -75.0536, -75.0536, -75.0536], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.0471e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.0471e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0532, -75.0533, -75.0534, -75.0535, -75.0535, -75.0536, -75.0536,
        -75.0536, -75.0536, -75.0536], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 11 	 12 	 O 	 O 	 4.3708706873035605e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.6485, -188.7975, -188.6159, -188.5101, -188.4448, -188.4005,
        -188.3695, -188.3478, -188.3324, -188.3215, -188.3139, -188.3084,
        -188.3045, -188.3018, -188.2998, -188.2984, -188.2974, -188.2967,
        -188.2962, -188.2958, -188.2956, -188.2954, -188.2952, -188.2951,
        -188.2951], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.8470e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7577, -37.7940, -37.8059, -37.8124, -37.8166, -37.8196, -37.8217,
        -37.8232, -37.8243, -37.8250, -37.8255, -37.8259, -37.8262, -37.8264,
        -37.8265, -37.8266, -37.8266, -37.8267, -37.8267, -37.8267, -37.8267,
        -37.8268, -37.8268, -37.8268, -37.8268], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3534e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9563, -75.0014, -75.0194, -75.0296, -75.0365, -75.0414, -75.0449,
        -75.0475, -75.0492, -75.0505, -75.0514, -75.0520, -75.0525, -75.0528,
        -75.0530, -75.0532, -75.0533, -75.0534, -75.0534, -75.0535, -75.0535,
        -75.0535, -75.0535, -75.0535, -75.0535], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.0618e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.2984, -188.2974, -188.2967, -188.2962, -188.2958, -188.2956,
        -188.2954, -188.2952, -188.2951, -188.2951], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8266, -37.8266, -37.8267, -37.8267, -37.8267, -37.8267, -37.8268,
        -37.8268, -37.8268, -37.8268], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0532, -75.0533, -75.0534, -75.0534, -75.0535, -75.0535, -75.0535,
        -75.0535, -75.0535, -75.0535], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 11 	 4 	 CO2 	 CO2 	 0.01591649543839528

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4414, -920.4133, -920.4068, -920.4034, -920.4011, -920.3996,
        -920.3986, -920.3978, -920.3973, -920.3969, -920.3967, -920.3965,
        -920.3963, -920.3962, -920.3962, -920.3961, -920.3961, -920.3961,
        -920.3961, -920.3961, -920.3960, -920.3960, -920.3960, -920.3960,
        -920.3960], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.5917e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.1834e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0908, -460.1201, -460.1298, -460.1352, -460.1389, -460.1415,
        -460.1434, -460.1447, -460.1457, -460.1464, -460.1469, -460.1472,
        -460.1474, -460.1476, -460.1477, -460.1478, -460.1479, -460.1479,
        -460.1479, -460.1480, -460.1480, -460.1480, -460.1480, -460.1480,
        -460.1480], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2141e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.1834e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.3961, -920.3961, -920.3961, -920.3961, -920.3961, -920.3960,
        -920.3960, -920.3960, -920.3960, -920.3960], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1478, -460.1479, -460.1479, -460.1479, -460.1480, -460.1480,
        -460.1480, -460.1480, -460.1480, -460.1480], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 11 	 5 	 Cl2 	 Cl2 	 7.11809939667001e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6707, -99.6943, -99.7036, -99.7090, -99.7127, -99.7153, -99.7172,
        -99.7186, -99.7195, -99.7202, -99.7207, -99.7211, -99.7213, -99.7215,
        -99.7216, -99.7217, -99.7217, -99.7218, -99.7218, -99.7218, -99.7218,
        -99.7219, -99.7219, -99.7219, -99.7219], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5595e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.5595e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7217, -99.7217, -99.7218, -99.7218, -99.7218, -99.7218, -99.7219,
        -99.7219, -99.7219, -99.7219], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 11 	 8 	 F 	 F 	 3.3830643738298235e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4158, -54.4871, -54.5167, -54.5338, -54.5454, -54.5535, -54.5594,
        -54.5635, -54.5664, -54.5685, -54.5699, -54.5710, -54.5717, -54.5722,
        -54.5725, -54.5728, -54.5730, -54.5731, -54.5732, -54.5732, -54.5733,
        -54.5733, -54.5733, -54.5733, -54.5733], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8450e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.8450e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5728, -54.5730, -54.5731, -54.5732, -54.5732, -54.5733, -54.5733,
        -54.5733, -54.5733, -54.5733], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 11 	 11 	 N 	 N 	 5.8923575497361644e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4589, -7.4664, -7.4693, -7.4708, -7.4719, -7.4728, -7.4737, -7.4741,
        -7.4740, -7.4737, -7.4736, -7.4736, -7.4736, -7.4736, -7.4736, -7.4737,
        -7.4737, -7.4737, -7.4737, -7.4737, -7.4738, -7.4738, -7.4738, -7.4738,
        -7.4738], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.9803e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.9803e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4737, -7.4737, -7.4737, -7.4737, -7.4737, -7.4738, -7.4738, -7.4738,
        -7.4738, -7.4738], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 11 	 10 	 Li 	 Li 	 4.309731159535895e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2299, -107.2653, -107.2306, -107.2253, -107.2211, -107.2189,
        -107.2181, -107.2182, -107.2186, -107.2192, -107.2196, -107.2200,
        -107.2204, -107.2207, -107.2211, -107.2214, -107.2217, -107.2220,
        -107.2222, -107.2224, -107.2226, -107.2227, -107.2229, -107.2229,
        -107.2230], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.4004e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6652, -99.6848, -99.6964, -99.7036, -99.7086, -99.7123, -99.7150,
        -99.7170, -99.7184, -99.7194, -99.7201, -99.7206, -99.7210, -99.7213,
        -99.7214, -99.7216, -99.7217, -99.7217, -99.7218, -99.7218, -99.7218,
        -99.7218, -99.7218, -99.7218, -99.7219], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5769e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4613, -7.4682, -7.4705, -7.4717, -7.4726, -7.4735, -7.4741, -7.4740,
        -7.4737, -7.4736, -7.4735, -7.4736, -7.4736, -7.4736, -7.4736, -7.4737,
        -7.4737, -7.4737, -7.4737, -7.4737, -7.4737, -7.4737, -7.4737, -7.4737,
        -7.4737], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.0001e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2214, -107.2217, -107.2220, -107.2222, -107.2224, -107.2226,
        -107.2227, -107.2229, -107.2229, -107.2230], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7216, -99.7217, -99.7217, -99.7218, -99.7218, -99.7218, -99.7218,
        -99.7218, -99.7218, -99.7219], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4737, -7.4737, -7.4737, -7.4737, -7.4737, -7.4737, -7.4737, -7.4737,
        -7.4737, -7.4737], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 11 	 2 	 FLi 	 LiF 	 0.008894850811764717

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7322, -37.7689, -37.7877, -37.7990, -37.8068, -37.8123, -37.8163,
        -37.8192, -37.8213, -37.8227, -37.8237, -37.8245, -37.8250, -37.8253,
        -37.8256, -37.8258, -37.8259, -37.8260, -37.8260, -37.8261, -37.8261,
        -37.8261, -37.8262, -37.8262, -37.8262], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4931e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.4931e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8258, -37.8259, -37.8260, -37.8260, -37.8261, -37.8261, -37.8261,
        -37.8262, -37.8262, -37.8262], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 11 	 6 	 C 	 C 	 4.803811209366854e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e11)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e11/2022-11-03_10:00:47.012831_2.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e11/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 11 || ,[' rho : 3.065003', ' ae : 71.801886', ' E : 3.623887'] ,|| total loss 52.590603 || CHKPT: _2.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.3169, -107.2907, -107.2554, -107.2420, -107.2338, -107.2290,
        -107.2262, -107.2245, -107.2234, -107.2228, -107.2224, -107.2222,
        -107.2221, -107.2222, -107.2224, -107.2225, -107.2227, -107.2229,
        -107.2230, -107.2231, -107.2232, -107.2233, -107.2234, -107.2235,
        -107.2235], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.4063e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6762, -99.6992, -99.7072, -99.7117, -99.7147, -99.7169, -99.7184,
        -99.7195, -99.7203, -99.7208, -99.7212, -99.7215, -99.7217, -99.7218,
        -99.7219, -99.7220, -99.7220, -99.7221, -99.7221, -99.7221, -99.7221,
        -99.7221, -99.7221, -99.7221, -99.7222], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4842e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4613, -7.4682, -7.4705, -7.4716, -7.4726, -7.4735, -7.4741, -7.4740,
        -7.4737, -7.4736, -7.4735, -7.4735, -7.4736, -7.4736, -7.4736, -7.4736,
        -7.4737, -7.4737, -7.4737, -7.4737, -7.4737, -7.4737, -7.4737, -7.4737,
        -7.4737], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.0258e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2225, -107.2227, -107.2229, -107.2230, -107.2231, -107.2232,
        -107.2233, -107.2234, -107.2235, -107.2235], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7220, -99.7220, -99.7221, -99.7221, -99.7221, -99.7221, -99.7221,
        -99.7221, -99.7221, -99.7222], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4736, -7.4737, -7.4737, -7.4737, -7.4737, -7.4737, -7.4737, -7.4737,
        -7.4737, -7.4737], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 12 	 2 	 FLi 	 LiF 	 0.00887124335210253

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0552, -1.1237, -1.1415, -1.1505, -1.1563, -1.1601, -1.1628, -1.1647,
        -1.1660, -1.1669, -1.1676, -1.1680, -1.1683, -1.1686, -1.1687, -1.1688,
        -1.1689, -1.1690, -1.1690, -1.1690, -1.1690, -1.1690, -1.1691, -1.1691,
        -1.1691], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6600e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3201e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3097, -0.4562, -0.4742, -0.4829, -0.4882, -0.4917, -0.4941, -0.4958,
        -0.4969, -0.4977, -0.4983, -0.4987, -0.4990, -0.4992, -0.4993, -0.4994,
        -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.6970e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3201e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1688, -1.1689, -1.1690, -1.1690, -1.1690, -1.1690, -1.1690, -1.1691,
        -1.1691, -1.1691], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 12 	 0 	 H2 	 H2 	 4.748426505125997e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.8532, -188.8767, -188.6677, -188.5454, -188.4697, -188.4181,
        -188.3822, -188.3570, -188.3392, -188.3265, -188.3176, -188.3113,
        -188.3068, -188.3036, -188.3013, -188.2997, -188.2986, -188.2977,
        -188.2972, -188.2967, -188.2964, -188.2962, -188.2961, -188.2960,
        -188.2959], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.8352e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7532, -37.7909, -37.8036, -37.8106, -37.8153, -37.8185, -37.8208,
        -37.8224, -37.8236, -37.8244, -37.8250, -37.8254, -37.8257, -37.8259,
        -37.8260, -37.8261, -37.8262, -37.8262, -37.8263, -37.8263, -37.8263,
        -37.8263, -37.8263, -37.8263, -37.8263], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4429e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9513, -74.9959, -75.0153, -75.0266, -75.0343, -75.0398, -75.0437,
        -75.0465, -75.0485, -75.0500, -75.0510, -75.0517, -75.0522, -75.0526,
        -75.0528, -75.0530, -75.0531, -75.0532, -75.0533, -75.0533, -75.0533,
        -75.0534, -75.0534, -75.0534, -75.0534], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.1134e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.2997, -188.2986, -188.2977, -188.2972, -188.2967, -188.2964,
        -188.2962, -188.2961, -188.2960, -188.2959], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8261, -37.8262, -37.8262, -37.8263, -37.8263, -37.8263, -37.8263,
        -37.8263, -37.8263, -37.8263], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0530, -75.0531, -75.0532, -75.0533, -75.0533, -75.0533, -75.0534,
        -75.0534, -75.0534, -75.0534], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 12 	 4 	 CO2 	 CO2 	 0.015725316448436874

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9463, -74.9885, -75.0096, -75.0224, -75.0312, -75.0375, -75.0420,
        -75.0453, -75.0476, -75.0493, -75.0505, -75.0513, -75.0519, -75.0523,
        -75.0526, -75.0528, -75.0530, -75.0531, -75.0532, -75.0532, -75.0533,
        -75.0533, -75.0533, -75.0533, -75.0533], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.1469e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.1469e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0528, -75.0530, -75.0531, -75.0532, -75.0532, -75.0533, -75.0533,
        -75.0533, -75.0533, -75.0533], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 12 	 12 	 O 	 O 	 4.581275137876244e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7373, -37.7773, -37.7940, -37.8036, -37.8102, -37.8148, -37.8181,
        -37.8205, -37.8222, -37.8234, -37.8242, -37.8248, -37.8252, -37.8255,
        -37.8257, -37.8259, -37.8260, -37.8260, -37.8261, -37.8261, -37.8261,
        -37.8262, -37.8262, -37.8262, -37.8262], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4842e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.4842e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8259, -37.8260, -37.8260, -37.8261, -37.8261, -37.8261, -37.8262,
        -37.8262, -37.8262, -37.8262], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 12 	 6 	 C 	 C 	 4.7985139945190265e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-94.0904, -93.5585, -93.4149, -93.3558, -93.3116, -93.2832, -93.2627,
        -93.2482, -93.2378, -93.2303, -93.2249, -93.2210, -93.2181, -93.2160,
        -93.2145, -93.2134, -93.2125, -93.2119, -93.2114, -93.2111, -93.2108,
        -93.2107, -93.2105, -93.2104, -93.2103], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.0508e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7463, -37.7859, -37.8001, -37.8081, -37.8134, -37.8171, -37.8198,
        -37.8217, -37.8230, -37.8240, -37.8246, -37.8251, -37.8254, -37.8257,
        -37.8258, -37.8259, -37.8260, -37.8261, -37.8261, -37.8261, -37.8262,
        -37.8262, -37.8262, -37.8262, -37.8262], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4735e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2529, -0.4400, -0.4651, -0.4770, -0.4842, -0.4890, -0.4922, -0.4945,
        -0.4960, -0.4971, -0.4979, -0.4984, -0.4988, -0.4990, -0.4992, -0.4993,
        -0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.8354e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4096, -54.4799, -54.5115, -54.5300, -54.5427, -54.5517, -54.5581,
        -54.5627, -54.5659, -54.5682, -54.5698, -54.5710, -54.5717, -54.5723,
        -54.5727, -54.5730, -54.5732, -54.5733, -54.5734, -54.5735, -54.5735,
        -54.5735, -54.5736, -54.5736, -54.5736], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7937e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2134, -93.2125, -93.2119, -93.2114, -93.2111, -93.2108, -93.2107,
        -93.2105, -93.2104, -93.2103], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8259, -37.8260, -37.8261, -37.8261, -37.8261, -37.8262, -37.8262,
        -37.8262, -37.8262, -37.8262], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4993, -0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5730, -54.5732, -54.5733, -54.5734, -54.5735, -54.5735, -54.5735,
        -54.5736, -54.5736, -54.5736], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 12 	 3 	 CHN 	 CNH 	 0.00828243478873469

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4592, -7.4666, -7.4694, -7.4708, -7.4718, -7.4727, -7.4736, -7.4739,
        -7.4737, -7.4734, -7.4733, -7.4733, -7.4733, -7.4734, -7.4734, -7.4734,
        -7.4734, -7.4735, -7.4735, -7.4735, -7.4735, -7.4735, -7.4735, -7.4735,
        -7.4735], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.2213e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.2213e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4734, -7.4734, -7.4735, -7.4735, -7.4735, -7.4735, -7.4735, -7.4735,
        -7.4735, -7.4735], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 12 	 10 	 Li 	 Li 	 4.837816165673575e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4395, -920.4167, -920.4116, -920.4090, -920.4073, -920.4061,
        -920.4053, -920.4048, -920.4044, -920.4041, -920.4039, -920.4038,
        -920.4037, -920.4036, -920.4036, -920.4035, -920.4035, -920.4035,
        -920.4035, -920.4035, -920.4035, -920.4035, -920.4035, -920.4034,
        -920.4034], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.6570e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.3141e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0995, -460.1269, -460.1356, -460.1404, -460.1437, -460.1460,
        -460.1476, -460.1488, -460.1496, -460.1502, -460.1506, -460.1509,
        -460.1511, -460.1512, -460.1513, -460.1514, -460.1515, -460.1515,
        -460.1515, -460.1515, -460.1515, -460.1516, -460.1516, -460.1516,
        -460.1516], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3105e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.3154e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4035, -920.4035, -920.4035, -920.4035, -920.4035, -920.4035,
        -920.4035, -920.4035, -920.4034, -920.4034], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1514, -460.1515, -460.1515, -460.1515, -460.1515, -460.1515,
        -460.1516, -460.1516, -460.1516, -460.1516], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 12 	 5 	 Cl2 	 Cl2 	 7.794318347541068e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4410, -54.5077, -54.5313, -54.5444, -54.5530, -54.5591, -54.5634,
        -54.5664, -54.5685, -54.5700, -54.5711, -54.5718, -54.5723, -54.5727,
        -54.5730, -54.5731, -54.5733, -54.5733, -54.5734, -54.5734, -54.5735,
        -54.5735, -54.5735, -54.5735, -54.5735], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7824e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.7824e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5731, -54.5733, -54.5733, -54.5734, -54.5734, -54.5735, -54.5735,
        -54.5735, -54.5735, -54.5735], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 12 	 11 	 N 	 N 	 5.745239853789457e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.9212, -109.3957, -109.4971, -109.5014, -109.4981, -109.4953,
        -109.4936, -109.4926, -109.4921, -109.4919, -109.4918, -109.4918,
        -109.4918, -109.4919, -109.4919, -109.4919, -109.4920, -109.4920,
        -109.4920, -109.4920, -109.4920, -109.4920, -109.4920, -109.4920,
        -109.4920], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.3203e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4197, -54.4907, -54.5194, -54.5358, -54.5469, -54.5547, -54.5603,
        -54.5642, -54.5670, -54.5690, -54.5703, -54.5713, -54.5720, -54.5725,
        -54.5728, -54.5731, -54.5732, -54.5733, -54.5734, -54.5735, -54.5735,
        -54.5735, -54.5736, -54.5736, -54.5736], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7841e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4919, -109.4920, -109.4920, -109.4920, -109.4920, -109.4920,
        -109.4920, -109.4920, -109.4920, -109.4920], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5731, -54.5732, -54.5733, -54.5734, -54.5735, -54.5735, -54.5735,
        -54.5736, -54.5736, -54.5736], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 12 	 1 	 N2 	 N2 	 8.586096297526761e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0887, -460.1201, -460.1311, -460.1374, -460.1417, -460.1448,
        -460.1470, -460.1486, -460.1497, -460.1505, -460.1511, -460.1515,
        -460.1518, -460.1520, -460.1521, -460.1522, -460.1523, -460.1524,
        -460.1524, -460.1524, -460.1524, -460.1524, -460.1525, -460.1525,
        -460.1525], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.0453e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.0453e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1522, -460.1523, -460.1524, -460.1524, -460.1524, -460.1524,
        -460.1524, -460.1525, -460.1525, -460.1525], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 12 	 7 	 Cl 	 Cl 	 4.651932006370898e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6721, -99.6955, -99.7048, -99.7102, -99.7139, -99.7166, -99.7185,
        -99.7199, -99.7208, -99.7215, -99.7220, -99.7224, -99.7226, -99.7228,
        -99.7229, -99.7230, -99.7230, -99.7231, -99.7231, -99.7231, -99.7231,
        -99.7232, -99.7232, -99.7232, -99.7232], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2433e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.2433e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7230, -99.7230, -99.7231, -99.7231, -99.7231, -99.7231, -99.7232,
        -99.7232, -99.7232, -99.7232], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 12 	 8 	 F 	 F 	 2.6923097376766945e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2139, -0.4278, -0.4584, -0.4727, -0.4813, -0.4870, -0.4909, -0.4935,
        -0.4954, -0.4966, -0.4975, -0.4982, -0.4986, -0.4989, -0.4991, -0.4993,
        -0.4994, -0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.8775e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(4.8775e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4993, -0.4994, -0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 12 	 9 	 H 	 H 	 3.90612251878899e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e12)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e12/2022-11-03_10:00:47.012831_0.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e12/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 12 || ,[' rho : 3.056419', ' ae : 71.430548', ' E : 3.671127'] ,|| total loss 52.327147 || CHKPT: _0.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2207, -107.2638, -107.2296, -107.2254, -107.2218, -107.2200,
        -107.2197, -107.2198, -107.2204, -107.2211, -107.2216, -107.2221,
        -107.2225, -107.2229, -107.2233, -107.2236, -107.2240, -107.2243,
        -107.2245, -107.2247, -107.2249, -107.2251, -107.2252, -107.2253,
        -107.2254], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.4470e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6729, -99.6964, -99.7055, -99.7108, -99.7144, -99.7170, -99.7188,
        -99.7201, -99.7211, -99.7218, -99.7222, -99.7226, -99.7228, -99.7230,
        -99.7231, -99.7232, -99.7232, -99.7233, -99.7233, -99.7233, -99.7233,
        -99.7233, -99.7234, -99.7234, -99.7234], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1991e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4602, -7.4674, -7.4699, -7.4711, -7.4721, -7.4730, -7.4737, -7.4737,
        -7.4735, -7.4733, -7.4732, -7.4732, -7.4733, -7.4733, -7.4733, -7.4734,
        -7.4734, -7.4734, -7.4734, -7.4734, -7.4734, -7.4734, -7.4734, -7.4734,
        -7.4734], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.2942e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2236, -107.2240, -107.2243, -107.2245, -107.2247, -107.2249,
        -107.2251, -107.2252, -107.2253, -107.2254], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7232, -99.7232, -99.7233, -99.7233, -99.7233, -99.7233, -99.7233,
        -99.7234, -99.7234, -99.7234], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4734, -7.4734, -7.4734, -7.4734, -7.4734, -7.4734, -7.4734, -7.4734,
        -7.4734, -7.4734], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 13 	 2 	 FLi 	 LiF 	 0.008793278096397673

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6755, -99.6988, -99.7073, -99.7121, -99.7154, -99.7177, -99.7194,
        -99.7206, -99.7215, -99.7221, -99.7225, -99.7228, -99.7230, -99.7232,
        -99.7233, -99.7233, -99.7234, -99.7234, -99.7235, -99.7235, -99.7235,
        -99.7235, -99.7235, -99.7235, -99.7235], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1642e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.1642e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7233, -99.7234, -99.7234, -99.7235, -99.7235, -99.7235, -99.7235,
        -99.7235, -99.7235, -99.7235], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 13 	 8 	 F 	 F 	 2.5251077073280185e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0398, -1.1175, -1.1377, -1.1480, -1.1545, -1.1589, -1.1619, -1.1640,
        -1.1655, -1.1666, -1.1673, -1.1678, -1.1682, -1.1684, -1.1686, -1.1687,
        -1.1688, -1.1688, -1.1689, -1.1689, -1.1689, -1.1690, -1.1690, -1.1690,
        -1.1690], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6589e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3178e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2320, -0.4336, -0.4616, -0.4747, -0.4827, -0.4879, -0.4915, -0.4940,
        -0.4957, -0.4969, -0.4977, -0.4983, -0.4987, -0.4990, -0.4992, -0.4993,
        -0.4994, -0.4995, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.3764e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3178e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1687, -1.1688, -1.1688, -1.1689, -1.1689, -1.1689, -1.1690, -1.1690,
        -1.1690, -1.1690], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4993, -0.4994, -0.4995, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 13 	 0 	 H2 	 H2 	 4.8698518934175e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9569, -75.0017, -75.0198, -75.0301, -75.0371, -75.0420, -75.0456,
        -75.0481, -75.0499, -75.0512, -75.0521, -75.0528, -75.0532, -75.0535,
        -75.0538, -75.0539, -75.0540, -75.0541, -75.0542, -75.0542, -75.0542,
        -75.0542, -75.0543, -75.0543, -75.0543], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8508e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.8508e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0539, -75.0540, -75.0541, -75.0542, -75.0542, -75.0542, -75.0542,
        -75.0543, -75.0543, -75.0543], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 13 	 12 	 O 	 O 	 3.97272546245161e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4657, -920.4326, -920.4246, -920.4204, -920.4177, -920.4158,
        -920.4145, -920.4135, -920.4129, -920.4124, -920.4121, -920.4118,
        -920.4117, -920.4116, -920.4115, -920.4114, -920.4114, -920.4114,
        -920.4113, -920.4113, -920.4113, -920.4113, -920.4113, -920.4113,
        -920.4113], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.6497e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.2995e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0966, -460.1264, -460.1365, -460.1422, -460.1460, -460.1487,
        -460.1507, -460.1521, -460.1531, -460.1538, -460.1543, -460.1546,
        -460.1549, -460.1551, -460.1552, -460.1553, -460.1553, -460.1554,
        -460.1554, -460.1554, -460.1554, -460.1555, -460.1555, -460.1555,
        -460.1555], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.8143e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.3053e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4114, -920.4114, -920.4114, -920.4113, -920.4113, -920.4113,
        -920.4113, -920.4113, -920.4113, -920.4113], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1553, -460.1553, -460.1554, -460.1554, -460.1554, -460.1554,
        -460.1555, -460.1555, -460.1555, -460.1555], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 13 	 5 	 Cl2 	 Cl2 	 7.91880070310101e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7343, -37.7724, -37.7905, -37.8012, -37.8085, -37.8137, -37.8175,
        -37.8202, -37.8221, -37.8234, -37.8244, -37.8251, -37.8256, -37.8259,
        -37.8261, -37.8263, -37.8264, -37.8265, -37.8266, -37.8266, -37.8266,
        -37.8266, -37.8267, -37.8267, -37.8267], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3901e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.3901e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8263, -37.8264, -37.8265, -37.8266, -37.8266, -37.8266, -37.8266,
        -37.8267, -37.8267, -37.8267], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 13 	 6 	 C 	 C 	 4.476564030350296e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4579, -7.4651, -7.4684, -7.4702, -7.4713, -7.4722, -7.4732, -7.4739,
        -7.4739, -7.4736, -7.4734, -7.4734, -7.4734, -7.4734, -7.4735, -7.4735,
        -7.4735, -7.4735, -7.4736, -7.4736, -7.4736, -7.4736, -7.4736, -7.4736,
        -7.4736], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.1352e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.1352e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4735, -7.4735, -7.4735, -7.4736, -7.4736, -7.4736, -7.4736, -7.4736,
        -7.4736, -7.4736], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 13 	 10 	 Li 	 Li 	 4.641557532585009e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-93.9752, -93.5127, -93.3919, -93.3392, -93.3014, -93.2766, -93.2589,
        -93.2464, -93.2374, -93.2309, -93.2262, -93.2228, -93.2203, -93.2185,
        -93.2171, -93.2161, -93.2154, -93.2148, -93.2144, -93.2141, -93.2139,
        -93.2138, -93.2136, -93.2135, -93.2135], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.0084e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7502, -37.7890, -37.8025, -37.8100, -37.8150, -37.8185, -37.8210,
        -37.8228, -37.8240, -37.8249, -37.8255, -37.8260, -37.8263, -37.8265,
        -37.8267, -37.8268, -37.8268, -37.8269, -37.8269, -37.8269, -37.8270,
        -37.8270, -37.8270, -37.8270, -37.8270], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3128e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2266, -0.4319, -0.4607, -0.4742, -0.4823, -0.4877, -0.4913, -0.4939,
        -0.4956, -0.4968, -0.4977, -0.4983, -0.4987, -0.4990, -0.4992, -0.4993,
        -0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.3935e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4437, -54.5099, -54.5332, -54.5461, -54.5547, -54.5606, -54.5649,
        -54.5678, -54.5699, -54.5714, -54.5725, -54.5732, -54.5737, -54.5741,
        -54.5743, -54.5745, -54.5746, -54.5747, -54.5748, -54.5748, -54.5748,
        -54.5748, -54.5749, -54.5749, -54.5749], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4921e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2161, -93.2154, -93.2148, -93.2144, -93.2141, -93.2139, -93.2138,
        -93.2136, -93.2135, -93.2135], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8268, -37.8268, -37.8269, -37.8269, -37.8269, -37.8270, -37.8270,
        -37.8270, -37.8270, -37.8270], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4993, -0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5745, -54.5746, -54.5747, -54.5748, -54.5748, -54.5748, -54.5748,
        -54.5749, -54.5749, -54.5749], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 13 	 3 	 CHN 	 CNH 	 0.008192343221294623

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.3724, -188.6964, -188.5538, -188.4708, -188.4199, -188.3853,
        -188.3611, -188.3442, -188.3322, -188.3237, -188.3177, -188.3134,
        -188.3104, -188.3083, -188.3067, -188.3056, -188.3048, -188.3043,
        -188.3039, -188.3036, -188.3034, -188.3032, -188.3031, -188.3031,
        -188.3030], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.8194e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7351, -37.7734, -37.7913, -37.8019, -37.8092, -37.8143, -37.8180,
        -37.8207, -37.8226, -37.8239, -37.8248, -37.8255, -37.8260, -37.8263,
        -37.8265, -37.8267, -37.8268, -37.8269, -37.8270, -37.8270, -37.8270,
        -37.8270, -37.8271, -37.8271, -37.8271], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3105e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9470, -74.9828, -75.0053, -75.0197, -75.0297, -75.0370, -75.0422,
        -75.0461, -75.0488, -75.0508, -75.0522, -75.0532, -75.0539, -75.0544,
        -75.0547, -75.0550, -75.0551, -75.0553, -75.0554, -75.0554, -75.0555,
        -75.0555, -75.0555, -75.0555, -75.0555], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5430e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3056, -188.3048, -188.3043, -188.3039, -188.3036, -188.3034,
        -188.3032, -188.3031, -188.3031, -188.3030], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8267, -37.8268, -37.8269, -37.8270, -37.8270, -37.8270, -37.8270,
        -37.8271, -37.8271, -37.8271], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0550, -75.0551, -75.0553, -75.0554, -75.0554, -75.0555, -75.0555,
        -75.0555, -75.0555, -75.0555], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 13 	 4 	 CO2 	 CO2 	 0.015474694610164675

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4306, -54.5002, -54.5265, -54.5413, -54.5512, -54.5582, -54.5631,
        -54.5666, -54.5691, -54.5708, -54.5720, -54.5729, -54.5735, -54.5739,
        -54.5742, -54.5744, -54.5746, -54.5747, -54.5747, -54.5748, -54.5748,
        -54.5748, -54.5749, -54.5749, -54.5749], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4993e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.4993e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5744, -54.5746, -54.5747, -54.5747, -54.5748, -54.5748, -54.5748,
        -54.5749, -54.5749, -54.5749], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 13 	 11 	 N 	 N 	 4.7999841153191044e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3178, -0.4584, -0.4755, -0.4837, -0.4887, -0.4921, -0.4944, -0.4960,
        -0.4971, -0.4978, -0.4984, -0.4988, -0.4990, -0.4992, -0.4993, -0.4994,
        -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.5396e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.5396e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 13 	 9 	 H 	 H 	 3.4450147048184294e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0957, -460.1269, -460.1379, -460.1441, -460.1483, -460.1513,
        -460.1535, -460.1551, -460.1562, -460.1570, -460.1575, -460.1579,
        -460.1582, -460.1584, -460.1586, -460.1587, -460.1587, -460.1588,
        -460.1588, -460.1588, -460.1589, -460.1589, -460.1589, -460.1589,
        -460.1589], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2376e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.2376e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1587, -460.1587, -460.1588, -460.1588, -460.1588, -460.1589,
        -460.1589, -460.1589, -460.1589, -460.1589], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 13 	 7 	 Cl 	 Cl 	 2.763826869785946e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.4291, -109.8652, -109.7244, -109.6503, -109.6027, -109.5703,
        -109.5476, -109.5318, -109.5207, -109.5130, -109.5075, -109.5037,
        -109.5010, -109.4992, -109.4979, -109.4969, -109.4963, -109.4958,
        -109.4955, -109.4953, -109.4952, -109.4950, -109.4950, -109.4949,
        -109.4949], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.3158e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4272, -54.4974, -54.5244, -54.5397, -54.5500, -54.5572, -54.5624,
        -54.5660, -54.5685, -54.5704, -54.5716, -54.5725, -54.5732, -54.5736,
        -54.5739, -54.5741, -54.5743, -54.5744, -54.5745, -54.5745, -54.5745,
        -54.5746, -54.5746, -54.5746, -54.5746], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5591e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4969, -109.4963, -109.4958, -109.4955, -109.4953, -109.4952,
        -109.4950, -109.4950, -109.4949, -109.4949], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5741, -54.5743, -54.5744, -54.5745, -54.5745, -54.5745, -54.5746,
        -54.5746, -54.5746, -54.5746], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 13 	 1 	 N2 	 N2 	 7.820324753517906e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e13)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e13/2022-11-03_10:00:47.012831_1.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e13/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 13 || ,[' rho : 3.053562', ' ae : 70.972764', ' E : 3.572807'] ,|| total loss 52.011336 || CHKPT: _1.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0304, -1.1139, -1.1355, -1.1465, -1.1535, -1.1582, -1.1615, -1.1637,
        -1.1653, -1.1664, -1.1672, -1.1678, -1.1681, -1.1684, -1.1686, -1.1687,
        -1.1688, -1.1689, -1.1689, -1.1690, -1.1690, -1.1690, -1.1690, -1.1690,
        -1.1690], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6684e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3368e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2792, -0.4478, -0.4694, -0.4798, -0.4861, -0.4903, -0.4931, -0.4951,
        -0.4964, -0.4974, -0.4981, -0.4985, -0.4989, -0.4991, -0.4992, -0.4994,
        -0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.3203e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3368e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1687, -1.1688, -1.1689, -1.1689, -1.1690, -1.1690, -1.1690, -1.1690,
        -1.1690, -1.1690], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4994, -0.4994, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 14 	 0 	 H2 	 H2 	 4.778053053200731e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.7660, -109.8456, -109.7227, -109.6494, -109.6016, -109.5690,
        -109.5463, -109.5305, -109.5195, -109.5118, -109.5064, -109.5027,
        -109.5001, -109.4982, -109.4969, -109.4961, -109.4954, -109.4950,
        -109.4947, -109.4945, -109.4943, -109.4942, -109.4941, -109.4941,
        -109.4940], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.3136e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4043, -54.4706, -54.5045, -54.5250, -54.5392, -54.5493, -54.5565,
        -54.5617, -54.5654, -54.5680, -54.5698, -54.5711, -54.5720, -54.5727,
        -54.5731, -54.5734, -54.5736, -54.5738, -54.5739, -54.5740, -54.5740,
        -54.5741, -54.5741, -54.5741, -54.5741], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6863e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4961, -109.4954, -109.4950, -109.4947, -109.4945, -109.4943,
        -109.4942, -109.4941, -109.4941, -109.4940], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5734, -54.5736, -54.5738, -54.5739, -54.5740, -54.5740, -54.5741,
        -54.5741, -54.5741, -54.5741], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 14 	 1 	 N2 	 N2 	 7.715086751773054e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6738, -99.6971, -99.7063, -99.7116, -99.7152, -99.7178, -99.7197,
        -99.7210, -99.7220, -99.7227, -99.7231, -99.7235, -99.7237, -99.7239,
        -99.7240, -99.7241, -99.7241, -99.7242, -99.7242, -99.7242, -99.7242,
        -99.7243, -99.7243, -99.7243, -99.7243], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0041e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.0041e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7241, -99.7241, -99.7242, -99.7242, -99.7242, -99.7242, -99.7243,
        -99.7243, -99.7243, -99.7243], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 14 	 8 	 F 	 F 	 2.1711369869732565e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4589, -7.4664, -7.4691, -7.4706, -7.4716, -7.4725, -7.4734, -7.4737,
        -7.4734, -7.4732, -7.4731, -7.4731, -7.4731, -7.4732, -7.4732, -7.4732,
        -7.4732, -7.4733, -7.4733, -7.4733, -7.4733, -7.4733, -7.4733, -7.4733,
        -7.4733], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.4236e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.4236e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4732, -7.4732, -7.4733, -7.4733, -7.4733, -7.4733, -7.4733, -7.4733,
        -7.4733, -7.4733], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 14 	 10 	 Li 	 Li 	 5.279014818373835e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4036, -54.4693, -54.5035, -54.5241, -54.5384, -54.5486, -54.5559,
        -54.5612, -54.5649, -54.5675, -54.5694, -54.5707, -54.5716, -54.5723,
        -54.5727, -54.5730, -54.5733, -54.5734, -54.5735, -54.5736, -54.5736,
        -54.5737, -54.5737, -54.5737, -54.5737], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7730e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.7730e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5730, -54.5733, -54.5734, -54.5735, -54.5736, -54.5736, -54.5737,
        -54.5737, -54.5737, -54.5737], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 14 	 11 	 N 	 N 	 5.5978644024306505e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4471, -920.4226, -920.4169, -920.4140, -920.4121, -920.4108,
        -920.4099, -920.4093, -920.4088, -920.4085, -920.4083, -920.4082,
        -920.4080, -920.4080, -920.4079, -920.4079, -920.4079, -920.4078,
        -920.4078, -920.4078, -920.4078, -920.4078, -920.4078, -920.4078,
        -920.4078], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.6262e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.2523e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0905, -460.1217, -460.1326, -460.1389, -460.1431, -460.1461,
        -460.1483, -460.1498, -460.1510, -460.1518, -460.1523, -460.1527,
        -460.1530, -460.1532, -460.1534, -460.1535, -460.1535, -460.1536,
        -460.1536, -460.1536, -460.1536, -460.1537, -460.1537, -460.1537,
        -460.1537], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.3205e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.2556e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4079, -920.4079, -920.4078, -920.4078, -920.4078, -920.4078,
        -920.4078, -920.4078, -920.4078, -920.4078], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1535, -460.1535, -460.1536, -460.1536, -460.1536, -460.1536,
        -460.1537, -460.1537, -460.1537, -460.1537], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 14 	 5 	 Cl2 	 Cl2 	 8.201560566848194e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.3165, -107.2930, -107.2576, -107.2446, -107.2366, -107.2319,
        -107.2291, -107.2275, -107.2265, -107.2259, -107.2255, -107.2254,
        -107.2254, -107.2255, -107.2256, -107.2258, -107.2260, -107.2262,
        -107.2263, -107.2265, -107.2266, -107.2267, -107.2268, -107.2268,
        -107.2269], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.4687e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6691, -99.6907, -99.7014, -99.7079, -99.7124, -99.7157, -99.7181,
        -99.7198, -99.7211, -99.7219, -99.7226, -99.7230, -99.7233, -99.7235,
        -99.7237, -99.7238, -99.7239, -99.7239, -99.7240, -99.7240, -99.7240,
        -99.7240, -99.7240, -99.7241, -99.7241], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.0544e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4615, -7.4682, -7.4703, -7.4714, -7.4724, -7.4733, -7.4737, -7.4735,
        -7.4732, -7.4731, -7.4731, -7.4731, -7.4731, -7.4732, -7.4732, -7.4732,
        -7.4732, -7.4732, -7.4733, -7.4733, -7.4733, -7.4733, -7.4733, -7.4733,
        -7.4733], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.4472e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2258, -107.2260, -107.2262, -107.2263, -107.2265, -107.2266,
        -107.2267, -107.2268, -107.2268, -107.2269], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7238, -99.7239, -99.7239, -99.7240, -99.7240, -99.7240, -99.7240,
        -99.7240, -99.7241, -99.7241], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4732, -7.4732, -7.4732, -7.4733, -7.4733, -7.4733, -7.4733, -7.4733,
        -7.4733, -7.4733], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 14 	 2 	 FLi 	 LiF 	 0.008700150719968077

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9496, -74.9928, -75.0131, -75.0252, -75.0335, -75.0394, -75.0437,
        -75.0467, -75.0489, -75.0505, -75.0516, -75.0524, -75.0529, -75.0533,
        -75.0536, -75.0538, -75.0539, -75.0540, -75.0541, -75.0541, -75.0542,
        -75.0542, -75.0542, -75.0542, -75.0542], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8743e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.8743e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0538, -75.0539, -75.0540, -75.0541, -75.0541, -75.0542, -75.0542,
        -75.0542, -75.0542, -75.0542], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 14 	 12 	 O 	 O 	 3.9998689735730965e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-94.0379, -93.5381, -93.4047, -93.3487, -93.3074, -93.2808, -93.2617,
        -93.2481, -93.2384, -93.2315, -93.2264, -93.2228, -93.2201, -93.2182,
        -93.2167, -93.2157, -93.2149, -93.2143, -93.2139, -93.2136, -93.2134,
        -93.2132, -93.2131, -93.2130, -93.2129], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.9714e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7547, -37.7918, -37.8042, -37.8110, -37.8155, -37.8187, -37.8209,
        -37.8225, -37.8236, -37.8244, -37.8249, -37.8253, -37.8256, -37.8258,
        -37.8259, -37.8260, -37.8261, -37.8261, -37.8262, -37.8262, -37.8262,
        -37.8262, -37.8262, -37.8262, -37.8262], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4645e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3009, -0.4538, -0.4729, -0.4820, -0.4876, -0.4913, -0.4938, -0.4956,
        -0.4968, -0.4976, -0.4982, -0.4986, -0.4989, -0.4991, -0.4993, -0.4994,
        -0.4994, -0.4995, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.0217e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4386, -54.5060, -54.5302, -54.5437, -54.5527, -54.5590, -54.5634,
        -54.5665, -54.5687, -54.5703, -54.5714, -54.5722, -54.5727, -54.5731,
        -54.5733, -54.5735, -54.5737, -54.5737, -54.5738, -54.5739, -54.5739,
        -54.5739, -54.5739, -54.5739, -54.5739], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6932e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2157, -93.2149, -93.2143, -93.2139, -93.2136, -93.2134, -93.2132,
        -93.2131, -93.2130, -93.2129], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8260, -37.8261, -37.8261, -37.8262, -37.8262, -37.8262, -37.8262,
        -37.8262, -37.8262, -37.8262], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5735, -54.5737, -54.5737, -54.5738, -54.5739, -54.5739, -54.5739,
        -54.5739, -54.5739, -54.5739], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 14 	 3 	 CHN 	 CNH 	 0.008088579068695232

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.6626, -188.8058, -188.6239, -188.5176, -188.4520, -188.4074,
        -188.3763, -188.3545, -188.3390, -188.3281, -188.3204, -188.3149,
        -188.3110, -188.3083, -188.3063, -188.3049, -188.3039, -188.3032,
        -188.3027, -188.3023, -188.3020, -188.3019, -188.3017, -188.3016,
        -188.3016], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.8082e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7418, -37.7818, -37.7972, -37.8060, -37.8119, -37.8161, -37.8190,
        -37.8212, -37.8227, -37.8237, -37.8245, -37.8250, -37.8254, -37.8256,
        -37.8258, -37.8260, -37.8260, -37.8261, -37.8261, -37.8262, -37.8262,
        -37.8262, -37.8262, -37.8262, -37.8262], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4682e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9462, -74.9835, -75.0057, -75.0197, -75.0294, -75.0365, -75.0416,
        -75.0453, -75.0480, -75.0499, -75.0512, -75.0522, -75.0528, -75.0533,
        -75.0537, -75.0539, -75.0541, -75.0542, -75.0543, -75.0543, -75.0544,
        -75.0544, -75.0544, -75.0544, -75.0544], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8312e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3049, -188.3039, -188.3032, -188.3027, -188.3023, -188.3020,
        -188.3019, -188.3017, -188.3016, -188.3016], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8260, -37.8260, -37.8261, -37.8261, -37.8262, -37.8262, -37.8262,
        -37.8262, -37.8262, -37.8262], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0539, -75.0541, -75.0542, -75.0543, -75.0543, -75.0544, -75.0544,
        -75.0544, -75.0544, -75.0544], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 14 	 4 	 CO2 	 CO2 	 0.015285433374660217

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7362, -37.7755, -37.7926, -37.8026, -37.8094, -37.8142, -37.8177,
        -37.8201, -37.8219, -37.8231, -37.8240, -37.8246, -37.8251, -37.8254,
        -37.8256, -37.8258, -37.8259, -37.8259, -37.8260, -37.8260, -37.8260,
        -37.8261, -37.8261, -37.8261, -37.8261], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5034e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.5034e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8258, -37.8259, -37.8259, -37.8260, -37.8260, -37.8260, -37.8261,
        -37.8261, -37.8261, -37.8261], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 14 	 6 	 C 	 C 	 4.8562938468675574e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1075, -460.1324, -460.1400, -460.1442, -460.1470, -460.1489,
        -460.1503, -460.1513, -460.1520, -460.1525, -460.1528, -460.1531,
        -460.1533, -460.1534, -460.1535, -460.1535, -460.1536, -460.1536,
        -460.1536, -460.1536, -460.1536, -460.1536, -460.1536, -460.1537,
        -460.1537], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.3342e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3342e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1535, -460.1536, -460.1536, -460.1536, -460.1536, -460.1536,
        -460.1536, -460.1536, -460.1537, -460.1537], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 14 	 7 	 Cl 	 Cl 	 7.463769619393519e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3255, -0.4604, -0.4766, -0.4844, -0.4892, -0.4924, -0.4946, -0.4961,
        -0.4971, -0.4979, -0.4984, -0.4988, -0.4990, -0.4992, -0.4993, -0.4994,
        -0.4994, -0.4995, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.7183e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.7183e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4996, -0.4996, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 14 	 9 	 H 	 H 	 4.256105996844089e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e14)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e14/2022-11-03_10:00:47.012831_2.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e14/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 14 || ,[' rho : 3.049756', ' ae : 70.540038', ' E : 3.564157'] ,|| total loss 51.711660 || CHKPT: _2.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6724, -99.6956, -99.7049, -99.7104, -99.7142, -99.7169, -99.7188,
        -99.7202, -99.7212, -99.7219, -99.7224, -99.7227, -99.7230, -99.7231,
        -99.7233, -99.7234, -99.7234, -99.7235, -99.7235, -99.7235, -99.7235,
        -99.7235, -99.7235, -99.7235, -99.7235], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1584e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.1584e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7234, -99.7234, -99.7235, -99.7235, -99.7235, -99.7235, -99.7235,
        -99.7235, -99.7235, -99.7235], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 15 	 8 	 F 	 F 	 2.506276573965188e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0995, -460.1269, -460.1356, -460.1405, -460.1437, -460.1460,
        -460.1477, -460.1488, -460.1497, -460.1503, -460.1507, -460.1510,
        -460.1512, -460.1513, -460.1514, -460.1515, -460.1515, -460.1516,
        -460.1516, -460.1516, -460.1516, -460.1516, -460.1516, -460.1517,
        -460.1517], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3752e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.3752e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1515, -460.1515, -460.1516, -460.1516, -460.1516, -460.1516,
        -460.1516, -460.1516, -460.1517, -460.1517], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 15 	 7 	 Cl 	 Cl 	 3.11732208517144e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.9170, -109.4138, -109.5061, -109.5072, -109.5022, -109.4983,
        -109.4958, -109.4943, -109.4934, -109.4929, -109.4927, -109.4925,
        -109.4925, -109.4924, -109.4924, -109.4924, -109.4924, -109.4924,
        -109.4924, -109.4924, -109.4924, -109.4924, -109.4924, -109.4924,
        -109.4924], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.3042e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4071, -54.4758, -54.5082, -54.5275, -54.5407, -54.5501, -54.5568,
        -54.5616, -54.5650, -54.5674, -54.5691, -54.5703, -54.5711, -54.5717,
        -54.5721, -54.5724, -54.5726, -54.5727, -54.5728, -54.5729, -54.5730,
        -54.5730, -54.5730, -54.5730, -54.5730], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.9238e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4924, -109.4924, -109.4924, -109.4924, -109.4924, -109.4924,
        -109.4924, -109.4924, -109.4924, -109.4924], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5724, -54.5726, -54.5727, -54.5728, -54.5729, -54.5730, -54.5730,
        -54.5730, -54.5730, -54.5730], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 15 	 1 	 N2 	 N2 	 7.289960614450063e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9463, -74.9870, -75.0083, -75.0213, -75.0303, -75.0368, -75.0415,
        -75.0449, -75.0473, -75.0491, -75.0503, -75.0512, -75.0518, -75.0522,
        -75.0525, -75.0527, -75.0529, -75.0530, -75.0531, -75.0531, -75.0532,
        -75.0532, -75.0532, -75.0532, -75.0532], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.1743e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.1743e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0527, -75.0529, -75.0530, -75.0531, -75.0531, -75.0532, -75.0532,
        -75.0532, -75.0532, -75.0532], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 15 	 12 	 O 	 O 	 4.635220870758179e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4406, -54.5071, -54.5306, -54.5437, -54.5524, -54.5584, -54.5627,
        -54.5657, -54.5678, -54.5693, -54.5704, -54.5711, -54.5717, -54.5720,
        -54.5723, -54.5725, -54.5726, -54.5727, -54.5727, -54.5728, -54.5728,
        -54.5728, -54.5728, -54.5729, -54.5729], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.9351e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.9351e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5725, -54.5726, -54.5727, -54.5727, -54.5728, -54.5728, -54.5728,
        -54.5728, -54.5729, -54.5729], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 15 	 11 	 N 	 N 	 6.243943870362105e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7390, -37.7788, -37.7949, -37.8041, -37.8103, -37.8146, -37.8178,
        -37.8200, -37.8216, -37.8227, -37.8235, -37.8241, -37.8245, -37.8247,
        -37.8249, -37.8251, -37.8252, -37.8252, -37.8253, -37.8253, -37.8253,
        -37.8253, -37.8254, -37.8254, -37.8254], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6525e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.6525e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8251, -37.8252, -37.8252, -37.8253, -37.8253, -37.8253, -37.8253,
        -37.8254, -37.8254, -37.8254], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 15 	 6 	 C 	 C 	 5.354850188480838e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.7655, -188.8443, -188.6484, -188.5337, -188.4628, -188.4146,
        -188.3809, -188.3573, -188.3406, -188.3288, -188.3204, -188.3145,
        -188.3103, -188.3073, -188.3052, -188.3037, -188.3026, -188.3018,
        -188.3013, -188.3009, -188.3006, -188.3004, -188.3003, -188.3002,
        -188.3001], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7985e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7433, -37.7830, -37.7979, -37.8063, -37.8119, -37.8158, -37.8186,
        -37.8206, -37.8221, -37.8231, -37.8238, -37.8243, -37.8246, -37.8249,
        -37.8251, -37.8252, -37.8253, -37.8253, -37.8254, -37.8254, -37.8254,
        -37.8254, -37.8254, -37.8255, -37.8255], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6307e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9484, -74.9911, -75.0116, -75.0238, -75.0323, -75.0383, -75.0426,
        -75.0458, -75.0480, -75.0496, -75.0507, -75.0515, -75.0521, -75.0525,
        -75.0528, -75.0530, -75.0531, -75.0532, -75.0533, -75.0533, -75.0534,
        -75.0534, -75.0534, -75.0534, -75.0534], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.1073e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3037, -188.3026, -188.3018, -188.3013, -188.3009, -188.3006,
        -188.3004, -188.3003, -188.3002, -188.3001], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8252, -37.8253, -37.8253, -37.8254, -37.8254, -37.8254, -37.8254,
        -37.8254, -37.8255, -37.8255], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0530, -75.0531, -75.0532, -75.0533, -75.0533, -75.0534, -75.0534,
        -75.0534, -75.0534, -75.0534], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 15 	 4 	 CO2 	 CO2 	 0.015128194664654546

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-94.0304, -93.5342, -93.4020, -93.3465, -93.3056, -93.2792, -93.2603,
        -93.2469, -93.2373, -93.2304, -93.2254, -93.2218, -93.2192, -93.2173,
        -93.2159, -93.2149, -93.2141, -93.2136, -93.2131, -93.2128, -93.2126,
        -93.2124, -93.2123, -93.2122, -93.2121], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.9337e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7477, -37.7866, -37.8003, -37.8080, -37.8131, -37.8167, -37.8192,
        -37.8210, -37.8223, -37.8232, -37.8239, -37.8243, -37.8246, -37.8249,
        -37.8250, -37.8251, -37.8252, -37.8253, -37.8253, -37.8253, -37.8253,
        -37.8253, -37.8254, -37.8254, -37.8254], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6469e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3202, -0.4590, -0.4758, -0.4838, -0.4888, -0.4921, -0.4944, -0.4959,
        -0.4970, -0.4978, -0.4983, -0.4987, -0.4990, -0.4991, -0.4993, -0.4994,
        -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995, -0.4996, -0.4996,
        -0.4996], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.9422e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4033, -54.4688, -54.5029, -54.5235, -54.5377, -54.5479, -54.5552,
        -54.5604, -54.5641, -54.5667, -54.5686, -54.5699, -54.5708, -54.5715,
        -54.5719, -54.5722, -54.5724, -54.5726, -54.5727, -54.5728, -54.5728,
        -54.5729, -54.5729, -54.5729, -54.5729], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.9577e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2149, -93.2141, -93.2136, -93.2131, -93.2128, -93.2126, -93.2124,
        -93.2123, -93.2122, -93.2121], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8251, -37.8252, -37.8253, -37.8253, -37.8253, -37.8253, -37.8253,
        -37.8254, -37.8254, -37.8254], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995, -0.4996,
        -0.4996, -0.4996], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5722, -54.5724, -54.5726, -54.5727, -54.5728, -54.5728, -54.5729,
        -54.5729, -54.5729, -54.5729], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 15 	 3 	 CHN 	 CNH 	 0.00798943161121103

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4585, -920.4237, -920.4153, -920.4108, -920.4079, -920.4059,
        -920.4045, -920.4035, -920.4027, -920.4022, -920.4019, -920.4016,
        -920.4014, -920.4013, -920.4012, -920.4012, -920.4011, -920.4011,
        -920.4011, -920.4011, -920.4011, -920.4010, -920.4010, -920.4010,
        -920.4010], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.6169e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.2337e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1007, -460.1270, -460.1353, -460.1398, -460.1429, -460.1450,
        -460.1465, -460.1476, -460.1484, -460.1489, -460.1493, -460.1496,
        -460.1498, -460.1499, -460.1500, -460.1500, -460.1501, -460.1501,
        -460.1502, -460.1502, -460.1502, -460.1502, -460.1502, -460.1502,
        -460.1502], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.9114e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.2342e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4012, -920.4011, -920.4011, -920.4011, -920.4011, -920.4011,
        -920.4010, -920.4010, -920.4010, -920.4010], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1500, -460.1501, -460.1501, -460.1502, -460.1502, -460.1502,
        -460.1502, -460.1502, -460.1502, -460.1502], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 15 	 5 	 Cl2 	 Cl2 	 8.72162749236347e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2177, -107.2629, -107.2287, -107.2249, -107.2216, -107.2201,
        -107.2199, -107.2201, -107.2206, -107.2212, -107.2218, -107.2223,
        -107.2228, -107.2232, -107.2236, -107.2240, -107.2243, -107.2247,
        -107.2249, -107.2251, -107.2253, -107.2255, -107.2256, -107.2257,
        -107.2258], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.4781e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6670, -99.6865, -99.6979, -99.7049, -99.7098, -99.7135, -99.7161,
        -99.7180, -99.7194, -99.7204, -99.7211, -99.7216, -99.7220, -99.7222,
        -99.7224, -99.7225, -99.7226, -99.7227, -99.7227, -99.7227, -99.7228,
        -99.7228, -99.7228, -99.7228, -99.7228], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3433e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4565, -7.4630, -7.4666, -7.4687, -7.4700, -7.4710, -7.4720, -7.4728,
        -7.4731, -7.4729, -7.4727, -7.4726, -7.4726, -7.4726, -7.4726, -7.4727,
        -7.4727, -7.4727, -7.4727, -7.4728, -7.4728, -7.4728, -7.4728, -7.4728,
        -7.4728], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.9964e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2240, -107.2243, -107.2247, -107.2249, -107.2251, -107.2253,
        -107.2255, -107.2256, -107.2257, -107.2258], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7225, -99.7226, -99.7227, -99.7227, -99.7227, -99.7228, -99.7228,
        -99.7228, -99.7228, -99.7228], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4727, -7.4727, -7.4727, -7.4727, -7.4728, -7.4728, -7.4728, -7.4728,
        -7.4728, -7.4728], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 15 	 2 	 FLi 	 LiF 	 0.008641719461030256

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2315, -0.4334, -0.4615, -0.4746, -0.4826, -0.4879, -0.4914, -0.4939,
        -0.4956, -0.4968, -0.4976, -0.4982, -0.4986, -0.4989, -0.4991, -0.4992,
        -0.4993, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.8900e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(4.8900e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4992, -0.4993, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 15 	 9 	 H 	 H 	 5.1059201682554636e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-0.9681, -1.0890, -1.1202, -1.1361, -1.1462, -1.1531, -1.1578, -1.1611,
        -1.1634, -1.1650, -1.1661, -1.1669, -1.1675, -1.1679, -1.1681, -1.1683,
        -1.1685, -1.1686, -1.1686, -1.1687, -1.1687, -1.1687, -1.1687, -1.1687,
        -1.1688], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6457e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.2913e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2860, -0.4496, -0.4705, -0.4804, -0.4865, -0.4905, -0.4933, -0.4952,
        -0.4965, -0.4974, -0.4981, -0.4985, -0.4988, -0.4990, -0.4992, -0.4993,
        -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.6799e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.2913e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1683, -1.1685, -1.1686, -1.1686, -1.1687, -1.1687, -1.1687, -1.1687,
        -1.1687, -1.1688], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4993, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 15 	 0 	 H2 	 H2 	 5.0990074756657585e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4566, -7.4636, -7.4670, -7.4689, -7.4701, -7.4711, -7.4721, -7.4729,
        -7.4730, -7.4727, -7.4725, -7.4724, -7.4724, -7.4725, -7.4725, -7.4725,
        -7.4726, -7.4726, -7.4726, -7.4726, -7.4726, -7.4726, -7.4727, -7.4727,
        -7.4727], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.1375e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.1375e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4725, -7.4726, -7.4726, -7.4726, -7.4726, -7.4726, -7.4726, -7.4727,
        -7.4727, -7.4727], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 15 	 10 	 Li 	 Li 	 6.8303027842298945e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e15)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e15/2022-11-03_10:00:47.012831_0.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e15/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 15 || ,[' rho : 3.043373', ' ae : 70.212280', ' E : 3.756186'] ,|| total loss 51.480731 || CHKPT: _0.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7355, -37.7747, -37.7917, -37.8016, -37.8083, -37.8131, -37.8165,
        -37.8189, -37.8206, -37.8219, -37.8227, -37.8233, -37.8238, -37.8241,
        -37.8243, -37.8244, -37.8245, -37.8246, -37.8247, -37.8247, -37.8247,
        -37.8248, -37.8248, -37.8248, -37.8248], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7863e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.7863e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8244, -37.8245, -37.8246, -37.8247, -37.8247, -37.8247, -37.8248,
        -37.8248, -37.8248, -37.8248], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 16 	 6 	 C 	 C 	 5.782502185745882e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-93.9953, -93.5192, -93.3936, -93.3400, -93.3010, -93.2757, -93.2576,
        -93.2448, -93.2357, -93.2291, -93.2243, -93.2209, -93.2184, -93.2166,
        -93.2152, -93.2142, -93.2135, -93.2130, -93.2126, -93.2123, -93.2121,
        -93.2119, -93.2118, -93.2117, -93.2117], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.9068e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7558, -37.7919, -37.8038, -37.8103, -37.8146, -37.8176, -37.8197,
        -37.8212, -37.8223, -37.8230, -37.8235, -37.8239, -37.8242, -37.8244,
        -37.8245, -37.8246, -37.8246, -37.8247, -37.8247, -37.8247, -37.8248,
        -37.8248, -37.8248, -37.8248, -37.8248], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7718e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2874, -0.4500, -0.4707, -0.4806, -0.4866, -0.4906, -0.4933, -0.4952,
        -0.4965, -0.4974, -0.4981, -0.4985, -0.4988, -0.4990, -0.4992, -0.4993,
        -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.7053e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4112, -54.4813, -54.5121, -54.5302, -54.5424, -54.5511, -54.5573,
        -54.5617, -54.5649, -54.5671, -54.5686, -54.5697, -54.5705, -54.5710,
        -54.5714, -54.5717, -54.5719, -54.5720, -54.5721, -54.5721, -54.5722,
        -54.5722, -54.5722, -54.5723, -54.5723], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.1011e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2142, -93.2135, -93.2130, -93.2126, -93.2123, -93.2121, -93.2119,
        -93.2118, -93.2117, -93.2117], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8246, -37.8246, -37.8247, -37.8247, -37.8247, -37.8248, -37.8248,
        -37.8248, -37.8248, -37.8248], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4993, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5717, -54.5719, -54.5720, -54.5721, -54.5721, -54.5722, -54.5722,
        -54.5722, -54.5723, -54.5723], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 16 	 3 	 CHN 	 CNH 	 0.007922500645667567

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4573, -7.4646, -7.4677, -7.4694, -7.4705, -7.4714, -7.4724, -7.4729,
        -7.4728, -7.4726, -7.4724, -7.4724, -7.4724, -7.4724, -7.4725, -7.4725,
        -7.4725, -7.4725, -7.4726, -7.4726, -7.4726, -7.4726, -7.4726, -7.4726,
        -7.4726], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.2005e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.2005e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4725, -7.4725, -7.4725, -7.4726, -7.4726, -7.4726, -7.4726, -7.4726,
        -7.4726, -7.4726], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 16 	 10 	 Li 	 Li 	 6.97388199347285e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.5463, -188.7592, -188.5930, -188.4958, -188.4361, -188.3954,
        -188.3671, -188.3472, -188.3331, -188.3231, -188.3161, -188.3111,
        -188.3075, -188.3050, -188.3032, -188.3019, -188.3010, -188.3004,
        -188.2999, -188.2996, -188.2993, -188.2992, -188.2991, -188.2990,
        -188.2989], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7872e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7419, -37.7816, -37.7966, -37.8052, -37.8109, -37.8149, -37.8177,
        -37.8198, -37.8212, -37.8222, -37.8230, -37.8235, -37.8238, -37.8241,
        -37.8243, -37.8244, -37.8245, -37.8245, -37.8246, -37.8246, -37.8246,
        -37.8246, -37.8246, -37.8247, -37.8247], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8070e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9462, -74.9873, -75.0084, -75.0212, -75.0301, -75.0364, -75.0410,
        -75.0444, -75.0467, -75.0484, -75.0496, -75.0505, -75.0511, -75.0515,
        -75.0518, -75.0520, -75.0522, -75.0523, -75.0523, -75.0524, -75.0524,
        -75.0525, -75.0525, -75.0525, -75.0525], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.4022e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3019, -188.3010, -188.3004, -188.2999, -188.2996, -188.2993,
        -188.2992, -188.2991, -188.2990, -188.2989], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8244, -37.8245, -37.8245, -37.8246, -37.8246, -37.8246, -37.8246,
        -37.8246, -37.8247, -37.8247], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0520, -75.0522, -75.0523, -75.0523, -75.0524, -75.0524, -75.0525,
        -75.0525, -75.0525, -75.0525], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 16 	 4 	 CO2 	 CO2 	 0.014952810883305578

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6691, -99.6917, -99.7016, -99.7075, -99.7116, -99.7145, -99.7167,
        -99.7182, -99.7193, -99.7200, -99.7206, -99.7210, -99.7213, -99.7215,
        -99.7216, -99.7217, -99.7218, -99.7218, -99.7218, -99.7219, -99.7219,
        -99.7219, -99.7219, -99.7219, -99.7219], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5557e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.5557e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7217, -99.7218, -99.7218, -99.7218, -99.7219, -99.7219, -99.7219,
        -99.7219, -99.7219, -99.7219], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 16 	 8 	 F 	 F 	 3.3684558277680146e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0852, -460.1159, -460.1266, -460.1326, -460.1367, -460.1396,
        -460.1417, -460.1432, -460.1443, -460.1450, -460.1456, -460.1459,
        -460.1462, -460.1464, -460.1465, -460.1466, -460.1467, -460.1468,
        -460.1468, -460.1468, -460.1468, -460.1468, -460.1468, -460.1469,
        -460.1469], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7701e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.7701e-09, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1466, -460.1467, -460.1468, -460.1468, -460.1468, -460.1468,
        -460.1468, -460.1468, -460.1469, -460.1469], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 16 	 7 	 Cl 	 Cl 	 3.094132497515401e-07

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0582, -1.1246, -1.1419, -1.1507, -1.1562, -1.1600, -1.1626, -1.1644,
        -1.1657, -1.1666, -1.1672, -1.1677, -1.1680, -1.1682, -1.1683, -1.1684,
        -1.1685, -1.1686, -1.1686, -1.1686, -1.1686, -1.1686, -1.1687, -1.1687,
        -1.1687], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6413e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.2827e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2847, -0.4492, -0.4702, -0.4803, -0.4864, -0.4904, -0.4932, -0.4951,
        -0.4964, -0.4974, -0.4980, -0.4985, -0.4988, -0.4990, -0.4992, -0.4993,
        -0.4993, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.9245e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.2827e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1684, -1.1685, -1.1686, -1.1686, -1.1686, -1.1686, -1.1686, -1.1687,
        -1.1687, -1.1687], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4993, -0.4993, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 16 	 0 	 H2 	 H2 	 5.154501873651134e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.3047, -107.2891, -107.2532, -107.2411, -107.2335, -107.2292,
        -107.2265, -107.2250, -107.2241, -107.2236, -107.2233, -107.2232,
        -107.2233, -107.2234, -107.2236, -107.2238, -107.2240, -107.2242,
        -107.2244, -107.2246, -107.2247, -107.2248, -107.2249, -107.2250,
        -107.2250], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.4896e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6745, -99.6974, -99.7057, -99.7105, -99.7137, -99.7160, -99.7177,
        -99.7189, -99.7197, -99.7203, -99.7207, -99.7210, -99.7212, -99.7213,
        -99.7215, -99.7215, -99.7216, -99.7216, -99.7216, -99.7217, -99.7217,
        -99.7217, -99.7217, -99.7217, -99.7217], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6049e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4576, -7.4650, -7.4679, -7.4694, -7.4705, -7.4714, -7.4723, -7.4727,
        -7.4725, -7.4723, -7.4721, -7.4721, -7.4721, -7.4722, -7.4722, -7.4723,
        -7.4723, -7.4723, -7.4723, -7.4723, -7.4723, -7.4723, -7.4723, -7.4723,
        -7.4724], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.4958e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2238, -107.2240, -107.2242, -107.2244, -107.2246, -107.2247,
        -107.2248, -107.2249, -107.2250, -107.2250], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7215, -99.7216, -99.7216, -99.7216, -99.7217, -99.7217, -99.7217,
        -99.7217, -99.7217, -99.7217], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4723, -7.4723, -7.4723, -7.4723, -7.4723, -7.4723, -7.4723, -7.4723,
        -7.4723, -7.4724], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 16 	 2 	 FLi 	 LiF 	 0.008571881977687167

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4325, -920.4089, -920.4035, -920.4007, -920.3989, -920.3977,
        -920.3968, -920.3962, -920.3958, -920.3955, -920.3953, -920.3951,
        -920.3950, -920.3949, -920.3949, -920.3949, -920.3948, -920.3948,
        -920.3948, -920.3948, -920.3948, -920.3948, -920.3948, -920.3948,
        -920.3948], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.6603e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.3207e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0821, -460.1138, -460.1251, -460.1315, -460.1359, -460.1390,
        -460.1413, -460.1429, -460.1441, -460.1449, -460.1455, -460.1460,
        -460.1463, -460.1465, -460.1466, -460.1467, -460.1468, -460.1468,
        -460.1469, -460.1469, -460.1469, -460.1469, -460.1469, -460.1469,
        -460.1470], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5763e-07, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.3208e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.3949, -920.3948, -920.3948, -920.3948, -920.3948, -920.3948,
        -920.3948, -920.3948, -920.3948, -920.3948], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1467, -460.1468, -460.1468, -460.1469, -460.1469, -460.1469,
        -460.1469, -460.1469, -460.1469, -460.1470], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 16 	 5 	 Cl2 	 Cl2 	 9.432921625355289e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9446, -74.9833, -75.0050, -75.0185, -75.0279, -75.0347, -75.0396,
        -75.0432, -75.0457, -75.0476, -75.0489, -75.0498, -75.0504, -75.0509,
        -75.0512, -75.0514, -75.0516, -75.0517, -75.0518, -75.0518, -75.0519,
        -75.0519, -75.0519, -75.0519, -75.0519], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.5876e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.5876e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0514, -75.0516, -75.0517, -75.0518, -75.0518, -75.0519, -75.0519,
        -75.0519, -75.0519, -75.0519], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 16 	 12 	 O 	 O 	 5.522371731737678e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2248, -0.4313, -0.4603, -0.4739, -0.4821, -0.4875, -0.4912, -0.4937,
        -0.4955, -0.4967, -0.4975, -0.4981, -0.4985, -0.4988, -0.4990, -0.4992,
        -0.4993, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.3806e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(5.3806e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4992, -0.4993, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 16 	 9 	 H 	 H 	 5.9378006292301765e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.8409, -109.7033, -109.6485, -109.5991, -109.5656, -109.5426,
        -109.5268, -109.5158, -109.5082, -109.5030, -109.4993, -109.4968,
        -109.4950, -109.4938, -109.4930, -109.4924, -109.4920, -109.4917,
        -109.4915, -109.4913, -109.4913, -109.4912, -109.4911, -109.4911,
        -109.4911], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.2912e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4144, -54.4848, -54.5145, -54.5318, -54.5435, -54.5517, -54.5576,
        -54.5617, -54.5647, -54.5668, -54.5682, -54.5693, -54.5700, -54.5705,
        -54.5709, -54.5711, -54.5713, -54.5714, -54.5715, -54.5716, -54.5716,
        -54.5716, -54.5717, -54.5717, -54.5717], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.2407e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4924, -109.4920, -109.4917, -109.4915, -109.4913, -109.4913,
        -109.4912, -109.4911, -109.4911, -109.4911], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5711, -54.5713, -54.5714, -54.5715, -54.5716, -54.5716, -54.5716,
        -54.5717, -54.5717, -54.5717], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 16 	 1 	 N2 	 N2 	 6.200568184370114e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4015, -54.4649, -54.4996, -54.5207, -54.5354, -54.5458, -54.5534,
        -54.5588, -54.5626, -54.5653, -54.5672, -54.5686, -54.5695, -54.5702,
        -54.5707, -54.5710, -54.5712, -54.5714, -54.5715, -54.5716, -54.5716,
        -54.5717, -54.5717, -54.5717, -54.5717], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.2508e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.2508e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5710, -54.5712, -54.5714, -54.5715, -54.5716, -54.5716, -54.5717,
        -54.5717, -54.5717, -54.5717], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 16 	 11 	 N 	 N 	 7.136534920509174e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e16)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e16/2022-11-03_10:00:47.012831_1.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e16/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 16 || ,[' rho : 3.038855', ' ae : 69.889174', ' E : 4.002331'] ,|| total loss 51.255256 || CHKPT: _1.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4587, -7.4660, -7.4685, -7.4699, -7.4708, -7.4718, -7.4725, -7.4726,
        -7.4723, -7.4721, -7.4721, -7.4721, -7.4721, -7.4722, -7.4722, -7.4722,
        -7.4722, -7.4723, -7.4723, -7.4723, -7.4723, -7.4723, -7.4723, -7.4723,
        -7.4723], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.5577e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.5577e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4722, -7.4722, -7.4723, -7.4723, -7.4723, -7.4723, -7.4723, -7.4723,
        -7.4723, -7.4723], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 17 	 10 	 Li 	 Li 	 7.764420739858915e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.3907, -188.7009, -188.5561, -188.4716, -188.4197, -188.3845,
        -188.3599, -188.3426, -188.3304, -188.3217, -188.3156, -188.3113,
        -188.3082, -188.3060, -188.3044, -188.3033, -188.3025, -188.3020,
        -188.3016, -188.3013, -188.3011, -188.3009, -188.3008, -188.3007,
        -188.3007], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7763e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7494, -37.7875, -37.8007, -37.8080, -37.8128, -37.8162, -37.8186,
        -37.8203, -37.8215, -37.8224, -37.8230, -37.8234, -37.8237, -37.8239,
        -37.8241, -37.8242, -37.8243, -37.8243, -37.8243, -37.8244, -37.8244,
        -37.8244, -37.8244, -37.8244, -37.8244], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8563e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9679, -75.0102, -75.0253, -75.0337, -75.0392, -75.0432, -75.0460,
        -75.0479, -75.0494, -75.0504, -75.0511, -75.0516, -75.0519, -75.0522,
        -75.0523, -75.0525, -75.0525, -75.0526, -75.0526, -75.0527, -75.0527,
        -75.0527, -75.0527, -75.0527, -75.0527], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.2960e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3033, -188.3025, -188.3020, -188.3016, -188.3013, -188.3011,
        -188.3009, -188.3008, -188.3007, -188.3007], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8242, -37.8243, -37.8243, -37.8243, -37.8244, -37.8244, -37.8244,
        -37.8244, -37.8244, -37.8244], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0525, -75.0525, -75.0526, -75.0526, -75.0527, -75.0527, -75.0527,
        -75.0527, -75.0527, -75.0527], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 17 	 4 	 CO2 	 CO2 	 0.014774303787216322

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2213, -107.2646, -107.2300, -107.2260, -107.2227, -107.2210,
        -107.2208, -107.2209, -107.2213, -107.2219, -107.2224, -107.2229,
        -107.2234, -107.2238, -107.2243, -107.2247, -107.2250, -107.2253,
        -107.2256, -107.2258, -107.2260, -107.2262, -107.2263, -107.2264,
        -107.2265], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.5202e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6676, -99.6879, -99.6990, -99.7057, -99.7105, -99.7139, -99.7165,
        -99.7183, -99.7196, -99.7205, -99.7212, -99.7217, -99.7220, -99.7223,
        -99.7224, -99.7225, -99.7226, -99.7227, -99.7227, -99.7227, -99.7228,
        -99.7228, -99.7228, -99.7228, -99.7228], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.3380e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4584, -7.4657, -7.4683, -7.4697, -7.4707, -7.4717, -7.4725, -7.4726,
        -7.4723, -7.4721, -7.4720, -7.4720, -7.4721, -7.4721, -7.4721, -7.4722,
        -7.4722, -7.4722, -7.4722, -7.4722, -7.4722, -7.4722, -7.4723, -7.4723,
        -7.4723], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.6087e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2247, -107.2250, -107.2253, -107.2256, -107.2258, -107.2260,
        -107.2262, -107.2263, -107.2264, -107.2265], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7225, -99.7226, -99.7227, -99.7227, -99.7227, -99.7228, -99.7228,
        -99.7228, -99.7228, -99.7228], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4722, -7.4722, -7.4722, -7.4722, -7.4722, -7.4722, -7.4722, -7.4723,
        -7.4723, -7.4723], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 17 	 2 	 FLi 	 LiF 	 0.008532641776955174

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.7325, -109.8669, -109.7324, -109.6552, -109.6051, -109.5708,
        -109.5470, -109.5304, -109.5188, -109.5107, -109.5051, -109.5011,
        -109.4983, -109.4964, -109.4950, -109.4941, -109.4934, -109.4930,
        -109.4926, -109.4924, -109.4922, -109.4921, -109.4921, -109.4920,
        -109.4920], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.2902e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4237, -54.4936, -54.5209, -54.5365, -54.5470, -54.5543, -54.5595,
        -54.5632, -54.5658, -54.5677, -54.5690, -54.5699, -54.5705, -54.5710,
        -54.5713, -54.5715, -54.5716, -54.5718, -54.5718, -54.5719, -54.5719,
        -54.5719, -54.5720, -54.5720, -54.5720], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.1583e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4941, -109.4934, -109.4930, -109.4926, -109.4924, -109.4922,
        -109.4921, -109.4921, -109.4920, -109.4920], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5715, -54.5716, -54.5718, -54.5718, -54.5719, -54.5719, -54.5719,
        -54.5720, -54.5720, -54.5720], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 17 	 1 	 N2 	 N2 	 5.959220683983508e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4046, -54.4716, -54.5048, -54.5246, -54.5383, -54.5480, -54.5550,
        -54.5600, -54.5635, -54.5660, -54.5678, -54.5691, -54.5699, -54.5705,
        -54.5710, -54.5713, -54.5715, -54.5716, -54.5717, -54.5718, -54.5719,
        -54.5719, -54.5719, -54.5719, -54.5720], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.1900e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.1900e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5713, -54.5715, -54.5716, -54.5717, -54.5718, -54.5719, -54.5719,
        -54.5719, -54.5719, -54.5720], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 17 	 11 	 N 	 N 	 6.964642224853479e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0890, -460.1202, -460.1311, -460.1373, -460.1415, -460.1445,
        -460.1467, -460.1483, -460.1494, -460.1502, -460.1507, -460.1511,
        -460.1514, -460.1516, -460.1517, -460.1518, -460.1519, -460.1520,
        -460.1520, -460.1520, -460.1520, -460.1521, -460.1521, -460.1521,
        -460.1521], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6929e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.6929e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1518, -460.1519, -460.1520, -460.1520, -460.1520, -460.1520,
        -460.1521, -460.1521, -460.1521, -460.1521], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 17 	 7 	 Cl 	 Cl 	 3.857744170888498e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4378, -920.4173, -920.4127, -920.4103, -920.4088, -920.4078,
        -920.4071, -920.4066, -920.4063, -920.4060, -920.4058, -920.4057,
        -920.4056, -920.4056, -920.4055, -920.4055, -920.4055, -920.4055,
        -920.4055, -920.4055, -920.4055, -920.4055, -920.4055, -920.4055,
        -920.4055], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.7116e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.4232e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0995, -460.1271, -460.1360, -460.1409, -460.1442, -460.1465,
        -460.1481, -460.1493, -460.1502, -460.1508, -460.1512, -460.1515,
        -460.1517, -460.1518, -460.1520, -460.1520, -460.1521, -460.1521,
        -460.1521, -460.1522, -460.1522, -460.1522, -460.1522, -460.1522,
        -460.1522], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8131e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.4250e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4055, -920.4055, -920.4055, -920.4055, -920.4055, -920.4055,
        -920.4055, -920.4055, -920.4055, -920.4055], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1520, -460.1521, -460.1521, -460.1521, -460.1522, -460.1522,
        -460.1522, -460.1522, -460.1522, -460.1522], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 17 	 5 	 Cl2 	 Cl2 	 1.0002301855310843e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7380, -37.7776, -37.7936, -37.8028, -37.8090, -37.8134, -37.8166,
        -37.8188, -37.8204, -37.8215, -37.8223, -37.8229, -37.8233, -37.8235,
        -37.8237, -37.8239, -37.8240, -37.8240, -37.8241, -37.8241, -37.8241,
        -37.8242, -37.8242, -37.8242, -37.8242], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.9207e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.9207e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8239, -37.8240, -37.8240, -37.8241, -37.8241, -37.8241, -37.8242,
        -37.8242, -37.8242, -37.8242], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 17 	 6 	 C 	 C 	 6.232062948849612e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6734, -99.6963, -99.7054, -99.7107, -99.7143, -99.7169, -99.7187,
        -99.7200, -99.7210, -99.7217, -99.7221, -99.7225, -99.7227, -99.7229,
        -99.7230, -99.7231, -99.7231, -99.7232, -99.7232, -99.7232, -99.7232,
        -99.7232, -99.7233, -99.7233, -99.7233], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2226e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.2226e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7231, -99.7231, -99.7232, -99.7232, -99.7232, -99.7232, -99.7232,
        -99.7233, -99.7233, -99.7233], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 17 	 8 	 F 	 F 	 2.6484747916520114e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-0.9645, -1.0874, -1.1191, -1.1353, -1.1456, -1.1525, -1.1573, -1.1607,
        -1.1630, -1.1647, -1.1658, -1.1666, -1.1672, -1.1676, -1.1679, -1.1681,
        -1.1682, -1.1683, -1.1684, -1.1684, -1.1684, -1.1685, -1.1685, -1.1685,
        -1.1685], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6404e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.2808e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2782, -0.4474, -0.4692, -0.4796, -0.4859, -0.4901, -0.4930, -0.4950,
        -0.4963, -0.4973, -0.4980, -0.4984, -0.4988, -0.4990, -0.4991, -0.4993,
        -0.4993, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.1022e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.2808e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1681, -1.1682, -1.1683, -1.1684, -1.1684, -1.1684, -1.1685, -1.1685,
        -1.1685, -1.1685], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4993, -0.4993, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 17 	 0 	 H2 	 H2 	 5.528158390639948e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2985, -0.4531, -0.4724, -0.4817, -0.4873, -0.4911, -0.4936, -0.4954,
        -0.4967, -0.4975, -0.4981, -0.4985, -0.4988, -0.4990, -0.4992, -0.4993,
        -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.6866e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.6866e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4993, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 17 	 9 	 H 	 H 	 5.719493551685283e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9521, -74.9958, -75.0151, -75.0265, -75.0342, -75.0397, -75.0436,
        -75.0465, -75.0485, -75.0500, -75.0510, -75.0517, -75.0522, -75.0526,
        -75.0529, -75.0530, -75.0532, -75.0532, -75.0533, -75.0534, -75.0534,
        -75.0534, -75.0534, -75.0534, -75.0534], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.1001e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.1001e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0530, -75.0532, -75.0532, -75.0533, -75.0534, -75.0534, -75.0534,
        -75.0534, -75.0534, -75.0534], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 17 	 12 	 O 	 O 	 4.500495458162098e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-93.9485, -93.4998, -93.3838, -93.3330, -93.2967, -93.2731, -93.2561,
        -93.2442, -93.2357, -93.2296, -93.2252, -93.2220, -93.2196, -93.2180,
        -93.2167, -93.2158, -93.2152, -93.2147, -93.2143, -93.2140, -93.2138,
        -93.2137, -93.2136, -93.2135, -93.2134], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.8473e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7499, -37.7878, -37.8009, -37.8082, -37.8130, -37.8164, -37.8188,
        -37.8205, -37.8217, -37.8226, -37.8232, -37.8236, -37.8239, -37.8241,
        -37.8242, -37.8243, -37.8244, -37.8245, -37.8245, -37.8245, -37.8245,
        -37.8246, -37.8246, -37.8246, -37.8246], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8212e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2885, -0.4503, -0.4708, -0.4806, -0.4866, -0.4906, -0.4933, -0.4952,
        -0.4965, -0.4974, -0.4981, -0.4985, -0.4988, -0.4990, -0.4992, -0.4993,
        -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.8324e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4216, -54.4917, -54.5197, -54.5358, -54.5466, -54.5542, -54.5596,
        -54.5635, -54.5662, -54.5681, -54.5694, -54.5704, -54.5711, -54.5715,
        -54.5719, -54.5721, -54.5722, -54.5724, -54.5724, -54.5725, -54.5725,
        -54.5726, -54.5726, -54.5726, -54.5726], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.0130e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2158, -93.2152, -93.2147, -93.2143, -93.2140, -93.2138, -93.2137,
        -93.2136, -93.2135, -93.2134], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8243, -37.8244, -37.8245, -37.8245, -37.8245, -37.8245, -37.8246,
        -37.8246, -37.8246, -37.8246], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4993, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5721, -54.5722, -54.5724, -54.5724, -54.5725, -54.5725, -54.5726,
        -54.5726, -54.5726, -54.5726], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 17 	 3 	 CHN 	 CNH 	 0.0077787598887515755

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e17)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e17/2022-11-03_10:00:47.012831_2.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e17/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 17 || ,[' rho : 3.034307', ' ae : 69.477129', ' E : 3.921834'] ,|| total loss 50.968911 || CHKPT: _2.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9669, -75.0098, -75.0253, -75.0340, -75.0398, -75.0439, -75.0468,
        -75.0488, -75.0503, -75.0514, -75.0521, -75.0526, -75.0530, -75.0532,
        -75.0534, -75.0535, -75.0536, -75.0537, -75.0537, -75.0538, -75.0538,
        -75.0538, -75.0538, -75.0538, -75.0538], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.9653e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.9653e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0535, -75.0536, -75.0537, -75.0537, -75.0538, -75.0538, -75.0538,
        -75.0538, -75.0538, -75.0538], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 18 	 12 	 O 	 O 	 4.242204507640293e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.6840, -188.8150, -188.6316, -188.5239, -188.4576, -188.4124,
        -188.3809, -188.3588, -188.3432, -188.3321, -188.3243, -188.3188,
        -188.3148, -188.3120, -188.3101, -188.3086, -188.3076, -188.3069,
        -188.3064, -188.3060, -188.3058, -188.3056, -188.3054, -188.3053,
        -188.3053], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7674e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7566, -37.7923, -37.8041, -37.8105, -37.8147, -37.8177, -37.8198,
        -37.8212, -37.8223, -37.8230, -37.8236, -37.8239, -37.8242, -37.8244,
        -37.8245, -37.8246, -37.8246, -37.8247, -37.8247, -37.8247, -37.8247,
        -37.8248, -37.8248, -37.8248, -37.8248], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.7729e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9521, -74.9956, -75.0151, -75.0266, -75.0345, -75.0401, -75.0441,
        -75.0470, -75.0491, -75.0505, -75.0516, -75.0523, -75.0529, -75.0532,
        -75.0535, -75.0537, -75.0538, -75.0539, -75.0539, -75.0540, -75.0540,
        -75.0540, -75.0540, -75.0541, -75.0541], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.9166e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3086, -188.3076, -188.3069, -188.3064, -188.3060, -188.3058,
        -188.3056, -188.3054, -188.3053, -188.3053], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8246, -37.8246, -37.8247, -37.8247, -37.8247, -37.8247, -37.8248,
        -37.8248, -37.8248, -37.8248], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0537, -75.0538, -75.0539, -75.0539, -75.0540, -75.0540, -75.0540,
        -75.0540, -75.0541, -75.0541], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 18 	 4 	 CO2 	 CO2 	 0.01458619703616044

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4565, -7.4637, -7.4669, -7.4687, -7.4698, -7.4708, -7.4718, -7.4724,
        -7.4724, -7.4721, -7.4719, -7.4719, -7.4719, -7.4719, -7.4720, -7.4720,
        -7.4720, -7.4721, -7.4721, -7.4721, -7.4721, -7.4721, -7.4721, -7.4721,
        -7.4721], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.7798e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.7798e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4720, -7.4720, -7.4721, -7.4721, -7.4721, -7.4721, -7.4721, -7.4721,
        -7.4721, -7.4721], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 18 	 10 	 Li 	 Li 	 8.236776433627574e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.8541, -109.6798, -109.6382, -109.5934, -109.5625, -109.5414,
        -109.5268, -109.5167, -109.5098, -109.5050, -109.5017, -109.4994,
        -109.4978, -109.4967, -109.4960, -109.4954, -109.4950, -109.4948,
        -109.4946, -109.4945, -109.4944, -109.4943, -109.4943, -109.4943,
        -109.4942], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.2882e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4243, -54.4941, -54.5215, -54.5372, -54.5477, -54.5550, -54.5603,
        -54.5640, -54.5666, -54.5685, -54.5698, -54.5707, -54.5713, -54.5718,
        -54.5721, -54.5723, -54.5725, -54.5726, -54.5727, -54.5727, -54.5727,
        -54.5728, -54.5728, -54.5728, -54.5728], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.9588e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4954, -109.4950, -109.4948, -109.4946, -109.4945, -109.4944,
        -109.4943, -109.4943, -109.4943, -109.4942], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5723, -54.5725, -54.5726, -54.5727, -54.5727, -54.5727, -54.5728,
        -54.5728, -54.5728, -54.5728], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 18 	 1 	 N2 	 N2 	 5.531058508759381e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7367, -37.7760, -37.7926, -37.8022, -37.8087, -37.8133, -37.8166,
        -37.8190, -37.8206, -37.8218, -37.8227, -37.8233, -37.8237, -37.8240,
        -37.8242, -37.8243, -37.8244, -37.8245, -37.8245, -37.8246, -37.8246,
        -37.8246, -37.8246, -37.8246, -37.8247], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8139e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.8139e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8243, -37.8244, -37.8245, -37.8245, -37.8246, -37.8246, -37.8246,
        -37.8246, -37.8246, -37.8247], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 18 	 6 	 C 	 C 	 5.876660164470114e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-94.0367, -93.5370, -93.4035, -93.3482, -93.3071, -93.2808, -93.2618,
        -93.2485, -93.2390, -93.2322, -93.2272, -93.2237, -93.2211, -93.2193,
        -93.2179, -93.2169, -93.2162, -93.2156, -93.2152, -93.2149, -93.2147,
        -93.2146, -93.2145, -93.2144, -93.2143], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.8369e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7392, -37.7788, -37.7946, -37.8037, -37.8098, -37.8141, -37.8172,
        -37.8194, -37.8209, -37.8220, -37.8228, -37.8234, -37.8238, -37.8240,
        -37.8242, -37.8244, -37.8245, -37.8245, -37.8246, -37.8246, -37.8246,
        -37.8246, -37.8247, -37.8247, -37.8247], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8067e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2995, -0.4534, -0.4726, -0.4818, -0.4874, -0.4911, -0.4937, -0.4955,
        -0.4967, -0.4975, -0.4981, -0.4986, -0.4988, -0.4990, -0.4992, -0.4993,
        -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.6303e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4235, -54.4934, -54.5210, -54.5368, -54.5474, -54.5549, -54.5602,
        -54.5639, -54.5666, -54.5684, -54.5698, -54.5707, -54.5713, -54.5718,
        -54.5721, -54.5723, -54.5725, -54.5726, -54.5727, -54.5727, -54.5728,
        -54.5728, -54.5728, -54.5728, -54.5728], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.9531e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2169, -93.2162, -93.2156, -93.2152, -93.2149, -93.2147, -93.2146,
        -93.2145, -93.2144, -93.2143], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8244, -37.8245, -37.8245, -37.8246, -37.8246, -37.8246, -37.8246,
        -37.8247, -37.8247, -37.8247], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4993, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5723, -54.5725, -54.5726, -54.5727, -54.5727, -54.5728, -54.5728,
        -54.5728, -54.5728, -54.5728], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 18 	 3 	 CHN 	 CNH 	 0.007734878568526424

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6773, -99.7001, -99.7086, -99.7135, -99.7168, -99.7192, -99.7209,
        -99.7221, -99.7230, -99.7236, -99.7240, -99.7243, -99.7245, -99.7247,
        -99.7248, -99.7249, -99.7249, -99.7250, -99.7250, -99.7250, -99.7250,
        -99.7250, -99.7250, -99.7250, -99.7250], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.4955e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(8.4955e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7249, -99.7249, -99.7250, -99.7250, -99.7250, -99.7250, -99.7250,
        -99.7250, -99.7250, -99.7250], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 18 	 8 	 F 	 F 	 1.837634466325779e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-0.9620, -1.0864, -1.1184, -1.1349, -1.1453, -1.1524, -1.1572, -1.1606,
        -1.1630, -1.1647, -1.1658, -1.1666, -1.1672, -1.1676, -1.1679, -1.1681,
        -1.1682, -1.1683, -1.1684, -1.1684, -1.1685, -1.1685, -1.1685, -1.1685,
        -1.1685], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6550e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3100e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3136, -0.4572, -0.4747, -0.4832, -0.4883, -0.4918, -0.4941, -0.4958,
        -0.4969, -0.4977, -0.4982, -0.4986, -0.4989, -0.4991, -0.4992, -0.4993,
        -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.4047e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3100e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1681, -1.1682, -1.1683, -1.1684, -1.1684, -1.1685, -1.1685, -1.1685,
        -1.1685, -1.1685], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4993, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 18 	 0 	 H2 	 H2 	 5.4982093956485626e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.3062, -107.2932, -107.2573, -107.2454, -107.2380, -107.2338,
        -107.2311, -107.2296, -107.2288, -107.2283, -107.2281, -107.2280,
        -107.2281, -107.2283, -107.2285, -107.2287, -107.2289, -107.2292,
        -107.2293, -107.2295, -107.2296, -107.2298, -107.2299, -107.2299,
        -107.2300], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.5879e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6729, -99.6953, -99.7052, -99.7110, -99.7151, -99.7180, -99.7200,
        -99.7216, -99.7226, -99.7234, -99.7239, -99.7243, -99.7246, -99.7248,
        -99.7249, -99.7250, -99.7251, -99.7251, -99.7252, -99.7252, -99.7252,
        -99.7252, -99.7252, -99.7252, -99.7252], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(8.1724e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4583, -7.4656, -7.4682, -7.4695, -7.4705, -7.4715, -7.4723, -7.4723,
        -7.4721, -7.4719, -7.4718, -7.4718, -7.4718, -7.4719, -7.4719, -7.4719,
        -7.4720, -7.4720, -7.4720, -7.4720, -7.4720, -7.4720, -7.4720, -7.4720,
        -7.4720], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.8872e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2287, -107.2289, -107.2292, -107.2293, -107.2295, -107.2296,
        -107.2298, -107.2299, -107.2299, -107.2300], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7250, -99.7251, -99.7251, -99.7252, -99.7252, -99.7252, -99.7252,
        -99.7252, -99.7252, -99.7252], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4719, -7.4720, -7.4720, -7.4720, -7.4720, -7.4720, -7.4720, -7.4720,
        -7.4720, -7.4720], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 18 	 2 	 FLi 	 LiF 	 0.00841661342678043

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4762, -920.4418, -920.4334, -920.4289, -920.4259, -920.4239,
        -920.4225, -920.4214, -920.4207, -920.4202, -920.4199, -920.4196,
        -920.4194, -920.4193, -920.4192, -920.4192, -920.4191, -920.4191,
        -920.4191, -920.4190, -920.4190, -920.4190, -920.4190, -920.4190,
        -920.4190], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.7590e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.5181e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0963, -460.1274, -460.1382, -460.1443, -460.1485, -460.1514,
        -460.1536, -460.1551, -460.1562, -460.1570, -460.1576, -460.1580,
        -460.1582, -460.1584, -460.1586, -460.1587, -460.1587, -460.1588,
        -460.1588, -460.1588, -460.1589, -460.1589, -460.1589, -460.1589,
        -460.1589], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2382e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.5305e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4192, -920.4191, -920.4191, -920.4191, -920.4190, -920.4190,
        -920.4190, -920.4190, -920.4190, -920.4190], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1587, -460.1587, -460.1588, -460.1588, -460.1588, -460.1589,
        -460.1589, -460.1589, -460.1589, -460.1589], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 18 	 5 	 Cl2 	 Cl2 	 1.058905890015436e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2547, -0.4405, -0.4654, -0.4771, -0.4843, -0.4890, -0.4922, -0.4944,
        -0.4960, -0.4970, -0.4978, -0.4983, -0.4987, -0.4989, -0.4991, -0.4992,
        -0.4993, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.5998e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(4.5998e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4992, -0.4993, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 18 	 9 	 H 	 H 	 5.7991834518898525e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4067, -54.4739, -54.5067, -54.5264, -54.5398, -54.5495, -54.5563,
        -54.5612, -54.5647, -54.5672, -54.5689, -54.5702, -54.5710, -54.5716,
        -54.5721, -54.5724, -54.5726, -54.5727, -54.5728, -54.5729, -54.5729,
        -54.5730, -54.5730, -54.5730, -54.5730], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.9322e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.9322e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5724, -54.5726, -54.5727, -54.5728, -54.5729, -54.5729, -54.5730,
        -54.5730, -54.5730, -54.5730], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 18 	 11 	 N 	 N 	 6.132038639187308e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0979, -460.1288, -460.1396, -460.1456, -460.1498, -460.1527,
        -460.1548, -460.1564, -460.1575, -460.1582, -460.1588, -460.1592,
        -460.1595, -460.1597, -460.1598, -460.1599, -460.1600, -460.1600,
        -460.1600, -460.1601, -460.1601, -460.1601, -460.1601, -460.1601,
        -460.1601], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.5348e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.5348e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1599, -460.1600, -460.1600, -460.1600, -460.1601, -460.1601,
        -460.1601, -460.1601, -460.1601, -460.1601], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 18 	 7 	 Cl 	 Cl 	 3.42137284455277e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e18)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e18/2022-11-03_10:00:47.012831_0.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e18/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 18 || ,[' rho : 3.040972', ' ae : 69.095787', ' E : 3.955299'] ,|| total loss 50.717064 || CHKPT: _0.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2808, -0.4481, -0.4696, -0.4799, -0.4861, -0.4902, -0.4931, -0.4950,
        -0.4964, -0.4973, -0.4980, -0.4984, -0.4988, -0.4990, -0.4992, -0.4993,
        -0.4993, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.0544e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(4.0544e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4993, -0.4993, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 19 	 9 	 H 	 H 	 5.8158145935934634e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-94.0309, -93.5349, -93.4026, -93.3477, -93.3069, -93.2809, -93.2621,
        -93.2489, -93.2395, -93.2327, -93.2279, -93.2244, -93.2218, -93.2200,
        -93.2186, -93.2177, -93.2169, -93.2164, -93.2160, -93.2157, -93.2155,
        -93.2154, -93.2153, -93.2152, -93.2151], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.8131e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7447, -37.7838, -37.7982, -37.8062, -37.8116, -37.8154, -37.8181,
        -37.8200, -37.8214, -37.8224, -37.8230, -37.8235, -37.8238, -37.8241,
        -37.8242, -37.8244, -37.8244, -37.8245, -37.8245, -37.8246, -37.8246,
        -37.8246, -37.8246, -37.8246, -37.8246], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8124e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2267, -0.4319, -0.4606, -0.4741, -0.4822, -0.4876, -0.4912, -0.4937,
        -0.4955, -0.4967, -0.4975, -0.4981, -0.4986, -0.4988, -0.4990, -0.4992,
        -0.4993, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.3719e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4107, -54.4799, -54.5112, -54.5296, -54.5422, -54.5511, -54.5575,
        -54.5620, -54.5652, -54.5675, -54.5691, -54.5702, -54.5710, -54.5715,
        -54.5719, -54.5722, -54.5724, -54.5725, -54.5726, -54.5727, -54.5727,
        -54.5728, -54.5728, -54.5728, -54.5728], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.9729e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2177, -93.2169, -93.2164, -93.2160, -93.2157, -93.2155, -93.2154,
        -93.2153, -93.2152, -93.2151], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8244, -37.8244, -37.8245, -37.8245, -37.8246, -37.8246, -37.8246,
        -37.8246, -37.8246, -37.8246], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4992, -0.4993, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5722, -54.5724, -54.5725, -54.5726, -54.5727, -54.5727, -54.5728,
        -54.5728, -54.5728, -54.5728], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 19 	 3 	 CHN 	 CNH 	 0.007658358044743184

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.4102, -188.7113, -188.5650, -188.4794, -188.4269, -188.3912,
        -188.3663, -188.3488, -188.3365, -188.3277, -188.3215, -188.3171,
        -188.3140, -188.3118, -188.3102, -188.3091, -188.3083, -188.3077,
        -188.3073, -188.3070, -188.3068, -188.3066, -188.3065, -188.3064,
        -188.3064], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7566e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7523, -37.7894, -37.8020, -37.8089, -37.8135, -37.8167, -37.8190,
        -37.8206, -37.8218, -37.8226, -37.8231, -37.8235, -37.8238, -37.8240,
        -37.8242, -37.8242, -37.8243, -37.8244, -37.8244, -37.8244, -37.8244,
        -37.8245, -37.8245, -37.8245, -37.8245], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.8441e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9489, -74.9902, -75.0109, -75.0234, -75.0321, -75.0383, -75.0428,
        -75.0460, -75.0484, -75.0500, -75.0512, -75.0520, -75.0526, -75.0530,
        -75.0533, -75.0535, -75.0537, -75.0538, -75.0538, -75.0539, -75.0539,
        -75.0539, -75.0540, -75.0540, -75.0540], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.9491e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0004, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3091, -188.3083, -188.3077, -188.3073, -188.3070, -188.3068,
        -188.3066, -188.3065, -188.3064, -188.3064], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8242, -37.8243, -37.8244, -37.8244, -37.8244, -37.8244, -37.8245,
        -37.8245, -37.8245, -37.8245], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0535, -75.0537, -75.0538, -75.0538, -75.0539, -75.0539, -75.0539,
        -75.0540, -75.0540, -75.0540], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 19 	 4 	 CO2 	 CO2 	 0.014403055313579879

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-1.0283, -1.1126, -1.1345, -1.1457, -1.1528, -1.1575, -1.1609, -1.1632,
        -1.1648, -1.1659, -1.1667, -1.1673, -1.1677, -1.1679, -1.1681, -1.1683,
        -1.1683, -1.1684, -1.1685, -1.1685, -1.1685, -1.1685, -1.1685, -1.1685,
        -1.1686], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6614e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3227e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3263, -0.4605, -0.4766, -0.4844, -0.4892, -0.4923, -0.4945, -0.4960,
        -0.4971, -0.4978, -0.4983, -0.4987, -0.4989, -0.4991, -0.4992, -0.4993,
        -0.4994, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.4027e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3228e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1683, -1.1683, -1.1684, -1.1685, -1.1685, -1.1685, -1.1685, -1.1685,
        -1.1685, -1.1686], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4993, -0.4994, -0.4994, -0.4994, -0.4994, -0.4995, -0.4995, -0.4995,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 19 	 0 	 H2 	 H2 	 5.309134102082819e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0874, -460.1195, -460.1310, -460.1376, -460.1421, -460.1453,
        -460.1477, -460.1493, -460.1506, -460.1514, -460.1520, -460.1525,
        -460.1528, -460.1530, -460.1531, -460.1532, -460.1533, -460.1534,
        -460.1534, -460.1534, -460.1534, -460.1535, -460.1535, -460.1535,
        -460.1535], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.0883e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.0883e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1532, -460.1533, -460.1534, -460.1534, -460.1534, -460.1534,
        -460.1535, -460.1535, -460.1535, -460.1535], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 19 	 7 	 Cl 	 Cl 	 6.998985033713648e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4570, -920.4251, -920.4173, -920.4131, -920.4104, -920.4086,
        -920.4073, -920.4063, -920.4057, -920.4052, -920.4049, -920.4047,
        -920.4045, -920.4044, -920.4043, -920.4042, -920.4042, -920.4042,
        -920.4042, -920.4041, -920.4041, -920.4041, -920.4041, -920.4041,
        -920.4041], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.7390e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.4781e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0912, -460.1215, -460.1318, -460.1376, -460.1416, -460.1444,
        -460.1464, -460.1478, -460.1489, -460.1496, -460.1501, -460.1505,
        -460.1508, -460.1509, -460.1511, -460.1512, -460.1512, -460.1513,
        -460.1513, -460.1513, -460.1513, -460.1514, -460.1514, -460.1514,
        -460.1514], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.1563e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.4793e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4042, -920.4042, -920.4042, -920.4042, -920.4041, -920.4041,
        -920.4041, -920.4041, -920.4041, -920.4041], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1512, -460.1512, -460.1513, -460.1513, -460.1513, -460.1513,
        -460.1514, -460.1514, -460.1514, -460.1514], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 19 	 5 	 Cl2 	 Cl2 	 1.0990787899498288e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6671, -99.6856, -99.6969, -99.7040, -99.7091, -99.7128, -99.7155,
        -99.7175, -99.7189, -99.7199, -99.7206, -99.7211, -99.7215, -99.7218,
        -99.7219, -99.7221, -99.7222, -99.7222, -99.7223, -99.7223, -99.7223,
        -99.7223, -99.7223, -99.7224, -99.7224], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4483e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.4483e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7221, -99.7222, -99.7222, -99.7223, -99.7223, -99.7223, -99.7223,
        -99.7223, -99.7224, -99.7224], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 19 	 8 	 F 	 F 	 3.11662137449343e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7488, -37.7865, -37.7995, -37.8068, -37.8115, -37.8149, -37.8173,
        -37.8190, -37.8202, -37.8210, -37.8216, -37.8220, -37.8223, -37.8225,
        -37.8227, -37.8228, -37.8228, -37.8229, -37.8229, -37.8230, -37.8230,
        -37.8230, -37.8230, -37.8230, -37.8230], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.1942e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.1942e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8228, -37.8228, -37.8229, -37.8229, -37.8230, -37.8230, -37.8230,
        -37.8230, -37.8230, -37.8230], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 19 	 6 	 C 	 C 	 7.156725458275435e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.6192, -109.8975, -109.7457, -109.6636, -109.6106, -109.5744,
        -109.5493, -109.5316, -109.5193, -109.5107, -109.5046, -109.5004,
        -109.4974, -109.4954, -109.4939, -109.4929, -109.4922, -109.4917,
        -109.4913, -109.4911, -109.4909, -109.4908, -109.4907, -109.4906,
        -109.4906], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.2763e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4064, -54.4746, -54.5066, -54.5257, -54.5387, -54.5479, -54.5545,
        -54.5592, -54.5626, -54.5649, -54.5666, -54.5678, -54.5686, -54.5692,
        -54.5696, -54.5699, -54.5701, -54.5702, -54.5703, -54.5704, -54.5704,
        -54.5705, -54.5705, -54.5705, -54.5705], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.5581e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4929, -109.4922, -109.4917, -109.4913, -109.4911, -109.4909,
        -109.4908, -109.4907, -109.4906, -109.4906], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5699, -54.5701, -54.5702, -54.5703, -54.5704, -54.5704, -54.5705,
        -54.5705, -54.5705, -54.5705], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 19 	 1 	 N2 	 N2 	 4.8245057878551096e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9483, -74.9910, -75.0109, -75.0227, -75.0308, -75.0367, -75.0409,
        -75.0439, -75.0460, -75.0476, -75.0487, -75.0494, -75.0500, -75.0504,
        -75.0506, -75.0508, -75.0510, -75.0511, -75.0511, -75.0512, -75.0512,
        -75.0512, -75.0512, -75.0512, -75.0513], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.8063e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.8063e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0508, -75.0510, -75.0511, -75.0511, -75.0512, -75.0512, -75.0512,
        -75.0512, -75.0512, -75.0513], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 19 	 12 	 O 	 O 	 6.027486503841998e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4551, -7.4615, -7.4651, -7.4672, -7.4686, -7.4696, -7.4705, -7.4714,
        -7.4717, -7.4715, -7.4712, -7.4711, -7.4711, -7.4712, -7.4712, -7.4712,
        -7.4713, -7.4713, -7.4713, -7.4713, -7.4713, -7.4714, -7.4714, -7.4714,
        -7.4714], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.8097e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(4.8097e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4712, -7.4713, -7.4713, -7.4713, -7.4713, -7.4713, -7.4714, -7.4714,
        -7.4714, -7.4714], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 19 	 10 	 Li 	 Li 	 1.048234473184235e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4355, -54.5024, -54.5266, -54.5401, -54.5491, -54.5553, -54.5598,
        -54.5629, -54.5651, -54.5667, -54.5678, -54.5685, -54.5691, -54.5695,
        -54.5697, -54.5699, -54.5700, -54.5701, -54.5702, -54.5702, -54.5703,
        -54.5703, -54.5703, -54.5703, -54.5703], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.5759e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.5759e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5699, -54.5700, -54.5701, -54.5702, -54.5702, -54.5703, -54.5703,
        -54.5703, -54.5703, -54.5703], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 19 	 11 	 N 	 N 	 8.330988935775305e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2221, -107.2649, -107.2298, -107.2257, -107.2225, -107.2209,
        -107.2207, -107.2208, -107.2211, -107.2215, -107.2220, -107.2225,
        -107.2230, -107.2235, -107.2239, -107.2243, -107.2247, -107.2250,
        -107.2253, -107.2256, -107.2258, -107.2260, -107.2261, -107.2262,
        -107.2263], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.5641e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6720, -99.6947, -99.7038, -99.7091, -99.7127, -99.7152, -99.7171,
        -99.7184, -99.7193, -99.7200, -99.7205, -99.7208, -99.7211, -99.7212,
        -99.7213, -99.7214, -99.7215, -99.7215, -99.7216, -99.7216, -99.7216,
        -99.7216, -99.7216, -99.7216, -99.7216], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.6274e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4585, -7.4655, -7.4679, -7.4692, -7.4702, -7.4711, -7.4717, -7.4716,
        -7.4713, -7.4712, -7.4711, -7.4712, -7.4712, -7.4712, -7.4713, -7.4713,
        -7.4713, -7.4713, -7.4714, -7.4714, -7.4714, -7.4714, -7.4714, -7.4714,
        -7.4714], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.7658e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2243, -107.2247, -107.2250, -107.2253, -107.2256, -107.2258,
        -107.2260, -107.2261, -107.2262, -107.2263], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7214, -99.7215, -99.7215, -99.7216, -99.7216, -99.7216, -99.7216,
        -99.7216, -99.7216, -99.7216], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4713, -7.4713, -7.4713, -7.4714, -7.4714, -7.4714, -7.4714, -7.4714,
        -7.4714, -7.4714], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 19 	 2 	 FLi 	 LiF 	 0.008370132893884838

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e19)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e19/2022-11-03_10:00:47.012831_1.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e19/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 19 || ,[' rho : 3.031914', ' ae : 68.791713', ' E : 4.130886'] ,|| total loss 50.499214 || CHKPT: _1.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
================================
--------------7----------------
TRAINING ON MOLECULE:  ,Cl
SUBMOLECULES: ['Cl']
SUBMOLECULE INDICES: [7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.0979, -460.1241, -460.1324, -460.1369, -460.1400, -460.1421,
        -460.1436, -460.1447, -460.1455, -460.1460, -460.1464, -460.1467,
        -460.1468, -460.1470, -460.1471, -460.1471, -460.1472, -460.1472,
        -460.1472, -460.1473, -460.1473, -460.1473, -460.1473, -460.1473,
        -460.1473], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(7.1061e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.1061e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'Cl': tensor([-460.1471, -460.1472, -460.1472, -460.1472, -460.1473, -460.1473,
        -460.1473, -460.1473, -460.1473, -460.1473], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 20 	 7 	 Cl 	 Cl 	 1.190907951472698e-07

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------10----------------
TRAINING ON MOLECULE:  ,Li
SUBMOLECULES: ['Li']
SUBMOLECULE INDICES: [10]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4552, -7.4618, -7.4653, -7.4674, -7.4687, -7.4697, -7.4707, -7.4715,
        -7.4718, -7.4715, -7.4713, -7.4712, -7.4712, -7.4712, -7.4713, -7.4713,
        -7.4713, -7.4714, -7.4714, -7.4714, -7.4714, -7.4714, -7.4714, -7.4714,
        -7.4714], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.7238e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(4.7238e-08, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'Li': tensor([-7.4713, -7.4713, -7.4714, -7.4714, -7.4714, -7.4714, -7.4714, -7.4714,
        -7.4714, -7.4714], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 20 	 10 	 Li 	 Li 	 1.029577275133192e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------2----------------
TRAINING ON MOLECULE:  ,  2LiF
SUBMOLECULES: ['FLi', 'Li', 'F']
SUBMOLECULE INDICES: [2, 10, 8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='LiF', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.2224], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.2224], dtype=torch.float64)
E_PRED: tensor([-107.2645, -107.2794, -107.2429, -107.2349, -107.2294, -107.2264,
        -107.2249, -107.2240, -107.2238, -107.2238, -107.2239, -107.2242,
        -107.2245, -107.2249, -107.2252, -107.2255, -107.2259, -107.2261,
        -107.2264, -107.2266, -107.2268, -107.2269, -107.2270, -107.2271,
        -107.2272], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1932])
ao_eval   ---   torch.Size([1, 10, 1932, 78])
grid_weights   ---   torch.Size([1, 1932])
-107.30594220504784
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(5.5716e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6725, -99.6952, -99.7043, -99.7096, -99.7132, -99.7158, -99.7177,
        -99.7190, -99.7200, -99.7206, -99.7211, -99.7215, -99.7217, -99.7219,
        -99.7220, -99.7221, -99.7221, -99.7222, -99.7222, -99.7222, -99.7222,
        -99.7222, -99.7222, -99.7223, -99.7223], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.4625e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Li', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-7.4781], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-7.4781], dtype=torch.float64)
E_PRED: tensor([-7.4553, -7.4618, -7.4653, -7.4674, -7.4687, -7.4697, -7.4707, -7.4715,
        -7.4718, -7.4715, -7.4713, -7.4712, -7.4712, -7.4712, -7.4713, -7.4713,
        -7.4714, -7.4714, -7.4714, -7.4714, -7.4714, -7.4714, -7.4714, -7.4714,
        -7.4715], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 36462])
ao_eval   ---   torch.Size([1, 10, 36462, 39])
grid_weights   ---   torch.Size([1, 36462])
-7.47806
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.6908e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0011, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'LiF': tensor([-0.2224], dtype=torch.float64), 'F': tensor([-99.7339], dtype=torch.float64), 'Li': tensor([-7.4781], dtype=torch.float64)}
PRED_DICT:  ,{'LiF': tensor([-107.2255, -107.2259, -107.2261, -107.2264, -107.2266, -107.2268,
        -107.2269, -107.2270, -107.2271, -107.2272], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'F': tensor([-99.7221, -99.7221, -99.7222, -99.7222, -99.7222, -99.7222, -99.7222,
        -99.7222, -99.7223, -99.7223], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Li': tensor([-7.4713, -7.4714, -7.4714, -7.4714, -7.4714, -7.4714, -7.4714, -7.4714,
        -7.4714, -7.4715], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 20 	 2 	 FLi 	 LiF 	 0.008348798506082935

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------4----------------
TRAINING ON MOLECULE:  ,  4COO
SUBMOLECULES: ['CO2', 'C', 'O', 'O']
SUBMOLECULE INDICES: [4, 6, 12, 12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CO2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.6223], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.6223], dtype=torch.float64)
E_PRED: tensor([-189.6374, -188.7951, -188.6180, -188.5139, -188.4499, -188.4063,
        -188.3759, -188.3545, -188.3394, -188.3288, -188.3212, -188.3158,
        -188.3120, -188.3093, -188.3074, -188.3060, -188.3051, -188.3044,
        -188.3039, -188.3035, -188.3033, -188.3031, -188.3030, -188.3029,
        -188.3028], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 117, 117])
mo_energy   ---   torch.Size([2, 117])
dm_ref   ---   torch.Size([1, 2, 117, 117])
rho   ---   torch.Size([1, 2, 3826])
ao_eval   ---   torch.Size([1, 10, 3826, 117])
grid_weights   ---   torch.Size([1, 3826])
-188.40175875056596
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 117])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 117])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.7454e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7326, -37.7704, -37.7881, -37.7985, -37.8056, -37.8106, -37.8142,
        -37.8168, -37.8187, -37.8200, -37.8209, -37.8216, -37.8221, -37.8224,
        -37.8226, -37.8228, -37.8229, -37.8230, -37.8230, -37.8231, -37.8231,
        -37.8231, -37.8231, -37.8231, -37.8231], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.1756e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9637, -75.0067, -75.0226, -75.0315, -75.0375, -75.0417, -75.0447,
        -75.0469, -75.0484, -75.0495, -75.0502, -75.0508, -75.0512, -75.0514,
        -75.0516, -75.0518, -75.0518, -75.0519, -75.0520, -75.0520, -75.0520,
        -75.0520, -75.0520, -75.0520, -75.0520], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.5177e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'COO': tensor([-0.6223], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'COO': tensor([-188.3060, -188.3051, -188.3044, -188.3039, -188.3035, -188.3033,
        -188.3031, -188.3030, -188.3029, -188.3028], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8228, -37.8229, -37.8230, -37.8230, -37.8231, -37.8231, -37.8231,
        -37.8231, -37.8231, -37.8231], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'O': tensor([-75.0518, -75.0518, -75.0519, -75.0520, -75.0520, -75.0520, -75.0520,
        -75.0520, -75.0520, -75.0520], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 20 	 4 	 CO2 	 CO2 	 0.014217080890697181

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------11----------------
TRAINING ON MOLECULE:  ,N
SUBMOLECULES: ['N']
SUBMOLECULE INDICES: [11]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4031, -54.4683, -54.5019, -54.5222, -54.5362, -54.5462, -54.5534,
        -54.5585, -54.5622, -54.5647, -54.5666, -54.5679, -54.5688, -54.5694,
        -54.5698, -54.5701, -54.5704, -54.5705, -54.5706, -54.5707, -54.5707,
        -54.5708, -54.5708, -54.5708, -54.5708], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.4788e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.4788e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'N': tensor([-54.5701, -54.5704, -54.5705, -54.5706, -54.5707, -54.5707, -54.5708,
        -54.5708, -54.5708, -54.5708], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 20 	 11 	 N 	 N 	 7.893059787851829e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------9----------------
TRAINING ON MOLECULE:  ,H
SUBMOLECULES: ['H']
SUBMOLECULE INDICES: [9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3248, -0.4601, -0.4764, -0.4842, -0.4890, -0.4922, -0.4944, -0.4959,
        -0.4970, -0.4977, -0.4983, -0.4986, -0.4989, -0.4990, -0.4992, -0.4993,
        -0.4993, -0.4994, -0.4994, -0.4994, -0.4994, -0.4994, -0.4994, -0.4994,
        -0.4994], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(3.8120e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.8120e-10, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'H': tensor([-0.4993, -0.4993, -0.4994, -0.4994, -0.4994, -0.4994, -0.4994, -0.4994,
        -0.4994, -0.4994], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 20 	 9 	 H 	 H 	 7.337501372445493e-08

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------1----------------
TRAINING ON MOLECULE:  ,  1NN
SUBMOLECULES: ['N2', 'N', 'N']
SUBMOLECULE INDICES: [1, 11, 11]
================================
Irrelevant index 0. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.3641], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.3641], dtype=torch.float64)
E_PRED: tensor([-110.4893, -109.8801, -109.7332, -109.6553, -109.6054, -109.5712,
        -109.5474, -109.5307, -109.5191, -109.5109, -109.5052, -109.5012,
        -109.4984, -109.4964, -109.4950, -109.4941, -109.4934, -109.4929,
        -109.4926, -109.4923, -109.4922, -109.4921, -109.4920, -109.4919,
        -109.4919], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 78, 78])
mo_energy   ---   torch.Size([2, 78])
dm_ref   ---   torch.Size([1, 2, 78, 78])
rho   ---   torch.Size([1, 2, 1916])
ao_eval   ---   torch.Size([1, 10, 1916, 78])
grid_weights   ---   torch.Size([1, 1916])
-109.41916243018889
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 78])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 78])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.2743e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4164, -54.4863, -54.5153, -54.5322, -54.5435, -54.5515, -54.5572,
        -54.5613, -54.5641, -54.5662, -54.5676, -54.5686, -54.5693, -54.5698,
        -54.5701, -54.5704, -54.5706, -54.5707, -54.5708, -54.5708, -54.5709,
        -54.5709, -54.5709, -54.5709, -54.5709], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.4336e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0003, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'NN': tensor([-0.3641], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'NN': tensor([-109.4941, -109.4934, -109.4929, -109.4926, -109.4923, -109.4922,
        -109.4921, -109.4920, -109.4919, -109.4919], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'N': tensor([-54.5704, -54.5706, -54.5707, -54.5708, -54.5708, -54.5709, -54.5709,
        -54.5709, -54.5709, -54.5709], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 20 	 1 	 N2 	 N2 	 4.532296595153439e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------0----------------
TRAINING ON MOLECULE:  ,  0HH
SUBMOLECULES: ['H2', 'H', 'H']
SUBMOLECULE INDICES: [0, 9, 9]
================================
Calculating sub-atoms in molecule --  ,Atoms(symbols='H2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.1743], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.1743], dtype=torch.float64)
E_PRED: tensor([-0.9808, -1.0937, -1.1228, -1.1378, -1.1473, -1.1537, -1.1581, -1.1612,
        -1.1634, -1.1649, -1.1659, -1.1667, -1.1672, -1.1675, -1.1678, -1.1680,
        -1.1681, -1.1682, -1.1683, -1.1683, -1.1683, -1.1683, -1.1684, -1.1684,
        -1.1684], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 30, 30])
mo_energy   ---   torch.Size([2, 30])
dm_ref   ---   torch.Size([1, 2, 30, 30])
rho   ---   torch.Size([1, 2, 614])
ao_eval   ---   torch.Size([1, 10, 614, 30])
grid_weights   ---   torch.Size([1, 614])
-1.1723488865668197
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 30])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 30])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(1.6559e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3118e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.2276, -0.4321, -0.4607, -0.4741, -0.4822, -0.4876, -0.4912, -0.4937,
        -0.4954, -0.4966, -0.4975, -0.4981, -0.4985, -0.4988, -0.4990, -0.4991,
        -0.4992, -0.4993, -0.4993, -0.4994, -0.4994, -0.4994, -0.4994, -0.4994,
        -0.4994], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.9275e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(3.3119e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'HH': tensor([-0.1743], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64)}
PRED_DICT:  ,{'HH': tensor([-1.1680, -1.1681, -1.1682, -1.1683, -1.1683, -1.1683, -1.1683, -1.1684,
        -1.1684, -1.1684], dtype=torch.float64, grad_fn=<SliceBackward0>), 'H': tensor([-0.4991, -0.4992, -0.4993, -0.4993, -0.4994, -0.4994, -0.4994, -0.4994,
        -0.4994, -0.4994], dtype=torch.float64, grad_fn=<SliceBackward0>)}
AE loss	 20 	 0 	 H2 	 H2 	 5.463486873247285e-06

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------8----------------
TRAINING ON MOLECULE:  ,F
SUBMOLECULES: ['F']
SUBMOLECULE INDICES: [8]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='F', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-99.7339], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-99.7339], dtype=torch.float64)
E_PRED: tensor([-99.6800, -99.7017, -99.7092, -99.7133, -99.7162, -99.7181, -99.7195,
        -99.7206, -99.7213, -99.7218, -99.7221, -99.7224, -99.7226, -99.7227,
        -99.7228, -99.7228, -99.7229, -99.7229, -99.7229, -99.7229, -99.7230,
        -99.7230, -99.7230, -99.7230, -99.7230], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 44922])
ao_eval   ---   torch.Size([1, 10, 44922, 39])
grid_weights   ---   torch.Size([1, 44922])
-99.7339
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(1.2840e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(1.2840e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'F': tensor([-99.7339], dtype=torch.float64)}
PRED_DICT:  ,{'F': tensor([-99.7228, -99.7229, -99.7229, -99.7229, -99.7229, -99.7230, -99.7230,
        -99.7230, -99.7230, -99.7230], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 20 	 8 	 F 	 F 	 2.7932402158209274e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------6----------------
TRAINING ON MOLECULE:  ,C
SUBMOLECULES: ['C']
SUBMOLECULE INDICES: [6]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7323, -37.7698, -37.7876, -37.7981, -37.8053, -37.8104, -37.8141,
        -37.8167, -37.8186, -37.8199, -37.8209, -37.8216, -37.8220, -37.8224,
        -37.8226, -37.8228, -37.8229, -37.8230, -37.8230, -37.8231, -37.8231,
        -37.8231, -37.8231, -37.8231, -37.8231], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.1804e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.1804e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'C': tensor([-37.8405], dtype=torch.float64)}
PRED_DICT:  ,{'C': tensor([-37.8228, -37.8229, -37.8230, -37.8230, -37.8231, -37.8231, -37.8231,
        -37.8231, -37.8231, -37.8231], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 20 	 6 	 C 	 C 	 7.060085285408868e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------12----------------
TRAINING ON MOLECULE:  ,O
SUBMOLECULES: ['O']
SUBMOLECULE INDICES: [12]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Irrelevant index 6. Skipping to next.
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='O', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-75.0673], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-75.0673], dtype=torch.float64)
E_PRED: tensor([-74.9576, -75.0015, -75.0191, -75.0291, -75.0359, -75.0408, -75.0442,
        -75.0467, -75.0485, -75.0497, -75.0506, -75.0513, -75.0517, -75.0520,
        -75.0522, -75.0524, -75.0525, -75.0526, -75.0526, -75.0527, -75.0527,
        -75.0527, -75.0527, -75.0527, -75.0527], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43518])
ao_eval   ---   torch.Size([1, 10, 43518, 39])
grid_weights   ---   torch.Size([1, 43518])
-75.0673
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.3063e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(2.3063e-07, dtype=torch.float64, grad_fn=<AddBackward0>)
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'O': tensor([-75.0673], dtype=torch.float64)}
PRED_DICT:  ,{'O': tensor([-75.0524, -75.0525, -75.0526, -75.0526, -75.0527, -75.0527, -75.0527,
        -75.0527, -75.0527, -75.0527], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 20 	 12 	 O 	 O 	 4.9668433108919334e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------3----------------
TRAINING ON MOLECULE:  ,  3CNH
SUBMOLECULES: ['CHN', 'C', 'N', 'H']
SUBMOLECULE INDICES: [3, 6, 11, 9]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='CNH', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.4993], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.4993], dtype=torch.float64)
E_PRED: tensor([-94.0068, -93.5240, -93.3961, -93.3426, -93.3030, -93.2778, -93.2596,
        -93.2469, -93.2378, -93.2312, -93.2266, -93.2232, -93.2207, -93.2190,
        -93.2177, -93.2167, -93.2161, -93.2156, -93.2152, -93.2149, -93.2147,
        -93.2146, -93.2145, -93.2144, -93.2143], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 93, 93])
mo_energy   ---   torch.Size([2, 93])
dm_ref   ---   torch.Size([1, 2, 93, 93])
rho   ---   torch.Size([1, 2, 1013])
ao_eval   ---   torch.Size([1, 10, 1013, 93])
grid_weights   ---   torch.Size([1, 1013])
-93.32175404633891
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 93])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 93])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(2.7592e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 4. Skipping to next.
Irrelevant index 5. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='C', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-37.8405], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-37.8405], dtype=torch.float64)
E_PRED: tensor([-37.7512, -37.7883, -37.8009, -37.8078, -37.8124, -37.8157, -37.8180,
        -37.8196, -37.8207, -37.8215, -37.8221, -37.8225, -37.8228, -37.8230,
        -37.8231, -37.8232, -37.8233, -37.8233, -37.8234, -37.8234, -37.8234,
        -37.8234, -37.8234, -37.8234, -37.8235], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 42618])
ao_eval   ---   torch.Size([1, 10, 42618, 39])
grid_weights   ---   torch.Size([1, 42618])
-37.8405
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.0836e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 7. Skipping to next.
Irrelevant index 8. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='H', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.5000], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.5000], dtype=torch.float64)
E_PRED: tensor([-0.3085, -0.4558, -0.4739, -0.4826, -0.4879, -0.4915, -0.4939, -0.4956,
        -0.4968, -0.4976, -0.4981, -0.4985, -0.4988, -0.4990, -0.4991, -0.4992,
        -0.4993, -0.4994, -0.4994, -0.4994, -0.4994, -0.4994, -0.4994, -0.4995,
        -0.4995], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 15, 15])
mo_energy   ---   torch.Size([2, 15])
dm_ref   ---   torch.Size([1, 2, 15, 15])
rho   ---   torch.Size([1, 2, 23768])
ao_eval   ---   torch.Size([1, 10, 23768, 15])
grid_weights   ---   torch.Size([1, 23768])
-0.5
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 15])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1, 1])
mo_occ   ---   torch.Size([1, 2, 15])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(4.0072e-08, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 10. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='N', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-54.5892], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-54.5892], dtype=torch.float64)
E_PRED: tensor([-54.4133, -54.4829, -54.5131, -54.5307, -54.5426, -54.5511, -54.5571,
        -54.5613, -54.5644, -54.5665, -54.5680, -54.5691, -54.5698, -54.5704,
        -54.5707, -54.5710, -54.5712, -54.5713, -54.5714, -54.5715, -54.5715,
        -54.5715, -54.5715, -54.5716, -54.5716], dtype=torch.float64,
       grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 39, 39])
mo_energy   ---   torch.Size([2, 39])
dm_ref   ---   torch.Size([1, 2, 39, 39])
rho   ---   torch.Size([1, 2, 43158])
ao_eval   ---   torch.Size([1, 10, 43158, 39])
grid_weights   ---   torch.Size([1, 43158])
-54.5892
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 39])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 39])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(2.2730e-05, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(0.0006, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'CNH': tensor([-0.4993], dtype=torch.float64), 'C': tensor([-37.8405], dtype=torch.float64), 'H': tensor([-0.5000], dtype=torch.float64), 'N': tensor([-54.5892], dtype=torch.float64)}
PRED_DICT:  ,{'CNH': tensor([-93.2167, -93.2161, -93.2156, -93.2152, -93.2149, -93.2147, -93.2146,
        -93.2145, -93.2144, -93.2143], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'C': tensor([-37.8232, -37.8233, -37.8233, -37.8234, -37.8234, -37.8234, -37.8234,
        -37.8234, -37.8234, -37.8235], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'H': tensor([-0.4992, -0.4993, -0.4994, -0.4994, -0.4994, -0.4994, -0.4994, -0.4994,
        -0.4995, -0.4995], dtype=torch.float64, grad_fn=<SliceBackward0>), 'N': tensor([-54.5710, -54.5712, -54.5713, -54.5714, -54.5715, -54.5715, -54.5715,
        -54.5715, -54.5716, -54.5716], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 20 	 3 	 CHN 	 CNH 	 0.007517552096873148

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
================================
--------------5----------------
TRAINING ON MOLECULE:  ,  5ClCl
SUBMOLECULES: ['Cl2', 'Cl', 'Cl']
SUBMOLECULE INDICES: [5, 7, 7]
================================
Irrelevant index 0. Skipping to next.
Irrelevant index 1. Skipping to next.
Irrelevant index 2. Skipping to next.
Irrelevant index 3. Skipping to next.
Irrelevant index 4. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl2', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-0.0945], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-0.0945], dtype=torch.float64)
E_PRED: tensor([-920.4665, -920.4336, -920.4255, -920.4212, -920.4184, -920.4165,
        -920.4151, -920.4141, -920.4134, -920.4130, -920.4126, -920.4124,
        -920.4122, -920.4121, -920.4120, -920.4120, -920.4119, -920.4119,
        -920.4119, -920.4119, -920.4118, -920.4118, -920.4118, -920.4118,
        -920.4118], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 94, 94])
mo_energy   ---   torch.Size([2, 94])
dm_ref   ---   torch.Size([1, 2, 94, 94])
rho   ---   torch.Size([1, 2, 2736])
ao_eval   ---   torch.Size([1, 10, 2736, 94])
grid_weights   ---   torch.Size([1, 2736])
-919.5958911885615
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 94])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 94])
================================
MOL_LOSSES
LOSSES_EVAL:  ,{'rho': tensor(3.7585e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.5170e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 6. Skipping to next.
Calculating sub-atoms in molecule --  ,Atoms(symbols='Cl', pbc=False, calculator=SinglePointCalculator(...))
REFERENCE ENERGY: tensor([-460.1480], dtype=torch.float64)
SCF CALCULATION
E_REF: tensor([-460.1480], dtype=torch.float64)
E_PRED: tensor([-460.1098, -460.1343, -460.1418, -460.1459, -460.1486, -460.1505,
        -460.1518, -460.1528, -460.1535, -460.1540, -460.1543, -460.1545,
        -460.1547, -460.1548, -460.1549, -460.1550, -460.1550, -460.1550,
        -460.1551, -460.1551, -460.1551, -460.1551, -460.1551, -460.1551,
        -460.1551], dtype=torch.float64, grad_fn=<CatBackward0>)
Adding reference matrices to results.
RESULTS MATRICES EXTRACTED
================================
RESULTS MATRICES SHAPES
E   ---   torch.Size([25])
dm   ---   torch.Size([2, 47, 47])
mo_energy   ---   torch.Size([2, 47])
dm_ref   ---   torch.Size([1, 2, 47, 47])
rho   ---   torch.Size([1, 2, 43048])
ao_eval   ---   torch.Size([1, 10, 43048, 47])
grid_weights   ---   torch.Size([1, 43048])
-460.148
E_ref   ---   torch.Size([1])
mo_energy_ref   ---   torch.Size([1, 2, 47])
n_elec   ---   torch.Size([1])
e_ip_ref   ---   torch.Size([1])
mo_occ   ---   torch.Size([1, 2, 47])
================================
ATM_LOSSES
LOSSES_EVAL:  ,{'E': tensor(5.2751e-06, dtype=torch.float64, grad_fn=<DivBackward0>)}
tensor(7.5223e-05, dtype=torch.float64, grad_fn=<AddBackward0>)
Irrelevant index 8. Skipping to next.
Irrelevant index 9. Skipping to next.
Irrelevant index 10. Skipping to next.
Irrelevant index 11. Skipping to next.
Irrelevant index 12. Skipping to next.
LOOP OVER SUBMOLECULES COMPLETED
REF_DICT:  ,{'ClCl': tensor([-0.0945], dtype=torch.float64), 'Cl': tensor([-460.1480], dtype=torch.float64)}
PRED_DICT:  ,{'ClCl': tensor([-920.4120, -920.4119, -920.4119, -920.4119, -920.4119, -920.4118,
        -920.4118, -920.4118, -920.4118, -920.4118], dtype=torch.float64,
       grad_fn=<SliceBackward0>), 'Cl': tensor([-460.1550, -460.1550, -460.1550, -460.1551, -460.1551, -460.1551,
        -460.1551, -460.1551, -460.1551, -460.1551], dtype=torch.float64,
       grad_fn=<SliceBackward0>)}
AE loss	 20 	 5 	 Cl2 	 Cl2 	 1.1770491623205903e-05

Backward Propagation
Step Optimizer
Zeroing Optimizer Grad
++++++++++++++++++++++++++++++++++
FAILS:
++++++++++++++++++++++++++++++++++
os.mkdir(/gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e20)
torch saving pt:
os.symlink: /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e20/2022-11-03_10:00:47.012831_2.pt -> /gpfs/scratch/awills/swxcd/eval/test_subset_ps2/07/MODEL_MGGA_e20/xc
============================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Epoch 20 || ,[' rho : 3.024503', ' ae : 68.369594', ' E : 4.177355'] ,|| total loss 50.202864 || CHKPT: _2.pt
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
============================================================
Max checkpoint number reached -- aborting training process.
